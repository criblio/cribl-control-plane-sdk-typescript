/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { dlv } from "./dlv.js";

export interface Env {
  CRIBLCONTROLPLANE_BEARER_AUTH?: string | undefined;
  CRIBLCONTROLPLANE_CLIENT_ID?: string | undefined;
  CRIBLCONTROLPLANE_CLIENT_SECRET?: string | undefined;
  CRIBLCONTROLPLANE_TOKEN_URL: string;
  CRIBLCONTROLPLANE_AUDIENCE?: string | undefined;

  CRIBLCONTROLPLANE_DEBUG?: boolean | undefined;
}

export const envSchema: z.ZodType<Env, z.ZodTypeDef, unknown> = z.object({
  CRIBLCONTROLPLANE_BEARER_AUTH: z.string().optional(),
  CRIBLCONTROLPLANE_CLIENT_ID: z.string().optional(),
  CRIBLCONTROLPLANE_CLIENT_SECRET: z.string().optional(),
  CRIBLCONTROLPLANE_TOKEN_URL: z.string().default(
    "https://login.cribl.cloud/oauth/token",
  ),
  CRIBLCONTROLPLANE_AUDIENCE: z.string().optional(),

  CRIBLCONTROLPLANE_DEBUG: z.coerce.boolean().optional(),
});

/**
 * Checks for the existence of the Deno global object to determine the environment.
 * @returns {boolean} True if the runtime is Deno, false otherwise.
 */
function isDeno() {
  if ("Deno" in globalThis) {
    return true;
  }

  return false;
}

let envMemo: Env | undefined = undefined;
/**
 * Reads and validates environment variables.
 */
export function env(): Env {
  if (envMemo) {
    return envMemo;
  }

  let envObject: Record<string, unknown> = {};
  if (isDeno()) {
    envObject = (globalThis as any).Deno?.env?.toObject?.() ?? {};
  } else {
    envObject = dlv(globalThis, "process.env") ?? {};
  }

  envMemo = envSchema.parse(envObject);
  return envMemo;
}

/**
 * Clears the cached env object. Useful for testing with a fresh environment.
 */
export function resetEnv() {
  envMemo = undefined;
}
