/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type GitCountResult = {
  count: number;
};

/** @internal */
export const GitCountResult$inboundSchema: z.ZodType<
  GitCountResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
});

/** @internal */
export type GitCountResult$Outbound = {
  count: number;
};

/** @internal */
export const GitCountResult$outboundSchema: z.ZodType<
  GitCountResult$Outbound,
  z.ZodTypeDef,
  GitCountResult
> = z.object({
  count: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitCountResult$ {
  /** @deprecated use `GitCountResult$inboundSchema` instead. */
  export const inboundSchema = GitCountResult$inboundSchema;
  /** @deprecated use `GitCountResult$outboundSchema` instead. */
  export const outboundSchema = GitCountResult$outboundSchema;
  /** @deprecated use `GitCountResult$Outbound` instead. */
  export type Outbound = GitCountResult$Outbound;
}

export function gitCountResultToJSON(gitCountResult: GitCountResult): string {
  return JSON.stringify(GitCountResult$outboundSchema.parse(gitCountResult));
}

export function gitCountResultFromJSON(
  jsonString: string,
): SafeParseResult<GitCountResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitCountResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitCountResult' from JSON`,
  );
}
