/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputCriblLakeHttpType = {
  CriblLakeHttp: "cribl_lake_http",
} as const;
export type InputCriblLakeHttpType = ClosedEnum<typeof InputCriblLakeHttpType>;

export type InputCriblLakeHttpConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputCriblLakeHttpMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputCriblLakeHttpMode = ClosedEnum<typeof InputCriblLakeHttpMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputCriblLakeHttpCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputCriblLakeHttpCompression = ClosedEnum<
  typeof InputCriblLakeHttpCompression
>;

export type InputCriblLakeHttpPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputCriblLakeHttpMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputCriblLakeHttpCompression | undefined;
};

export const InputCriblLakeHttpMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputCriblLakeHttpMinimumTLSVersion = ClosedEnum<
  typeof InputCriblLakeHttpMinimumTLSVersion
>;

export const InputCriblLakeHttpMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputCriblLakeHttpMaximumTLSVersion = ClosedEnum<
  typeof InputCriblLakeHttpMaximumTLSVersion
>;

export type InputCriblLakeHttpTLSSettingsServerSide = {
  disabled?: boolean | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: InputCriblLakeHttpMinimumTLSVersion | undefined;
  maxVersion?: InputCriblLakeHttpMaximumTLSVersion | undefined;
};

export type InputCriblLakeHttpMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputCriblLakeHttp = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputCriblLakeHttpType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputCriblLakeHttpConnection> | undefined;
  pq?: InputCriblLakeHttpPq | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  /**
   * Shared secrets to be provided by any client (Authorization: <token>). If empty, unauthorized access is permitted.
   */
  authTokens?: Array<string> | undefined;
  tls?: InputCriblLakeHttpTLSSettingsServerSide | undefined;
  /**
   * Maximum number of active requests allowed per Worker Process. Set to 0 for unlimited. Caution: Increasing the limit above the default value, or setting it to unlimited, may degrade performance and reduce throughput.
   */
  maxActiveReq?: number | undefined;
  /**
   * Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
   */
  maxRequestsPerSocket?: number | undefined;
  /**
   * Extract the client IP and port from PROXY protocol v1/v2. When enabled, the X-Forwarded-For header is ignored. Disable to use the X-Forwarded-For header for client IP extraction.
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Add request headers to events, in the __headers field
   */
  captureHeaders?: boolean | undefined;
  /**
   * How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
   */
  activityLogSampleRate?: number | undefined;
  /**
   * How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
   */
  requestTimeout?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
   */
  socketTimeout?: number | undefined;
  /**
   * After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 second, maximum 600 seconds (10 minutes).
   */
  keepAliveTimeout?: number | undefined;
  /**
   * Expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
   */
  enableHealthCheck?: boolean | undefined;
  /**
   * Messages from matched IP addresses will be processed, unless also matched by the denylist
   */
  ipAllowlistRegex?: string | undefined;
  /**
   * Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
   */
  ipDenylistRegex?: string | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputCriblLakeHttpMetadatum> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputCriblLakeHttpType$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblLakeHttpType
> = z.nativeEnum(InputCriblLakeHttpType);

/** @internal */
export const InputCriblLakeHttpType$outboundSchema: z.ZodNativeEnum<
  typeof InputCriblLakeHttpType
> = InputCriblLakeHttpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttpType$ {
  /** @deprecated use `InputCriblLakeHttpType$inboundSchema` instead. */
  export const inboundSchema = InputCriblLakeHttpType$inboundSchema;
  /** @deprecated use `InputCriblLakeHttpType$outboundSchema` instead. */
  export const outboundSchema = InputCriblLakeHttpType$outboundSchema;
}

/** @internal */
export const InputCriblLakeHttpConnection$inboundSchema: z.ZodType<
  InputCriblLakeHttpConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputCriblLakeHttpConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputCriblLakeHttpConnection$outboundSchema: z.ZodType<
  InputCriblLakeHttpConnection$Outbound,
  z.ZodTypeDef,
  InputCriblLakeHttpConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttpConnection$ {
  /** @deprecated use `InputCriblLakeHttpConnection$inboundSchema` instead. */
  export const inboundSchema = InputCriblLakeHttpConnection$inboundSchema;
  /** @deprecated use `InputCriblLakeHttpConnection$outboundSchema` instead. */
  export const outboundSchema = InputCriblLakeHttpConnection$outboundSchema;
  /** @deprecated use `InputCriblLakeHttpConnection$Outbound` instead. */
  export type Outbound = InputCriblLakeHttpConnection$Outbound;
}

export function inputCriblLakeHttpConnectionToJSON(
  inputCriblLakeHttpConnection: InputCriblLakeHttpConnection,
): string {
  return JSON.stringify(
    InputCriblLakeHttpConnection$outboundSchema.parse(
      inputCriblLakeHttpConnection,
    ),
  );
}

export function inputCriblLakeHttpConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblLakeHttpConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblLakeHttpConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblLakeHttpConnection' from JSON`,
  );
}

/** @internal */
export const InputCriblLakeHttpMode$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblLakeHttpMode
> = z.nativeEnum(InputCriblLakeHttpMode);

/** @internal */
export const InputCriblLakeHttpMode$outboundSchema: z.ZodNativeEnum<
  typeof InputCriblLakeHttpMode
> = InputCriblLakeHttpMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttpMode$ {
  /** @deprecated use `InputCriblLakeHttpMode$inboundSchema` instead. */
  export const inboundSchema = InputCriblLakeHttpMode$inboundSchema;
  /** @deprecated use `InputCriblLakeHttpMode$outboundSchema` instead. */
  export const outboundSchema = InputCriblLakeHttpMode$outboundSchema;
}

/** @internal */
export const InputCriblLakeHttpCompression$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblLakeHttpCompression
> = z.nativeEnum(InputCriblLakeHttpCompression);

/** @internal */
export const InputCriblLakeHttpCompression$outboundSchema: z.ZodNativeEnum<
  typeof InputCriblLakeHttpCompression
> = InputCriblLakeHttpCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttpCompression$ {
  /** @deprecated use `InputCriblLakeHttpCompression$inboundSchema` instead. */
  export const inboundSchema = InputCriblLakeHttpCompression$inboundSchema;
  /** @deprecated use `InputCriblLakeHttpCompression$outboundSchema` instead. */
  export const outboundSchema = InputCriblLakeHttpCompression$outboundSchema;
}

/** @internal */
export const InputCriblLakeHttpPq$inboundSchema: z.ZodType<
  InputCriblLakeHttpPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputCriblLakeHttpMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputCriblLakeHttpCompression$inboundSchema.default("none"),
});

/** @internal */
export type InputCriblLakeHttpPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
};

/** @internal */
export const InputCriblLakeHttpPq$outboundSchema: z.ZodType<
  InputCriblLakeHttpPq$Outbound,
  z.ZodTypeDef,
  InputCriblLakeHttpPq
> = z.object({
  mode: InputCriblLakeHttpMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputCriblLakeHttpCompression$outboundSchema.default("none"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttpPq$ {
  /** @deprecated use `InputCriblLakeHttpPq$inboundSchema` instead. */
  export const inboundSchema = InputCriblLakeHttpPq$inboundSchema;
  /** @deprecated use `InputCriblLakeHttpPq$outboundSchema` instead. */
  export const outboundSchema = InputCriblLakeHttpPq$outboundSchema;
  /** @deprecated use `InputCriblLakeHttpPq$Outbound` instead. */
  export type Outbound = InputCriblLakeHttpPq$Outbound;
}

export function inputCriblLakeHttpPqToJSON(
  inputCriblLakeHttpPq: InputCriblLakeHttpPq,
): string {
  return JSON.stringify(
    InputCriblLakeHttpPq$outboundSchema.parse(inputCriblLakeHttpPq),
  );
}

export function inputCriblLakeHttpPqFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblLakeHttpPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblLakeHttpPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblLakeHttpPq' from JSON`,
  );
}

/** @internal */
export const InputCriblLakeHttpMinimumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblLakeHttpMinimumTLSVersion
> = z.nativeEnum(InputCriblLakeHttpMinimumTLSVersion);

/** @internal */
export const InputCriblLakeHttpMinimumTLSVersion$outboundSchema:
  z.ZodNativeEnum<typeof InputCriblLakeHttpMinimumTLSVersion> =
    InputCriblLakeHttpMinimumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttpMinimumTLSVersion$ {
  /** @deprecated use `InputCriblLakeHttpMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema =
    InputCriblLakeHttpMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputCriblLakeHttpMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputCriblLakeHttpMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputCriblLakeHttpMaximumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblLakeHttpMaximumTLSVersion
> = z.nativeEnum(InputCriblLakeHttpMaximumTLSVersion);

/** @internal */
export const InputCriblLakeHttpMaximumTLSVersion$outboundSchema:
  z.ZodNativeEnum<typeof InputCriblLakeHttpMaximumTLSVersion> =
    InputCriblLakeHttpMaximumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttpMaximumTLSVersion$ {
  /** @deprecated use `InputCriblLakeHttpMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema =
    InputCriblLakeHttpMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputCriblLakeHttpMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputCriblLakeHttpMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputCriblLakeHttpTLSSettingsServerSide$inboundSchema: z.ZodType<
  InputCriblLakeHttpTLSSettingsServerSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputCriblLakeHttpMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputCriblLakeHttpMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputCriblLakeHttpTLSSettingsServerSide$Outbound = {
  disabled: boolean;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  requestCert: boolean;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputCriblLakeHttpTLSSettingsServerSide$outboundSchema: z.ZodType<
  InputCriblLakeHttpTLSSettingsServerSide$Outbound,
  z.ZodTypeDef,
  InputCriblLakeHttpTLSSettingsServerSide
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputCriblLakeHttpMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputCriblLakeHttpMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttpTLSSettingsServerSide$ {
  /** @deprecated use `InputCriblLakeHttpTLSSettingsServerSide$inboundSchema` instead. */
  export const inboundSchema =
    InputCriblLakeHttpTLSSettingsServerSide$inboundSchema;
  /** @deprecated use `InputCriblLakeHttpTLSSettingsServerSide$outboundSchema` instead. */
  export const outboundSchema =
    InputCriblLakeHttpTLSSettingsServerSide$outboundSchema;
  /** @deprecated use `InputCriblLakeHttpTLSSettingsServerSide$Outbound` instead. */
  export type Outbound = InputCriblLakeHttpTLSSettingsServerSide$Outbound;
}

export function inputCriblLakeHttpTLSSettingsServerSideToJSON(
  inputCriblLakeHttpTLSSettingsServerSide:
    InputCriblLakeHttpTLSSettingsServerSide,
): string {
  return JSON.stringify(
    InputCriblLakeHttpTLSSettingsServerSide$outboundSchema.parse(
      inputCriblLakeHttpTLSSettingsServerSide,
    ),
  );
}

export function inputCriblLakeHttpTLSSettingsServerSideFromJSON(
  jsonString: string,
): SafeParseResult<
  InputCriblLakeHttpTLSSettingsServerSide,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InputCriblLakeHttpTLSSettingsServerSide$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InputCriblLakeHttpTLSSettingsServerSide' from JSON`,
  );
}

/** @internal */
export const InputCriblLakeHttpMetadatum$inboundSchema: z.ZodType<
  InputCriblLakeHttpMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputCriblLakeHttpMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputCriblLakeHttpMetadatum$outboundSchema: z.ZodType<
  InputCriblLakeHttpMetadatum$Outbound,
  z.ZodTypeDef,
  InputCriblLakeHttpMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttpMetadatum$ {
  /** @deprecated use `InputCriblLakeHttpMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputCriblLakeHttpMetadatum$inboundSchema;
  /** @deprecated use `InputCriblLakeHttpMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputCriblLakeHttpMetadatum$outboundSchema;
  /** @deprecated use `InputCriblLakeHttpMetadatum$Outbound` instead. */
  export type Outbound = InputCriblLakeHttpMetadatum$Outbound;
}

export function inputCriblLakeHttpMetadatumToJSON(
  inputCriblLakeHttpMetadatum: InputCriblLakeHttpMetadatum,
): string {
  return JSON.stringify(
    InputCriblLakeHttpMetadatum$outboundSchema.parse(
      inputCriblLakeHttpMetadatum,
    ),
  );
}

export function inputCriblLakeHttpMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblLakeHttpMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblLakeHttpMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblLakeHttpMetadatum' from JSON`,
  );
}

/** @internal */
export const InputCriblLakeHttp$inboundSchema: z.ZodType<
  InputCriblLakeHttp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputCriblLakeHttpType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputCriblLakeHttpConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputCriblLakeHttpPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  authTokens: z.array(z.string()).optional(),
  tls: z.lazy(() => InputCriblLakeHttpTLSSettingsServerSide$inboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  metadata: z.array(z.lazy(() => InputCriblLakeHttpMetadatum$inboundSchema))
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputCriblLakeHttp$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputCriblLakeHttpConnection$Outbound> | undefined;
  pq?: InputCriblLakeHttpPq$Outbound | undefined;
  host: string;
  port: number;
  authTokens?: Array<string> | undefined;
  tls?: InputCriblLakeHttpTLSSettingsServerSide$Outbound | undefined;
  maxActiveReq: number;
  maxRequestsPerSocket: number;
  enableProxyHeader: boolean;
  captureHeaders: boolean;
  activityLogSampleRate: number;
  requestTimeout: number;
  socketTimeout: number;
  keepAliveTimeout: number;
  enableHealthCheck: boolean;
  ipAllowlistRegex: string;
  ipDenylistRegex: string;
  metadata?: Array<InputCriblLakeHttpMetadatum$Outbound> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputCriblLakeHttp$outboundSchema: z.ZodType<
  InputCriblLakeHttp$Outbound,
  z.ZodTypeDef,
  InputCriblLakeHttp
> = z.object({
  id: z.string().optional(),
  type: InputCriblLakeHttpType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(
    z.lazy(() => InputCriblLakeHttpConnection$outboundSchema),
  ).optional(),
  pq: z.lazy(() => InputCriblLakeHttpPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  authTokens: z.array(z.string()).optional(),
  tls: z.lazy(() => InputCriblLakeHttpTLSSettingsServerSide$outboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  metadata: z.array(z.lazy(() => InputCriblLakeHttpMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblLakeHttp$ {
  /** @deprecated use `InputCriblLakeHttp$inboundSchema` instead. */
  export const inboundSchema = InputCriblLakeHttp$inboundSchema;
  /** @deprecated use `InputCriblLakeHttp$outboundSchema` instead. */
  export const outboundSchema = InputCriblLakeHttp$outboundSchema;
  /** @deprecated use `InputCriblLakeHttp$Outbound` instead. */
  export type Outbound = InputCriblLakeHttp$Outbound;
}

export function inputCriblLakeHttpToJSON(
  inputCriblLakeHttp: InputCriblLakeHttp,
): string {
  return JSON.stringify(
    InputCriblLakeHttp$outboundSchema.parse(inputCriblLakeHttp),
  );
}

export function inputCriblLakeHttpFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblLakeHttp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblLakeHttp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblLakeHttp' from JSON`,
  );
}
