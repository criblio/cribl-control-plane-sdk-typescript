/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChartSeries,
  ChartSeries$inboundSchema,
  ChartSeries$Outbound,
  ChartSeries$outboundSchema,
} from "./chartseries.js";
import {
  ChartType,
  ChartType$inboundSchema,
  ChartType$outboundSchema,
} from "./charttype.js";
import {
  CPUTimeMetric,
  CPUTimeMetric$inboundSchema,
  CPUTimeMetric$Outbound,
  CPUTimeMetric$outboundSchema,
} from "./cputimemetric.js";
import {
  DatatypeOverrides,
  DatatypeOverrides$inboundSchema,
  DatatypeOverrides$Outbound,
  DatatypeOverrides$outboundSchema,
} from "./datatypeoverrides.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SearchAuditMetrics,
  SearchAuditMetrics$inboundSchema,
  SearchAuditMetrics$Outbound,
  SearchAuditMetrics$outboundSchema,
} from "./searchauditmetrics.js";
import {
  SearchJobErrorStateConfig,
  SearchJobErrorStateConfig$inboundSchema,
  SearchJobErrorStateConfig$Outbound,
  SearchJobErrorStateConfig$outboundSchema,
} from "./searchjoberrorstateconfig.js";
import {
  SearchJobMetadata,
  SearchJobMetadata$inboundSchema,
  SearchJobMetadata$Outbound,
  SearchJobMetadata$outboundSchema,
} from "./searchjobmetadata.js";
import {
  SearchJobStageConfig,
  SearchJobStageConfig$inboundSchema,
  SearchJobStageConfig$Outbound,
  SearchJobStageConfig$outboundSchema,
} from "./searchjobstageconfig.js";
import {
  SearchParameter,
  SearchParameter$inboundSchema,
  SearchParameter$Outbound,
  SearchParameter$outboundSchema,
} from "./searchparameter.js";
import {
  SearchParameters,
  SearchParameters$inboundSchema,
  SearchParameters$Outbound,
  SearchParameters$outboundSchema,
} from "./searchparameters.js";
import {
  TableViewSettings,
  TableViewSettings$inboundSchema,
  TableViewSettings$Outbound,
  TableViewSettings$outboundSchema,
} from "./tableviewsettings.js";

export type Axis = {
  xAxis?: string | undefined;
  yAxis?: Array<string> | undefined;
  yAxisExcluded?: Array<string> | undefined;
};

export type Threshold = {
  color: string;
  threshold: number;
};

export type ColorThresholds = {
  thresholds: Array<Threshold>;
};

export type CustomDataPointScale = string | number;

export type CustomData = {
  connectNulls?: string | undefined;
  dataFields?: Array<string> | undefined;
  isPointColor?: boolean | undefined;
  limitToTopN?: number | undefined;
  lines?: boolean | undefined;
  nameField?: string | undefined;
  pointColorPalette?: number | undefined;
  pointColorPaletteReversed?: boolean | undefined;
  pointScale?: string | number | undefined;
  pointScaleDataField?: string | undefined;
  seriesCount?: number | undefined;
  splitBy?: string | undefined;
  stack?: boolean | undefined;
  summarizeOthers?: boolean | undefined;
  trellis?: boolean | undefined;
};

export type Legend = {
  position?: string | undefined;
  selected?: { [k: string]: boolean } | undefined;
  truncate?: boolean | undefined;
};

export type MapDetailsPointScale = string | number;

export type MapDetails = {
  latitudeField?: string | undefined;
  longitudeField?: string | undefined;
  mapSourceID?: string | undefined;
  mapType?: string | undefined;
  nameField?: string | undefined;
  pointScale?: string | number | undefined;
  valueField?: string | undefined;
};

export type OnClickAction = {
  search?: string | undefined;
  selectedDashboardId?: string | undefined;
  selectedInputId?: string | undefined;
  selectedLinkId?: string | undefined;
  selectedTimerangeInputId?: string | undefined;
  type?: string | undefined;
};

export type XAxis = {
  dataField?: string | undefined;
  inverse?: boolean | undefined;
  labelInterval?: string | undefined;
  labelOrientation?: number | undefined;
  name?: string | undefined;
  offset?: number | undefined;
  position?: string | undefined;
  type?: string | undefined;
};

export type YAxis = {
  dataField?: Array<string> | undefined;
  interval?: number | undefined;
  max?: number | undefined;
  min?: number | undefined;
  position?: string | undefined;
  scale?: string | undefined;
  splitLine?: boolean | undefined;
  type?: string | undefined;
};

export type ChartConfig = {
  applyThreshold?: boolean | undefined;
  axis?: Axis | undefined;
  color?: string | undefined;
  colorPalette?: number | undefined;
  colorPaletteReversed?: boolean | undefined;
  colorThresholds?: ColorThresholds | undefined;
  customData?: CustomData | undefined;
  decimals?: number | undefined;
  label?: string | undefined;
  legend?: Legend | undefined;
  mapDetails?: MapDetails | undefined;
  onClickAction?: OnClickAction | undefined;
  prefix?: string | undefined;
  separator?: boolean | undefined;
  series?: Array<ChartSeries> | undefined;
  seriesInfo?: { [k: string]: ChartType } | undefined;
  shouldApplyUserChartSettings?: boolean | undefined;
  style?: boolean | undefined;
  suffix?: string | undefined;
  type?: string | undefined;
  xAxis?: XAxis | undefined;
  yAxis?: YAxis | undefined;
};

export type CompatibilityChecks = {
  datatypes?: boolean | undefined;
  stageIds?: Array<string> | undefined;
};

export type SearchJobEarliest = string | number;

export type SearchJobLatest = string | number;

export type SetOptions = string | number;

export const SearchJobStatus = {
  Failed: "failed",
  New: "new",
  Running: "running",
  Completed: "completed",
  Canceled: "canceled",
  Queued: "queued",
} as const;
export type SearchJobStatus = OpenEnum<typeof SearchJobStatus>;

export const SearchJobType = {
  Command: "command",
  Scheduled: "scheduled",
  Standard: "standard",
  DatatypePreview: "datatypePreview",
  Dashboard: "dashboard",
  Notebook: "notebook",
  SystemInsights: "systemInsights",
} as const;
export type SearchJobType = OpenEnum<typeof SearchJobType>;

export type SearchJob = {
  accelerated?: boolean | undefined;
  aliasOfOriginalJobId?: string | undefined;
  chartConfig?: ChartConfig | undefined;
  compatibilityChecks?: CompatibilityChecks | undefined;
  completionInfo?: string | undefined;
  context?: string | undefined;
  correlationId?: string | undefined;
  cpuMetrics?: CPUTimeMetric | undefined;
  datatypeOverrides?: DatatypeOverrides | undefined;
  disableNotifications?: boolean | undefined;
  displayUsername: string;
  earliest?: string | number | undefined;
  earliestEpoch?: number | undefined;
  errorStateConfig?: SearchJobErrorStateConfig | undefined;
  group: string;
  id: string;
  isPrivate?: boolean | undefined;
  latest?: string | number | undefined;
  latestEpoch?: number | undefined;
  metadata?: SearchJobMetadata | undefined;
  notebookId?: string | undefined;
  numEventsAfter?: number | undefined;
  numEventsBefore?: number | undefined;
  query: string;
  queryWithMacrosResolved?: string | undefined;
  sampleRate?: number | undefined;
  savedQueryName?: string | undefined;
  searchParameterDeclarations?: Array<SearchParameter> | undefined;
  searchParameterValues?: { [k: string]: SearchParameters } | undefined;
  setOptions?: { [k: string]: string | number } | undefined;
  stages?: Array<SearchJobStageConfig> | undefined;
  status: SearchJobStatus;
  tableConfig?: TableViewSettings | undefined;
  targetEventTime?: number | undefined;
  timeCompleted?: number | undefined;
  timeCreated: number;
  timeStarted?: number | undefined;
  timeToFirstByte?: number | undefined;
  totalBytesScanned?: number | undefined;
  totalEventCount?: number | undefined;
  type?: SearchJobType | undefined;
  usageGroupId?: string | undefined;
  usageMetrics?: SearchAuditMetrics | undefined;
  user: string;
};

/** @internal */
export const Axis$inboundSchema: z.ZodType<Axis, z.ZodTypeDef, unknown> = z
  .object({
    xAxis: z.string().optional(),
    yAxis: z.array(z.string()).optional(),
    yAxisExcluded: z.array(z.string()).optional(),
  });

/** @internal */
export type Axis$Outbound = {
  xAxis?: string | undefined;
  yAxis?: Array<string> | undefined;
  yAxisExcluded?: Array<string> | undefined;
};

/** @internal */
export const Axis$outboundSchema: z.ZodType<Axis$Outbound, z.ZodTypeDef, Axis> =
  z.object({
    xAxis: z.string().optional(),
    yAxis: z.array(z.string()).optional(),
    yAxisExcluded: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Axis$ {
  /** @deprecated use `Axis$inboundSchema` instead. */
  export const inboundSchema = Axis$inboundSchema;
  /** @deprecated use `Axis$outboundSchema` instead. */
  export const outboundSchema = Axis$outboundSchema;
  /** @deprecated use `Axis$Outbound` instead. */
  export type Outbound = Axis$Outbound;
}

export function axisToJSON(axis: Axis): string {
  return JSON.stringify(Axis$outboundSchema.parse(axis));
}

export function axisFromJSON(
  jsonString: string,
): SafeParseResult<Axis, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Axis$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Axis' from JSON`,
  );
}

/** @internal */
export const Threshold$inboundSchema: z.ZodType<
  Threshold,
  z.ZodTypeDef,
  unknown
> = z.object({
  color: z.string(),
  threshold: z.number(),
});

/** @internal */
export type Threshold$Outbound = {
  color: string;
  threshold: number;
};

/** @internal */
export const Threshold$outboundSchema: z.ZodType<
  Threshold$Outbound,
  z.ZodTypeDef,
  Threshold
> = z.object({
  color: z.string(),
  threshold: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Threshold$ {
  /** @deprecated use `Threshold$inboundSchema` instead. */
  export const inboundSchema = Threshold$inboundSchema;
  /** @deprecated use `Threshold$outboundSchema` instead. */
  export const outboundSchema = Threshold$outboundSchema;
  /** @deprecated use `Threshold$Outbound` instead. */
  export type Outbound = Threshold$Outbound;
}

export function thresholdToJSON(threshold: Threshold): string {
  return JSON.stringify(Threshold$outboundSchema.parse(threshold));
}

export function thresholdFromJSON(
  jsonString: string,
): SafeParseResult<Threshold, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Threshold$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Threshold' from JSON`,
  );
}

/** @internal */
export const ColorThresholds$inboundSchema: z.ZodType<
  ColorThresholds,
  z.ZodTypeDef,
  unknown
> = z.object({
  thresholds: z.array(z.lazy(() => Threshold$inboundSchema)),
});

/** @internal */
export type ColorThresholds$Outbound = {
  thresholds: Array<Threshold$Outbound>;
};

/** @internal */
export const ColorThresholds$outboundSchema: z.ZodType<
  ColorThresholds$Outbound,
  z.ZodTypeDef,
  ColorThresholds
> = z.object({
  thresholds: z.array(z.lazy(() => Threshold$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ColorThresholds$ {
  /** @deprecated use `ColorThresholds$inboundSchema` instead. */
  export const inboundSchema = ColorThresholds$inboundSchema;
  /** @deprecated use `ColorThresholds$outboundSchema` instead. */
  export const outboundSchema = ColorThresholds$outboundSchema;
  /** @deprecated use `ColorThresholds$Outbound` instead. */
  export type Outbound = ColorThresholds$Outbound;
}

export function colorThresholdsToJSON(
  colorThresholds: ColorThresholds,
): string {
  return JSON.stringify(ColorThresholds$outboundSchema.parse(colorThresholds));
}

export function colorThresholdsFromJSON(
  jsonString: string,
): SafeParseResult<ColorThresholds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ColorThresholds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ColorThresholds' from JSON`,
  );
}

/** @internal */
export const CustomDataPointScale$inboundSchema: z.ZodType<
  CustomDataPointScale,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type CustomDataPointScale$Outbound = string | number;

/** @internal */
export const CustomDataPointScale$outboundSchema: z.ZodType<
  CustomDataPointScale$Outbound,
  z.ZodTypeDef,
  CustomDataPointScale
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomDataPointScale$ {
  /** @deprecated use `CustomDataPointScale$inboundSchema` instead. */
  export const inboundSchema = CustomDataPointScale$inboundSchema;
  /** @deprecated use `CustomDataPointScale$outboundSchema` instead. */
  export const outboundSchema = CustomDataPointScale$outboundSchema;
  /** @deprecated use `CustomDataPointScale$Outbound` instead. */
  export type Outbound = CustomDataPointScale$Outbound;
}

export function customDataPointScaleToJSON(
  customDataPointScale: CustomDataPointScale,
): string {
  return JSON.stringify(
    CustomDataPointScale$outboundSchema.parse(customDataPointScale),
  );
}

export function customDataPointScaleFromJSON(
  jsonString: string,
): SafeParseResult<CustomDataPointScale, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomDataPointScale$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomDataPointScale' from JSON`,
  );
}

/** @internal */
export const CustomData$inboundSchema: z.ZodType<
  CustomData,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectNulls: z.string().optional(),
  dataFields: z.array(z.string()).optional(),
  isPointColor: z.boolean().optional(),
  limitToTopN: z.number().optional(),
  lines: z.boolean().optional(),
  nameField: z.string().optional(),
  pointColorPalette: z.number().optional(),
  pointColorPaletteReversed: z.boolean().optional(),
  pointScale: z.union([z.string(), z.number()]).optional(),
  pointScaleDataField: z.string().optional(),
  seriesCount: z.number().optional(),
  splitBy: z.string().optional(),
  stack: z.boolean().optional(),
  summarizeOthers: z.boolean().optional(),
  trellis: z.boolean().optional(),
});

/** @internal */
export type CustomData$Outbound = {
  connectNulls?: string | undefined;
  dataFields?: Array<string> | undefined;
  isPointColor?: boolean | undefined;
  limitToTopN?: number | undefined;
  lines?: boolean | undefined;
  nameField?: string | undefined;
  pointColorPalette?: number | undefined;
  pointColorPaletteReversed?: boolean | undefined;
  pointScale?: string | number | undefined;
  pointScaleDataField?: string | undefined;
  seriesCount?: number | undefined;
  splitBy?: string | undefined;
  stack?: boolean | undefined;
  summarizeOthers?: boolean | undefined;
  trellis?: boolean | undefined;
};

/** @internal */
export const CustomData$outboundSchema: z.ZodType<
  CustomData$Outbound,
  z.ZodTypeDef,
  CustomData
> = z.object({
  connectNulls: z.string().optional(),
  dataFields: z.array(z.string()).optional(),
  isPointColor: z.boolean().optional(),
  limitToTopN: z.number().optional(),
  lines: z.boolean().optional(),
  nameField: z.string().optional(),
  pointColorPalette: z.number().optional(),
  pointColorPaletteReversed: z.boolean().optional(),
  pointScale: z.union([z.string(), z.number()]).optional(),
  pointScaleDataField: z.string().optional(),
  seriesCount: z.number().optional(),
  splitBy: z.string().optional(),
  stack: z.boolean().optional(),
  summarizeOthers: z.boolean().optional(),
  trellis: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomData$ {
  /** @deprecated use `CustomData$inboundSchema` instead. */
  export const inboundSchema = CustomData$inboundSchema;
  /** @deprecated use `CustomData$outboundSchema` instead. */
  export const outboundSchema = CustomData$outboundSchema;
  /** @deprecated use `CustomData$Outbound` instead. */
  export type Outbound = CustomData$Outbound;
}

export function customDataToJSON(customData: CustomData): string {
  return JSON.stringify(CustomData$outboundSchema.parse(customData));
}

export function customDataFromJSON(
  jsonString: string,
): SafeParseResult<CustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomData' from JSON`,
  );
}

/** @internal */
export const Legend$inboundSchema: z.ZodType<Legend, z.ZodTypeDef, unknown> = z
  .object({
    position: z.string().optional(),
    selected: z.record(z.boolean()).optional(),
    truncate: z.boolean().optional(),
  });

/** @internal */
export type Legend$Outbound = {
  position?: string | undefined;
  selected?: { [k: string]: boolean } | undefined;
  truncate?: boolean | undefined;
};

/** @internal */
export const Legend$outboundSchema: z.ZodType<
  Legend$Outbound,
  z.ZodTypeDef,
  Legend
> = z.object({
  position: z.string().optional(),
  selected: z.record(z.boolean()).optional(),
  truncate: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Legend$ {
  /** @deprecated use `Legend$inboundSchema` instead. */
  export const inboundSchema = Legend$inboundSchema;
  /** @deprecated use `Legend$outboundSchema` instead. */
  export const outboundSchema = Legend$outboundSchema;
  /** @deprecated use `Legend$Outbound` instead. */
  export type Outbound = Legend$Outbound;
}

export function legendToJSON(legend: Legend): string {
  return JSON.stringify(Legend$outboundSchema.parse(legend));
}

export function legendFromJSON(
  jsonString: string,
): SafeParseResult<Legend, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Legend$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Legend' from JSON`,
  );
}

/** @internal */
export const MapDetailsPointScale$inboundSchema: z.ZodType<
  MapDetailsPointScale,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type MapDetailsPointScale$Outbound = string | number;

/** @internal */
export const MapDetailsPointScale$outboundSchema: z.ZodType<
  MapDetailsPointScale$Outbound,
  z.ZodTypeDef,
  MapDetailsPointScale
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MapDetailsPointScale$ {
  /** @deprecated use `MapDetailsPointScale$inboundSchema` instead. */
  export const inboundSchema = MapDetailsPointScale$inboundSchema;
  /** @deprecated use `MapDetailsPointScale$outboundSchema` instead. */
  export const outboundSchema = MapDetailsPointScale$outboundSchema;
  /** @deprecated use `MapDetailsPointScale$Outbound` instead. */
  export type Outbound = MapDetailsPointScale$Outbound;
}

export function mapDetailsPointScaleToJSON(
  mapDetailsPointScale: MapDetailsPointScale,
): string {
  return JSON.stringify(
    MapDetailsPointScale$outboundSchema.parse(mapDetailsPointScale),
  );
}

export function mapDetailsPointScaleFromJSON(
  jsonString: string,
): SafeParseResult<MapDetailsPointScale, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MapDetailsPointScale$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MapDetailsPointScale' from JSON`,
  );
}

/** @internal */
export const MapDetails$inboundSchema: z.ZodType<
  MapDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  latitudeField: z.string().optional(),
  longitudeField: z.string().optional(),
  mapSourceID: z.string().optional(),
  mapType: z.string().optional(),
  nameField: z.string().optional(),
  pointScale: z.union([z.string(), z.number()]).optional(),
  valueField: z.string().optional(),
});

/** @internal */
export type MapDetails$Outbound = {
  latitudeField?: string | undefined;
  longitudeField?: string | undefined;
  mapSourceID?: string | undefined;
  mapType?: string | undefined;
  nameField?: string | undefined;
  pointScale?: string | number | undefined;
  valueField?: string | undefined;
};

/** @internal */
export const MapDetails$outboundSchema: z.ZodType<
  MapDetails$Outbound,
  z.ZodTypeDef,
  MapDetails
> = z.object({
  latitudeField: z.string().optional(),
  longitudeField: z.string().optional(),
  mapSourceID: z.string().optional(),
  mapType: z.string().optional(),
  nameField: z.string().optional(),
  pointScale: z.union([z.string(), z.number()]).optional(),
  valueField: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MapDetails$ {
  /** @deprecated use `MapDetails$inboundSchema` instead. */
  export const inboundSchema = MapDetails$inboundSchema;
  /** @deprecated use `MapDetails$outboundSchema` instead. */
  export const outboundSchema = MapDetails$outboundSchema;
  /** @deprecated use `MapDetails$Outbound` instead. */
  export type Outbound = MapDetails$Outbound;
}

export function mapDetailsToJSON(mapDetails: MapDetails): string {
  return JSON.stringify(MapDetails$outboundSchema.parse(mapDetails));
}

export function mapDetailsFromJSON(
  jsonString: string,
): SafeParseResult<MapDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MapDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MapDetails' from JSON`,
  );
}

/** @internal */
export const OnClickAction$inboundSchema: z.ZodType<
  OnClickAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  search: z.string().optional(),
  selectedDashboardId: z.string().optional(),
  selectedInputId: z.string().optional(),
  selectedLinkId: z.string().optional(),
  selectedTimerangeInputId: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type OnClickAction$Outbound = {
  search?: string | undefined;
  selectedDashboardId?: string | undefined;
  selectedInputId?: string | undefined;
  selectedLinkId?: string | undefined;
  selectedTimerangeInputId?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const OnClickAction$outboundSchema: z.ZodType<
  OnClickAction$Outbound,
  z.ZodTypeDef,
  OnClickAction
> = z.object({
  search: z.string().optional(),
  selectedDashboardId: z.string().optional(),
  selectedInputId: z.string().optional(),
  selectedLinkId: z.string().optional(),
  selectedTimerangeInputId: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnClickAction$ {
  /** @deprecated use `OnClickAction$inboundSchema` instead. */
  export const inboundSchema = OnClickAction$inboundSchema;
  /** @deprecated use `OnClickAction$outboundSchema` instead. */
  export const outboundSchema = OnClickAction$outboundSchema;
  /** @deprecated use `OnClickAction$Outbound` instead. */
  export type Outbound = OnClickAction$Outbound;
}

export function onClickActionToJSON(onClickAction: OnClickAction): string {
  return JSON.stringify(OnClickAction$outboundSchema.parse(onClickAction));
}

export function onClickActionFromJSON(
  jsonString: string,
): SafeParseResult<OnClickAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnClickAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnClickAction' from JSON`,
  );
}

/** @internal */
export const XAxis$inboundSchema: z.ZodType<XAxis, z.ZodTypeDef, unknown> = z
  .object({
    dataField: z.string().optional(),
    inverse: z.boolean().optional(),
    labelInterval: z.string().optional(),
    labelOrientation: z.number().optional(),
    name: z.string().optional(),
    offset: z.number().optional(),
    position: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type XAxis$Outbound = {
  dataField?: string | undefined;
  inverse?: boolean | undefined;
  labelInterval?: string | undefined;
  labelOrientation?: number | undefined;
  name?: string | undefined;
  offset?: number | undefined;
  position?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const XAxis$outboundSchema: z.ZodType<
  XAxis$Outbound,
  z.ZodTypeDef,
  XAxis
> = z.object({
  dataField: z.string().optional(),
  inverse: z.boolean().optional(),
  labelInterval: z.string().optional(),
  labelOrientation: z.number().optional(),
  name: z.string().optional(),
  offset: z.number().optional(),
  position: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace XAxis$ {
  /** @deprecated use `XAxis$inboundSchema` instead. */
  export const inboundSchema = XAxis$inboundSchema;
  /** @deprecated use `XAxis$outboundSchema` instead. */
  export const outboundSchema = XAxis$outboundSchema;
  /** @deprecated use `XAxis$Outbound` instead. */
  export type Outbound = XAxis$Outbound;
}

export function xAxisToJSON(xAxis: XAxis): string {
  return JSON.stringify(XAxis$outboundSchema.parse(xAxis));
}

export function xAxisFromJSON(
  jsonString: string,
): SafeParseResult<XAxis, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => XAxis$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'XAxis' from JSON`,
  );
}

/** @internal */
export const YAxis$inboundSchema: z.ZodType<YAxis, z.ZodTypeDef, unknown> = z
  .object({
    dataField: z.array(z.string()).optional(),
    interval: z.number().optional(),
    max: z.number().optional(),
    min: z.number().optional(),
    position: z.string().optional(),
    scale: z.string().optional(),
    splitLine: z.boolean().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type YAxis$Outbound = {
  dataField?: Array<string> | undefined;
  interval?: number | undefined;
  max?: number | undefined;
  min?: number | undefined;
  position?: string | undefined;
  scale?: string | undefined;
  splitLine?: boolean | undefined;
  type?: string | undefined;
};

/** @internal */
export const YAxis$outboundSchema: z.ZodType<
  YAxis$Outbound,
  z.ZodTypeDef,
  YAxis
> = z.object({
  dataField: z.array(z.string()).optional(),
  interval: z.number().optional(),
  max: z.number().optional(),
  min: z.number().optional(),
  position: z.string().optional(),
  scale: z.string().optional(),
  splitLine: z.boolean().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace YAxis$ {
  /** @deprecated use `YAxis$inboundSchema` instead. */
  export const inboundSchema = YAxis$inboundSchema;
  /** @deprecated use `YAxis$outboundSchema` instead. */
  export const outboundSchema = YAxis$outboundSchema;
  /** @deprecated use `YAxis$Outbound` instead. */
  export type Outbound = YAxis$Outbound;
}

export function yAxisToJSON(yAxis: YAxis): string {
  return JSON.stringify(YAxis$outboundSchema.parse(yAxis));
}

export function yAxisFromJSON(
  jsonString: string,
): SafeParseResult<YAxis, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => YAxis$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'YAxis' from JSON`,
  );
}

/** @internal */
export const ChartConfig$inboundSchema: z.ZodType<
  ChartConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  applyThreshold: z.boolean().optional(),
  axis: z.lazy(() => Axis$inboundSchema).optional(),
  color: z.string().optional(),
  colorPalette: z.number().optional(),
  colorPaletteReversed: z.boolean().optional(),
  colorThresholds: z.lazy(() => ColorThresholds$inboundSchema).optional(),
  customData: z.lazy(() => CustomData$inboundSchema).optional(),
  decimals: z.number().optional(),
  label: z.string().optional(),
  legend: z.lazy(() => Legend$inboundSchema).optional(),
  mapDetails: z.lazy(() => MapDetails$inboundSchema).optional(),
  onClickAction: z.lazy(() => OnClickAction$inboundSchema).optional(),
  prefix: z.string().optional(),
  separator: z.boolean().optional(),
  series: z.array(ChartSeries$inboundSchema).optional(),
  seriesInfo: z.record(ChartType$inboundSchema).optional(),
  shouldApplyUserChartSettings: z.boolean().optional(),
  style: z.boolean().optional(),
  suffix: z.string().optional(),
  type: z.string().optional(),
  xAxis: z.lazy(() => XAxis$inboundSchema).optional(),
  yAxis: z.lazy(() => YAxis$inboundSchema).optional(),
});

/** @internal */
export type ChartConfig$Outbound = {
  applyThreshold?: boolean | undefined;
  axis?: Axis$Outbound | undefined;
  color?: string | undefined;
  colorPalette?: number | undefined;
  colorPaletteReversed?: boolean | undefined;
  colorThresholds?: ColorThresholds$Outbound | undefined;
  customData?: CustomData$Outbound | undefined;
  decimals?: number | undefined;
  label?: string | undefined;
  legend?: Legend$Outbound | undefined;
  mapDetails?: MapDetails$Outbound | undefined;
  onClickAction?: OnClickAction$Outbound | undefined;
  prefix?: string | undefined;
  separator?: boolean | undefined;
  series?: Array<ChartSeries$Outbound> | undefined;
  seriesInfo?: { [k: string]: string } | undefined;
  shouldApplyUserChartSettings?: boolean | undefined;
  style?: boolean | undefined;
  suffix?: string | undefined;
  type?: string | undefined;
  xAxis?: XAxis$Outbound | undefined;
  yAxis?: YAxis$Outbound | undefined;
};

/** @internal */
export const ChartConfig$outboundSchema: z.ZodType<
  ChartConfig$Outbound,
  z.ZodTypeDef,
  ChartConfig
> = z.object({
  applyThreshold: z.boolean().optional(),
  axis: z.lazy(() => Axis$outboundSchema).optional(),
  color: z.string().optional(),
  colorPalette: z.number().optional(),
  colorPaletteReversed: z.boolean().optional(),
  colorThresholds: z.lazy(() => ColorThresholds$outboundSchema).optional(),
  customData: z.lazy(() => CustomData$outboundSchema).optional(),
  decimals: z.number().optional(),
  label: z.string().optional(),
  legend: z.lazy(() => Legend$outboundSchema).optional(),
  mapDetails: z.lazy(() => MapDetails$outboundSchema).optional(),
  onClickAction: z.lazy(() => OnClickAction$outboundSchema).optional(),
  prefix: z.string().optional(),
  separator: z.boolean().optional(),
  series: z.array(ChartSeries$outboundSchema).optional(),
  seriesInfo: z.record(ChartType$outboundSchema).optional(),
  shouldApplyUserChartSettings: z.boolean().optional(),
  style: z.boolean().optional(),
  suffix: z.string().optional(),
  type: z.string().optional(),
  xAxis: z.lazy(() => XAxis$outboundSchema).optional(),
  yAxis: z.lazy(() => YAxis$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChartConfig$ {
  /** @deprecated use `ChartConfig$inboundSchema` instead. */
  export const inboundSchema = ChartConfig$inboundSchema;
  /** @deprecated use `ChartConfig$outboundSchema` instead. */
  export const outboundSchema = ChartConfig$outboundSchema;
  /** @deprecated use `ChartConfig$Outbound` instead. */
  export type Outbound = ChartConfig$Outbound;
}

export function chartConfigToJSON(chartConfig: ChartConfig): string {
  return JSON.stringify(ChartConfig$outboundSchema.parse(chartConfig));
}

export function chartConfigFromJSON(
  jsonString: string,
): SafeParseResult<ChartConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChartConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChartConfig' from JSON`,
  );
}

/** @internal */
export const CompatibilityChecks$inboundSchema: z.ZodType<
  CompatibilityChecks,
  z.ZodTypeDef,
  unknown
> = z.object({
  datatypes: z.boolean().optional(),
  stageIds: z.array(z.string()).optional(),
});

/** @internal */
export type CompatibilityChecks$Outbound = {
  datatypes?: boolean | undefined;
  stageIds?: Array<string> | undefined;
};

/** @internal */
export const CompatibilityChecks$outboundSchema: z.ZodType<
  CompatibilityChecks$Outbound,
  z.ZodTypeDef,
  CompatibilityChecks
> = z.object({
  datatypes: z.boolean().optional(),
  stageIds: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompatibilityChecks$ {
  /** @deprecated use `CompatibilityChecks$inboundSchema` instead. */
  export const inboundSchema = CompatibilityChecks$inboundSchema;
  /** @deprecated use `CompatibilityChecks$outboundSchema` instead. */
  export const outboundSchema = CompatibilityChecks$outboundSchema;
  /** @deprecated use `CompatibilityChecks$Outbound` instead. */
  export type Outbound = CompatibilityChecks$Outbound;
}

export function compatibilityChecksToJSON(
  compatibilityChecks: CompatibilityChecks,
): string {
  return JSON.stringify(
    CompatibilityChecks$outboundSchema.parse(compatibilityChecks),
  );
}

export function compatibilityChecksFromJSON(
  jsonString: string,
): SafeParseResult<CompatibilityChecks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompatibilityChecks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompatibilityChecks' from JSON`,
  );
}

/** @internal */
export const SearchJobEarliest$inboundSchema: z.ZodType<
  SearchJobEarliest,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SearchJobEarliest$Outbound = string | number;

/** @internal */
export const SearchJobEarliest$outboundSchema: z.ZodType<
  SearchJobEarliest$Outbound,
  z.ZodTypeDef,
  SearchJobEarliest
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJobEarliest$ {
  /** @deprecated use `SearchJobEarliest$inboundSchema` instead. */
  export const inboundSchema = SearchJobEarliest$inboundSchema;
  /** @deprecated use `SearchJobEarliest$outboundSchema` instead. */
  export const outboundSchema = SearchJobEarliest$outboundSchema;
  /** @deprecated use `SearchJobEarliest$Outbound` instead. */
  export type Outbound = SearchJobEarliest$Outbound;
}

export function searchJobEarliestToJSON(
  searchJobEarliest: SearchJobEarliest,
): string {
  return JSON.stringify(
    SearchJobEarliest$outboundSchema.parse(searchJobEarliest),
  );
}

export function searchJobEarliestFromJSON(
  jsonString: string,
): SafeParseResult<SearchJobEarliest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchJobEarliest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchJobEarliest' from JSON`,
  );
}

/** @internal */
export const SearchJobLatest$inboundSchema: z.ZodType<
  SearchJobLatest,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SearchJobLatest$Outbound = string | number;

/** @internal */
export const SearchJobLatest$outboundSchema: z.ZodType<
  SearchJobLatest$Outbound,
  z.ZodTypeDef,
  SearchJobLatest
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJobLatest$ {
  /** @deprecated use `SearchJobLatest$inboundSchema` instead. */
  export const inboundSchema = SearchJobLatest$inboundSchema;
  /** @deprecated use `SearchJobLatest$outboundSchema` instead. */
  export const outboundSchema = SearchJobLatest$outboundSchema;
  /** @deprecated use `SearchJobLatest$Outbound` instead. */
  export type Outbound = SearchJobLatest$Outbound;
}

export function searchJobLatestToJSON(
  searchJobLatest: SearchJobLatest,
): string {
  return JSON.stringify(SearchJobLatest$outboundSchema.parse(searchJobLatest));
}

export function searchJobLatestFromJSON(
  jsonString: string,
): SafeParseResult<SearchJobLatest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchJobLatest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchJobLatest' from JSON`,
  );
}

/** @internal */
export const SetOptions$inboundSchema: z.ZodType<
  SetOptions,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SetOptions$Outbound = string | number;

/** @internal */
export const SetOptions$outboundSchema: z.ZodType<
  SetOptions$Outbound,
  z.ZodTypeDef,
  SetOptions
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetOptions$ {
  /** @deprecated use `SetOptions$inboundSchema` instead. */
  export const inboundSchema = SetOptions$inboundSchema;
  /** @deprecated use `SetOptions$outboundSchema` instead. */
  export const outboundSchema = SetOptions$outboundSchema;
  /** @deprecated use `SetOptions$Outbound` instead. */
  export type Outbound = SetOptions$Outbound;
}

export function setOptionsToJSON(setOptions: SetOptions): string {
  return JSON.stringify(SetOptions$outboundSchema.parse(setOptions));
}

export function setOptionsFromJSON(
  jsonString: string,
): SafeParseResult<SetOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetOptions' from JSON`,
  );
}

/** @internal */
export const SearchJobStatus$inboundSchema: z.ZodType<
  SearchJobStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchJobStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchJobStatus$outboundSchema: z.ZodType<
  SearchJobStatus,
  z.ZodTypeDef,
  SearchJobStatus
> = z.union([
  z.nativeEnum(SearchJobStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJobStatus$ {
  /** @deprecated use `SearchJobStatus$inboundSchema` instead. */
  export const inboundSchema = SearchJobStatus$inboundSchema;
  /** @deprecated use `SearchJobStatus$outboundSchema` instead. */
  export const outboundSchema = SearchJobStatus$outboundSchema;
}

/** @internal */
export const SearchJobType$inboundSchema: z.ZodType<
  SearchJobType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchJobType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchJobType$outboundSchema: z.ZodType<
  SearchJobType,
  z.ZodTypeDef,
  SearchJobType
> = z.union([
  z.nativeEnum(SearchJobType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJobType$ {
  /** @deprecated use `SearchJobType$inboundSchema` instead. */
  export const inboundSchema = SearchJobType$inboundSchema;
  /** @deprecated use `SearchJobType$outboundSchema` instead. */
  export const outboundSchema = SearchJobType$outboundSchema;
}

/** @internal */
export const SearchJob$inboundSchema: z.ZodType<
  SearchJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  accelerated: z.boolean().optional(),
  aliasOfOriginalJobId: z.string().optional(),
  chartConfig: z.lazy(() => ChartConfig$inboundSchema).optional(),
  compatibilityChecks: z.lazy(() => CompatibilityChecks$inboundSchema)
    .optional(),
  completionInfo: z.string().optional(),
  context: z.string().optional(),
  correlationId: z.string().optional(),
  cpuMetrics: CPUTimeMetric$inboundSchema.optional(),
  datatypeOverrides: DatatypeOverrides$inboundSchema.optional(),
  disableNotifications: z.boolean().optional(),
  displayUsername: z.string(),
  earliest: z.union([z.string(), z.number()]).optional(),
  earliestEpoch: z.number().optional(),
  errorStateConfig: SearchJobErrorStateConfig$inboundSchema.optional(),
  group: z.string(),
  id: z.string(),
  isPrivate: z.boolean().optional(),
  latest: z.union([z.string(), z.number()]).optional(),
  latestEpoch: z.number().optional(),
  metadata: SearchJobMetadata$inboundSchema.optional(),
  notebookId: z.string().optional(),
  numEventsAfter: z.number().optional(),
  numEventsBefore: z.number().optional(),
  query: z.string(),
  queryWithMacrosResolved: z.string().optional(),
  sampleRate: z.number().optional(),
  savedQueryName: z.string().optional(),
  searchParameterDeclarations: z.array(SearchParameter$inboundSchema)
    .optional(),
  searchParameterValues: z.record(SearchParameters$inboundSchema).optional(),
  setOptions: z.record(z.union([z.string(), z.number()])).optional(),
  stages: z.array(SearchJobStageConfig$inboundSchema).optional(),
  status: SearchJobStatus$inboundSchema,
  tableConfig: TableViewSettings$inboundSchema.optional(),
  targetEventTime: z.number().optional(),
  timeCompleted: z.number().optional(),
  timeCreated: z.number(),
  timeStarted: z.number().optional(),
  timeToFirstByte: z.number().optional(),
  totalBytesScanned: z.number().optional(),
  totalEventCount: z.number().optional(),
  type: SearchJobType$inboundSchema.optional(),
  usageGroupId: z.string().optional(),
  usageMetrics: SearchAuditMetrics$inboundSchema.optional(),
  user: z.string(),
});

/** @internal */
export type SearchJob$Outbound = {
  accelerated?: boolean | undefined;
  aliasOfOriginalJobId?: string | undefined;
  chartConfig?: ChartConfig$Outbound | undefined;
  compatibilityChecks?: CompatibilityChecks$Outbound | undefined;
  completionInfo?: string | undefined;
  context?: string | undefined;
  correlationId?: string | undefined;
  cpuMetrics?: CPUTimeMetric$Outbound | undefined;
  datatypeOverrides?: DatatypeOverrides$Outbound | undefined;
  disableNotifications?: boolean | undefined;
  displayUsername: string;
  earliest?: string | number | undefined;
  earliestEpoch?: number | undefined;
  errorStateConfig?: SearchJobErrorStateConfig$Outbound | undefined;
  group: string;
  id: string;
  isPrivate?: boolean | undefined;
  latest?: string | number | undefined;
  latestEpoch?: number | undefined;
  metadata?: SearchJobMetadata$Outbound | undefined;
  notebookId?: string | undefined;
  numEventsAfter?: number | undefined;
  numEventsBefore?: number | undefined;
  query: string;
  queryWithMacrosResolved?: string | undefined;
  sampleRate?: number | undefined;
  savedQueryName?: string | undefined;
  searchParameterDeclarations?: Array<SearchParameter$Outbound> | undefined;
  searchParameterValues?:
    | { [k: string]: SearchParameters$Outbound }
    | undefined;
  setOptions?: { [k: string]: string | number } | undefined;
  stages?: Array<SearchJobStageConfig$Outbound> | undefined;
  status: string;
  tableConfig?: TableViewSettings$Outbound | undefined;
  targetEventTime?: number | undefined;
  timeCompleted?: number | undefined;
  timeCreated: number;
  timeStarted?: number | undefined;
  timeToFirstByte?: number | undefined;
  totalBytesScanned?: number | undefined;
  totalEventCount?: number | undefined;
  type?: string | undefined;
  usageGroupId?: string | undefined;
  usageMetrics?: SearchAuditMetrics$Outbound | undefined;
  user: string;
};

/** @internal */
export const SearchJob$outboundSchema: z.ZodType<
  SearchJob$Outbound,
  z.ZodTypeDef,
  SearchJob
> = z.object({
  accelerated: z.boolean().optional(),
  aliasOfOriginalJobId: z.string().optional(),
  chartConfig: z.lazy(() => ChartConfig$outboundSchema).optional(),
  compatibilityChecks: z.lazy(() => CompatibilityChecks$outboundSchema)
    .optional(),
  completionInfo: z.string().optional(),
  context: z.string().optional(),
  correlationId: z.string().optional(),
  cpuMetrics: CPUTimeMetric$outboundSchema.optional(),
  datatypeOverrides: DatatypeOverrides$outboundSchema.optional(),
  disableNotifications: z.boolean().optional(),
  displayUsername: z.string(),
  earliest: z.union([z.string(), z.number()]).optional(),
  earliestEpoch: z.number().optional(),
  errorStateConfig: SearchJobErrorStateConfig$outboundSchema.optional(),
  group: z.string(),
  id: z.string(),
  isPrivate: z.boolean().optional(),
  latest: z.union([z.string(), z.number()]).optional(),
  latestEpoch: z.number().optional(),
  metadata: SearchJobMetadata$outboundSchema.optional(),
  notebookId: z.string().optional(),
  numEventsAfter: z.number().optional(),
  numEventsBefore: z.number().optional(),
  query: z.string(),
  queryWithMacrosResolved: z.string().optional(),
  sampleRate: z.number().optional(),
  savedQueryName: z.string().optional(),
  searchParameterDeclarations: z.array(SearchParameter$outboundSchema)
    .optional(),
  searchParameterValues: z.record(SearchParameters$outboundSchema).optional(),
  setOptions: z.record(z.union([z.string(), z.number()])).optional(),
  stages: z.array(SearchJobStageConfig$outboundSchema).optional(),
  status: SearchJobStatus$outboundSchema,
  tableConfig: TableViewSettings$outboundSchema.optional(),
  targetEventTime: z.number().optional(),
  timeCompleted: z.number().optional(),
  timeCreated: z.number(),
  timeStarted: z.number().optional(),
  timeToFirstByte: z.number().optional(),
  totalBytesScanned: z.number().optional(),
  totalEventCount: z.number().optional(),
  type: SearchJobType$outboundSchema.optional(),
  usageGroupId: z.string().optional(),
  usageMetrics: SearchAuditMetrics$outboundSchema.optional(),
  user: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJob$ {
  /** @deprecated use `SearchJob$inboundSchema` instead. */
  export const inboundSchema = SearchJob$inboundSchema;
  /** @deprecated use `SearchJob$outboundSchema` instead. */
  export const outboundSchema = SearchJob$outboundSchema;
  /** @deprecated use `SearchJob$Outbound` instead. */
  export type Outbound = SearchJob$Outbound;
}

export function searchJobToJSON(searchJob: SearchJob): string {
  return JSON.stringify(SearchJob$outboundSchema.parse(searchJob));
}

export function searchJobFromJSON(
  jsonString: string,
): SafeParseResult<SearchJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchJob' from JSON`,
  );
}
