/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputInfluxdbType = {
  Influxdb: "influxdb",
} as const;
export type OutputInfluxdbType = ClosedEnum<typeof OutputInfluxdbType>;

/**
 * Sets the precision for the supplied Unix time values. Defaults to milliseconds.
 */
export const TimestampPrecision = {
  Ns: "ns",
  U: "u",
  Ms: "ms",
  S: "s",
  M: "m",
  H: "h",
} as const;
/**
 * Sets the precision for the supplied Unix time values. Defaults to milliseconds.
 */
export type TimestampPrecision = OpenEnum<typeof TimestampPrecision>;

export type OutputInfluxdbExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputInfluxdbFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputInfluxdbFailedRequestLoggingMode = OpenEnum<
  typeof OutputInfluxdbFailedRequestLoggingMode
>;

export type OutputInfluxdbResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputInfluxdbTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputInfluxdbBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputInfluxdbBackpressureBehavior = OpenEnum<
  typeof OutputInfluxdbBackpressureBehavior
>;

/**
 * InfluxDB authentication type
 */
export const OutputInfluxdbAuthenticationType = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
/**
 * InfluxDB authentication type
 */
export type OutputInfluxdbAuthenticationType = OpenEnum<
  typeof OutputInfluxdbAuthenticationType
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputInfluxdbCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputInfluxdbCompression = OpenEnum<
  typeof OutputInfluxdbCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputInfluxdbQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputInfluxdbQueueFullBehavior = OpenEnum<
  typeof OutputInfluxdbQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputInfluxdbMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputInfluxdbMode = OpenEnum<typeof OutputInfluxdbMode>;

export type OutputInfluxdbPqControls = {};

export type OutputInfluxdbOauthParam = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type OutputInfluxdbOauthHeader = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type OutputInfluxdb = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputInfluxdbType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * URL of an InfluxDB cluster to send events to, e.g., http://localhost:8086/write
   */
  url: string;
  /**
   * The v2 API can be enabled with InfluxDB versions 1.8 and later.
   */
  useV2API?: boolean | undefined;
  /**
   * Sets the precision for the supplied Unix time values. Defaults to milliseconds.
   */
  timestampPrecision?: TimestampPrecision | undefined;
  /**
   * Enabling this will pull the value field from the metric name. E,g, 'db.query.user' will use 'db.query' as the measurement and 'user' as the value field.
   */
  dynamicValueFieldName?: boolean | undefined;
  /**
   * Name of the field in which to store the metric when sending to InfluxDB. If dynamic generation is enabled and fails, this will be used as a fallback.
   */
  valueFieldName?: string | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputInfluxdbExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?: OutputInfluxdbFailedRequestLoggingMode | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?: Array<OutputInfluxdbResponseRetrySetting> | undefined;
  timeoutRetrySettings?: OutputInfluxdbTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputInfluxdbBackpressureBehavior | undefined;
  /**
   * InfluxDB authentication type
   */
  authType?: OutputInfluxdbAuthenticationType | undefined;
  description?: string | undefined;
  /**
   * Database to write to.
   */
  database?: string | undefined;
  /**
   * Bucket to write to.
   */
  bucket?: string | undefined;
  /**
   * Organization ID for this bucket.
   */
  org?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputInfluxdbCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputInfluxdbQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputInfluxdbMode | undefined;
  pqControls?: OutputInfluxdbPqControls | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<OutputInfluxdbOauthParam> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<OutputInfluxdbOauthHeader> | undefined;
};

/** @internal */
export const OutputInfluxdbType$inboundSchema: z.ZodNativeEnum<
  typeof OutputInfluxdbType
> = z.nativeEnum(OutputInfluxdbType);

/** @internal */
export const OutputInfluxdbType$outboundSchema: z.ZodNativeEnum<
  typeof OutputInfluxdbType
> = OutputInfluxdbType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbType$ {
  /** @deprecated use `OutputInfluxdbType$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbType$inboundSchema;
  /** @deprecated use `OutputInfluxdbType$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdbType$outboundSchema;
}

/** @internal */
export const TimestampPrecision$inboundSchema: z.ZodType<
  TimestampPrecision,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TimestampPrecision),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TimestampPrecision$outboundSchema: z.ZodType<
  TimestampPrecision,
  z.ZodTypeDef,
  TimestampPrecision
> = z.union([
  z.nativeEnum(TimestampPrecision),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimestampPrecision$ {
  /** @deprecated use `TimestampPrecision$inboundSchema` instead. */
  export const inboundSchema = TimestampPrecision$inboundSchema;
  /** @deprecated use `TimestampPrecision$outboundSchema` instead. */
  export const outboundSchema = TimestampPrecision$outboundSchema;
}

/** @internal */
export const OutputInfluxdbExtraHttpHeader$inboundSchema: z.ZodType<
  OutputInfluxdbExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputInfluxdbExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputInfluxdbExtraHttpHeader$outboundSchema: z.ZodType<
  OutputInfluxdbExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputInfluxdbExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbExtraHttpHeader$ {
  /** @deprecated use `OutputInfluxdbExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputInfluxdbExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdbExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputInfluxdbExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputInfluxdbExtraHttpHeader$Outbound;
}

export function outputInfluxdbExtraHttpHeaderToJSON(
  outputInfluxdbExtraHttpHeader: OutputInfluxdbExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputInfluxdbExtraHttpHeader$outboundSchema.parse(
      outputInfluxdbExtraHttpHeader,
    ),
  );
}

export function outputInfluxdbExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputInfluxdbExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputInfluxdbExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputInfluxdbExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputInfluxdbFailedRequestLoggingMode$inboundSchema: z.ZodType<
  OutputInfluxdbFailedRequestLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputInfluxdbFailedRequestLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputInfluxdbFailedRequestLoggingMode$outboundSchema: z.ZodType<
  OutputInfluxdbFailedRequestLoggingMode,
  z.ZodTypeDef,
  OutputInfluxdbFailedRequestLoggingMode
> = z.union([
  z.nativeEnum(OutputInfluxdbFailedRequestLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbFailedRequestLoggingMode$ {
  /** @deprecated use `OutputInfluxdbFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputInfluxdbFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputInfluxdbFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputInfluxdbFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputInfluxdbResponseRetrySetting$inboundSchema: z.ZodType<
  OutputInfluxdbResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputInfluxdbResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputInfluxdbResponseRetrySetting$outboundSchema: z.ZodType<
  OutputInfluxdbResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputInfluxdbResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbResponseRetrySetting$ {
  /** @deprecated use `OutputInfluxdbResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputInfluxdbResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputInfluxdbResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputInfluxdbResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputInfluxdbResponseRetrySetting$Outbound;
}

export function outputInfluxdbResponseRetrySettingToJSON(
  outputInfluxdbResponseRetrySetting: OutputInfluxdbResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputInfluxdbResponseRetrySetting$outboundSchema.parse(
      outputInfluxdbResponseRetrySetting,
    ),
  );
}

export function outputInfluxdbResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputInfluxdbResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputInfluxdbResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputInfluxdbResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputInfluxdbTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputInfluxdbTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputInfluxdbTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputInfluxdbTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputInfluxdbTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputInfluxdbTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbTimeoutRetrySettings$ {
  /** @deprecated use `OutputInfluxdbTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputInfluxdbTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputInfluxdbTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputInfluxdbTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputInfluxdbTimeoutRetrySettings$Outbound;
}

export function outputInfluxdbTimeoutRetrySettingsToJSON(
  outputInfluxdbTimeoutRetrySettings: OutputInfluxdbTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputInfluxdbTimeoutRetrySettings$outboundSchema.parse(
      outputInfluxdbTimeoutRetrySettings,
    ),
  );
}

export function outputInfluxdbTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputInfluxdbTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputInfluxdbTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputInfluxdbTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputInfluxdbBackpressureBehavior$inboundSchema: z.ZodType<
  OutputInfluxdbBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputInfluxdbBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputInfluxdbBackpressureBehavior$outboundSchema: z.ZodType<
  OutputInfluxdbBackpressureBehavior,
  z.ZodTypeDef,
  OutputInfluxdbBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputInfluxdbBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbBackpressureBehavior$ {
  /** @deprecated use `OutputInfluxdbBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputInfluxdbBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputInfluxdbBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputInfluxdbAuthenticationType$inboundSchema: z.ZodType<
  OutputInfluxdbAuthenticationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputInfluxdbAuthenticationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputInfluxdbAuthenticationType$outboundSchema: z.ZodType<
  OutputInfluxdbAuthenticationType,
  z.ZodTypeDef,
  OutputInfluxdbAuthenticationType
> = z.union([
  z.nativeEnum(OutputInfluxdbAuthenticationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbAuthenticationType$ {
  /** @deprecated use `OutputInfluxdbAuthenticationType$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbAuthenticationType$inboundSchema;
  /** @deprecated use `OutputInfluxdbAuthenticationType$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdbAuthenticationType$outboundSchema;
}

/** @internal */
export const OutputInfluxdbCompression$inboundSchema: z.ZodType<
  OutputInfluxdbCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputInfluxdbCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputInfluxdbCompression$outboundSchema: z.ZodType<
  OutputInfluxdbCompression,
  z.ZodTypeDef,
  OutputInfluxdbCompression
> = z.union([
  z.nativeEnum(OutputInfluxdbCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbCompression$ {
  /** @deprecated use `OutputInfluxdbCompression$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbCompression$inboundSchema;
  /** @deprecated use `OutputInfluxdbCompression$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdbCompression$outboundSchema;
}

/** @internal */
export const OutputInfluxdbQueueFullBehavior$inboundSchema: z.ZodType<
  OutputInfluxdbQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputInfluxdbQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputInfluxdbQueueFullBehavior$outboundSchema: z.ZodType<
  OutputInfluxdbQueueFullBehavior,
  z.ZodTypeDef,
  OutputInfluxdbQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputInfluxdbQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbQueueFullBehavior$ {
  /** @deprecated use `OutputInfluxdbQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputInfluxdbQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdbQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputInfluxdbMode$inboundSchema: z.ZodType<
  OutputInfluxdbMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputInfluxdbMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputInfluxdbMode$outboundSchema: z.ZodType<
  OutputInfluxdbMode,
  z.ZodTypeDef,
  OutputInfluxdbMode
> = z.union([
  z.nativeEnum(OutputInfluxdbMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbMode$ {
  /** @deprecated use `OutputInfluxdbMode$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbMode$inboundSchema;
  /** @deprecated use `OutputInfluxdbMode$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdbMode$outboundSchema;
}

/** @internal */
export const OutputInfluxdbPqControls$inboundSchema: z.ZodType<
  OutputInfluxdbPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputInfluxdbPqControls$Outbound = {};

/** @internal */
export const OutputInfluxdbPqControls$outboundSchema: z.ZodType<
  OutputInfluxdbPqControls$Outbound,
  z.ZodTypeDef,
  OutputInfluxdbPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbPqControls$ {
  /** @deprecated use `OutputInfluxdbPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbPqControls$inboundSchema;
  /** @deprecated use `OutputInfluxdbPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdbPqControls$outboundSchema;
  /** @deprecated use `OutputInfluxdbPqControls$Outbound` instead. */
  export type Outbound = OutputInfluxdbPqControls$Outbound;
}

export function outputInfluxdbPqControlsToJSON(
  outputInfluxdbPqControls: OutputInfluxdbPqControls,
): string {
  return JSON.stringify(
    OutputInfluxdbPqControls$outboundSchema.parse(outputInfluxdbPqControls),
  );
}

export function outputInfluxdbPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputInfluxdbPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputInfluxdbPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputInfluxdbPqControls' from JSON`,
  );
}

/** @internal */
export const OutputInfluxdbOauthParam$inboundSchema: z.ZodType<
  OutputInfluxdbOauthParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type OutputInfluxdbOauthParam$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputInfluxdbOauthParam$outboundSchema: z.ZodType<
  OutputInfluxdbOauthParam$Outbound,
  z.ZodTypeDef,
  OutputInfluxdbOauthParam
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbOauthParam$ {
  /** @deprecated use `OutputInfluxdbOauthParam$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbOauthParam$inboundSchema;
  /** @deprecated use `OutputInfluxdbOauthParam$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdbOauthParam$outboundSchema;
  /** @deprecated use `OutputInfluxdbOauthParam$Outbound` instead. */
  export type Outbound = OutputInfluxdbOauthParam$Outbound;
}

export function outputInfluxdbOauthParamToJSON(
  outputInfluxdbOauthParam: OutputInfluxdbOauthParam,
): string {
  return JSON.stringify(
    OutputInfluxdbOauthParam$outboundSchema.parse(outputInfluxdbOauthParam),
  );
}

export function outputInfluxdbOauthParamFromJSON(
  jsonString: string,
): SafeParseResult<OutputInfluxdbOauthParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputInfluxdbOauthParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputInfluxdbOauthParam' from JSON`,
  );
}

/** @internal */
export const OutputInfluxdbOauthHeader$inboundSchema: z.ZodType<
  OutputInfluxdbOauthHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type OutputInfluxdbOauthHeader$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputInfluxdbOauthHeader$outboundSchema: z.ZodType<
  OutputInfluxdbOauthHeader$Outbound,
  z.ZodTypeDef,
  OutputInfluxdbOauthHeader
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdbOauthHeader$ {
  /** @deprecated use `OutputInfluxdbOauthHeader$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdbOauthHeader$inboundSchema;
  /** @deprecated use `OutputInfluxdbOauthHeader$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdbOauthHeader$outboundSchema;
  /** @deprecated use `OutputInfluxdbOauthHeader$Outbound` instead. */
  export type Outbound = OutputInfluxdbOauthHeader$Outbound;
}

export function outputInfluxdbOauthHeaderToJSON(
  outputInfluxdbOauthHeader: OutputInfluxdbOauthHeader,
): string {
  return JSON.stringify(
    OutputInfluxdbOauthHeader$outboundSchema.parse(outputInfluxdbOauthHeader),
  );
}

export function outputInfluxdbOauthHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputInfluxdbOauthHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputInfluxdbOauthHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputInfluxdbOauthHeader' from JSON`,
  );
}

/** @internal */
export const OutputInfluxdb$inboundSchema: z.ZodType<
  OutputInfluxdb,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputInfluxdbType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  useV2API: z.boolean().default(false),
  timestampPrecision: TimestampPrecision$inboundSchema.default("ms"),
  dynamicValueFieldName: z.boolean().default(true),
  valueFieldName: z.string().default("value"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputInfluxdbExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode: OutputInfluxdbFailedRequestLoggingMode$inboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputInfluxdbResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputInfluxdbTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputInfluxdbBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  authType: OutputInfluxdbAuthenticationType$inboundSchema.default("none"),
  description: z.string().optional(),
  database: z.string().optional(),
  bucket: z.string().optional(),
  org: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputInfluxdbCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputInfluxdbQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputInfluxdbMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputInfluxdbPqControls$inboundSchema).optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => OutputInfluxdbOauthParam$inboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => OutputInfluxdbOauthHeader$inboundSchema))
    .optional(),
});

/** @internal */
export type OutputInfluxdb$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  url: string;
  useV2API: boolean;
  timestampPrecision: string;
  dynamicValueFieldName: boolean;
  valueFieldName: string;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputInfluxdbExtraHttpHeader$Outbound> | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputInfluxdbResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputInfluxdbTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  authType: string;
  description?: string | undefined;
  database?: string | undefined;
  bucket?: string | undefined;
  org?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputInfluxdbPqControls$Outbound | undefined;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<OutputInfluxdbOauthParam$Outbound> | undefined;
  oauthHeaders?: Array<OutputInfluxdbOauthHeader$Outbound> | undefined;
};

/** @internal */
export const OutputInfluxdb$outboundSchema: z.ZodType<
  OutputInfluxdb$Outbound,
  z.ZodTypeDef,
  OutputInfluxdb
> = z.object({
  id: z.string().optional(),
  type: OutputInfluxdbType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  useV2API: z.boolean().default(false),
  timestampPrecision: TimestampPrecision$outboundSchema.default("ms"),
  dynamicValueFieldName: z.boolean().default(true),
  valueFieldName: z.string().default("value"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputInfluxdbExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputInfluxdbFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputInfluxdbResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputInfluxdbTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputInfluxdbBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  authType: OutputInfluxdbAuthenticationType$outboundSchema.default("none"),
  description: z.string().optional(),
  database: z.string().optional(),
  bucket: z.string().optional(),
  org: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputInfluxdbCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputInfluxdbQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputInfluxdbMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputInfluxdbPqControls$outboundSchema).optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => OutputInfluxdbOauthParam$outboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => OutputInfluxdbOauthHeader$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputInfluxdb$ {
  /** @deprecated use `OutputInfluxdb$inboundSchema` instead. */
  export const inboundSchema = OutputInfluxdb$inboundSchema;
  /** @deprecated use `OutputInfluxdb$outboundSchema` instead. */
  export const outboundSchema = OutputInfluxdb$outboundSchema;
  /** @deprecated use `OutputInfluxdb$Outbound` instead. */
  export type Outbound = OutputInfluxdb$Outbound;
}

export function outputInfluxdbToJSON(outputInfluxdb: OutputInfluxdb): string {
  return JSON.stringify(OutputInfluxdb$outboundSchema.parse(outputInfluxdb));
}

export function outputInfluxdbFromJSON(
  jsonString: string,
): SafeParseResult<OutputInfluxdb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputInfluxdb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputInfluxdb' from JSON`,
  );
}
