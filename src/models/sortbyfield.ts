/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Direction = {
  Ascending: "ascending",
  Descending: "descending",
} as const;
export type Direction = OpenEnum<typeof Direction>;

export const NullPosition = {
  NullsFirst: "nullsFirst",
  NullsLast: "nullsLast",
} as const;
export type NullPosition = OpenEnum<typeof NullPosition>;

export type SortByField = {
  direction: Direction;
  fieldName: string;
  nullPosition: NullPosition;
};

/** @internal */
export const Direction$inboundSchema: z.ZodType<
  Direction,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Direction),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Direction$outboundSchema: z.ZodType<
  Direction,
  z.ZodTypeDef,
  Direction
> = z.union([
  z.nativeEnum(Direction),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const NullPosition$inboundSchema: z.ZodType<
  NullPosition,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(NullPosition),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const NullPosition$outboundSchema: z.ZodType<
  NullPosition,
  z.ZodTypeDef,
  NullPosition
> = z.union([
  z.nativeEnum(NullPosition),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullPosition$ {
  /** @deprecated use `NullPosition$inboundSchema` instead. */
  export const inboundSchema = NullPosition$inboundSchema;
  /** @deprecated use `NullPosition$outboundSchema` instead. */
  export const outboundSchema = NullPosition$outboundSchema;
}

/** @internal */
export const SortByField$inboundSchema: z.ZodType<
  SortByField,
  z.ZodTypeDef,
  unknown
> = z.object({
  direction: Direction$inboundSchema,
  fieldName: z.string(),
  nullPosition: NullPosition$inboundSchema,
});

/** @internal */
export type SortByField$Outbound = {
  direction: string;
  fieldName: string;
  nullPosition: string;
};

/** @internal */
export const SortByField$outboundSchema: z.ZodType<
  SortByField$Outbound,
  z.ZodTypeDef,
  SortByField
> = z.object({
  direction: Direction$outboundSchema,
  fieldName: z.string(),
  nullPosition: NullPosition$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortByField$ {
  /** @deprecated use `SortByField$inboundSchema` instead. */
  export const inboundSchema = SortByField$inboundSchema;
  /** @deprecated use `SortByField$outboundSchema` instead. */
  export const outboundSchema = SortByField$outboundSchema;
  /** @deprecated use `SortByField$Outbound` instead. */
  export type Outbound = SortByField$Outbound;
}

export function sortByFieldToJSON(sortByField: SortByField): string {
  return JSON.stringify(SortByField$outboundSchema.parse(sortByField));
}

export function sortByFieldFromJSON(
  jsonString: string,
): SafeParseResult<SortByField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SortByField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SortByField' from JSON`,
  );
}
