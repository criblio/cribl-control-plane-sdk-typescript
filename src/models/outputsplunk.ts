/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSplunkType = {
  Splunk: "splunk",
} as const;
export type OutputSplunkType = ClosedEnum<typeof OutputSplunkType>;

/**
 * How to serialize nested fields into index-time fields
 */
export const OutputSplunkNestedFieldSerialization = {
  /**
   * JSON
   */
  Json: "json",
  /**
   * None
   */
  None: "none",
} as const;
/**
 * How to serialize nested fields into index-time fields
 */
export type OutputSplunkNestedFieldSerialization = OpenEnum<
  typeof OutputSplunkNestedFieldSerialization
>;

export const OutputSplunkMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputSplunkMinimumTLSVersion = OpenEnum<
  typeof OutputSplunkMinimumTLSVersion
>;

export const OutputSplunkMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputSplunkMaximumTLSVersion = OpenEnum<
  typeof OutputSplunkMaximumTLSVersion
>;

export type OutputSplunkTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Reject certificates that are not authorized by a CA in the CA certificate path, or by another
   *
   * @remarks
   *                     trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: OutputSplunkMinimumTLSVersion | undefined;
  maxVersion?: OutputSplunkMaximumTLSVersion | undefined;
};

/**
 * The highest S2S protocol version to advertise during handshake
 */
export const OutputSplunkMaxS2SVersion = {
  V3: "v3",
  V4: "v4",
} as const;
/**
 * The highest S2S protocol version to advertise during handshake
 */
export type OutputSplunkMaxS2SVersion = OpenEnum<
  typeof OutputSplunkMaxS2SVersion
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSplunkBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSplunkBackpressureBehavior = OpenEnum<
  typeof OutputSplunkBackpressureBehavior
>;

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const OutputSplunkAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type OutputSplunkAuthenticationMethod = OpenEnum<
  typeof OutputSplunkAuthenticationMethod
>;

/**
 * Controls whether the sender should send compressed data to the server. Select 'Disabled' to reject compressed connections or 'Always' to ignore server's configuration and send compressed data.
 */
export const OutputSplunkCompressCompression = {
  /**
   * Disabled
   */
  Disabled: "disabled",
  /**
   * Automatic
   */
  Auto: "auto",
  /**
   * Always
   */
  Always: "always",
} as const;
/**
 * Controls whether the sender should send compressed data to the server. Select 'Disabled' to reject compressed connections or 'Always' to ignore server's configuration and send compressed data.
 */
export type OutputSplunkCompressCompression = OpenEnum<
  typeof OutputSplunkCompressCompression
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputSplunkPqCompressCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputSplunkPqCompressCompression = OpenEnum<
  typeof OutputSplunkPqCompressCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputSplunkQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputSplunkQueueFullBehavior = OpenEnum<
  typeof OutputSplunkQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputSplunkMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Backpressure: "backpressure",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputSplunkMode = OpenEnum<typeof OutputSplunkMode>;

export type OutputSplunkPqControls = {};

export type OutputSplunk = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSplunkType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The hostname of the receiver
   */
  host: string;
  /**
   * The port to connect to on the provided host
   */
  port?: number | undefined;
  /**
   * How to serialize nested fields into index-time fields
   */
  nestedFields?: OutputSplunkNestedFieldSerialization | undefined;
  /**
   * Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
   */
  throttleRatePerSec?: string | undefined;
  /**
   * Amount of time (milliseconds) to wait for the connection to establish before retrying
   */
  connectionTimeout?: number | undefined;
  /**
   * Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
   */
  writeTimeout?: number | undefined;
  tls?: OutputSplunkTLSSettingsClientSide | undefined;
  /**
   * Output metrics in multiple-metric format in a single event. Supported in Splunk 8.0 and above.
   */
  enableMultiMetrics?: boolean | undefined;
  /**
   * Check if indexer is shutting down and stop sending data. This helps minimize data loss during shutdown.
   */
  enableACK?: boolean | undefined;
  /**
   * Use to troubleshoot issues with sending data
   */
  logFailedRequests?: boolean | undefined;
  /**
   * The highest S2S protocol version to advertise during handshake
   */
  maxS2Sversion?: OutputSplunkMaxS2SVersion | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSplunkBackpressureBehavior | undefined;
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: OutputSplunkAuthenticationMethod | undefined;
  description?: string | undefined;
  /**
   * Maximum number of times healthcheck can fail before we close connection. If set to 0 (disabled), and the connection to Splunk is forcibly closed, some data loss might occur.
   */
  maxFailedHealthChecks?: number | undefined;
  /**
   * Controls whether the sender should send compressed data to the server. Select 'Disabled' to reject compressed connections or 'Always' to ignore server's configuration and send compressed data.
   */
  compress?: OutputSplunkCompressCompression | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputSplunkPqCompressCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputSplunkQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputSplunkMode | undefined;
  pqControls?: OutputSplunkPqControls | undefined;
  /**
   * Shared secret token to use when establishing a connection to a Splunk indexer.
   */
  authToken?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
};

/** @internal */
export const OutputSplunkType$inboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkType
> = z.nativeEnum(OutputSplunkType);

/** @internal */
export const OutputSplunkType$outboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkType
> = OutputSplunkType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkType$ {
  /** @deprecated use `OutputSplunkType$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkType$inboundSchema;
  /** @deprecated use `OutputSplunkType$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkType$outboundSchema;
}

/** @internal */
export const OutputSplunkNestedFieldSerialization$inboundSchema: z.ZodType<
  OutputSplunkNestedFieldSerialization,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkNestedFieldSerialization),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkNestedFieldSerialization$outboundSchema: z.ZodType<
  OutputSplunkNestedFieldSerialization,
  z.ZodTypeDef,
  OutputSplunkNestedFieldSerialization
> = z.union([
  z.nativeEnum(OutputSplunkNestedFieldSerialization),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkNestedFieldSerialization$ {
  /** @deprecated use `OutputSplunkNestedFieldSerialization$inboundSchema` instead. */
  export const inboundSchema =
    OutputSplunkNestedFieldSerialization$inboundSchema;
  /** @deprecated use `OutputSplunkNestedFieldSerialization$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkNestedFieldSerialization$outboundSchema;
}

/** @internal */
export const OutputSplunkMinimumTLSVersion$inboundSchema: z.ZodType<
  OutputSplunkMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkMinimumTLSVersion$outboundSchema: z.ZodType<
  OutputSplunkMinimumTLSVersion,
  z.ZodTypeDef,
  OutputSplunkMinimumTLSVersion
> = z.union([
  z.nativeEnum(OutputSplunkMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkMinimumTLSVersion$ {
  /** @deprecated use `OutputSplunkMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkMinimumTLSVersion$inboundSchema;
  /** @deprecated use `OutputSplunkMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputSplunkMaximumTLSVersion$inboundSchema: z.ZodType<
  OutputSplunkMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkMaximumTLSVersion$outboundSchema: z.ZodType<
  OutputSplunkMaximumTLSVersion,
  z.ZodTypeDef,
  OutputSplunkMaximumTLSVersion
> = z.union([
  z.nativeEnum(OutputSplunkMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkMaximumTLSVersion$ {
  /** @deprecated use `OutputSplunkMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkMaximumTLSVersion$inboundSchema;
  /** @deprecated use `OutputSplunkMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputSplunkTLSSettingsClientSide$inboundSchema: z.ZodType<
  OutputSplunkTLSSettingsClientSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputSplunkMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: OutputSplunkMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type OutputSplunkTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const OutputSplunkTLSSettingsClientSide$outboundSchema: z.ZodType<
  OutputSplunkTLSSettingsClientSide$Outbound,
  z.ZodTypeDef,
  OutputSplunkTLSSettingsClientSide
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputSplunkMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: OutputSplunkMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkTLSSettingsClientSide$ {
  /** @deprecated use `OutputSplunkTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `OutputSplunkTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `OutputSplunkTLSSettingsClientSide$Outbound` instead. */
  export type Outbound = OutputSplunkTLSSettingsClientSide$Outbound;
}

export function outputSplunkTLSSettingsClientSideToJSON(
  outputSplunkTLSSettingsClientSide: OutputSplunkTLSSettingsClientSide,
): string {
  return JSON.stringify(
    OutputSplunkTLSSettingsClientSide$outboundSchema.parse(
      outputSplunkTLSSettingsClientSide,
    ),
  );
}

export function outputSplunkTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkTLSSettingsClientSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkTLSSettingsClientSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const OutputSplunkMaxS2SVersion$inboundSchema: z.ZodType<
  OutputSplunkMaxS2SVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkMaxS2SVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkMaxS2SVersion$outboundSchema: z.ZodType<
  OutputSplunkMaxS2SVersion,
  z.ZodTypeDef,
  OutputSplunkMaxS2SVersion
> = z.union([
  z.nativeEnum(OutputSplunkMaxS2SVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkMaxS2SVersion$ {
  /** @deprecated use `OutputSplunkMaxS2SVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkMaxS2SVersion$inboundSchema;
  /** @deprecated use `OutputSplunkMaxS2SVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkMaxS2SVersion$outboundSchema;
}

/** @internal */
export const OutputSplunkBackpressureBehavior$inboundSchema: z.ZodType<
  OutputSplunkBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkBackpressureBehavior$outboundSchema: z.ZodType<
  OutputSplunkBackpressureBehavior,
  z.ZodTypeDef,
  OutputSplunkBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputSplunkBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkBackpressureBehavior$ {
  /** @deprecated use `OutputSplunkBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSplunkBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputSplunkAuthenticationMethod$inboundSchema: z.ZodType<
  OutputSplunkAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkAuthenticationMethod$outboundSchema: z.ZodType<
  OutputSplunkAuthenticationMethod,
  z.ZodTypeDef,
  OutputSplunkAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputSplunkAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkAuthenticationMethod$ {
  /** @deprecated use `OutputSplunkAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputSplunkAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputSplunkCompressCompression$inboundSchema: z.ZodType<
  OutputSplunkCompressCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkCompressCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkCompressCompression$outboundSchema: z.ZodType<
  OutputSplunkCompressCompression,
  z.ZodTypeDef,
  OutputSplunkCompressCompression
> = z.union([
  z.nativeEnum(OutputSplunkCompressCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkCompressCompression$ {
  /** @deprecated use `OutputSplunkCompressCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkCompressCompression$inboundSchema;
  /** @deprecated use `OutputSplunkCompressCompression$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkCompressCompression$outboundSchema;
}

/** @internal */
export const OutputSplunkPqCompressCompression$inboundSchema: z.ZodType<
  OutputSplunkPqCompressCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkPqCompressCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkPqCompressCompression$outboundSchema: z.ZodType<
  OutputSplunkPqCompressCompression,
  z.ZodTypeDef,
  OutputSplunkPqCompressCompression
> = z.union([
  z.nativeEnum(OutputSplunkPqCompressCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkPqCompressCompression$ {
  /** @deprecated use `OutputSplunkPqCompressCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkPqCompressCompression$inboundSchema;
  /** @deprecated use `OutputSplunkPqCompressCompression$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkPqCompressCompression$outboundSchema;
}

/** @internal */
export const OutputSplunkQueueFullBehavior$inboundSchema: z.ZodType<
  OutputSplunkQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkQueueFullBehavior$outboundSchema: z.ZodType<
  OutputSplunkQueueFullBehavior,
  z.ZodTypeDef,
  OutputSplunkQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputSplunkQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkQueueFullBehavior$ {
  /** @deprecated use `OutputSplunkQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputSplunkQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputSplunkMode$inboundSchema: z.ZodType<
  OutputSplunkMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkMode$outboundSchema: z.ZodType<
  OutputSplunkMode,
  z.ZodTypeDef,
  OutputSplunkMode
> = z.union([
  z.nativeEnum(OutputSplunkMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkMode$ {
  /** @deprecated use `OutputSplunkMode$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkMode$inboundSchema;
  /** @deprecated use `OutputSplunkMode$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkMode$outboundSchema;
}

/** @internal */
export const OutputSplunkPqControls$inboundSchema: z.ZodType<
  OutputSplunkPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSplunkPqControls$Outbound = {};

/** @internal */
export const OutputSplunkPqControls$outboundSchema: z.ZodType<
  OutputSplunkPqControls$Outbound,
  z.ZodTypeDef,
  OutputSplunkPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkPqControls$ {
  /** @deprecated use `OutputSplunkPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkPqControls$inboundSchema;
  /** @deprecated use `OutputSplunkPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkPqControls$outboundSchema;
  /** @deprecated use `OutputSplunkPqControls$Outbound` instead. */
  export type Outbound = OutputSplunkPqControls$Outbound;
}

export function outputSplunkPqControlsToJSON(
  outputSplunkPqControls: OutputSplunkPqControls,
): string {
  return JSON.stringify(
    OutputSplunkPqControls$outboundSchema.parse(outputSplunkPqControls),
  );
}

export function outputSplunkPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkPqControls' from JSON`,
  );
}

/** @internal */
export const OutputSplunk$inboundSchema: z.ZodType<
  OutputSplunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSplunkType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  host: z.string(),
  port: z.number().default(9997),
  nestedFields: OutputSplunkNestedFieldSerialization$inboundSchema.default(
    "none",
  ),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  tls: z.lazy(() => OutputSplunkTLSSettingsClientSide$inboundSchema).optional(),
  enableMultiMetrics: z.boolean().default(false),
  enableACK: z.boolean().default(true),
  logFailedRequests: z.boolean().default(false),
  maxS2Sversion: OutputSplunkMaxS2SVersion$inboundSchema.default("v3"),
  onBackpressure: OutputSplunkBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  authType: OutputSplunkAuthenticationMethod$inboundSchema.default("manual"),
  description: z.string().optional(),
  maxFailedHealthChecks: z.number().default(1),
  compress: OutputSplunkCompressCompression$inboundSchema.default("disabled"),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSplunkPqCompressCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputSplunkQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputSplunkMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSplunkPqControls$inboundSchema).optional(),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/** @internal */
export type OutputSplunk$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  host: string;
  port: number;
  nestedFields: string;
  throttleRatePerSec: string;
  connectionTimeout: number;
  writeTimeout: number;
  tls?: OutputSplunkTLSSettingsClientSide$Outbound | undefined;
  enableMultiMetrics: boolean;
  enableACK: boolean;
  logFailedRequests: boolean;
  maxS2Sversion: string;
  onBackpressure: string;
  authType: string;
  description?: string | undefined;
  maxFailedHealthChecks: number;
  compress: string;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputSplunkPqControls$Outbound | undefined;
  authToken: string;
  textSecret?: string | undefined;
};

/** @internal */
export const OutputSplunk$outboundSchema: z.ZodType<
  OutputSplunk$Outbound,
  z.ZodTypeDef,
  OutputSplunk
> = z.object({
  id: z.string().optional(),
  type: OutputSplunkType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  host: z.string(),
  port: z.number().default(9997),
  nestedFields: OutputSplunkNestedFieldSerialization$outboundSchema.default(
    "none",
  ),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  tls: z.lazy(() => OutputSplunkTLSSettingsClientSide$outboundSchema)
    .optional(),
  enableMultiMetrics: z.boolean().default(false),
  enableACK: z.boolean().default(true),
  logFailedRequests: z.boolean().default(false),
  maxS2Sversion: OutputSplunkMaxS2SVersion$outboundSchema.default("v3"),
  onBackpressure: OutputSplunkBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  authType: OutputSplunkAuthenticationMethod$outboundSchema.default("manual"),
  description: z.string().optional(),
  maxFailedHealthChecks: z.number().default(1),
  compress: OutputSplunkCompressCompression$outboundSchema.default("disabled"),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSplunkPqCompressCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputSplunkQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputSplunkMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSplunkPqControls$outboundSchema).optional(),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunk$ {
  /** @deprecated use `OutputSplunk$inboundSchema` instead. */
  export const inboundSchema = OutputSplunk$inboundSchema;
  /** @deprecated use `OutputSplunk$outboundSchema` instead. */
  export const outboundSchema = OutputSplunk$outboundSchema;
  /** @deprecated use `OutputSplunk$Outbound` instead. */
  export type Outbound = OutputSplunk$Outbound;
}

export function outputSplunkToJSON(outputSplunk: OutputSplunk): string {
  return JSON.stringify(OutputSplunk$outboundSchema.parse(outputSplunk));
}

export function outputSplunkFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunk' from JSON`,
  );
}
