/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RedisCacheLimits = {
  clientTrackingMechanism?: string | undefined;
  enableServerAssist?: boolean | undefined;
  keyTTLSecs?: number | undefined;
  maxCacheSize?: number | undefined;
  maxNumKeys?: number | undefined;
  servicePeriodSecs?: number | undefined;
};

/** @internal */
export const RedisCacheLimits$inboundSchema: z.ZodType<
  RedisCacheLimits,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientTrackingMechanism: z.string().optional(),
  enableServerAssist: z.boolean().optional(),
  keyTTLSecs: z.number().optional(),
  maxCacheSize: z.number().optional(),
  maxNumKeys: z.number().optional(),
  servicePeriodSecs: z.number().optional(),
});

/** @internal */
export type RedisCacheLimits$Outbound = {
  clientTrackingMechanism?: string | undefined;
  enableServerAssist?: boolean | undefined;
  keyTTLSecs?: number | undefined;
  maxCacheSize?: number | undefined;
  maxNumKeys?: number | undefined;
  servicePeriodSecs?: number | undefined;
};

/** @internal */
export const RedisCacheLimits$outboundSchema: z.ZodType<
  RedisCacheLimits$Outbound,
  z.ZodTypeDef,
  RedisCacheLimits
> = z.object({
  clientTrackingMechanism: z.string().optional(),
  enableServerAssist: z.boolean().optional(),
  keyTTLSecs: z.number().optional(),
  maxCacheSize: z.number().optional(),
  maxNumKeys: z.number().optional(),
  servicePeriodSecs: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisCacheLimits$ {
  /** @deprecated use `RedisCacheLimits$inboundSchema` instead. */
  export const inboundSchema = RedisCacheLimits$inboundSchema;
  /** @deprecated use `RedisCacheLimits$outboundSchema` instead. */
  export const outboundSchema = RedisCacheLimits$outboundSchema;
  /** @deprecated use `RedisCacheLimits$Outbound` instead. */
  export type Outbound = RedisCacheLimits$Outbound;
}

export function redisCacheLimitsToJSON(
  redisCacheLimits: RedisCacheLimits,
): string {
  return JSON.stringify(
    RedisCacheLimits$outboundSchema.parse(redisCacheLimits),
  );
}

export function redisCacheLimitsFromJSON(
  jsonString: string,
): SafeParseResult<RedisCacheLimits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisCacheLimits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisCacheLimits' from JSON`,
  );
}
