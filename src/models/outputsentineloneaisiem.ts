/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSentinelOneAiSiemType = {
  SentinelOneAiSiem: "sentinel_one_ai_siem",
} as const;
export type OutputSentinelOneAiSiemType = ClosedEnum<
  typeof OutputSentinelOneAiSiemType
>;

/**
 * The SentinelOne region to send events to. In most cases you can find the region by either looking at your SentinelOne URL or knowing what geographic region your SentinelOne instance is contained in.
 */
export const OutputSentinelOneAiSiemRegion = {
  Us: "US",
  Ca: "CA",
  Emea: "EMEA",
  Ap: "AP",
  Aps: "APS",
  Au: "AU",
  Custom: "Custom",
} as const;
/**
 * The SentinelOne region to send events to. In most cases you can find the region by either looking at your SentinelOne URL or knowing what geographic region your SentinelOne instance is contained in.
 */
export type OutputSentinelOneAiSiemRegion = OpenEnum<
  typeof OutputSentinelOneAiSiemRegion
>;

/**
 * Endpoint to send events to. Use /services/collector/event for structured JSON payloads with standard HEC top-level fields. Use /services/collector/raw for unstructured log lines (plain text).
 */
export const AISIEMEndpointPath = {
  RootServicesCollectorEvent: "/services/collector/event",
  RootServicesCollectorRaw: "/services/collector/raw",
} as const;
/**
 * Endpoint to send events to. Use /services/collector/event for structured JSON payloads with standard HEC top-level fields. Use /services/collector/raw for unstructured log lines (plain text).
 */
export type AISIEMEndpointPath = OpenEnum<typeof AISIEMEndpointPath>;

export type OutputSentinelOneAiSiemExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputSentinelOneAiSiemFailedRequestLoggingMode = {
  /**
   * Payload
   */
  Payload: "payload",
  /**
   * Payload + Headers
   */
  PayloadAndHeaders: "payloadAndHeaders",
  /**
   * None
   */
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputSentinelOneAiSiemFailedRequestLoggingMode = OpenEnum<
  typeof OutputSentinelOneAiSiemFailedRequestLoggingMode
>;

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const OutputSentinelOneAiSiemAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type OutputSentinelOneAiSiemAuthenticationMethod = OpenEnum<
  typeof OutputSentinelOneAiSiemAuthenticationMethod
>;

export type OutputSentinelOneAiSiemResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputSentinelOneAiSiemTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSentinelOneAiSiemBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSentinelOneAiSiemBackpressureBehavior = OpenEnum<
  typeof OutputSentinelOneAiSiemBackpressureBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputSentinelOneAiSiemMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Always: "always",
  /**
   * Always On
   */
  Backpressure: "backpressure",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputSentinelOneAiSiemMode = OpenEnum<
  typeof OutputSentinelOneAiSiemMode
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputSentinelOneAiSiemCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputSentinelOneAiSiemCompression = OpenEnum<
  typeof OutputSentinelOneAiSiemCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputSentinelOneAiSiemQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputSentinelOneAiSiemQueueFullBehavior = OpenEnum<
  typeof OutputSentinelOneAiSiemQueueFullBehavior
>;

export type OutputSentinelOneAiSiemPqControls = {};

export type OutputSentinelOneAiSiem = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSentinelOneAiSiemType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The SentinelOne region to send events to. In most cases you can find the region by either looking at your SentinelOne URL or knowing what geographic region your SentinelOne instance is contained in.
   */
  region?: OutputSentinelOneAiSiemRegion | undefined;
  /**
   * Endpoint to send events to. Use /services/collector/event for structured JSON payloads with standard HEC top-level fields. Use /services/collector/raw for unstructured log lines (plain text).
   */
  endpoint?: AISIEMEndpointPath | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputSentinelOneAiSiemExtraHttpHeader> | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputSentinelOneAiSiemFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: OutputSentinelOneAiSiemAuthenticationMethod | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputSentinelOneAiSiemResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?:
    | OutputSentinelOneAiSiemTimeoutRetrySettings
    | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSentinelOneAiSiemBackpressureBehavior | undefined;
  description?: string | undefined;
  /**
   * In the SentinelOne Console select Policy & Settings then select the Singularity AI SIEM section, API Keys will be at the bottom. Under Log Access Keys select a Write token and copy it here
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * Base URL of the endpoint used to send events to, such as https://<Your-S1-Tenant>.sentinelone.net. Must begin with http:// or https://, can include a port number, and no trailing slashes. Matches pattern: ^https?://[a-zA-Z0-9.-]+(:[0-9]+)?$.
   */
  baseUrl?: string | undefined;
  /**
   * Define serverHost for events using a JavaScript expression. You must enclose text constants in quotes (such as, 'myServer').
   */
  hostExpression?: string | undefined;
  /**
   * Define logFile for events using a JavaScript expression. You must enclose text constants in quotes (such as, 'myLogFile.txt').
   */
  sourceExpression?: string | undefined;
  /**
   * Define the parser for events using a JavaScript expression. This value helps parse data into AI SIEM. You must enclose text constants in quotes (such as, 'dottedJson'). For custom parsers, substitute 'dottedJson' with your parser's name.
   */
  sourceTypeExpression?: string | undefined;
  /**
   * Define the dataSource.category for events using a JavaScript expression. This value helps categorize data and helps enable extra features in SentinelOne AI SIEM. You must enclose text constants in quotes. The default value is 'security'.
   */
  dataSourceCategoryExpression?: string | undefined;
  /**
   * Define the dataSource.name for events using a JavaScript expression. This value should reflect the type of data being inserted into AI SIEM. You must enclose text constants in quotes (such as, 'networkActivity' or 'authLogs').
   */
  dataSourceNameExpression?: string | undefined;
  /**
   * Define the dataSource.vendor for events using a JavaScript expression. This value should reflect the vendor of the data being inserted into AI SIEM. You must enclose text constants in quotes (such as, 'Cisco' or 'Microsoft').
   */
  dataSourceVendorExpression?: string | undefined;
  /**
   * Optionally, define the event.type for events using a JavaScript expression. This value acts as a label, grouping events into meaningful categories. You must enclose text constants in quotes (such as, 'Process Creation' or 'Network Connection').
   */
  eventTypeExpression?: string | undefined;
  /**
   * Define the serverHost for events using a JavaScript expression. This value will be passed to AI SIEM. You must enclose text constants in quotes (such as, 'myServerName').
   */
  host?: string | undefined;
  /**
   * Specify the logFile value to pass as a parameter to SentinelOne AI SIEM. Don't quote this value. The default is cribl.
   */
  source?: string | undefined;
  /**
   * Specify the sourcetype parameter for SentinelOne AI SIEM, which determines the parser. Don't quote this value. For custom parsers, substitute hecRawParser with your parser's name. The default is hecRawParser.
   */
  sourceType?: string | undefined;
  /**
   * Specify the dataSource.category value to pass as a parameter to SentinelOne AI SIEM. This value helps categorize data and enables additional features. Don't quote this value. The default is security.
   */
  dataSourceCategory?: string | undefined;
  /**
   * Specify the dataSource.name value to pass as a parameter to AI SIEM. This value should reflect the type of data being inserted. Don't quote this value. The default is cribl.
   */
  dataSourceName?: string | undefined;
  /**
   * Specify the dataSource.vendorvalue to pass as a parameter to AI SIEM. This value should reflect the vendor of the data being inserted. Don't quote this value. The default is cribl.
   */
  dataSourceVendor?: string | undefined;
  /**
   * Specify the event.type value to pass as an optional parameter to AI SIEM. This value acts as a label, grouping events into meaningful categories like Process Creation, File Modification, or Network Connection. Don't quote this value. By default, this field is empty.
   */
  eventType?: string | undefined;
  /**
   * Use FIFO (first in, first out) processing. Disable to forward new events to receivers before queue is flushed.
   */
  pqStrictOrdering?: boolean | undefined;
  /**
   * Throttling rate (in events per second) to impose while writing to Destinations from PQ. Defaults to 0, which disables throttling.
   */
  pqRatePerSec?: number | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputSentinelOneAiSiemMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  pqMaxBufferSize?: number | undefined;
  /**
   * How long (in seconds) to wait for backpressure to resolve before engaging the queue
   */
  pqMaxBackpressureSec?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputSentinelOneAiSiemCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputSentinelOneAiSiemQueueFullBehavior | undefined;
  pqControls?: OutputSentinelOneAiSiemPqControls | undefined;
};

/** @internal */
export const OutputSentinelOneAiSiemType$inboundSchema: z.ZodNativeEnum<
  typeof OutputSentinelOneAiSiemType
> = z.nativeEnum(OutputSentinelOneAiSiemType);

/** @internal */
export const OutputSentinelOneAiSiemType$outboundSchema: z.ZodNativeEnum<
  typeof OutputSentinelOneAiSiemType
> = OutputSentinelOneAiSiemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemType$ {
  /** @deprecated use `OutputSentinelOneAiSiemType$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelOneAiSiemType$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemType$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelOneAiSiemType$outboundSchema;
}

/** @internal */
export const OutputSentinelOneAiSiemRegion$inboundSchema: z.ZodType<
  OutputSentinelOneAiSiemRegion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelOneAiSiemRegion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelOneAiSiemRegion$outboundSchema: z.ZodType<
  OutputSentinelOneAiSiemRegion,
  z.ZodTypeDef,
  OutputSentinelOneAiSiemRegion
> = z.union([
  z.nativeEnum(OutputSentinelOneAiSiemRegion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemRegion$ {
  /** @deprecated use `OutputSentinelOneAiSiemRegion$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelOneAiSiemRegion$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemRegion$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelOneAiSiemRegion$outboundSchema;
}

/** @internal */
export const AISIEMEndpointPath$inboundSchema: z.ZodType<
  AISIEMEndpointPath,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AISIEMEndpointPath),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AISIEMEndpointPath$outboundSchema: z.ZodType<
  AISIEMEndpointPath,
  z.ZodTypeDef,
  AISIEMEndpointPath
> = z.union([
  z.nativeEnum(AISIEMEndpointPath),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AISIEMEndpointPath$ {
  /** @deprecated use `AISIEMEndpointPath$inboundSchema` instead. */
  export const inboundSchema = AISIEMEndpointPath$inboundSchema;
  /** @deprecated use `AISIEMEndpointPath$outboundSchema` instead. */
  export const outboundSchema = AISIEMEndpointPath$outboundSchema;
}

/** @internal */
export const OutputSentinelOneAiSiemExtraHttpHeader$inboundSchema: z.ZodType<
  OutputSentinelOneAiSiemExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputSentinelOneAiSiemExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputSentinelOneAiSiemExtraHttpHeader$outboundSchema: z.ZodType<
  OutputSentinelOneAiSiemExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputSentinelOneAiSiemExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemExtraHttpHeader$ {
  /** @deprecated use `OutputSentinelOneAiSiemExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema =
    OutputSentinelOneAiSiemExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelOneAiSiemExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputSentinelOneAiSiemExtraHttpHeader$Outbound;
}

export function outputSentinelOneAiSiemExtraHttpHeaderToJSON(
  outputSentinelOneAiSiemExtraHttpHeader:
    OutputSentinelOneAiSiemExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputSentinelOneAiSiemExtraHttpHeader$outboundSchema.parse(
      outputSentinelOneAiSiemExtraHttpHeader,
    ),
  );
}

export function outputSentinelOneAiSiemExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputSentinelOneAiSiemExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSentinelOneAiSiemExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSentinelOneAiSiemExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputSentinelOneAiSiemFailedRequestLoggingMode$inboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemFailedRequestLoggingMode,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputSentinelOneAiSiemFailedRequestLoggingMode),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputSentinelOneAiSiemFailedRequestLoggingMode$outboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemFailedRequestLoggingMode,
    z.ZodTypeDef,
    OutputSentinelOneAiSiemFailedRequestLoggingMode
  > = z.union([
    z.nativeEnum(OutputSentinelOneAiSiemFailedRequestLoggingMode),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemFailedRequestLoggingMode$ {
  /** @deprecated use `OutputSentinelOneAiSiemFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputSentinelOneAiSiemFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelOneAiSiemFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputSentinelOneAiSiemAuthenticationMethod$inboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputSentinelOneAiSiemAuthenticationMethod),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputSentinelOneAiSiemAuthenticationMethod$outboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemAuthenticationMethod,
    z.ZodTypeDef,
    OutputSentinelOneAiSiemAuthenticationMethod
  > = z.union([
    z.nativeEnum(OutputSentinelOneAiSiemAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemAuthenticationMethod$ {
  /** @deprecated use `OutputSentinelOneAiSiemAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputSentinelOneAiSiemAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelOneAiSiemAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputSentinelOneAiSiemResponseRetrySetting$inboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemResponseRetrySetting,
    z.ZodTypeDef,
    unknown
  > = z.object({
    httpStatus: z.number(),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/** @internal */
export type OutputSentinelOneAiSiemResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputSentinelOneAiSiemResponseRetrySetting$outboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemResponseRetrySetting$Outbound,
    z.ZodTypeDef,
    OutputSentinelOneAiSiemResponseRetrySetting
  > = z.object({
    httpStatus: z.number(),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemResponseRetrySetting$ {
  /** @deprecated use `OutputSentinelOneAiSiemResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputSentinelOneAiSiemResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelOneAiSiemResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputSentinelOneAiSiemResponseRetrySetting$Outbound;
}

export function outputSentinelOneAiSiemResponseRetrySettingToJSON(
  outputSentinelOneAiSiemResponseRetrySetting:
    OutputSentinelOneAiSiemResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputSentinelOneAiSiemResponseRetrySetting$outboundSchema.parse(
      outputSentinelOneAiSiemResponseRetrySetting,
    ),
  );
}

export function outputSentinelOneAiSiemResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputSentinelOneAiSiemResponseRetrySetting,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSentinelOneAiSiemResponseRetrySetting$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputSentinelOneAiSiemResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputSentinelOneAiSiemTimeoutRetrySettings$inboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemTimeoutRetrySettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    timeoutRetry: z.boolean().default(false),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/** @internal */
export type OutputSentinelOneAiSiemTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputSentinelOneAiSiemTimeoutRetrySettings$outboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemTimeoutRetrySettings$Outbound,
    z.ZodTypeDef,
    OutputSentinelOneAiSiemTimeoutRetrySettings
  > = z.object({
    timeoutRetry: z.boolean().default(false),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemTimeoutRetrySettings$ {
  /** @deprecated use `OutputSentinelOneAiSiemTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputSentinelOneAiSiemTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelOneAiSiemTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputSentinelOneAiSiemTimeoutRetrySettings$Outbound;
}

export function outputSentinelOneAiSiemTimeoutRetrySettingsToJSON(
  outputSentinelOneAiSiemTimeoutRetrySettings:
    OutputSentinelOneAiSiemTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputSentinelOneAiSiemTimeoutRetrySettings$outboundSchema.parse(
      outputSentinelOneAiSiemTimeoutRetrySettings,
    ),
  );
}

export function outputSentinelOneAiSiemTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputSentinelOneAiSiemTimeoutRetrySettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSentinelOneAiSiemTimeoutRetrySettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputSentinelOneAiSiemTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputSentinelOneAiSiemBackpressureBehavior$inboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemBackpressureBehavior,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputSentinelOneAiSiemBackpressureBehavior),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputSentinelOneAiSiemBackpressureBehavior$outboundSchema:
  z.ZodType<
    OutputSentinelOneAiSiemBackpressureBehavior,
    z.ZodTypeDef,
    OutputSentinelOneAiSiemBackpressureBehavior
  > = z.union([
    z.nativeEnum(OutputSentinelOneAiSiemBackpressureBehavior),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemBackpressureBehavior$ {
  /** @deprecated use `OutputSentinelOneAiSiemBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputSentinelOneAiSiemBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelOneAiSiemBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputSentinelOneAiSiemMode$inboundSchema: z.ZodType<
  OutputSentinelOneAiSiemMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelOneAiSiemMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelOneAiSiemMode$outboundSchema: z.ZodType<
  OutputSentinelOneAiSiemMode,
  z.ZodTypeDef,
  OutputSentinelOneAiSiemMode
> = z.union([
  z.nativeEnum(OutputSentinelOneAiSiemMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemMode$ {
  /** @deprecated use `OutputSentinelOneAiSiemMode$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelOneAiSiemMode$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemMode$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelOneAiSiemMode$outboundSchema;
}

/** @internal */
export const OutputSentinelOneAiSiemCompression$inboundSchema: z.ZodType<
  OutputSentinelOneAiSiemCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelOneAiSiemCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelOneAiSiemCompression$outboundSchema: z.ZodType<
  OutputSentinelOneAiSiemCompression,
  z.ZodTypeDef,
  OutputSentinelOneAiSiemCompression
> = z.union([
  z.nativeEnum(OutputSentinelOneAiSiemCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemCompression$ {
  /** @deprecated use `OutputSentinelOneAiSiemCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelOneAiSiemCompression$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemCompression$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelOneAiSiemCompression$outboundSchema;
}

/** @internal */
export const OutputSentinelOneAiSiemQueueFullBehavior$inboundSchema: z.ZodType<
  OutputSentinelOneAiSiemQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelOneAiSiemQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelOneAiSiemQueueFullBehavior$outboundSchema: z.ZodType<
  OutputSentinelOneAiSiemQueueFullBehavior,
  z.ZodTypeDef,
  OutputSentinelOneAiSiemQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputSentinelOneAiSiemQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemQueueFullBehavior$ {
  /** @deprecated use `OutputSentinelOneAiSiemQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputSentinelOneAiSiemQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelOneAiSiemQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputSentinelOneAiSiemPqControls$inboundSchema: z.ZodType<
  OutputSentinelOneAiSiemPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSentinelOneAiSiemPqControls$Outbound = {};

/** @internal */
export const OutputSentinelOneAiSiemPqControls$outboundSchema: z.ZodType<
  OutputSentinelOneAiSiemPqControls$Outbound,
  z.ZodTypeDef,
  OutputSentinelOneAiSiemPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiemPqControls$ {
  /** @deprecated use `OutputSentinelOneAiSiemPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelOneAiSiemPqControls$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemPqControls$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelOneAiSiemPqControls$outboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiemPqControls$Outbound` instead. */
  export type Outbound = OutputSentinelOneAiSiemPqControls$Outbound;
}

export function outputSentinelOneAiSiemPqControlsToJSON(
  outputSentinelOneAiSiemPqControls: OutputSentinelOneAiSiemPqControls,
): string {
  return JSON.stringify(
    OutputSentinelOneAiSiemPqControls$outboundSchema.parse(
      outputSentinelOneAiSiemPqControls,
    ),
  );
}

export function outputSentinelOneAiSiemPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSentinelOneAiSiemPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSentinelOneAiSiemPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSentinelOneAiSiemPqControls' from JSON`,
  );
}

/** @internal */
export const OutputSentinelOneAiSiem$inboundSchema: z.ZodType<
  OutputSentinelOneAiSiem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSentinelOneAiSiemType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  region: OutputSentinelOneAiSiemRegion$inboundSchema.default("US"),
  endpoint: AISIEMEndpointPath$inboundSchema.default(
    "/services/collector/event",
  ),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(5120),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(5),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputSentinelOneAiSiemExtraHttpHeader$inboundSchema),
  ).optional(),
  failedRequestLoggingMode:
    OutputSentinelOneAiSiemFailedRequestLoggingMode$inboundSchema.default(
      "none",
    ),
  safeHeaders: z.array(z.string()).optional(),
  authType: OutputSentinelOneAiSiemAuthenticationMethod$inboundSchema.default(
    "manual",
  ),
  responseRetrySettings: z.array(
    z.lazy(() => OutputSentinelOneAiSiemResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputSentinelOneAiSiemTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputSentinelOneAiSiemBackpressureBehavior$inboundSchema
    .default("block"),
  description: z.string().optional(),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  baseUrl: z.string().default("https://<Your-S1-Tenant>.sentinelone.net"),
  hostExpression: z.string().default("__e.host || C.os.hostname()"),
  sourceExpression: z.string().default(
    "__e.source || (__e.__criblMetrics ? 'metrics' : 'cribl')",
  ),
  sourceTypeExpression: z.string().default("__e.sourcetype || 'dottedJson'"),
  dataSourceCategoryExpression: z.string().default("'security'"),
  dataSourceNameExpression: z.string().default(
    "__e.__dataSourceName || 'cribl'",
  ),
  dataSourceVendorExpression: z.string().default(
    "__e.__dataSourceVendor || 'cribl'",
  ),
  eventTypeExpression: z.string().default(""),
  host: z.string().default("C.os.hostname()"),
  source: z.string().default("cribl"),
  sourceType: z.string().default("hecRawParser"),
  dataSourceCategory: z.string().default("security"),
  dataSourceName: z.string().default("cribl"),
  dataSourceVendor: z.string().default("cribl"),
  eventType: z.string().default(""),
  pqStrictOrdering: z.boolean().default(true),
  pqRatePerSec: z.number().default(0),
  pqMode: OutputSentinelOneAiSiemMode$inboundSchema.default("error"),
  pqMaxBufferSize: z.number().default(42),
  pqMaxBackpressureSec: z.number().default(30),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSentinelOneAiSiemCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputSentinelOneAiSiemQueueFullBehavior$inboundSchema
    .default("block"),
  pqControls: z.lazy(() => OutputSentinelOneAiSiemPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type OutputSentinelOneAiSiem$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  region: string;
  endpoint: string;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?:
    | Array<OutputSentinelOneAiSiemExtraHttpHeader$Outbound>
    | undefined;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  authType: string;
  responseRetrySettings?:
    | Array<OutputSentinelOneAiSiemResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputSentinelOneAiSiemTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  description?: string | undefined;
  token?: string | undefined;
  textSecret?: string | undefined;
  baseUrl: string;
  hostExpression: string;
  sourceExpression: string;
  sourceTypeExpression: string;
  dataSourceCategoryExpression: string;
  dataSourceNameExpression: string;
  dataSourceVendorExpression: string;
  eventTypeExpression: string;
  host: string;
  source: string;
  sourceType: string;
  dataSourceCategory: string;
  dataSourceName: string;
  dataSourceVendor: string;
  eventType: string;
  pqStrictOrdering: boolean;
  pqRatePerSec: number;
  pqMode: string;
  pqMaxBufferSize: number;
  pqMaxBackpressureSec: number;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqControls?: OutputSentinelOneAiSiemPqControls$Outbound | undefined;
};

/** @internal */
export const OutputSentinelOneAiSiem$outboundSchema: z.ZodType<
  OutputSentinelOneAiSiem$Outbound,
  z.ZodTypeDef,
  OutputSentinelOneAiSiem
> = z.object({
  id: z.string().optional(),
  type: OutputSentinelOneAiSiemType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  region: OutputSentinelOneAiSiemRegion$outboundSchema.default("US"),
  endpoint: AISIEMEndpointPath$outboundSchema.default(
    "/services/collector/event",
  ),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(5120),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(5),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputSentinelOneAiSiemExtraHttpHeader$outboundSchema),
  ).optional(),
  failedRequestLoggingMode:
    OutputSentinelOneAiSiemFailedRequestLoggingMode$outboundSchema.default(
      "none",
    ),
  safeHeaders: z.array(z.string()).optional(),
  authType: OutputSentinelOneAiSiemAuthenticationMethod$outboundSchema.default(
    "manual",
  ),
  responseRetrySettings: z.array(
    z.lazy(() => OutputSentinelOneAiSiemResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputSentinelOneAiSiemTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputSentinelOneAiSiemBackpressureBehavior$outboundSchema
    .default("block"),
  description: z.string().optional(),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  baseUrl: z.string().default("https://<Your-S1-Tenant>.sentinelone.net"),
  hostExpression: z.string().default("__e.host || C.os.hostname()"),
  sourceExpression: z.string().default(
    "__e.source || (__e.__criblMetrics ? 'metrics' : 'cribl')",
  ),
  sourceTypeExpression: z.string().default("__e.sourcetype || 'dottedJson'"),
  dataSourceCategoryExpression: z.string().default("'security'"),
  dataSourceNameExpression: z.string().default(
    "__e.__dataSourceName || 'cribl'",
  ),
  dataSourceVendorExpression: z.string().default(
    "__e.__dataSourceVendor || 'cribl'",
  ),
  eventTypeExpression: z.string().default(""),
  host: z.string().default("C.os.hostname()"),
  source: z.string().default("cribl"),
  sourceType: z.string().default("hecRawParser"),
  dataSourceCategory: z.string().default("security"),
  dataSourceName: z.string().default("cribl"),
  dataSourceVendor: z.string().default("cribl"),
  eventType: z.string().default(""),
  pqStrictOrdering: z.boolean().default(true),
  pqRatePerSec: z.number().default(0),
  pqMode: OutputSentinelOneAiSiemMode$outboundSchema.default("error"),
  pqMaxBufferSize: z.number().default(42),
  pqMaxBackpressureSec: z.number().default(30),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSentinelOneAiSiemCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputSentinelOneAiSiemQueueFullBehavior$outboundSchema
    .default("block"),
  pqControls: z.lazy(() => OutputSentinelOneAiSiemPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelOneAiSiem$ {
  /** @deprecated use `OutputSentinelOneAiSiem$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelOneAiSiem$inboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiem$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelOneAiSiem$outboundSchema;
  /** @deprecated use `OutputSentinelOneAiSiem$Outbound` instead. */
  export type Outbound = OutputSentinelOneAiSiem$Outbound;
}

export function outputSentinelOneAiSiemToJSON(
  outputSentinelOneAiSiem: OutputSentinelOneAiSiem,
): string {
  return JSON.stringify(
    OutputSentinelOneAiSiem$outboundSchema.parse(outputSentinelOneAiSiem),
  );
}

export function outputSentinelOneAiSiemFromJSON(
  jsonString: string,
): SafeParseResult<OutputSentinelOneAiSiem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSentinelOneAiSiem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSentinelOneAiSiem' from JSON`,
  );
}
