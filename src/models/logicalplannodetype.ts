/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

export const LogicalPlanNodeType = {
  Aggregate: "aggregate",
  Dedup: "dedup",
  Distinct: "distinct",
  Extract: "extract",
  Filter: "filter",
  Limit: "limit",
  MvPull: "mv-pull",
  Noop: "noop",
  Pivot: "pivot",
  Project: "project",
  Sort: "sort",
} as const;
export type LogicalPlanNodeType = OpenEnum<typeof LogicalPlanNodeType>;

/** @internal */
export const LogicalPlanNodeType$inboundSchema: z.ZodType<
  LogicalPlanNodeType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(LogicalPlanNodeType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const LogicalPlanNodeType$outboundSchema: z.ZodType<
  LogicalPlanNodeType,
  z.ZodTypeDef,
  LogicalPlanNodeType
> = z.union([
  z.nativeEnum(LogicalPlanNodeType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogicalPlanNodeType$ {
  /** @deprecated use `LogicalPlanNodeType$inboundSchema` instead. */
  export const inboundSchema = LogicalPlanNodeType$inboundSchema;
  /** @deprecated use `LogicalPlanNodeType$outboundSchema` instead. */
  export const outboundSchema = LogicalPlanNodeType$outboundSchema;
}
