/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ColumnFilterSettings,
  ColumnFilterSettings$inboundSchema,
  ColumnFilterSettings$Outbound,
  ColumnFilterSettings$outboundSchema,
} from "./columnfiltersettings.js";
import {
  ColumnFormatSettings,
  ColumnFormatSettings$inboundSchema,
  ColumnFormatSettings$Outbound,
  ColumnFormatSettings$outboundSchema,
} from "./columnformatsettings.js";
import {
  ColumnOrderSettings,
  ColumnOrderSettings$inboundSchema,
  ColumnOrderSettings$Outbound,
  ColumnOrderSettings$outboundSchema,
} from "./columnordersettings.js";
import {
  ColumnSortSettings,
  ColumnSortSettings$inboundSchema,
  ColumnSortSettings$Outbound,
  ColumnSortSettings$outboundSchema,
} from "./columnsortsettings.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TableViewSettings = {
  columnFilterSettings?: ColumnFilterSettings | undefined;
  columnFormatSettings?: ColumnFormatSettings | undefined;
  columnOrderSettings?: ColumnOrderSettings | undefined;
  columnSortSettings?: ColumnSortSettings | undefined;
  eventDetailsPanel?: boolean | undefined;
  eventTableFields?: Array<string> | undefined;
  rowNumberColumnWidth?: number | undefined;
  showColumnTotals: boolean;
  showColumnTotalsPinned: boolean;
  showRowNumbers: boolean;
  showRowTotals: boolean;
  showRowTotalsPinned: boolean;
  wrapCells: boolean;
};

/** @internal */
export const TableViewSettings$inboundSchema: z.ZodType<
  TableViewSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  columnFilterSettings: ColumnFilterSettings$inboundSchema.optional(),
  columnFormatSettings: ColumnFormatSettings$inboundSchema.optional(),
  columnOrderSettings: ColumnOrderSettings$inboundSchema.optional(),
  columnSortSettings: ColumnSortSettings$inboundSchema.optional(),
  eventDetailsPanel: z.boolean().optional(),
  eventTableFields: z.array(z.string()).optional(),
  rowNumberColumnWidth: z.number().optional(),
  showColumnTotals: z.boolean(),
  showColumnTotalsPinned: z.boolean(),
  showRowNumbers: z.boolean(),
  showRowTotals: z.boolean(),
  showRowTotalsPinned: z.boolean(),
  wrapCells: z.boolean(),
});

/** @internal */
export type TableViewSettings$Outbound = {
  columnFilterSettings?: ColumnFilterSettings$Outbound | undefined;
  columnFormatSettings?: ColumnFormatSettings$Outbound | undefined;
  columnOrderSettings?: ColumnOrderSettings$Outbound | undefined;
  columnSortSettings?: ColumnSortSettings$Outbound | undefined;
  eventDetailsPanel?: boolean | undefined;
  eventTableFields?: Array<string> | undefined;
  rowNumberColumnWidth?: number | undefined;
  showColumnTotals: boolean;
  showColumnTotalsPinned: boolean;
  showRowNumbers: boolean;
  showRowTotals: boolean;
  showRowTotalsPinned: boolean;
  wrapCells: boolean;
};

/** @internal */
export const TableViewSettings$outboundSchema: z.ZodType<
  TableViewSettings$Outbound,
  z.ZodTypeDef,
  TableViewSettings
> = z.object({
  columnFilterSettings: ColumnFilterSettings$outboundSchema.optional(),
  columnFormatSettings: ColumnFormatSettings$outboundSchema.optional(),
  columnOrderSettings: ColumnOrderSettings$outboundSchema.optional(),
  columnSortSettings: ColumnSortSettings$outboundSchema.optional(),
  eventDetailsPanel: z.boolean().optional(),
  eventTableFields: z.array(z.string()).optional(),
  rowNumberColumnWidth: z.number().optional(),
  showColumnTotals: z.boolean(),
  showColumnTotalsPinned: z.boolean(),
  showRowNumbers: z.boolean(),
  showRowTotals: z.boolean(),
  showRowTotalsPinned: z.boolean(),
  wrapCells: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableViewSettings$ {
  /** @deprecated use `TableViewSettings$inboundSchema` instead. */
  export const inboundSchema = TableViewSettings$inboundSchema;
  /** @deprecated use `TableViewSettings$outboundSchema` instead. */
  export const outboundSchema = TableViewSettings$outboundSchema;
  /** @deprecated use `TableViewSettings$Outbound` instead. */
  export type Outbound = TableViewSettings$Outbound;
}

export function tableViewSettingsToJSON(
  tableViewSettings: TableViewSettings,
): string {
  return JSON.stringify(
    TableViewSettings$outboundSchema.parse(tableViewSettings),
  );
}

export function tableViewSettingsFromJSON(
  jsonString: string,
): SafeParseResult<TableViewSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableViewSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableViewSettings' from JSON`,
  );
}
