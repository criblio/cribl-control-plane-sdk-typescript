/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Earliest = string | number;

export type Latest = string | number;

export const SearchJobResultsJobInfoStatus = {
  Failed: "failed",
  New: "new",
  Running: "running",
  Completed: "completed",
  Canceled: "canceled",
  Queued: "queued",
} as const;
export type SearchJobResultsJobInfoStatus = OpenEnum<
  typeof SearchJobResultsJobInfoStatus
>;

export type SearchJobResultsJobInfo = {
  id: string;
  query: string;
  earliest?: string | number | undefined;
  latest?: string | number | undefined;
  timeCreated: number;
  timeStarted?: number | undefined;
  timeCompleted?: number | undefined;
  status: SearchJobResultsJobInfoStatus;
};

/** @internal */
export const Earliest$inboundSchema: z.ZodType<
  Earliest,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type Earliest$Outbound = string | number;

/** @internal */
export const Earliest$outboundSchema: z.ZodType<
  Earliest$Outbound,
  z.ZodTypeDef,
  Earliest
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Earliest$ {
  /** @deprecated use `Earliest$inboundSchema` instead. */
  export const inboundSchema = Earliest$inboundSchema;
  /** @deprecated use `Earliest$outboundSchema` instead. */
  export const outboundSchema = Earliest$outboundSchema;
  /** @deprecated use `Earliest$Outbound` instead. */
  export type Outbound = Earliest$Outbound;
}

export function earliestToJSON(earliest: Earliest): string {
  return JSON.stringify(Earliest$outboundSchema.parse(earliest));
}

export function earliestFromJSON(
  jsonString: string,
): SafeParseResult<Earliest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Earliest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Earliest' from JSON`,
  );
}

/** @internal */
export const Latest$inboundSchema: z.ZodType<Latest, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number()]);

/** @internal */
export type Latest$Outbound = string | number;

/** @internal */
export const Latest$outboundSchema: z.ZodType<
  Latest$Outbound,
  z.ZodTypeDef,
  Latest
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Latest$ {
  /** @deprecated use `Latest$inboundSchema` instead. */
  export const inboundSchema = Latest$inboundSchema;
  /** @deprecated use `Latest$outboundSchema` instead. */
  export const outboundSchema = Latest$outboundSchema;
  /** @deprecated use `Latest$Outbound` instead. */
  export type Outbound = Latest$Outbound;
}

export function latestToJSON(latest: Latest): string {
  return JSON.stringify(Latest$outboundSchema.parse(latest));
}

export function latestFromJSON(
  jsonString: string,
): SafeParseResult<Latest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Latest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Latest' from JSON`,
  );
}

/** @internal */
export const SearchJobResultsJobInfoStatus$inboundSchema: z.ZodType<
  SearchJobResultsJobInfoStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchJobResultsJobInfoStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchJobResultsJobInfoStatus$outboundSchema: z.ZodType<
  SearchJobResultsJobInfoStatus,
  z.ZodTypeDef,
  SearchJobResultsJobInfoStatus
> = z.union([
  z.nativeEnum(SearchJobResultsJobInfoStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJobResultsJobInfoStatus$ {
  /** @deprecated use `SearchJobResultsJobInfoStatus$inboundSchema` instead. */
  export const inboundSchema = SearchJobResultsJobInfoStatus$inboundSchema;
  /** @deprecated use `SearchJobResultsJobInfoStatus$outboundSchema` instead. */
  export const outboundSchema = SearchJobResultsJobInfoStatus$outboundSchema;
}

/** @internal */
export const SearchJobResultsJobInfo$inboundSchema: z.ZodType<
  SearchJobResultsJobInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  query: z.string(),
  earliest: z.union([z.string(), z.number()]).optional(),
  latest: z.union([z.string(), z.number()]).optional(),
  timeCreated: z.number(),
  timeStarted: z.number().optional(),
  timeCompleted: z.number().optional(),
  status: SearchJobResultsJobInfoStatus$inboundSchema,
});

/** @internal */
export type SearchJobResultsJobInfo$Outbound = {
  id: string;
  query: string;
  earliest?: string | number | undefined;
  latest?: string | number | undefined;
  timeCreated: number;
  timeStarted?: number | undefined;
  timeCompleted?: number | undefined;
  status: string;
};

/** @internal */
export const SearchJobResultsJobInfo$outboundSchema: z.ZodType<
  SearchJobResultsJobInfo$Outbound,
  z.ZodTypeDef,
  SearchJobResultsJobInfo
> = z.object({
  id: z.string(),
  query: z.string(),
  earliest: z.union([z.string(), z.number()]).optional(),
  latest: z.union([z.string(), z.number()]).optional(),
  timeCreated: z.number(),
  timeStarted: z.number().optional(),
  timeCompleted: z.number().optional(),
  status: SearchJobResultsJobInfoStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJobResultsJobInfo$ {
  /** @deprecated use `SearchJobResultsJobInfo$inboundSchema` instead. */
  export const inboundSchema = SearchJobResultsJobInfo$inboundSchema;
  /** @deprecated use `SearchJobResultsJobInfo$outboundSchema` instead. */
  export const outboundSchema = SearchJobResultsJobInfo$outboundSchema;
  /** @deprecated use `SearchJobResultsJobInfo$Outbound` instead. */
  export type Outbound = SearchJobResultsJobInfo$Outbound;
}

export function searchJobResultsJobInfoToJSON(
  searchJobResultsJobInfo: SearchJobResultsJobInfo,
): string {
  return JSON.stringify(
    SearchJobResultsJobInfo$outboundSchema.parse(searchJobResultsJobInfo),
  );
}

export function searchJobResultsJobInfoFromJSON(
  jsonString: string,
): SafeParseResult<SearchJobResultsJobInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchJobResultsJobInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchJobResultsJobInfo' from JSON`,
  );
}
