/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DatasetMetadataRunInfo,
  DatasetMetadataRunInfo$inboundSchema,
  DatasetMetadataRunInfo$Outbound,
  DatasetMetadataRunInfo$outboundSchema,
} from "./datasetmetadataruninfo.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ScanMode = {
  Detailed: "detailed",
  Quick: "quick",
} as const;
export type ScanMode = OpenEnum<typeof ScanMode>;

export type DatasetMetadata = {
  earliest: string;
  enableAcceleration: boolean;
  fieldList: Array<string>;
  latestRunInfo?: DatasetMetadataRunInfo | undefined;
  scanMode: ScanMode;
};

/** @internal */
export const ScanMode$inboundSchema: z.ZodType<
  ScanMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ScanMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ScanMode$outboundSchema: z.ZodType<
  ScanMode,
  z.ZodTypeDef,
  ScanMode
> = z.union([
  z.nativeEnum(ScanMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScanMode$ {
  /** @deprecated use `ScanMode$inboundSchema` instead. */
  export const inboundSchema = ScanMode$inboundSchema;
  /** @deprecated use `ScanMode$outboundSchema` instead. */
  export const outboundSchema = ScanMode$outboundSchema;
}

/** @internal */
export const DatasetMetadata$inboundSchema: z.ZodType<
  DatasetMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  earliest: z.string(),
  enableAcceleration: z.boolean(),
  fieldList: z.array(z.string()),
  latestRunInfo: DatasetMetadataRunInfo$inboundSchema.optional(),
  scanMode: ScanMode$inboundSchema,
});

/** @internal */
export type DatasetMetadata$Outbound = {
  earliest: string;
  enableAcceleration: boolean;
  fieldList: Array<string>;
  latestRunInfo?: DatasetMetadataRunInfo$Outbound | undefined;
  scanMode: string;
};

/** @internal */
export const DatasetMetadata$outboundSchema: z.ZodType<
  DatasetMetadata$Outbound,
  z.ZodTypeDef,
  DatasetMetadata
> = z.object({
  earliest: z.string(),
  enableAcceleration: z.boolean(),
  fieldList: z.array(z.string()),
  latestRunInfo: DatasetMetadataRunInfo$outboundSchema.optional(),
  scanMode: ScanMode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasetMetadata$ {
  /** @deprecated use `DatasetMetadata$inboundSchema` instead. */
  export const inboundSchema = DatasetMetadata$inboundSchema;
  /** @deprecated use `DatasetMetadata$outboundSchema` instead. */
  export const outboundSchema = DatasetMetadata$outboundSchema;
  /** @deprecated use `DatasetMetadata$Outbound` instead. */
  export type Outbound = DatasetMetadata$Outbound;
}

export function datasetMetadataToJSON(
  datasetMetadata: DatasetMetadata,
): string {
  return JSON.stringify(DatasetMetadata$outboundSchema.parse(datasetMetadata));
}

export function datasetMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DatasetMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatasetMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatasetMetadata' from JSON`,
  );
}
