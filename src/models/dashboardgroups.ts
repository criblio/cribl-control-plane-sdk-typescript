/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Action = {
  label: string;
  params?: { [k: string]: string } | undefined;
  target: string;
};

export type DashboardGroups = {
  action?: Action | undefined;
  collapsed?: boolean | undefined;
  inputId?: string | undefined;
  title: string;
};

/** @internal */
export const Action$inboundSchema: z.ZodType<Action, z.ZodTypeDef, unknown> = z
  .object({
    label: z.string(),
    params: z.record(z.string()).optional(),
    target: z.string(),
  });

/** @internal */
export type Action$Outbound = {
  label: string;
  params?: { [k: string]: string } | undefined;
  target: string;
};

/** @internal */
export const Action$outboundSchema: z.ZodType<
  Action$Outbound,
  z.ZodTypeDef,
  Action
> = z.object({
  label: z.string(),
  params: z.record(z.string()).optional(),
  target: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
  /** @deprecated use `Action$Outbound` instead. */
  export type Outbound = Action$Outbound;
}

export function actionToJSON(action: Action): string {
  return JSON.stringify(Action$outboundSchema.parse(action));
}

export function actionFromJSON(
  jsonString: string,
): SafeParseResult<Action, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Action$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Action' from JSON`,
  );
}

/** @internal */
export const DashboardGroups$inboundSchema: z.ZodType<
  DashboardGroups,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.lazy(() => Action$inboundSchema).optional(),
  collapsed: z.boolean().optional(),
  inputId: z.string().optional(),
  title: z.string(),
});

/** @internal */
export type DashboardGroups$Outbound = {
  action?: Action$Outbound | undefined;
  collapsed?: boolean | undefined;
  inputId?: string | undefined;
  title: string;
};

/** @internal */
export const DashboardGroups$outboundSchema: z.ZodType<
  DashboardGroups$Outbound,
  z.ZodTypeDef,
  DashboardGroups
> = z.object({
  action: z.lazy(() => Action$outboundSchema).optional(),
  collapsed: z.boolean().optional(),
  inputId: z.string().optional(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DashboardGroups$ {
  /** @deprecated use `DashboardGroups$inboundSchema` instead. */
  export const inboundSchema = DashboardGroups$inboundSchema;
  /** @deprecated use `DashboardGroups$outboundSchema` instead. */
  export const outboundSchema = DashboardGroups$outboundSchema;
  /** @deprecated use `DashboardGroups$Outbound` instead. */
  export type Outbound = DashboardGroups$Outbound;
}

export function dashboardGroupsToJSON(
  dashboardGroups: DashboardGroups,
): string {
  return JSON.stringify(DashboardGroups$outboundSchema.parse(dashboardGroups));
}

export function dashboardGroupsFromJSON(
  jsonString: string,
): SafeParseResult<DashboardGroups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DashboardGroups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DashboardGroups' from JSON`,
  );
}
