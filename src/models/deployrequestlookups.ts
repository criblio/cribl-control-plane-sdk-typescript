/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DeployRequestLookupsLookup = {
  file: string;
  version: string;
};

export type DeployRequestLookups = {
  context: string;
  lookups: Array<DeployRequestLookupsLookup>;
};

/** @internal */
export const DeployRequestLookupsLookup$inboundSchema: z.ZodType<
  DeployRequestLookupsLookup,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.string(),
  version: z.string(),
});

/** @internal */
export type DeployRequestLookupsLookup$Outbound = {
  file: string;
  version: string;
};

/** @internal */
export const DeployRequestLookupsLookup$outboundSchema: z.ZodType<
  DeployRequestLookupsLookup$Outbound,
  z.ZodTypeDef,
  DeployRequestLookupsLookup
> = z.object({
  file: z.string(),
  version: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployRequestLookupsLookup$ {
  /** @deprecated use `DeployRequestLookupsLookup$inboundSchema` instead. */
  export const inboundSchema = DeployRequestLookupsLookup$inboundSchema;
  /** @deprecated use `DeployRequestLookupsLookup$outboundSchema` instead. */
  export const outboundSchema = DeployRequestLookupsLookup$outboundSchema;
  /** @deprecated use `DeployRequestLookupsLookup$Outbound` instead. */
  export type Outbound = DeployRequestLookupsLookup$Outbound;
}

export function deployRequestLookupsLookupToJSON(
  deployRequestLookupsLookup: DeployRequestLookupsLookup,
): string {
  return JSON.stringify(
    DeployRequestLookupsLookup$outboundSchema.parse(deployRequestLookupsLookup),
  );
}

export function deployRequestLookupsLookupFromJSON(
  jsonString: string,
): SafeParseResult<DeployRequestLookupsLookup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployRequestLookupsLookup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployRequestLookupsLookup' from JSON`,
  );
}

/** @internal */
export const DeployRequestLookups$inboundSchema: z.ZodType<
  DeployRequestLookups,
  z.ZodTypeDef,
  unknown
> = z.object({
  context: z.string(),
  lookups: z.array(z.lazy(() => DeployRequestLookupsLookup$inboundSchema)),
});

/** @internal */
export type DeployRequestLookups$Outbound = {
  context: string;
  lookups: Array<DeployRequestLookupsLookup$Outbound>;
};

/** @internal */
export const DeployRequestLookups$outboundSchema: z.ZodType<
  DeployRequestLookups$Outbound,
  z.ZodTypeDef,
  DeployRequestLookups
> = z.object({
  context: z.string(),
  lookups: z.array(z.lazy(() => DeployRequestLookupsLookup$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployRequestLookups$ {
  /** @deprecated use `DeployRequestLookups$inboundSchema` instead. */
  export const inboundSchema = DeployRequestLookups$inboundSchema;
  /** @deprecated use `DeployRequestLookups$outboundSchema` instead. */
  export const outboundSchema = DeployRequestLookups$outboundSchema;
  /** @deprecated use `DeployRequestLookups$Outbound` instead. */
  export type Outbound = DeployRequestLookups$Outbound;
}

export function deployRequestLookupsToJSON(
  deployRequestLookups: DeployRequestLookups,
): string {
  return JSON.stringify(
    DeployRequestLookups$outboundSchema.parse(deployRequestLookups),
  );
}

export function deployRequestLookupsFromJSON(
  jsonString: string,
): SafeParseResult<DeployRequestLookups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployRequestLookups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployRequestLookups' from JSON`,
  );
}
