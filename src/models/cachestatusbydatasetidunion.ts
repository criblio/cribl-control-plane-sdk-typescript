/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CacheStatusByDatasetId2 = {
  reason: string;
  usedCache: boolean;
};

export type CacheStatusByDatasetId1 = {
  usedCache: boolean;
};

export type CacheStatusByDatasetIdUnion =
  | CacheStatusByDatasetId2
  | CacheStatusByDatasetId1;

/** @internal */
export const CacheStatusByDatasetId2$inboundSchema: z.ZodType<
  CacheStatusByDatasetId2,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: z.string(),
  usedCache: z.boolean(),
});

/** @internal */
export type CacheStatusByDatasetId2$Outbound = {
  reason: string;
  usedCache: boolean;
};

/** @internal */
export const CacheStatusByDatasetId2$outboundSchema: z.ZodType<
  CacheStatusByDatasetId2$Outbound,
  z.ZodTypeDef,
  CacheStatusByDatasetId2
> = z.object({
  reason: z.string(),
  usedCache: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheStatusByDatasetId2$ {
  /** @deprecated use `CacheStatusByDatasetId2$inboundSchema` instead. */
  export const inboundSchema = CacheStatusByDatasetId2$inboundSchema;
  /** @deprecated use `CacheStatusByDatasetId2$outboundSchema` instead. */
  export const outboundSchema = CacheStatusByDatasetId2$outboundSchema;
  /** @deprecated use `CacheStatusByDatasetId2$Outbound` instead. */
  export type Outbound = CacheStatusByDatasetId2$Outbound;
}

export function cacheStatusByDatasetId2ToJSON(
  cacheStatusByDatasetId2: CacheStatusByDatasetId2,
): string {
  return JSON.stringify(
    CacheStatusByDatasetId2$outboundSchema.parse(cacheStatusByDatasetId2),
  );
}

export function cacheStatusByDatasetId2FromJSON(
  jsonString: string,
): SafeParseResult<CacheStatusByDatasetId2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheStatusByDatasetId2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheStatusByDatasetId2' from JSON`,
  );
}

/** @internal */
export const CacheStatusByDatasetId1$inboundSchema: z.ZodType<
  CacheStatusByDatasetId1,
  z.ZodTypeDef,
  unknown
> = z.object({
  usedCache: z.boolean(),
});

/** @internal */
export type CacheStatusByDatasetId1$Outbound = {
  usedCache: boolean;
};

/** @internal */
export const CacheStatusByDatasetId1$outboundSchema: z.ZodType<
  CacheStatusByDatasetId1$Outbound,
  z.ZodTypeDef,
  CacheStatusByDatasetId1
> = z.object({
  usedCache: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheStatusByDatasetId1$ {
  /** @deprecated use `CacheStatusByDatasetId1$inboundSchema` instead. */
  export const inboundSchema = CacheStatusByDatasetId1$inboundSchema;
  /** @deprecated use `CacheStatusByDatasetId1$outboundSchema` instead. */
  export const outboundSchema = CacheStatusByDatasetId1$outboundSchema;
  /** @deprecated use `CacheStatusByDatasetId1$Outbound` instead. */
  export type Outbound = CacheStatusByDatasetId1$Outbound;
}

export function cacheStatusByDatasetId1ToJSON(
  cacheStatusByDatasetId1: CacheStatusByDatasetId1,
): string {
  return JSON.stringify(
    CacheStatusByDatasetId1$outboundSchema.parse(cacheStatusByDatasetId1),
  );
}

export function cacheStatusByDatasetId1FromJSON(
  jsonString: string,
): SafeParseResult<CacheStatusByDatasetId1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheStatusByDatasetId1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheStatusByDatasetId1' from JSON`,
  );
}

/** @internal */
export const CacheStatusByDatasetIdUnion$inboundSchema: z.ZodType<
  CacheStatusByDatasetIdUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CacheStatusByDatasetId2$inboundSchema),
  z.lazy(() => CacheStatusByDatasetId1$inboundSchema),
]);

/** @internal */
export type CacheStatusByDatasetIdUnion$Outbound =
  | CacheStatusByDatasetId2$Outbound
  | CacheStatusByDatasetId1$Outbound;

/** @internal */
export const CacheStatusByDatasetIdUnion$outboundSchema: z.ZodType<
  CacheStatusByDatasetIdUnion$Outbound,
  z.ZodTypeDef,
  CacheStatusByDatasetIdUnion
> = z.union([
  z.lazy(() => CacheStatusByDatasetId2$outboundSchema),
  z.lazy(() => CacheStatusByDatasetId1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheStatusByDatasetIdUnion$ {
  /** @deprecated use `CacheStatusByDatasetIdUnion$inboundSchema` instead. */
  export const inboundSchema = CacheStatusByDatasetIdUnion$inboundSchema;
  /** @deprecated use `CacheStatusByDatasetIdUnion$outboundSchema` instead. */
  export const outboundSchema = CacheStatusByDatasetIdUnion$outboundSchema;
  /** @deprecated use `CacheStatusByDatasetIdUnion$Outbound` instead. */
  export type Outbound = CacheStatusByDatasetIdUnion$Outbound;
}

export function cacheStatusByDatasetIdUnionToJSON(
  cacheStatusByDatasetIdUnion: CacheStatusByDatasetIdUnion,
): string {
  return JSON.stringify(
    CacheStatusByDatasetIdUnion$outboundSchema.parse(
      cacheStatusByDatasetIdUnion,
    ),
  );
}

export function cacheStatusByDatasetIdUnionFromJSON(
  jsonString: string,
): SafeParseResult<CacheStatusByDatasetIdUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheStatusByDatasetIdUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheStatusByDatasetIdUnion' from JSON`,
  );
}
