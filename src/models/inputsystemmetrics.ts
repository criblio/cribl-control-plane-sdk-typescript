/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputSystemMetricsType = {
  SystemMetrics: "system_metrics",
} as const;
export type InputSystemMetricsType = ClosedEnum<typeof InputSystemMetricsType>;

export type InputSystemMetricsConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputSystemMetricsPqMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputSystemMetricsPqMode = OpenEnum<
  typeof InputSystemMetricsPqMode
>;

/**
 * Codec to use to compress the persisted data
 */
export const InputSystemMetricsCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputSystemMetricsCompression = OpenEnum<
  typeof InputSystemMetricsCompression
>;

export type InputSystemMetricsPqControls = {};

export type InputSystemMetricsPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputSystemMetricsPqMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputSystemMetricsCompression | undefined;
  pqControls?: InputSystemMetricsPqControls | undefined;
};

/**
 * Select level of detail for host metrics
 */
export const InputSystemMetricsHostMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select level of detail for host metrics
 */
export type InputSystemMetricsHostMode = OpenEnum<
  typeof InputSystemMetricsHostMode
>;

/**
 * Select the level of detail for system metrics
 */
export const InputSystemMetricsSystemMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of detail for system metrics
 */
export type InputSystemMetricsSystemMode = OpenEnum<
  typeof InputSystemMetricsSystemMode
>;

export type InputSystemMetricsSystem = {
  /**
   * Select the level of detail for system metrics
   */
  mode?: InputSystemMetricsSystemMode | undefined;
  /**
   * Generate metrics for the numbers of processes in various states
   */
  processes?: boolean | undefined;
};

/**
 * Select the level of detail for CPU metrics
 */
export const InputSystemMetricsCpuMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of detail for CPU metrics
 */
export type InputSystemMetricsCpuMode = OpenEnum<
  typeof InputSystemMetricsCpuMode
>;

export type InputSystemMetricsCpu = {
  /**
   * Select the level of detail for CPU metrics
   */
  mode?: InputSystemMetricsCpuMode | undefined;
  /**
   * Generate metrics for each CPU
   */
  perCpu?: boolean | undefined;
  /**
   * Generate metrics for all CPU states
   */
  detail?: boolean | undefined;
  /**
   * Generate raw, monotonic CPU time counters
   */
  time?: boolean | undefined;
};

/**
 * Select the level of detail for memory metrics
 */
export const InputSystemMetricsMemoryMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of detail for memory metrics
 */
export type InputSystemMetricsMemoryMode = OpenEnum<
  typeof InputSystemMetricsMemoryMode
>;

export type InputSystemMetricsMemory = {
  /**
   * Select the level of detail for memory metrics
   */
  mode?: InputSystemMetricsMemoryMode | undefined;
  /**
   * Generate metrics for all memory states
   */
  detail?: boolean | undefined;
};

/**
 * Select the level of detail for network metrics
 */
export const InputSystemMetricsNetworkMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of detail for network metrics
 */
export type InputSystemMetricsNetworkMode = OpenEnum<
  typeof InputSystemMetricsNetworkMode
>;

export type InputSystemMetricsNetwork = {
  /**
   * Select the level of detail for network metrics
   */
  mode?: InputSystemMetricsNetworkMode | undefined;
  /**
   * Network interfaces to include/exclude. Examples: eth0, !lo. All interfaces are included if this list is empty.
   */
  devices?: Array<string> | undefined;
  /**
   * Generate separate metrics for each interface
   */
  perInterface?: boolean | undefined;
  /**
   * Generate full network metrics
   */
  detail?: boolean | undefined;
};

/**
 * Select the level of detail for disk metrics
 */
export const InputSystemMetricsDiskMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of detail for disk metrics
 */
export type InputSystemMetricsDiskMode = OpenEnum<
  typeof InputSystemMetricsDiskMode
>;

export type InputSystemMetricsDisk = {
  /**
   * Select the level of detail for disk metrics
   */
  mode?: InputSystemMetricsDiskMode | undefined;
  /**
   * Block devices to include/exclude. Examples: sda*, !loop*. Wildcards and ! (not) operators are supported. All devices are included if this list is empty.
   */
  devices?: Array<string> | undefined;
  /**
   * Filesystem mountpoints to include/exclude. Examples: /, /home, !/proc*, !/tmp. Wildcards and ! (not) operators are supported. All mountpoints are included if this list is empty.
   */
  mountpoints?: Array<string> | undefined;
  /**
   * Filesystem types to include/exclude. Examples: ext4, !*tmpfs, !squashfs. Wildcards and ! (not) operators are supported. All types are included if this list is empty.
   */
  fstypes?: Array<string> | undefined;
  /**
   * Generate separate metrics for each device
   */
  perDevice?: boolean | undefined;
  /**
   * Generate full disk metrics
   */
  detail?: boolean | undefined;
};

export type InputSystemMetricsCustom = {
  system?: InputSystemMetricsSystem | undefined;
  cpu?: InputSystemMetricsCpu | undefined;
  memory?: InputSystemMetricsMemory | undefined;
  network?: InputSystemMetricsNetwork | undefined;
  disk?: InputSystemMetricsDisk | undefined;
};

export type InputSystemMetricsHost = {
  /**
   * Select level of detail for host metrics
   */
  mode?: InputSystemMetricsHostMode | undefined;
  custom?: InputSystemMetricsCustom | undefined;
};

export type InputSystemMetricsSet = {
  name: string;
  filter: string;
  includeChildren?: boolean | undefined;
};

export type InputSystemMetricsProcess = {
  /**
   * Configure sets to collect process metrics
   */
  sets?: Array<InputSystemMetricsSet> | undefined;
};

/**
 * Select the level of detail for container metrics
 */
export const ContainerMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of detail for container metrics
 */
export type ContainerMode = OpenEnum<typeof ContainerMode>;

export type InputSystemMetricsFilter = {
  expr: string;
};

export type Container = {
  /**
   * Select the level of detail for container metrics
   */
  mode?: ContainerMode | undefined;
  /**
   * Full paths for Docker's UNIX-domain socket
   */
  dockerSocket?: Array<string> | undefined;
  /**
   * Timeout, in seconds, for the Docker API
   */
  dockerTimeout?: number | undefined;
  /**
   * Containers matching any of these will be included. All are included if no filters are added.
   */
  filters?: Array<InputSystemMetricsFilter> | undefined;
  /**
   * Include stopped and paused containers
   */
  allContainers?: boolean | undefined;
  /**
   * Generate separate metrics for each device
   */
  perDevice?: boolean | undefined;
  /**
   * Generate full container metrics
   */
  detail?: boolean | undefined;
};

export type InputSystemMetricsMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export const InputSystemMetricsDataCompressionFormat = {
  None: "none",
  Gzip: "gzip",
} as const;
export type InputSystemMetricsDataCompressionFormat = OpenEnum<
  typeof InputSystemMetricsDataCompressionFormat
>;

export type InputSystemMetricsPersistence = {
  /**
   * Spool metrics to disk for Cribl Edge and Search
   */
  enable?: boolean | undefined;
  /**
   * Time span for each file bucket
   */
  timeWindow?: string | undefined;
  /**
   * Maximum disk space allowed to be consumed (examples: 420MB, 4GB). When limit is reached, older data will be deleted.
   */
  maxDataSize?: string | undefined;
  /**
   * Maximum amount of time to retain data (examples: 2h, 4d). When limit is reached, older data will be deleted.
   */
  maxDataTime?: string | undefined;
  compress?: InputSystemMetricsDataCompressionFormat | undefined;
  /**
   * Path to use to write metrics. Defaults to $CRIBL_HOME/state/system_metrics
   */
  destPath?: string | undefined;
};

export type InputSystemMetrics = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputSystemMetricsType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputSystemMetricsConnection> | undefined;
  pq?: InputSystemMetricsPq | undefined;
  /**
   * Time, in seconds, between consecutive metric collections. Default is 10 seconds.
   */
  interval?: number | undefined;
  host?: InputSystemMetricsHost | undefined;
  process?: InputSystemMetricsProcess | undefined;
  container?: Container | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputSystemMetricsMetadatum> | undefined;
  persistence?: InputSystemMetricsPersistence | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputSystemMetricsType$inboundSchema: z.ZodNativeEnum<
  typeof InputSystemMetricsType
> = z.nativeEnum(InputSystemMetricsType);

/** @internal */
export const InputSystemMetricsType$outboundSchema: z.ZodNativeEnum<
  typeof InputSystemMetricsType
> = InputSystemMetricsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsType$ {
  /** @deprecated use `InputSystemMetricsType$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsType$inboundSchema;
  /** @deprecated use `InputSystemMetricsType$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsType$outboundSchema;
}

/** @internal */
export const InputSystemMetricsConnection$inboundSchema: z.ZodType<
  InputSystemMetricsConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputSystemMetricsConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputSystemMetricsConnection$outboundSchema: z.ZodType<
  InputSystemMetricsConnection$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsConnection$ {
  /** @deprecated use `InputSystemMetricsConnection$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsConnection$inboundSchema;
  /** @deprecated use `InputSystemMetricsConnection$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsConnection$outboundSchema;
  /** @deprecated use `InputSystemMetricsConnection$Outbound` instead. */
  export type Outbound = InputSystemMetricsConnection$Outbound;
}

export function inputSystemMetricsConnectionToJSON(
  inputSystemMetricsConnection: InputSystemMetricsConnection,
): string {
  return JSON.stringify(
    InputSystemMetricsConnection$outboundSchema.parse(
      inputSystemMetricsConnection,
    ),
  );
}

export function inputSystemMetricsConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsConnection' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsPqMode$inboundSchema: z.ZodType<
  InputSystemMetricsPqMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemMetricsPqMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemMetricsPqMode$outboundSchema: z.ZodType<
  InputSystemMetricsPqMode,
  z.ZodTypeDef,
  InputSystemMetricsPqMode
> = z.union([
  z.nativeEnum(InputSystemMetricsPqMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsPqMode$ {
  /** @deprecated use `InputSystemMetricsPqMode$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsPqMode$inboundSchema;
  /** @deprecated use `InputSystemMetricsPqMode$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsPqMode$outboundSchema;
}

/** @internal */
export const InputSystemMetricsCompression$inboundSchema: z.ZodType<
  InputSystemMetricsCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemMetricsCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemMetricsCompression$outboundSchema: z.ZodType<
  InputSystemMetricsCompression,
  z.ZodTypeDef,
  InputSystemMetricsCompression
> = z.union([
  z.nativeEnum(InputSystemMetricsCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsCompression$ {
  /** @deprecated use `InputSystemMetricsCompression$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsCompression$inboundSchema;
  /** @deprecated use `InputSystemMetricsCompression$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsCompression$outboundSchema;
}

/** @internal */
export const InputSystemMetricsPqControls$inboundSchema: z.ZodType<
  InputSystemMetricsPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputSystemMetricsPqControls$Outbound = {};

/** @internal */
export const InputSystemMetricsPqControls$outboundSchema: z.ZodType<
  InputSystemMetricsPqControls$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsPqControls$ {
  /** @deprecated use `InputSystemMetricsPqControls$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsPqControls$inboundSchema;
  /** @deprecated use `InputSystemMetricsPqControls$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsPqControls$outboundSchema;
  /** @deprecated use `InputSystemMetricsPqControls$Outbound` instead. */
  export type Outbound = InputSystemMetricsPqControls$Outbound;
}

export function inputSystemMetricsPqControlsToJSON(
  inputSystemMetricsPqControls: InputSystemMetricsPqControls,
): string {
  return JSON.stringify(
    InputSystemMetricsPqControls$outboundSchema.parse(
      inputSystemMetricsPqControls,
    ),
  );
}

export function inputSystemMetricsPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsPqControls' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsPq$inboundSchema: z.ZodType<
  InputSystemMetricsPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSystemMetricsPqMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSystemMetricsCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputSystemMetricsPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type InputSystemMetricsPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputSystemMetricsPqControls$Outbound | undefined;
};

/** @internal */
export const InputSystemMetricsPq$outboundSchema: z.ZodType<
  InputSystemMetricsPq$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsPq
> = z.object({
  mode: InputSystemMetricsPqMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSystemMetricsCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputSystemMetricsPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsPq$ {
  /** @deprecated use `InputSystemMetricsPq$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsPq$inboundSchema;
  /** @deprecated use `InputSystemMetricsPq$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsPq$outboundSchema;
  /** @deprecated use `InputSystemMetricsPq$Outbound` instead. */
  export type Outbound = InputSystemMetricsPq$Outbound;
}

export function inputSystemMetricsPqToJSON(
  inputSystemMetricsPq: InputSystemMetricsPq,
): string {
  return JSON.stringify(
    InputSystemMetricsPq$outboundSchema.parse(inputSystemMetricsPq),
  );
}

export function inputSystemMetricsPqFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsPq' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsHostMode$inboundSchema: z.ZodType<
  InputSystemMetricsHostMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemMetricsHostMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemMetricsHostMode$outboundSchema: z.ZodType<
  InputSystemMetricsHostMode,
  z.ZodTypeDef,
  InputSystemMetricsHostMode
> = z.union([
  z.nativeEnum(InputSystemMetricsHostMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsHostMode$ {
  /** @deprecated use `InputSystemMetricsHostMode$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsHostMode$inboundSchema;
  /** @deprecated use `InputSystemMetricsHostMode$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsHostMode$outboundSchema;
}

/** @internal */
export const InputSystemMetricsSystemMode$inboundSchema: z.ZodType<
  InputSystemMetricsSystemMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemMetricsSystemMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemMetricsSystemMode$outboundSchema: z.ZodType<
  InputSystemMetricsSystemMode,
  z.ZodTypeDef,
  InputSystemMetricsSystemMode
> = z.union([
  z.nativeEnum(InputSystemMetricsSystemMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsSystemMode$ {
  /** @deprecated use `InputSystemMetricsSystemMode$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsSystemMode$inboundSchema;
  /** @deprecated use `InputSystemMetricsSystemMode$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsSystemMode$outboundSchema;
}

/** @internal */
export const InputSystemMetricsSystem$inboundSchema: z.ZodType<
  InputSystemMetricsSystem,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSystemMetricsSystemMode$inboundSchema.default("basic"),
  processes: z.boolean().default(false),
});

/** @internal */
export type InputSystemMetricsSystem$Outbound = {
  mode: string;
  processes: boolean;
};

/** @internal */
export const InputSystemMetricsSystem$outboundSchema: z.ZodType<
  InputSystemMetricsSystem$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsSystem
> = z.object({
  mode: InputSystemMetricsSystemMode$outboundSchema.default("basic"),
  processes: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsSystem$ {
  /** @deprecated use `InputSystemMetricsSystem$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsSystem$inboundSchema;
  /** @deprecated use `InputSystemMetricsSystem$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsSystem$outboundSchema;
  /** @deprecated use `InputSystemMetricsSystem$Outbound` instead. */
  export type Outbound = InputSystemMetricsSystem$Outbound;
}

export function inputSystemMetricsSystemToJSON(
  inputSystemMetricsSystem: InputSystemMetricsSystem,
): string {
  return JSON.stringify(
    InputSystemMetricsSystem$outboundSchema.parse(inputSystemMetricsSystem),
  );
}

export function inputSystemMetricsSystemFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsSystem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsSystem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsSystem' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsCpuMode$inboundSchema: z.ZodType<
  InputSystemMetricsCpuMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemMetricsCpuMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemMetricsCpuMode$outboundSchema: z.ZodType<
  InputSystemMetricsCpuMode,
  z.ZodTypeDef,
  InputSystemMetricsCpuMode
> = z.union([
  z.nativeEnum(InputSystemMetricsCpuMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsCpuMode$ {
  /** @deprecated use `InputSystemMetricsCpuMode$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsCpuMode$inboundSchema;
  /** @deprecated use `InputSystemMetricsCpuMode$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsCpuMode$outboundSchema;
}

/** @internal */
export const InputSystemMetricsCpu$inboundSchema: z.ZodType<
  InputSystemMetricsCpu,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSystemMetricsCpuMode$inboundSchema.default("basic"),
  perCpu: z.boolean().default(false),
  detail: z.boolean().default(false),
  time: z.boolean().default(false),
});

/** @internal */
export type InputSystemMetricsCpu$Outbound = {
  mode: string;
  perCpu: boolean;
  detail: boolean;
  time: boolean;
};

/** @internal */
export const InputSystemMetricsCpu$outboundSchema: z.ZodType<
  InputSystemMetricsCpu$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsCpu
> = z.object({
  mode: InputSystemMetricsCpuMode$outboundSchema.default("basic"),
  perCpu: z.boolean().default(false),
  detail: z.boolean().default(false),
  time: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsCpu$ {
  /** @deprecated use `InputSystemMetricsCpu$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsCpu$inboundSchema;
  /** @deprecated use `InputSystemMetricsCpu$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsCpu$outboundSchema;
  /** @deprecated use `InputSystemMetricsCpu$Outbound` instead. */
  export type Outbound = InputSystemMetricsCpu$Outbound;
}

export function inputSystemMetricsCpuToJSON(
  inputSystemMetricsCpu: InputSystemMetricsCpu,
): string {
  return JSON.stringify(
    InputSystemMetricsCpu$outboundSchema.parse(inputSystemMetricsCpu),
  );
}

export function inputSystemMetricsCpuFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsCpu, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsCpu$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsCpu' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsMemoryMode$inboundSchema: z.ZodType<
  InputSystemMetricsMemoryMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemMetricsMemoryMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemMetricsMemoryMode$outboundSchema: z.ZodType<
  InputSystemMetricsMemoryMode,
  z.ZodTypeDef,
  InputSystemMetricsMemoryMode
> = z.union([
  z.nativeEnum(InputSystemMetricsMemoryMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsMemoryMode$ {
  /** @deprecated use `InputSystemMetricsMemoryMode$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsMemoryMode$inboundSchema;
  /** @deprecated use `InputSystemMetricsMemoryMode$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsMemoryMode$outboundSchema;
}

/** @internal */
export const InputSystemMetricsMemory$inboundSchema: z.ZodType<
  InputSystemMetricsMemory,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSystemMetricsMemoryMode$inboundSchema.default("basic"),
  detail: z.boolean().default(false),
});

/** @internal */
export type InputSystemMetricsMemory$Outbound = {
  mode: string;
  detail: boolean;
};

/** @internal */
export const InputSystemMetricsMemory$outboundSchema: z.ZodType<
  InputSystemMetricsMemory$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsMemory
> = z.object({
  mode: InputSystemMetricsMemoryMode$outboundSchema.default("basic"),
  detail: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsMemory$ {
  /** @deprecated use `InputSystemMetricsMemory$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsMemory$inboundSchema;
  /** @deprecated use `InputSystemMetricsMemory$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsMemory$outboundSchema;
  /** @deprecated use `InputSystemMetricsMemory$Outbound` instead. */
  export type Outbound = InputSystemMetricsMemory$Outbound;
}

export function inputSystemMetricsMemoryToJSON(
  inputSystemMetricsMemory: InputSystemMetricsMemory,
): string {
  return JSON.stringify(
    InputSystemMetricsMemory$outboundSchema.parse(inputSystemMetricsMemory),
  );
}

export function inputSystemMetricsMemoryFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsMemory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsMemory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsMemory' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsNetworkMode$inboundSchema: z.ZodType<
  InputSystemMetricsNetworkMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemMetricsNetworkMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemMetricsNetworkMode$outboundSchema: z.ZodType<
  InputSystemMetricsNetworkMode,
  z.ZodTypeDef,
  InputSystemMetricsNetworkMode
> = z.union([
  z.nativeEnum(InputSystemMetricsNetworkMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsNetworkMode$ {
  /** @deprecated use `InputSystemMetricsNetworkMode$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsNetworkMode$inboundSchema;
  /** @deprecated use `InputSystemMetricsNetworkMode$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsNetworkMode$outboundSchema;
}

/** @internal */
export const InputSystemMetricsNetwork$inboundSchema: z.ZodType<
  InputSystemMetricsNetwork,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSystemMetricsNetworkMode$inboundSchema.default("basic"),
  devices: z.array(z.string()).optional(),
  perInterface: z.boolean().default(false),
  detail: z.boolean().default(false),
});

/** @internal */
export type InputSystemMetricsNetwork$Outbound = {
  mode: string;
  devices?: Array<string> | undefined;
  perInterface: boolean;
  detail: boolean;
};

/** @internal */
export const InputSystemMetricsNetwork$outboundSchema: z.ZodType<
  InputSystemMetricsNetwork$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsNetwork
> = z.object({
  mode: InputSystemMetricsNetworkMode$outboundSchema.default("basic"),
  devices: z.array(z.string()).optional(),
  perInterface: z.boolean().default(false),
  detail: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsNetwork$ {
  /** @deprecated use `InputSystemMetricsNetwork$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsNetwork$inboundSchema;
  /** @deprecated use `InputSystemMetricsNetwork$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsNetwork$outboundSchema;
  /** @deprecated use `InputSystemMetricsNetwork$Outbound` instead. */
  export type Outbound = InputSystemMetricsNetwork$Outbound;
}

export function inputSystemMetricsNetworkToJSON(
  inputSystemMetricsNetwork: InputSystemMetricsNetwork,
): string {
  return JSON.stringify(
    InputSystemMetricsNetwork$outboundSchema.parse(inputSystemMetricsNetwork),
  );
}

export function inputSystemMetricsNetworkFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsNetwork, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsNetwork$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsNetwork' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsDiskMode$inboundSchema: z.ZodType<
  InputSystemMetricsDiskMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemMetricsDiskMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemMetricsDiskMode$outboundSchema: z.ZodType<
  InputSystemMetricsDiskMode,
  z.ZodTypeDef,
  InputSystemMetricsDiskMode
> = z.union([
  z.nativeEnum(InputSystemMetricsDiskMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsDiskMode$ {
  /** @deprecated use `InputSystemMetricsDiskMode$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsDiskMode$inboundSchema;
  /** @deprecated use `InputSystemMetricsDiskMode$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsDiskMode$outboundSchema;
}

/** @internal */
export const InputSystemMetricsDisk$inboundSchema: z.ZodType<
  InputSystemMetricsDisk,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSystemMetricsDiskMode$inboundSchema.default("basic"),
  devices: z.array(z.string()).optional(),
  mountpoints: z.array(z.string()).optional(),
  fstypes: z.array(z.string()).optional(),
  perDevice: z.boolean().default(false),
  detail: z.boolean().default(false),
});

/** @internal */
export type InputSystemMetricsDisk$Outbound = {
  mode: string;
  devices?: Array<string> | undefined;
  mountpoints?: Array<string> | undefined;
  fstypes?: Array<string> | undefined;
  perDevice: boolean;
  detail: boolean;
};

/** @internal */
export const InputSystemMetricsDisk$outboundSchema: z.ZodType<
  InputSystemMetricsDisk$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsDisk
> = z.object({
  mode: InputSystemMetricsDiskMode$outboundSchema.default("basic"),
  devices: z.array(z.string()).optional(),
  mountpoints: z.array(z.string()).optional(),
  fstypes: z.array(z.string()).optional(),
  perDevice: z.boolean().default(false),
  detail: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsDisk$ {
  /** @deprecated use `InputSystemMetricsDisk$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsDisk$inboundSchema;
  /** @deprecated use `InputSystemMetricsDisk$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsDisk$outboundSchema;
  /** @deprecated use `InputSystemMetricsDisk$Outbound` instead. */
  export type Outbound = InputSystemMetricsDisk$Outbound;
}

export function inputSystemMetricsDiskToJSON(
  inputSystemMetricsDisk: InputSystemMetricsDisk,
): string {
  return JSON.stringify(
    InputSystemMetricsDisk$outboundSchema.parse(inputSystemMetricsDisk),
  );
}

export function inputSystemMetricsDiskFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsDisk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsDisk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsDisk' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsCustom$inboundSchema: z.ZodType<
  InputSystemMetricsCustom,
  z.ZodTypeDef,
  unknown
> = z.object({
  system: z.lazy(() => InputSystemMetricsSystem$inboundSchema).optional(),
  cpu: z.lazy(() => InputSystemMetricsCpu$inboundSchema).optional(),
  memory: z.lazy(() => InputSystemMetricsMemory$inboundSchema).optional(),
  network: z.lazy(() => InputSystemMetricsNetwork$inboundSchema).optional(),
  disk: z.lazy(() => InputSystemMetricsDisk$inboundSchema).optional(),
});

/** @internal */
export type InputSystemMetricsCustom$Outbound = {
  system?: InputSystemMetricsSystem$Outbound | undefined;
  cpu?: InputSystemMetricsCpu$Outbound | undefined;
  memory?: InputSystemMetricsMemory$Outbound | undefined;
  network?: InputSystemMetricsNetwork$Outbound | undefined;
  disk?: InputSystemMetricsDisk$Outbound | undefined;
};

/** @internal */
export const InputSystemMetricsCustom$outboundSchema: z.ZodType<
  InputSystemMetricsCustom$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsCustom
> = z.object({
  system: z.lazy(() => InputSystemMetricsSystem$outboundSchema).optional(),
  cpu: z.lazy(() => InputSystemMetricsCpu$outboundSchema).optional(),
  memory: z.lazy(() => InputSystemMetricsMemory$outboundSchema).optional(),
  network: z.lazy(() => InputSystemMetricsNetwork$outboundSchema).optional(),
  disk: z.lazy(() => InputSystemMetricsDisk$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsCustom$ {
  /** @deprecated use `InputSystemMetricsCustom$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsCustom$inboundSchema;
  /** @deprecated use `InputSystemMetricsCustom$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsCustom$outboundSchema;
  /** @deprecated use `InputSystemMetricsCustom$Outbound` instead. */
  export type Outbound = InputSystemMetricsCustom$Outbound;
}

export function inputSystemMetricsCustomToJSON(
  inputSystemMetricsCustom: InputSystemMetricsCustom,
): string {
  return JSON.stringify(
    InputSystemMetricsCustom$outboundSchema.parse(inputSystemMetricsCustom),
  );
}

export function inputSystemMetricsCustomFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsCustom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsCustom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsCustom' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsHost$inboundSchema: z.ZodType<
  InputSystemMetricsHost,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSystemMetricsHostMode$inboundSchema.default("basic"),
  custom: z.lazy(() => InputSystemMetricsCustom$inboundSchema).optional(),
});

/** @internal */
export type InputSystemMetricsHost$Outbound = {
  mode: string;
  custom?: InputSystemMetricsCustom$Outbound | undefined;
};

/** @internal */
export const InputSystemMetricsHost$outboundSchema: z.ZodType<
  InputSystemMetricsHost$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsHost
> = z.object({
  mode: InputSystemMetricsHostMode$outboundSchema.default("basic"),
  custom: z.lazy(() => InputSystemMetricsCustom$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsHost$ {
  /** @deprecated use `InputSystemMetricsHost$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsHost$inboundSchema;
  /** @deprecated use `InputSystemMetricsHost$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsHost$outboundSchema;
  /** @deprecated use `InputSystemMetricsHost$Outbound` instead. */
  export type Outbound = InputSystemMetricsHost$Outbound;
}

export function inputSystemMetricsHostToJSON(
  inputSystemMetricsHost: InputSystemMetricsHost,
): string {
  return JSON.stringify(
    InputSystemMetricsHost$outboundSchema.parse(inputSystemMetricsHost),
  );
}

export function inputSystemMetricsHostFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsHost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsHost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsHost' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsSet$inboundSchema: z.ZodType<
  InputSystemMetricsSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  filter: z.string(),
  includeChildren: z.boolean().default(false),
});

/** @internal */
export type InputSystemMetricsSet$Outbound = {
  name: string;
  filter: string;
  includeChildren: boolean;
};

/** @internal */
export const InputSystemMetricsSet$outboundSchema: z.ZodType<
  InputSystemMetricsSet$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsSet
> = z.object({
  name: z.string(),
  filter: z.string(),
  includeChildren: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsSet$ {
  /** @deprecated use `InputSystemMetricsSet$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsSet$inboundSchema;
  /** @deprecated use `InputSystemMetricsSet$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsSet$outboundSchema;
  /** @deprecated use `InputSystemMetricsSet$Outbound` instead. */
  export type Outbound = InputSystemMetricsSet$Outbound;
}

export function inputSystemMetricsSetToJSON(
  inputSystemMetricsSet: InputSystemMetricsSet,
): string {
  return JSON.stringify(
    InputSystemMetricsSet$outboundSchema.parse(inputSystemMetricsSet),
  );
}

export function inputSystemMetricsSetFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsSet' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsProcess$inboundSchema: z.ZodType<
  InputSystemMetricsProcess,
  z.ZodTypeDef,
  unknown
> = z.object({
  sets: z.array(z.lazy(() => InputSystemMetricsSet$inboundSchema)).optional(),
});

/** @internal */
export type InputSystemMetricsProcess$Outbound = {
  sets?: Array<InputSystemMetricsSet$Outbound> | undefined;
};

/** @internal */
export const InputSystemMetricsProcess$outboundSchema: z.ZodType<
  InputSystemMetricsProcess$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsProcess
> = z.object({
  sets: z.array(z.lazy(() => InputSystemMetricsSet$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsProcess$ {
  /** @deprecated use `InputSystemMetricsProcess$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsProcess$inboundSchema;
  /** @deprecated use `InputSystemMetricsProcess$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsProcess$outboundSchema;
  /** @deprecated use `InputSystemMetricsProcess$Outbound` instead. */
  export type Outbound = InputSystemMetricsProcess$Outbound;
}

export function inputSystemMetricsProcessToJSON(
  inputSystemMetricsProcess: InputSystemMetricsProcess,
): string {
  return JSON.stringify(
    InputSystemMetricsProcess$outboundSchema.parse(inputSystemMetricsProcess),
  );
}

export function inputSystemMetricsProcessFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsProcess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsProcess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsProcess' from JSON`,
  );
}

/** @internal */
export const ContainerMode$inboundSchema: z.ZodType<
  ContainerMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ContainerMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ContainerMode$outboundSchema: z.ZodType<
  ContainerMode,
  z.ZodTypeDef,
  ContainerMode
> = z.union([
  z.nativeEnum(ContainerMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContainerMode$ {
  /** @deprecated use `ContainerMode$inboundSchema` instead. */
  export const inboundSchema = ContainerMode$inboundSchema;
  /** @deprecated use `ContainerMode$outboundSchema` instead. */
  export const outboundSchema = ContainerMode$outboundSchema;
}

/** @internal */
export const InputSystemMetricsFilter$inboundSchema: z.ZodType<
  InputSystemMetricsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  expr: z.string(),
});

/** @internal */
export type InputSystemMetricsFilter$Outbound = {
  expr: string;
};

/** @internal */
export const InputSystemMetricsFilter$outboundSchema: z.ZodType<
  InputSystemMetricsFilter$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsFilter
> = z.object({
  expr: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsFilter$ {
  /** @deprecated use `InputSystemMetricsFilter$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsFilter$inboundSchema;
  /** @deprecated use `InputSystemMetricsFilter$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsFilter$outboundSchema;
  /** @deprecated use `InputSystemMetricsFilter$Outbound` instead. */
  export type Outbound = InputSystemMetricsFilter$Outbound;
}

export function inputSystemMetricsFilterToJSON(
  inputSystemMetricsFilter: InputSystemMetricsFilter,
): string {
  return JSON.stringify(
    InputSystemMetricsFilter$outboundSchema.parse(inputSystemMetricsFilter),
  );
}

export function inputSystemMetricsFilterFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsFilter' from JSON`,
  );
}

/** @internal */
export const Container$inboundSchema: z.ZodType<
  Container,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: ContainerMode$inboundSchema.default("basic"),
  dockerSocket: z.array(z.string()).optional(),
  dockerTimeout: z.number().default(5),
  filters: z.array(z.lazy(() => InputSystemMetricsFilter$inboundSchema))
    .optional(),
  allContainers: z.boolean().default(false),
  perDevice: z.boolean().default(false),
  detail: z.boolean().default(false),
});

/** @internal */
export type Container$Outbound = {
  mode: string;
  dockerSocket?: Array<string> | undefined;
  dockerTimeout: number;
  filters?: Array<InputSystemMetricsFilter$Outbound> | undefined;
  allContainers: boolean;
  perDevice: boolean;
  detail: boolean;
};

/** @internal */
export const Container$outboundSchema: z.ZodType<
  Container$Outbound,
  z.ZodTypeDef,
  Container
> = z.object({
  mode: ContainerMode$outboundSchema.default("basic"),
  dockerSocket: z.array(z.string()).optional(),
  dockerTimeout: z.number().default(5),
  filters: z.array(z.lazy(() => InputSystemMetricsFilter$outboundSchema))
    .optional(),
  allContainers: z.boolean().default(false),
  perDevice: z.boolean().default(false),
  detail: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Container$ {
  /** @deprecated use `Container$inboundSchema` instead. */
  export const inboundSchema = Container$inboundSchema;
  /** @deprecated use `Container$outboundSchema` instead. */
  export const outboundSchema = Container$outboundSchema;
  /** @deprecated use `Container$Outbound` instead. */
  export type Outbound = Container$Outbound;
}

export function containerToJSON(container: Container): string {
  return JSON.stringify(Container$outboundSchema.parse(container));
}

export function containerFromJSON(
  jsonString: string,
): SafeParseResult<Container, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Container$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Container' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsMetadatum$inboundSchema: z.ZodType<
  InputSystemMetricsMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputSystemMetricsMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputSystemMetricsMetadatum$outboundSchema: z.ZodType<
  InputSystemMetricsMetadatum$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsMetadatum$ {
  /** @deprecated use `InputSystemMetricsMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsMetadatum$inboundSchema;
  /** @deprecated use `InputSystemMetricsMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsMetadatum$outboundSchema;
  /** @deprecated use `InputSystemMetricsMetadatum$Outbound` instead. */
  export type Outbound = InputSystemMetricsMetadatum$Outbound;
}

export function inputSystemMetricsMetadatumToJSON(
  inputSystemMetricsMetadatum: InputSystemMetricsMetadatum,
): string {
  return JSON.stringify(
    InputSystemMetricsMetadatum$outboundSchema.parse(
      inputSystemMetricsMetadatum,
    ),
  );
}

export function inputSystemMetricsMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsMetadatum' from JSON`,
  );
}

/** @internal */
export const InputSystemMetricsDataCompressionFormat$inboundSchema: z.ZodType<
  InputSystemMetricsDataCompressionFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemMetricsDataCompressionFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemMetricsDataCompressionFormat$outboundSchema: z.ZodType<
  InputSystemMetricsDataCompressionFormat,
  z.ZodTypeDef,
  InputSystemMetricsDataCompressionFormat
> = z.union([
  z.nativeEnum(InputSystemMetricsDataCompressionFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsDataCompressionFormat$ {
  /** @deprecated use `InputSystemMetricsDataCompressionFormat$inboundSchema` instead. */
  export const inboundSchema =
    InputSystemMetricsDataCompressionFormat$inboundSchema;
  /** @deprecated use `InputSystemMetricsDataCompressionFormat$outboundSchema` instead. */
  export const outboundSchema =
    InputSystemMetricsDataCompressionFormat$outboundSchema;
}

/** @internal */
export const InputSystemMetricsPersistence$inboundSchema: z.ZodType<
  InputSystemMetricsPersistence,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputSystemMetricsDataCompressionFormat$inboundSchema.default(
    "gzip",
  ),
  destPath: z.string().default("$CRIBL_HOME/state/system_metrics"),
});

/** @internal */
export type InputSystemMetricsPersistence$Outbound = {
  enable: boolean;
  timeWindow: string;
  maxDataSize: string;
  maxDataTime: string;
  compress: string;
  destPath: string;
};

/** @internal */
export const InputSystemMetricsPersistence$outboundSchema: z.ZodType<
  InputSystemMetricsPersistence$Outbound,
  z.ZodTypeDef,
  InputSystemMetricsPersistence
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputSystemMetricsDataCompressionFormat$outboundSchema.default(
    "gzip",
  ),
  destPath: z.string().default("$CRIBL_HOME/state/system_metrics"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetricsPersistence$ {
  /** @deprecated use `InputSystemMetricsPersistence$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetricsPersistence$inboundSchema;
  /** @deprecated use `InputSystemMetricsPersistence$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetricsPersistence$outboundSchema;
  /** @deprecated use `InputSystemMetricsPersistence$Outbound` instead. */
  export type Outbound = InputSystemMetricsPersistence$Outbound;
}

export function inputSystemMetricsPersistenceToJSON(
  inputSystemMetricsPersistence: InputSystemMetricsPersistence,
): string {
  return JSON.stringify(
    InputSystemMetricsPersistence$outboundSchema.parse(
      inputSystemMetricsPersistence,
    ),
  );
}

export function inputSystemMetricsPersistenceFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetricsPersistence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetricsPersistence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetricsPersistence' from JSON`,
  );
}

/** @internal */
export const InputSystemMetrics$inboundSchema: z.ZodType<
  InputSystemMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputSystemMetricsType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSystemMetricsConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputSystemMetricsPq$inboundSchema).optional(),
  interval: z.number().default(10),
  host: z.lazy(() => InputSystemMetricsHost$inboundSchema).optional(),
  process: z.lazy(() => InputSystemMetricsProcess$inboundSchema).optional(),
  container: z.lazy(() => Container$inboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputSystemMetricsMetadatum$inboundSchema))
    .optional(),
  persistence: z.lazy(() => InputSystemMetricsPersistence$inboundSchema)
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputSystemMetrics$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputSystemMetricsConnection$Outbound> | undefined;
  pq?: InputSystemMetricsPq$Outbound | undefined;
  interval: number;
  host?: InputSystemMetricsHost$Outbound | undefined;
  process?: InputSystemMetricsProcess$Outbound | undefined;
  container?: Container$Outbound | undefined;
  metadata?: Array<InputSystemMetricsMetadatum$Outbound> | undefined;
  persistence?: InputSystemMetricsPersistence$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputSystemMetrics$outboundSchema: z.ZodType<
  InputSystemMetrics$Outbound,
  z.ZodTypeDef,
  InputSystemMetrics
> = z.object({
  id: z.string().optional(),
  type: InputSystemMetricsType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(
    z.lazy(() => InputSystemMetricsConnection$outboundSchema),
  ).optional(),
  pq: z.lazy(() => InputSystemMetricsPq$outboundSchema).optional(),
  interval: z.number().default(10),
  host: z.lazy(() => InputSystemMetricsHost$outboundSchema).optional(),
  process: z.lazy(() => InputSystemMetricsProcess$outboundSchema).optional(),
  container: z.lazy(() => Container$outboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputSystemMetricsMetadatum$outboundSchema))
    .optional(),
  persistence: z.lazy(() => InputSystemMetricsPersistence$outboundSchema)
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemMetrics$ {
  /** @deprecated use `InputSystemMetrics$inboundSchema` instead. */
  export const inboundSchema = InputSystemMetrics$inboundSchema;
  /** @deprecated use `InputSystemMetrics$outboundSchema` instead. */
  export const outboundSchema = InputSystemMetrics$outboundSchema;
  /** @deprecated use `InputSystemMetrics$Outbound` instead. */
  export type Outbound = InputSystemMetrics$Outbound;
}

export function inputSystemMetricsToJSON(
  inputSystemMetrics: InputSystemMetrics,
): string {
  return JSON.stringify(
    InputSystemMetrics$outboundSchema.parse(inputSystemMetrics),
  );
}

export function inputSystemMetricsFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemMetrics' from JSON`,
  );
}
