/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputRawUdpType = {
  RawUdp: "raw_udp",
} as const;
export type InputRawUdpType = ClosedEnum<typeof InputRawUdpType>;

export type InputRawUdpConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputRawUdpMode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputRawUdpMode = OpenEnum<typeof InputRawUdpMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputRawUdpCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputRawUdpCompression = OpenEnum<typeof InputRawUdpCompression>;

export type InputRawUdpPqControls = {};

export type InputRawUdpPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputRawUdpMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputRawUdpCompression | undefined;
  pqControls?: InputRawUdpPqControls | undefined;
};

export type InputRawUdpMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputRawUdp = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputRawUdpType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputRawUdpConnection> | undefined;
  pq?: InputRawUdpPq | undefined;
  /**
   * Address to bind on. For IPv4 (all addresses), use the default '0.0.0.0'. For IPv6, enter '::' (all addresses) or specify an IP address.
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  /**
   * Maximum number of events to buffer when downstream is blocking.
   */
  maxBufferSize?: number | undefined;
  /**
   * Regex matching IP addresses that are allowed to send data
   */
  ipWhitelistRegex?: string | undefined;
  /**
   * If true, each UDP packet is assumed to contain a single message. If false, each UDP packet is assumed to contain multiple messages, separated by newlines.
   */
  singleMsgUdpPackets?: boolean | undefined;
  /**
   * If true, a __rawBytes field will be added to each event containing the raw bytes of the datagram.
   */
  ingestRawBytes?: boolean | undefined;
  /**
   * Optionally, set the SO_RCVBUF socket option for the UDP socket. This value tells the operating system how many bytes can be buffered in the kernel before events are dropped. Leave blank to use the OS default. Caution: Increasing this value will affect OS memory utilization.
   */
  udpSocketRxBufSize?: number | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputRawUdpMetadatum> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputRawUdpType$inboundSchema: z.ZodNativeEnum<
  typeof InputRawUdpType
> = z.nativeEnum(InputRawUdpType);

/** @internal */
export const InputRawUdpType$outboundSchema: z.ZodNativeEnum<
  typeof InputRawUdpType
> = InputRawUdpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputRawUdpType$ {
  /** @deprecated use `InputRawUdpType$inboundSchema` instead. */
  export const inboundSchema = InputRawUdpType$inboundSchema;
  /** @deprecated use `InputRawUdpType$outboundSchema` instead. */
  export const outboundSchema = InputRawUdpType$outboundSchema;
}

/** @internal */
export const InputRawUdpConnection$inboundSchema: z.ZodType<
  InputRawUdpConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputRawUdpConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputRawUdpConnection$outboundSchema: z.ZodType<
  InputRawUdpConnection$Outbound,
  z.ZodTypeDef,
  InputRawUdpConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputRawUdpConnection$ {
  /** @deprecated use `InputRawUdpConnection$inboundSchema` instead. */
  export const inboundSchema = InputRawUdpConnection$inboundSchema;
  /** @deprecated use `InputRawUdpConnection$outboundSchema` instead. */
  export const outboundSchema = InputRawUdpConnection$outboundSchema;
  /** @deprecated use `InputRawUdpConnection$Outbound` instead. */
  export type Outbound = InputRawUdpConnection$Outbound;
}

export function inputRawUdpConnectionToJSON(
  inputRawUdpConnection: InputRawUdpConnection,
): string {
  return JSON.stringify(
    InputRawUdpConnection$outboundSchema.parse(inputRawUdpConnection),
  );
}

export function inputRawUdpConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputRawUdpConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputRawUdpConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputRawUdpConnection' from JSON`,
  );
}

/** @internal */
export const InputRawUdpMode$inboundSchema: z.ZodType<
  InputRawUdpMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputRawUdpMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputRawUdpMode$outboundSchema: z.ZodType<
  InputRawUdpMode,
  z.ZodTypeDef,
  InputRawUdpMode
> = z.union([
  z.nativeEnum(InputRawUdpMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputRawUdpMode$ {
  /** @deprecated use `InputRawUdpMode$inboundSchema` instead. */
  export const inboundSchema = InputRawUdpMode$inboundSchema;
  /** @deprecated use `InputRawUdpMode$outboundSchema` instead. */
  export const outboundSchema = InputRawUdpMode$outboundSchema;
}

/** @internal */
export const InputRawUdpCompression$inboundSchema: z.ZodType<
  InputRawUdpCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputRawUdpCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputRawUdpCompression$outboundSchema: z.ZodType<
  InputRawUdpCompression,
  z.ZodTypeDef,
  InputRawUdpCompression
> = z.union([
  z.nativeEnum(InputRawUdpCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputRawUdpCompression$ {
  /** @deprecated use `InputRawUdpCompression$inboundSchema` instead. */
  export const inboundSchema = InputRawUdpCompression$inboundSchema;
  /** @deprecated use `InputRawUdpCompression$outboundSchema` instead. */
  export const outboundSchema = InputRawUdpCompression$outboundSchema;
}

/** @internal */
export const InputRawUdpPqControls$inboundSchema: z.ZodType<
  InputRawUdpPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputRawUdpPqControls$Outbound = {};

/** @internal */
export const InputRawUdpPqControls$outboundSchema: z.ZodType<
  InputRawUdpPqControls$Outbound,
  z.ZodTypeDef,
  InputRawUdpPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputRawUdpPqControls$ {
  /** @deprecated use `InputRawUdpPqControls$inboundSchema` instead. */
  export const inboundSchema = InputRawUdpPqControls$inboundSchema;
  /** @deprecated use `InputRawUdpPqControls$outboundSchema` instead. */
  export const outboundSchema = InputRawUdpPqControls$outboundSchema;
  /** @deprecated use `InputRawUdpPqControls$Outbound` instead. */
  export type Outbound = InputRawUdpPqControls$Outbound;
}

export function inputRawUdpPqControlsToJSON(
  inputRawUdpPqControls: InputRawUdpPqControls,
): string {
  return JSON.stringify(
    InputRawUdpPqControls$outboundSchema.parse(inputRawUdpPqControls),
  );
}

export function inputRawUdpPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputRawUdpPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputRawUdpPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputRawUdpPqControls' from JSON`,
  );
}

/** @internal */
export const InputRawUdpPq$inboundSchema: z.ZodType<
  InputRawUdpPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputRawUdpMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputRawUdpCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputRawUdpPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputRawUdpPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputRawUdpPqControls$Outbound | undefined;
};

/** @internal */
export const InputRawUdpPq$outboundSchema: z.ZodType<
  InputRawUdpPq$Outbound,
  z.ZodTypeDef,
  InputRawUdpPq
> = z.object({
  mode: InputRawUdpMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputRawUdpCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputRawUdpPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputRawUdpPq$ {
  /** @deprecated use `InputRawUdpPq$inboundSchema` instead. */
  export const inboundSchema = InputRawUdpPq$inboundSchema;
  /** @deprecated use `InputRawUdpPq$outboundSchema` instead. */
  export const outboundSchema = InputRawUdpPq$outboundSchema;
  /** @deprecated use `InputRawUdpPq$Outbound` instead. */
  export type Outbound = InputRawUdpPq$Outbound;
}

export function inputRawUdpPqToJSON(inputRawUdpPq: InputRawUdpPq): string {
  return JSON.stringify(InputRawUdpPq$outboundSchema.parse(inputRawUdpPq));
}

export function inputRawUdpPqFromJSON(
  jsonString: string,
): SafeParseResult<InputRawUdpPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputRawUdpPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputRawUdpPq' from JSON`,
  );
}

/** @internal */
export const InputRawUdpMetadatum$inboundSchema: z.ZodType<
  InputRawUdpMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputRawUdpMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputRawUdpMetadatum$outboundSchema: z.ZodType<
  InputRawUdpMetadatum$Outbound,
  z.ZodTypeDef,
  InputRawUdpMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputRawUdpMetadatum$ {
  /** @deprecated use `InputRawUdpMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputRawUdpMetadatum$inboundSchema;
  /** @deprecated use `InputRawUdpMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputRawUdpMetadatum$outboundSchema;
  /** @deprecated use `InputRawUdpMetadatum$Outbound` instead. */
  export type Outbound = InputRawUdpMetadatum$Outbound;
}

export function inputRawUdpMetadatumToJSON(
  inputRawUdpMetadatum: InputRawUdpMetadatum,
): string {
  return JSON.stringify(
    InputRawUdpMetadatum$outboundSchema.parse(inputRawUdpMetadatum),
  );
}

export function inputRawUdpMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputRawUdpMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputRawUdpMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputRawUdpMetadatum' from JSON`,
  );
}

/** @internal */
export const InputRawUdp$inboundSchema: z.ZodType<
  InputRawUdp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputRawUdpType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputRawUdpConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputRawUdpPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  maxBufferSize: z.number().default(1000),
  ipWhitelistRegex: z.string().default("/.*/"),
  singleMsgUdpPackets: z.boolean().default(false),
  ingestRawBytes: z.boolean().default(false),
  udpSocketRxBufSize: z.number().optional(),
  metadata: z.array(z.lazy(() => InputRawUdpMetadatum$inboundSchema))
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputRawUdp$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputRawUdpConnection$Outbound> | undefined;
  pq?: InputRawUdpPq$Outbound | undefined;
  host: string;
  port: number;
  maxBufferSize: number;
  ipWhitelistRegex: string;
  singleMsgUdpPackets: boolean;
  ingestRawBytes: boolean;
  udpSocketRxBufSize?: number | undefined;
  metadata?: Array<InputRawUdpMetadatum$Outbound> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputRawUdp$outboundSchema: z.ZodType<
  InputRawUdp$Outbound,
  z.ZodTypeDef,
  InputRawUdp
> = z.object({
  id: z.string().optional(),
  type: InputRawUdpType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputRawUdpConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputRawUdpPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  maxBufferSize: z.number().default(1000),
  ipWhitelistRegex: z.string().default("/.*/"),
  singleMsgUdpPackets: z.boolean().default(false),
  ingestRawBytes: z.boolean().default(false),
  udpSocketRxBufSize: z.number().optional(),
  metadata: z.array(z.lazy(() => InputRawUdpMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputRawUdp$ {
  /** @deprecated use `InputRawUdp$inboundSchema` instead. */
  export const inboundSchema = InputRawUdp$inboundSchema;
  /** @deprecated use `InputRawUdp$outboundSchema` instead. */
  export const outboundSchema = InputRawUdp$outboundSchema;
  /** @deprecated use `InputRawUdp$Outbound` instead. */
  export type Outbound = InputRawUdp$Outbound;
}

export function inputRawUdpToJSON(inputRawUdp: InputRawUdp): string {
  return JSON.stringify(InputRawUdp$outboundSchema.parse(inputRawUdp));
}

export function inputRawUdpFromJSON(
  jsonString: string,
): SafeParseResult<InputRawUdp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputRawUdp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputRawUdp' from JSON`,
  );
}
