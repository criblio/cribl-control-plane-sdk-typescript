/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MappingRulesetGenericMappingFunction = {
  id: string;
  additionalProperties?: { [k: string]: any } | undefined;
};

/** @internal */
export const MappingRulesetGenericMappingFunction$inboundSchema: z.ZodType<
  MappingRulesetGenericMappingFunction,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.string(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type MappingRulesetGenericMappingFunction$Outbound = {
  id: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const MappingRulesetGenericMappingFunction$outboundSchema: z.ZodType<
  MappingRulesetGenericMappingFunction$Outbound,
  z.ZodTypeDef,
  MappingRulesetGenericMappingFunction
> = z.object({
  id: z.string(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingRulesetGenericMappingFunction$ {
  /** @deprecated use `MappingRulesetGenericMappingFunction$inboundSchema` instead. */
  export const inboundSchema =
    MappingRulesetGenericMappingFunction$inboundSchema;
  /** @deprecated use `MappingRulesetGenericMappingFunction$outboundSchema` instead. */
  export const outboundSchema =
    MappingRulesetGenericMappingFunction$outboundSchema;
  /** @deprecated use `MappingRulesetGenericMappingFunction$Outbound` instead. */
  export type Outbound = MappingRulesetGenericMappingFunction$Outbound;
}

export function mappingRulesetGenericMappingFunctionToJSON(
  mappingRulesetGenericMappingFunction: MappingRulesetGenericMappingFunction,
): string {
  return JSON.stringify(
    MappingRulesetGenericMappingFunction$outboundSchema.parse(
      mappingRulesetGenericMappingFunction,
    ),
  );
}

export function mappingRulesetGenericMappingFunctionFromJSON(
  jsonString: string,
): SafeParseResult<MappingRulesetGenericMappingFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MappingRulesetGenericMappingFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MappingRulesetGenericMappingFunction' from JSON`,
  );
}
