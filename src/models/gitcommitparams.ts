/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type GitCommitParams = {
  effective?: boolean | undefined;
  files?: Array<string> | undefined;
  group?: string | undefined;
  message: string;
};

/** @internal */
export const GitCommitParams$inboundSchema: z.ZodType<
  GitCommitParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  effective: z.boolean().optional(),
  files: z.array(z.string()).optional(),
  group: z.string().optional(),
  message: z.string(),
});

/** @internal */
export type GitCommitParams$Outbound = {
  effective?: boolean | undefined;
  files?: Array<string> | undefined;
  group?: string | undefined;
  message: string;
};

/** @internal */
export const GitCommitParams$outboundSchema: z.ZodType<
  GitCommitParams$Outbound,
  z.ZodTypeDef,
  GitCommitParams
> = z.object({
  effective: z.boolean().optional(),
  files: z.array(z.string()).optional(),
  group: z.string().optional(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitCommitParams$ {
  /** @deprecated use `GitCommitParams$inboundSchema` instead. */
  export const inboundSchema = GitCommitParams$inboundSchema;
  /** @deprecated use `GitCommitParams$outboundSchema` instead. */
  export const outboundSchema = GitCommitParams$outboundSchema;
  /** @deprecated use `GitCommitParams$Outbound` instead. */
  export type Outbound = GitCommitParams$Outbound;
}

export function gitCommitParamsToJSON(
  gitCommitParams: GitCommitParams,
): string {
  return JSON.stringify(GitCommitParams$outboundSchema.parse(gitCommitParams));
}

export function gitCommitParamsFromJSON(
  jsonString: string,
): SafeParseResult<GitCommitParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitCommitParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitCommitParams' from JSON`,
  );
}
