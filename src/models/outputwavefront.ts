/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputWavefrontType = {
  Wavefront: "wavefront",
} as const;
export type OutputWavefrontType = ClosedEnum<typeof OutputWavefrontType>;

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const OutputWavefrontAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type OutputWavefrontAuthenticationMethod = ClosedEnum<
  typeof OutputWavefrontAuthenticationMethod
>;

export type OutputWavefrontExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputWavefrontFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputWavefrontFailedRequestLoggingMode = ClosedEnum<
  typeof OutputWavefrontFailedRequestLoggingMode
>;

export type OutputWavefrontResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputWavefrontTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputWavefrontBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputWavefrontBackpressureBehavior = ClosedEnum<
  typeof OutputWavefrontBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputWavefrontCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputWavefrontCompression = ClosedEnum<
  typeof OutputWavefrontCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputWavefrontQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputWavefrontQueueFullBehavior = ClosedEnum<
  typeof OutputWavefrontQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputWavefrontMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputWavefrontMode = ClosedEnum<typeof OutputWavefrontMode>;

export type OutputWavefrontPqControls = {};

export type OutputWavefront = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputWavefrontType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: OutputWavefrontAuthenticationMethod | undefined;
  /**
   * WaveFront domain name, e.g. "longboard"
   */
  domain?: string | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputWavefrontExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputWavefrontFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputWavefrontResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?: OutputWavefrontTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputWavefrontBackpressureBehavior | undefined;
  description?: string | undefined;
  /**
   * WaveFront API authentication token (see [here](https://docs.wavefront.com/wavefront_api.html#generating-an-api-token))
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputWavefrontCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputWavefrontQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputWavefrontMode | undefined;
  pqControls?: OutputWavefrontPqControls | undefined;
};

/** @internal */
export const OutputWavefrontType$inboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontType
> = z.nativeEnum(OutputWavefrontType);

/** @internal */
export const OutputWavefrontType$outboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontType
> = OutputWavefrontType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontType$ {
  /** @deprecated use `OutputWavefrontType$inboundSchema` instead. */
  export const inboundSchema = OutputWavefrontType$inboundSchema;
  /** @deprecated use `OutputWavefrontType$outboundSchema` instead. */
  export const outboundSchema = OutputWavefrontType$outboundSchema;
}

/** @internal */
export const OutputWavefrontAuthenticationMethod$inboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontAuthenticationMethod
> = z.nativeEnum(OutputWavefrontAuthenticationMethod);

/** @internal */
export const OutputWavefrontAuthenticationMethod$outboundSchema:
  z.ZodNativeEnum<typeof OutputWavefrontAuthenticationMethod> =
    OutputWavefrontAuthenticationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontAuthenticationMethod$ {
  /** @deprecated use `OutputWavefrontAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputWavefrontAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputWavefrontAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputWavefrontAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputWavefrontExtraHttpHeader$inboundSchema: z.ZodType<
  OutputWavefrontExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputWavefrontExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputWavefrontExtraHttpHeader$outboundSchema: z.ZodType<
  OutputWavefrontExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputWavefrontExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontExtraHttpHeader$ {
  /** @deprecated use `OutputWavefrontExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputWavefrontExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputWavefrontExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputWavefrontExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputWavefrontExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputWavefrontExtraHttpHeader$Outbound;
}

export function outputWavefrontExtraHttpHeaderToJSON(
  outputWavefrontExtraHttpHeader: OutputWavefrontExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputWavefrontExtraHttpHeader$outboundSchema.parse(
      outputWavefrontExtraHttpHeader,
    ),
  );
}

export function outputWavefrontExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputWavefrontExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWavefrontExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWavefrontExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputWavefrontFailedRequestLoggingMode$inboundSchema:
  z.ZodNativeEnum<typeof OutputWavefrontFailedRequestLoggingMode> = z
    .nativeEnum(OutputWavefrontFailedRequestLoggingMode);

/** @internal */
export const OutputWavefrontFailedRequestLoggingMode$outboundSchema:
  z.ZodNativeEnum<typeof OutputWavefrontFailedRequestLoggingMode> =
    OutputWavefrontFailedRequestLoggingMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontFailedRequestLoggingMode$ {
  /** @deprecated use `OutputWavefrontFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputWavefrontFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputWavefrontFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputWavefrontFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputWavefrontResponseRetrySetting$inboundSchema: z.ZodType<
  OutputWavefrontResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputWavefrontResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputWavefrontResponseRetrySetting$outboundSchema: z.ZodType<
  OutputWavefrontResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputWavefrontResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontResponseRetrySetting$ {
  /** @deprecated use `OutputWavefrontResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputWavefrontResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputWavefrontResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputWavefrontResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputWavefrontResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputWavefrontResponseRetrySetting$Outbound;
}

export function outputWavefrontResponseRetrySettingToJSON(
  outputWavefrontResponseRetrySetting: OutputWavefrontResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputWavefrontResponseRetrySetting$outboundSchema.parse(
      outputWavefrontResponseRetrySetting,
    ),
  );
}

export function outputWavefrontResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputWavefrontResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputWavefrontResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWavefrontResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputWavefrontTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputWavefrontTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputWavefrontTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputWavefrontTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputWavefrontTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputWavefrontTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontTimeoutRetrySettings$ {
  /** @deprecated use `OutputWavefrontTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputWavefrontTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputWavefrontTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputWavefrontTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputWavefrontTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputWavefrontTimeoutRetrySettings$Outbound;
}

export function outputWavefrontTimeoutRetrySettingsToJSON(
  outputWavefrontTimeoutRetrySettings: OutputWavefrontTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputWavefrontTimeoutRetrySettings$outboundSchema.parse(
      outputWavefrontTimeoutRetrySettings,
    ),
  );
}

export function outputWavefrontTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputWavefrontTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputWavefrontTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWavefrontTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputWavefrontBackpressureBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontBackpressureBehavior
> = z.nativeEnum(OutputWavefrontBackpressureBehavior);

/** @internal */
export const OutputWavefrontBackpressureBehavior$outboundSchema:
  z.ZodNativeEnum<typeof OutputWavefrontBackpressureBehavior> =
    OutputWavefrontBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontBackpressureBehavior$ {
  /** @deprecated use `OutputWavefrontBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputWavefrontBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputWavefrontBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputWavefrontBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputWavefrontCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontCompression
> = z.nativeEnum(OutputWavefrontCompression);

/** @internal */
export const OutputWavefrontCompression$outboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontCompression
> = OutputWavefrontCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontCompression$ {
  /** @deprecated use `OutputWavefrontCompression$inboundSchema` instead. */
  export const inboundSchema = OutputWavefrontCompression$inboundSchema;
  /** @deprecated use `OutputWavefrontCompression$outboundSchema` instead. */
  export const outboundSchema = OutputWavefrontCompression$outboundSchema;
}

/** @internal */
export const OutputWavefrontQueueFullBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontQueueFullBehavior
> = z.nativeEnum(OutputWavefrontQueueFullBehavior);

/** @internal */
export const OutputWavefrontQueueFullBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontQueueFullBehavior
> = OutputWavefrontQueueFullBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontQueueFullBehavior$ {
  /** @deprecated use `OutputWavefrontQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputWavefrontQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputWavefrontQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputWavefrontQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputWavefrontMode$inboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontMode
> = z.nativeEnum(OutputWavefrontMode);

/** @internal */
export const OutputWavefrontMode$outboundSchema: z.ZodNativeEnum<
  typeof OutputWavefrontMode
> = OutputWavefrontMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontMode$ {
  /** @deprecated use `OutputWavefrontMode$inboundSchema` instead. */
  export const inboundSchema = OutputWavefrontMode$inboundSchema;
  /** @deprecated use `OutputWavefrontMode$outboundSchema` instead. */
  export const outboundSchema = OutputWavefrontMode$outboundSchema;
}

/** @internal */
export const OutputWavefrontPqControls$inboundSchema: z.ZodType<
  OutputWavefrontPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputWavefrontPqControls$Outbound = {};

/** @internal */
export const OutputWavefrontPqControls$outboundSchema: z.ZodType<
  OutputWavefrontPqControls$Outbound,
  z.ZodTypeDef,
  OutputWavefrontPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefrontPqControls$ {
  /** @deprecated use `OutputWavefrontPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputWavefrontPqControls$inboundSchema;
  /** @deprecated use `OutputWavefrontPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputWavefrontPqControls$outboundSchema;
  /** @deprecated use `OutputWavefrontPqControls$Outbound` instead. */
  export type Outbound = OutputWavefrontPqControls$Outbound;
}

export function outputWavefrontPqControlsToJSON(
  outputWavefrontPqControls: OutputWavefrontPqControls,
): string {
  return JSON.stringify(
    OutputWavefrontPqControls$outboundSchema.parse(outputWavefrontPqControls),
  );
}

export function outputWavefrontPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputWavefrontPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWavefrontPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWavefrontPqControls' from JSON`,
  );
}

/** @internal */
export const OutputWavefront$inboundSchema: z.ZodType<
  OutputWavefront,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputWavefrontType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  authType: OutputWavefrontAuthenticationMethod$inboundSchema.default("manual"),
  domain: z.string().default("longboard"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputWavefrontExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputWavefrontFailedRequestLoggingMode$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputWavefrontResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputWavefrontTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputWavefrontBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputWavefrontCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputWavefrontQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputWavefrontMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputWavefrontPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputWavefront$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  authType: string;
  domain: string;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputWavefrontExtraHttpHeader$Outbound> | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputWavefrontResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputWavefrontTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  description?: string | undefined;
  token?: string | undefined;
  textSecret?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputWavefrontPqControls$Outbound | undefined;
};

/** @internal */
export const OutputWavefront$outboundSchema: z.ZodType<
  OutputWavefront$Outbound,
  z.ZodTypeDef,
  OutputWavefront
> = z.object({
  id: z.string().optional(),
  type: OutputWavefrontType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  authType: OutputWavefrontAuthenticationMethod$outboundSchema.default(
    "manual",
  ),
  domain: z.string().default("longboard"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputWavefrontExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputWavefrontFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputWavefrontResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputWavefrontTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputWavefrontBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputWavefrontCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputWavefrontQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputWavefrontMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputWavefrontPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWavefront$ {
  /** @deprecated use `OutputWavefront$inboundSchema` instead. */
  export const inboundSchema = OutputWavefront$inboundSchema;
  /** @deprecated use `OutputWavefront$outboundSchema` instead. */
  export const outboundSchema = OutputWavefront$outboundSchema;
  /** @deprecated use `OutputWavefront$Outbound` instead. */
  export type Outbound = OutputWavefront$Outbound;
}

export function outputWavefrontToJSON(
  outputWavefront: OutputWavefront,
): string {
  return JSON.stringify(OutputWavefront$outboundSchema.parse(outputWavefront));
}

export function outputWavefrontFromJSON(
  jsonString: string,
): SafeParseResult<OutputWavefront, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWavefront$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWavefront' from JSON`,
  );
}
