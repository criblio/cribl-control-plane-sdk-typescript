/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSyslogType = {
  Syslog: "syslog",
} as const;
export type OutputSyslogType = ClosedEnum<typeof OutputSyslogType>;

/**
 * The network protocol to use for sending out syslog messages
 */
export const OutputSyslogProtocol = {
  Tcp: "tcp",
  Udp: "udp",
} as const;
/**
 * The network protocol to use for sending out syslog messages
 */
export type OutputSyslogProtocol = OpenEnum<typeof OutputSyslogProtocol>;

/**
 * Default value for message facility. Will be overwritten by value of __facility if set. Defaults to user.
 */
export const Facility = {
  Zero: 0,
  One: 1,
  Two: 2,
  Three: 3,
  Four: 4,
  Five: 5,
  Six: 6,
  Seven: 7,
  Eight: 8,
  Nine: 9,
  Ten: 10,
  Eleven: 11,
  Twelve: 12,
  Thirteen: 13,
  Fourteen: 14,
  Fifteen: 15,
  Sixteen: 16,
  Seventeen: 17,
  Eighteen: 18,
  Nineteen: 19,
  Twenty: 20,
  TwentyOne: 21,
} as const;
/**
 * Default value for message facility. Will be overwritten by value of __facility if set. Defaults to user.
 */
export type Facility = OpenEnum<typeof Facility>;

/**
 * Default value for message severity. Will be overwritten by value of __severity if set. Defaults to notice.
 */
export const OutputSyslogSeverity = {
  Zero: 0,
  One: 1,
  Two: 2,
  Three: 3,
  Four: 4,
  Five: 5,
  Six: 6,
  Seven: 7,
} as const;
/**
 * Default value for message severity. Will be overwritten by value of __severity if set. Defaults to notice.
 */
export type OutputSyslogSeverity = OpenEnum<typeof OutputSyslogSeverity>;

/**
 * The syslog message format depending on the receiver's support
 */
export const OutputSyslogMessageFormat = {
  Rfc3164: "rfc3164",
  Rfc5424: "rfc5424",
} as const;
/**
 * The syslog message format depending on the receiver's support
 */
export type OutputSyslogMessageFormat = OpenEnum<
  typeof OutputSyslogMessageFormat
>;

/**
 * Timestamp format to use when serializing event's time field
 */
export const TimestampFormat = {
  Syslog: "syslog",
  Iso8601: "iso8601",
} as const;
/**
 * Timestamp format to use when serializing event's time field
 */
export type TimestampFormat = OpenEnum<typeof TimestampFormat>;

export const OutputSyslogMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputSyslogMinimumTLSVersion = OpenEnum<
  typeof OutputSyslogMinimumTLSVersion
>;

export const OutputSyslogMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputSyslogMaximumTLSVersion = OpenEnum<
  typeof OutputSyslogMaximumTLSVersion
>;

export type OutputSyslogTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Reject certificates that are not authorized by a CA in the CA certificate path, or by another
   *
   * @remarks
   *                     trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: OutputSyslogMinimumTLSVersion | undefined;
  maxVersion?: OutputSyslogMaximumTLSVersion | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSyslogBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSyslogBackpressureBehavior = OpenEnum<
  typeof OutputSyslogBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputSyslogCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputSyslogCompression = OpenEnum<typeof OutputSyslogCompression>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputSyslogQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputSyslogQueueFullBehavior = OpenEnum<
  typeof OutputSyslogQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputSyslogMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputSyslogMode = OpenEnum<typeof OutputSyslogMode>;

export type OutputSyslogPqControls = {};

/**
 * Whether to inherit TLS configs from group setting or disable TLS
 */
export const OutputSyslogTLS = {
  Inherit: "inherit",
  Off: "off",
} as const;
/**
 * Whether to inherit TLS configs from group setting or disable TLS
 */
export type OutputSyslogTLS = ClosedEnum<typeof OutputSyslogTLS>;

export type OutputSyslogHost = {
  /**
   * The hostname of the receiver
   */
  host: string;
  /**
   * The port to connect to on the provided host
   */
  port?: number | undefined;
  /**
   * Whether to inherit TLS configs from group setting or disable TLS
   */
  tls?: OutputSyslogTLS | undefined;
  /**
   * Servername to use if establishing a TLS connection. If not specified, defaults to connection host (if not an IP); otherwise, uses the global TLS settings.
   */
  servername?: string | undefined;
  /**
   * Assign a weight (>0) to each endpoint to indicate its traffic-handling capability
   */
  weight?: number | undefined;
};

export type OutputSyslog = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSyslogType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The network protocol to use for sending out syslog messages
   */
  protocol?: OutputSyslogProtocol | undefined;
  /**
   * Default value for message facility. Will be overwritten by value of __facility if set. Defaults to user.
   */
  facility?: Facility | undefined;
  /**
   * Default value for message severity. Will be overwritten by value of __severity if set. Defaults to notice.
   */
  severity?: OutputSyslogSeverity | undefined;
  /**
   * Default name for device or application that originated the message. Defaults to Cribl, but will be overwritten by value of __appname if set.
   */
  appName?: string | undefined;
  /**
   * The syslog message format depending on the receiver's support
   */
  messageFormat?: OutputSyslogMessageFormat | undefined;
  /**
   * Timestamp format to use when serializing event's time field
   */
  timestampFormat?: TimestampFormat | undefined;
  /**
   * Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
   */
  throttleRatePerSec?: string | undefined;
  /**
   * Prefix messages with the byte count of the message. If disabled, no prefix will be set, and the message will be appended with a \n.
   */
  octetCountFraming?: boolean | undefined;
  /**
   * Use to troubleshoot issues with sending data
   */
  logFailedRequests?: boolean | undefined;
  description?: string | undefined;
  /**
   * For optimal performance, enable load balancing even if you have one hostname, as it can expand to multiple IPs.  If this setting is disabled, consider enabling round-robin DNS.
   */
  loadBalanced?: boolean | undefined;
  /**
   * Amount of time (milliseconds) to wait for the connection to establish before retrying
   */
  connectionTimeout?: number | undefined;
  /**
   * Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
   */
  writeTimeout?: number | undefined;
  tls?: OutputSyslogTLSSettingsClientSide | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSyslogBackpressureBehavior | undefined;
  /**
   * The hostname of the receiver
   */
  host?: string | undefined;
  /**
   * The port to connect to on the provided host
   */
  port?: number | undefined;
  /**
   * Maximum size of syslog messages. Make sure this value is less than or equal to the MTU to avoid UDP packet fragmentation.
   */
  maxRecordSize?: number | undefined;
  /**
   * How often to resolve the destination hostname to an IP address. Ignored if the destination is an IP address. A value of 0 means every message sent will incur a DNS lookup.
   */
  udpDnsResolvePeriodSec?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputSyslogCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputSyslogQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputSyslogMode | undefined;
  pqControls?: OutputSyslogPqControls | undefined;
  /**
   * The interval in which to re-resolve any hostnames and pick up destinations from A records
   */
  dnsResolvePeriodSec?: number | undefined;
  /**
   * How far back in time to keep traffic stats for load balancing purposes
   */
  loadBalanceStatsPeriodSec?: number | undefined;
  /**
   * Maximum number of concurrent connections (per Worker Process). A random set of IPs will be picked on every DNS resolution period. Use 0 for unlimited.
   */
  maxConcurrentSenders?: number | undefined;
  /**
   * Exclude all IPs of the current host from the list of any resolved hostnames
   */
  excludeSelf?: boolean | undefined;
  /**
   * Set of hosts to load-balance data to.
   */
  hosts?: Array<OutputSyslogHost> | undefined;
};

/** @internal */
export const OutputSyslogType$inboundSchema: z.ZodNativeEnum<
  typeof OutputSyslogType
> = z.nativeEnum(OutputSyslogType);

/** @internal */
export const OutputSyslogType$outboundSchema: z.ZodNativeEnum<
  typeof OutputSyslogType
> = OutputSyslogType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogType$ {
  /** @deprecated use `OutputSyslogType$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogType$inboundSchema;
  /** @deprecated use `OutputSyslogType$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogType$outboundSchema;
}

/** @internal */
export const OutputSyslogProtocol$inboundSchema: z.ZodType<
  OutputSyslogProtocol,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSyslogProtocol),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSyslogProtocol$outboundSchema: z.ZodType<
  OutputSyslogProtocol,
  z.ZodTypeDef,
  OutputSyslogProtocol
> = z.union([
  z.nativeEnum(OutputSyslogProtocol),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogProtocol$ {
  /** @deprecated use `OutputSyslogProtocol$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogProtocol$inboundSchema;
  /** @deprecated use `OutputSyslogProtocol$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogProtocol$outboundSchema;
}

/** @internal */
export const Facility$inboundSchema: z.ZodType<
  Facility,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Facility),
    z.number().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Facility$outboundSchema: z.ZodType<
  Facility,
  z.ZodTypeDef,
  Facility
> = z.union([
  z.nativeEnum(Facility),
  z.number().and(z.custom<Unrecognized<number>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Facility$ {
  /** @deprecated use `Facility$inboundSchema` instead. */
  export const inboundSchema = Facility$inboundSchema;
  /** @deprecated use `Facility$outboundSchema` instead. */
  export const outboundSchema = Facility$outboundSchema;
}

/** @internal */
export const OutputSyslogSeverity$inboundSchema: z.ZodType<
  OutputSyslogSeverity,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSyslogSeverity),
    z.number().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSyslogSeverity$outboundSchema: z.ZodType<
  OutputSyslogSeverity,
  z.ZodTypeDef,
  OutputSyslogSeverity
> = z.union([
  z.nativeEnum(OutputSyslogSeverity),
  z.number().and(z.custom<Unrecognized<number>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogSeverity$ {
  /** @deprecated use `OutputSyslogSeverity$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogSeverity$inboundSchema;
  /** @deprecated use `OutputSyslogSeverity$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogSeverity$outboundSchema;
}

/** @internal */
export const OutputSyslogMessageFormat$inboundSchema: z.ZodType<
  OutputSyslogMessageFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSyslogMessageFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSyslogMessageFormat$outboundSchema: z.ZodType<
  OutputSyslogMessageFormat,
  z.ZodTypeDef,
  OutputSyslogMessageFormat
> = z.union([
  z.nativeEnum(OutputSyslogMessageFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogMessageFormat$ {
  /** @deprecated use `OutputSyslogMessageFormat$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogMessageFormat$inboundSchema;
  /** @deprecated use `OutputSyslogMessageFormat$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogMessageFormat$outboundSchema;
}

/** @internal */
export const TimestampFormat$inboundSchema: z.ZodType<
  TimestampFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TimestampFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TimestampFormat$outboundSchema: z.ZodType<
  TimestampFormat,
  z.ZodTypeDef,
  TimestampFormat
> = z.union([
  z.nativeEnum(TimestampFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimestampFormat$ {
  /** @deprecated use `TimestampFormat$inboundSchema` instead. */
  export const inboundSchema = TimestampFormat$inboundSchema;
  /** @deprecated use `TimestampFormat$outboundSchema` instead. */
  export const outboundSchema = TimestampFormat$outboundSchema;
}

/** @internal */
export const OutputSyslogMinimumTLSVersion$inboundSchema: z.ZodType<
  OutputSyslogMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSyslogMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSyslogMinimumTLSVersion$outboundSchema: z.ZodType<
  OutputSyslogMinimumTLSVersion,
  z.ZodTypeDef,
  OutputSyslogMinimumTLSVersion
> = z.union([
  z.nativeEnum(OutputSyslogMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogMinimumTLSVersion$ {
  /** @deprecated use `OutputSyslogMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogMinimumTLSVersion$inboundSchema;
  /** @deprecated use `OutputSyslogMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputSyslogMaximumTLSVersion$inboundSchema: z.ZodType<
  OutputSyslogMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSyslogMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSyslogMaximumTLSVersion$outboundSchema: z.ZodType<
  OutputSyslogMaximumTLSVersion,
  z.ZodTypeDef,
  OutputSyslogMaximumTLSVersion
> = z.union([
  z.nativeEnum(OutputSyslogMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogMaximumTLSVersion$ {
  /** @deprecated use `OutputSyslogMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogMaximumTLSVersion$inboundSchema;
  /** @deprecated use `OutputSyslogMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputSyslogTLSSettingsClientSide$inboundSchema: z.ZodType<
  OutputSyslogTLSSettingsClientSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputSyslogMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: OutputSyslogMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type OutputSyslogTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const OutputSyslogTLSSettingsClientSide$outboundSchema: z.ZodType<
  OutputSyslogTLSSettingsClientSide$Outbound,
  z.ZodTypeDef,
  OutputSyslogTLSSettingsClientSide
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputSyslogMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: OutputSyslogMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogTLSSettingsClientSide$ {
  /** @deprecated use `OutputSyslogTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `OutputSyslogTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema =
    OutputSyslogTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `OutputSyslogTLSSettingsClientSide$Outbound` instead. */
  export type Outbound = OutputSyslogTLSSettingsClientSide$Outbound;
}

export function outputSyslogTLSSettingsClientSideToJSON(
  outputSyslogTLSSettingsClientSide: OutputSyslogTLSSettingsClientSide,
): string {
  return JSON.stringify(
    OutputSyslogTLSSettingsClientSide$outboundSchema.parse(
      outputSyslogTLSSettingsClientSide,
    ),
  );
}

export function outputSyslogTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<OutputSyslogTLSSettingsClientSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSyslogTLSSettingsClientSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSyslogTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const OutputSyslogBackpressureBehavior$inboundSchema: z.ZodType<
  OutputSyslogBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSyslogBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSyslogBackpressureBehavior$outboundSchema: z.ZodType<
  OutputSyslogBackpressureBehavior,
  z.ZodTypeDef,
  OutputSyslogBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputSyslogBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogBackpressureBehavior$ {
  /** @deprecated use `OutputSyslogBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSyslogBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputSyslogCompression$inboundSchema: z.ZodType<
  OutputSyslogCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSyslogCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSyslogCompression$outboundSchema: z.ZodType<
  OutputSyslogCompression,
  z.ZodTypeDef,
  OutputSyslogCompression
> = z.union([
  z.nativeEnum(OutputSyslogCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogCompression$ {
  /** @deprecated use `OutputSyslogCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogCompression$inboundSchema;
  /** @deprecated use `OutputSyslogCompression$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogCompression$outboundSchema;
}

/** @internal */
export const OutputSyslogQueueFullBehavior$inboundSchema: z.ZodType<
  OutputSyslogQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSyslogQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSyslogQueueFullBehavior$outboundSchema: z.ZodType<
  OutputSyslogQueueFullBehavior,
  z.ZodTypeDef,
  OutputSyslogQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputSyslogQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogQueueFullBehavior$ {
  /** @deprecated use `OutputSyslogQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputSyslogQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputSyslogMode$inboundSchema: z.ZodType<
  OutputSyslogMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSyslogMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSyslogMode$outboundSchema: z.ZodType<
  OutputSyslogMode,
  z.ZodTypeDef,
  OutputSyslogMode
> = z.union([
  z.nativeEnum(OutputSyslogMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogMode$ {
  /** @deprecated use `OutputSyslogMode$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogMode$inboundSchema;
  /** @deprecated use `OutputSyslogMode$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogMode$outboundSchema;
}

/** @internal */
export const OutputSyslogPqControls$inboundSchema: z.ZodType<
  OutputSyslogPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSyslogPqControls$Outbound = {};

/** @internal */
export const OutputSyslogPqControls$outboundSchema: z.ZodType<
  OutputSyslogPqControls$Outbound,
  z.ZodTypeDef,
  OutputSyslogPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogPqControls$ {
  /** @deprecated use `OutputSyslogPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogPqControls$inboundSchema;
  /** @deprecated use `OutputSyslogPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogPqControls$outboundSchema;
  /** @deprecated use `OutputSyslogPqControls$Outbound` instead. */
  export type Outbound = OutputSyslogPqControls$Outbound;
}

export function outputSyslogPqControlsToJSON(
  outputSyslogPqControls: OutputSyslogPqControls,
): string {
  return JSON.stringify(
    OutputSyslogPqControls$outboundSchema.parse(outputSyslogPqControls),
  );
}

export function outputSyslogPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSyslogPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSyslogPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSyslogPqControls' from JSON`,
  );
}

/** @internal */
export const OutputSyslogTLS$inboundSchema: z.ZodNativeEnum<
  typeof OutputSyslogTLS
> = z.nativeEnum(OutputSyslogTLS);

/** @internal */
export const OutputSyslogTLS$outboundSchema: z.ZodNativeEnum<
  typeof OutputSyslogTLS
> = OutputSyslogTLS$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogTLS$ {
  /** @deprecated use `OutputSyslogTLS$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogTLS$inboundSchema;
  /** @deprecated use `OutputSyslogTLS$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogTLS$outboundSchema;
}

/** @internal */
export const OutputSyslogHost$inboundSchema: z.ZodType<
  OutputSyslogHost,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  port: z.number().default(9997),
  tls: OutputSyslogTLS$inboundSchema.default("inherit"),
  servername: z.string().optional(),
  weight: z.number().default(1),
});

/** @internal */
export type OutputSyslogHost$Outbound = {
  host: string;
  port: number;
  tls: string;
  servername?: string | undefined;
  weight: number;
};

/** @internal */
export const OutputSyslogHost$outboundSchema: z.ZodType<
  OutputSyslogHost$Outbound,
  z.ZodTypeDef,
  OutputSyslogHost
> = z.object({
  host: z.string(),
  port: z.number().default(9997),
  tls: OutputSyslogTLS$outboundSchema.default("inherit"),
  servername: z.string().optional(),
  weight: z.number().default(1),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslogHost$ {
  /** @deprecated use `OutputSyslogHost$inboundSchema` instead. */
  export const inboundSchema = OutputSyslogHost$inboundSchema;
  /** @deprecated use `OutputSyslogHost$outboundSchema` instead. */
  export const outboundSchema = OutputSyslogHost$outboundSchema;
  /** @deprecated use `OutputSyslogHost$Outbound` instead. */
  export type Outbound = OutputSyslogHost$Outbound;
}

export function outputSyslogHostToJSON(
  outputSyslogHost: OutputSyslogHost,
): string {
  return JSON.stringify(
    OutputSyslogHost$outboundSchema.parse(outputSyslogHost),
  );
}

export function outputSyslogHostFromJSON(
  jsonString: string,
): SafeParseResult<OutputSyslogHost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSyslogHost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSyslogHost' from JSON`,
  );
}

/** @internal */
export const OutputSyslog$inboundSchema: z.ZodType<
  OutputSyslog,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSyslogType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  protocol: OutputSyslogProtocol$inboundSchema.default("tcp"),
  facility: Facility$inboundSchema.default(1),
  severity: OutputSyslogSeverity$inboundSchema.default(5),
  appName: z.string().default("Cribl"),
  messageFormat: OutputSyslogMessageFormat$inboundSchema.default("rfc3164"),
  timestampFormat: TimestampFormat$inboundSchema.default("syslog"),
  throttleRatePerSec: z.string().default("0"),
  octetCountFraming: z.boolean().optional(),
  logFailedRequests: z.boolean().default(false),
  description: z.string().optional(),
  loadBalanced: z.boolean().default(true),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  tls: z.lazy(() => OutputSyslogTLSSettingsClientSide$inboundSchema).optional(),
  onBackpressure: OutputSyslogBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  host: z.string().optional(),
  port: z.number().optional(),
  maxRecordSize: z.number().default(1500),
  udpDnsResolvePeriodSec: z.number().default(0),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSyslogCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputSyslogQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputSyslogMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSyslogPqControls$inboundSchema).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
  maxConcurrentSenders: z.number().default(0),
  excludeSelf: z.boolean().default(false),
  hosts: z.array(z.lazy(() => OutputSyslogHost$inboundSchema)).optional(),
});

/** @internal */
export type OutputSyslog$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  protocol: string;
  facility: number;
  severity: number;
  appName: string;
  messageFormat: string;
  timestampFormat: string;
  throttleRatePerSec: string;
  octetCountFraming?: boolean | undefined;
  logFailedRequests: boolean;
  description?: string | undefined;
  loadBalanced: boolean;
  connectionTimeout: number;
  writeTimeout: number;
  tls?: OutputSyslogTLSSettingsClientSide$Outbound | undefined;
  onBackpressure: string;
  host?: string | undefined;
  port?: number | undefined;
  maxRecordSize: number;
  udpDnsResolvePeriodSec: number;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputSyslogPqControls$Outbound | undefined;
  dnsResolvePeriodSec: number;
  loadBalanceStatsPeriodSec: number;
  maxConcurrentSenders: number;
  excludeSelf: boolean;
  hosts?: Array<OutputSyslogHost$Outbound> | undefined;
};

/** @internal */
export const OutputSyslog$outboundSchema: z.ZodType<
  OutputSyslog$Outbound,
  z.ZodTypeDef,
  OutputSyslog
> = z.object({
  id: z.string().optional(),
  type: OutputSyslogType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  protocol: OutputSyslogProtocol$outboundSchema.default("tcp"),
  facility: Facility$outboundSchema.default(1),
  severity: OutputSyslogSeverity$outboundSchema.default(5),
  appName: z.string().default("Cribl"),
  messageFormat: OutputSyslogMessageFormat$outboundSchema.default("rfc3164"),
  timestampFormat: TimestampFormat$outboundSchema.default("syslog"),
  throttleRatePerSec: z.string().default("0"),
  octetCountFraming: z.boolean().optional(),
  logFailedRequests: z.boolean().default(false),
  description: z.string().optional(),
  loadBalanced: z.boolean().default(true),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  tls: z.lazy(() => OutputSyslogTLSSettingsClientSide$outboundSchema)
    .optional(),
  onBackpressure: OutputSyslogBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  host: z.string().optional(),
  port: z.number().optional(),
  maxRecordSize: z.number().default(1500),
  udpDnsResolvePeriodSec: z.number().default(0),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSyslogCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputSyslogQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputSyslogMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSyslogPqControls$outboundSchema).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
  maxConcurrentSenders: z.number().default(0),
  excludeSelf: z.boolean().default(false),
  hosts: z.array(z.lazy(() => OutputSyslogHost$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSyslog$ {
  /** @deprecated use `OutputSyslog$inboundSchema` instead. */
  export const inboundSchema = OutputSyslog$inboundSchema;
  /** @deprecated use `OutputSyslog$outboundSchema` instead. */
  export const outboundSchema = OutputSyslog$outboundSchema;
  /** @deprecated use `OutputSyslog$Outbound` instead. */
  export type Outbound = OutputSyslog$Outbound;
}

export function outputSyslogToJSON(outputSyslog: OutputSyslog): string {
  return JSON.stringify(OutputSyslog$outboundSchema.parse(outputSyslog));
}

export function outputSyslogFromJSON(
  jsonString: string,
): SafeParseResult<OutputSyslog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSyslog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSyslog' from JSON`,
  );
}
