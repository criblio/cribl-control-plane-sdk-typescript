/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type EmailRecipient = {
  /**
   * Recipients' email addresses
   */
  to: string;
  /**
   * Cc: Recipients' email addresses
   */
  cc?: string | undefined;
  /**
   * Bcc: Recipients' email addresses
   */
  bcc?: string | undefined;
};

export type NotificationConfigForSMTPTarget = {
  /**
   * Email subject
   */
  subject?: string | undefined;
  /**
   * Email body
   */
  body?: string | undefined;
  emailRecipient?: EmailRecipient | undefined;
};

export type TargetConfig = {
  conf?: NotificationConfigForSMTPTarget | undefined;
  id: string;
};

export type TargetConfigUnion = TargetConfig;

export type ConditionSpecificConfigs = {};

export type NotificationMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type Notification = {
  id: string;
  disabled?: boolean | undefined;
  condition: string;
  /**
   * Targets to send any Notifications to
   */
  targets?: Array<string> | undefined;
  targetConfigs?: Array<TargetConfig> | undefined;
  conf?: ConditionSpecificConfigs | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<NotificationMetadatum> | undefined;
};

/** @internal */
export const EmailRecipient$inboundSchema: z.ZodType<
  EmailRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  to: z.string(),
  cc: z.string().optional(),
  bcc: z.string().optional(),
});

/** @internal */
export type EmailRecipient$Outbound = {
  to: string;
  cc?: string | undefined;
  bcc?: string | undefined;
};

/** @internal */
export const EmailRecipient$outboundSchema: z.ZodType<
  EmailRecipient$Outbound,
  z.ZodTypeDef,
  EmailRecipient
> = z.object({
  to: z.string(),
  cc: z.string().optional(),
  bcc: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailRecipient$ {
  /** @deprecated use `EmailRecipient$inboundSchema` instead. */
  export const inboundSchema = EmailRecipient$inboundSchema;
  /** @deprecated use `EmailRecipient$outboundSchema` instead. */
  export const outboundSchema = EmailRecipient$outboundSchema;
  /** @deprecated use `EmailRecipient$Outbound` instead. */
  export type Outbound = EmailRecipient$Outbound;
}

export function emailRecipientToJSON(emailRecipient: EmailRecipient): string {
  return JSON.stringify(EmailRecipient$outboundSchema.parse(emailRecipient));
}

export function emailRecipientFromJSON(
  jsonString: string,
): SafeParseResult<EmailRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailRecipient' from JSON`,
  );
}

/** @internal */
export const NotificationConfigForSMTPTarget$inboundSchema: z.ZodType<
  NotificationConfigForSMTPTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  body: z.string().optional(),
  emailRecipient: z.lazy(() => EmailRecipient$inboundSchema).optional(),
});

/** @internal */
export type NotificationConfigForSMTPTarget$Outbound = {
  subject?: string | undefined;
  body?: string | undefined;
  emailRecipient?: EmailRecipient$Outbound | undefined;
};

/** @internal */
export const NotificationConfigForSMTPTarget$outboundSchema: z.ZodType<
  NotificationConfigForSMTPTarget$Outbound,
  z.ZodTypeDef,
  NotificationConfigForSMTPTarget
> = z.object({
  subject: z.string().optional(),
  body: z.string().optional(),
  emailRecipient: z.lazy(() => EmailRecipient$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationConfigForSMTPTarget$ {
  /** @deprecated use `NotificationConfigForSMTPTarget$inboundSchema` instead. */
  export const inboundSchema = NotificationConfigForSMTPTarget$inboundSchema;
  /** @deprecated use `NotificationConfigForSMTPTarget$outboundSchema` instead. */
  export const outboundSchema = NotificationConfigForSMTPTarget$outboundSchema;
  /** @deprecated use `NotificationConfigForSMTPTarget$Outbound` instead. */
  export type Outbound = NotificationConfigForSMTPTarget$Outbound;
}

export function notificationConfigForSMTPTargetToJSON(
  notificationConfigForSMTPTarget: NotificationConfigForSMTPTarget,
): string {
  return JSON.stringify(
    NotificationConfigForSMTPTarget$outboundSchema.parse(
      notificationConfigForSMTPTarget,
    ),
  );
}

export function notificationConfigForSMTPTargetFromJSON(
  jsonString: string,
): SafeParseResult<NotificationConfigForSMTPTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationConfigForSMTPTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationConfigForSMTPTarget' from JSON`,
  );
}

/** @internal */
export const TargetConfig$inboundSchema: z.ZodType<
  TargetConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  conf: z.lazy(() => NotificationConfigForSMTPTarget$inboundSchema).optional(),
  id: z.string(),
});

/** @internal */
export type TargetConfig$Outbound = {
  conf?: NotificationConfigForSMTPTarget$Outbound | undefined;
  id: string;
};

/** @internal */
export const TargetConfig$outboundSchema: z.ZodType<
  TargetConfig$Outbound,
  z.ZodTypeDef,
  TargetConfig
> = z.object({
  conf: z.lazy(() => NotificationConfigForSMTPTarget$outboundSchema).optional(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetConfig$ {
  /** @deprecated use `TargetConfig$inboundSchema` instead. */
  export const inboundSchema = TargetConfig$inboundSchema;
  /** @deprecated use `TargetConfig$outboundSchema` instead. */
  export const outboundSchema = TargetConfig$outboundSchema;
  /** @deprecated use `TargetConfig$Outbound` instead. */
  export type Outbound = TargetConfig$Outbound;
}

export function targetConfigToJSON(targetConfig: TargetConfig): string {
  return JSON.stringify(TargetConfig$outboundSchema.parse(targetConfig));
}

export function targetConfigFromJSON(
  jsonString: string,
): SafeParseResult<TargetConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TargetConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TargetConfig' from JSON`,
  );
}

/** @internal */
export const TargetConfigUnion$inboundSchema: z.ZodType<
  TargetConfigUnion,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => TargetConfig$inboundSchema);

/** @internal */
export type TargetConfigUnion$Outbound = TargetConfig$Outbound;

/** @internal */
export const TargetConfigUnion$outboundSchema: z.ZodType<
  TargetConfigUnion$Outbound,
  z.ZodTypeDef,
  TargetConfigUnion
> = z.lazy(() => TargetConfig$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetConfigUnion$ {
  /** @deprecated use `TargetConfigUnion$inboundSchema` instead. */
  export const inboundSchema = TargetConfigUnion$inboundSchema;
  /** @deprecated use `TargetConfigUnion$outboundSchema` instead. */
  export const outboundSchema = TargetConfigUnion$outboundSchema;
  /** @deprecated use `TargetConfigUnion$Outbound` instead. */
  export type Outbound = TargetConfigUnion$Outbound;
}

export function targetConfigUnionToJSON(
  targetConfigUnion: TargetConfigUnion,
): string {
  return JSON.stringify(
    TargetConfigUnion$outboundSchema.parse(targetConfigUnion),
  );
}

export function targetConfigUnionFromJSON(
  jsonString: string,
): SafeParseResult<TargetConfigUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TargetConfigUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TargetConfigUnion' from JSON`,
  );
}

/** @internal */
export const ConditionSpecificConfigs$inboundSchema: z.ZodType<
  ConditionSpecificConfigs,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ConditionSpecificConfigs$Outbound = {};

/** @internal */
export const ConditionSpecificConfigs$outboundSchema: z.ZodType<
  ConditionSpecificConfigs$Outbound,
  z.ZodTypeDef,
  ConditionSpecificConfigs
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConditionSpecificConfigs$ {
  /** @deprecated use `ConditionSpecificConfigs$inboundSchema` instead. */
  export const inboundSchema = ConditionSpecificConfigs$inboundSchema;
  /** @deprecated use `ConditionSpecificConfigs$outboundSchema` instead. */
  export const outboundSchema = ConditionSpecificConfigs$outboundSchema;
  /** @deprecated use `ConditionSpecificConfigs$Outbound` instead. */
  export type Outbound = ConditionSpecificConfigs$Outbound;
}

export function conditionSpecificConfigsToJSON(
  conditionSpecificConfigs: ConditionSpecificConfigs,
): string {
  return JSON.stringify(
    ConditionSpecificConfigs$outboundSchema.parse(conditionSpecificConfigs),
  );
}

export function conditionSpecificConfigsFromJSON(
  jsonString: string,
): SafeParseResult<ConditionSpecificConfigs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConditionSpecificConfigs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConditionSpecificConfigs' from JSON`,
  );
}

/** @internal */
export const NotificationMetadatum$inboundSchema: z.ZodType<
  NotificationMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type NotificationMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const NotificationMetadatum$outboundSchema: z.ZodType<
  NotificationMetadatum$Outbound,
  z.ZodTypeDef,
  NotificationMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationMetadatum$ {
  /** @deprecated use `NotificationMetadatum$inboundSchema` instead. */
  export const inboundSchema = NotificationMetadatum$inboundSchema;
  /** @deprecated use `NotificationMetadatum$outboundSchema` instead. */
  export const outboundSchema = NotificationMetadatum$outboundSchema;
  /** @deprecated use `NotificationMetadatum$Outbound` instead. */
  export type Outbound = NotificationMetadatum$Outbound;
}

export function notificationMetadatumToJSON(
  notificationMetadatum: NotificationMetadatum,
): string {
  return JSON.stringify(
    NotificationMetadatum$outboundSchema.parse(notificationMetadatum),
  );
}

export function notificationMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<NotificationMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationMetadatum' from JSON`,
  );
}

/** @internal */
export const Notification$inboundSchema: z.ZodType<
  Notification,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  disabled: z.boolean().default(false),
  condition: z.string(),
  targets: z.array(z.string()).optional(),
  targetConfigs: z.array(z.lazy(() => TargetConfig$inboundSchema)).optional(),
  conf: z.lazy(() => ConditionSpecificConfigs$inboundSchema).optional(),
  metadata: z.array(z.lazy(() => NotificationMetadatum$inboundSchema))
    .optional(),
});

/** @internal */
export type Notification$Outbound = {
  id: string;
  disabled: boolean;
  condition: string;
  targets?: Array<string> | undefined;
  targetConfigs?: Array<TargetConfig$Outbound> | undefined;
  conf?: ConditionSpecificConfigs$Outbound | undefined;
  metadata?: Array<NotificationMetadatum$Outbound> | undefined;
};

/** @internal */
export const Notification$outboundSchema: z.ZodType<
  Notification$Outbound,
  z.ZodTypeDef,
  Notification
> = z.object({
  id: z.string(),
  disabled: z.boolean().default(false),
  condition: z.string(),
  targets: z.array(z.string()).optional(),
  targetConfigs: z.array(z.lazy(() => TargetConfig$outboundSchema)).optional(),
  conf: z.lazy(() => ConditionSpecificConfigs$outboundSchema).optional(),
  metadata: z.array(z.lazy(() => NotificationMetadatum$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Notification$ {
  /** @deprecated use `Notification$inboundSchema` instead. */
  export const inboundSchema = Notification$inboundSchema;
  /** @deprecated use `Notification$outboundSchema` instead. */
  export const outboundSchema = Notification$outboundSchema;
  /** @deprecated use `Notification$Outbound` instead. */
  export type Outbound = Notification$Outbound;
}

export function notificationToJSON(notification: Notification): string {
  return JSON.stringify(Notification$outboundSchema.parse(notification));
}

export function notificationFromJSON(
  jsonString: string,
): SafeParseResult<Notification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Notification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Notification' from JSON`,
  );
}
