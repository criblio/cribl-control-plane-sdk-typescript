/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputGrafanaCloudType = {
  GrafanaCloud: "grafana_cloud",
} as const;
export type OutputGrafanaCloudType = ClosedEnum<typeof OutputGrafanaCloudType>;

/**
 * Format to use when sending logs to Loki (Protobuf or JSON)
 */
export const OutputGrafanaCloudMessageFormat = {
  Protobuf: "protobuf",
  Json: "json",
} as const;
/**
 * Format to use when sending logs to Loki (Protobuf or JSON)
 */
export type OutputGrafanaCloudMessageFormat = ClosedEnum<
  typeof OutputGrafanaCloudMessageFormat
>;

export type OutputGrafanaCloudLabel = {
  name?: string | undefined;
  value: string;
};

export const OutputGrafanaCloudPrometheusAuthAuthenticationType = {
  None: "none",
  Token: "token",
  TextSecret: "textSecret",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
} as const;
export type OutputGrafanaCloudPrometheusAuthAuthenticationType = ClosedEnum<
  typeof OutputGrafanaCloudPrometheusAuthAuthenticationType
>;

export type OutputGrafanaCloudPrometheusAuth = {
  authType?: OutputGrafanaCloudPrometheusAuthAuthenticationType | undefined;
  /**
   * Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * Username for authentication
   */
  username?: string | undefined;
  /**
   * Password (API key in Grafana Cloud domain) for authentication
   */
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

export const OutputGrafanaCloudLokiAuthAuthenticationType = {
  None: "none",
  Token: "token",
  TextSecret: "textSecret",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
} as const;
export type OutputGrafanaCloudLokiAuthAuthenticationType = ClosedEnum<
  typeof OutputGrafanaCloudLokiAuthAuthenticationType
>;

export type OutputGrafanaCloudLokiAuth = {
  authType?: OutputGrafanaCloudLokiAuthAuthenticationType | undefined;
  /**
   * Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * Username for authentication
   */
  username?: string | undefined;
  /**
   * Password (API key in Grafana Cloud domain) for authentication
   */
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

export type OutputGrafanaCloudExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputGrafanaCloudFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputGrafanaCloudFailedRequestLoggingMode = ClosedEnum<
  typeof OutputGrafanaCloudFailedRequestLoggingMode
>;

export type OutputGrafanaCloudResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputGrafanaCloudTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputGrafanaCloudBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputGrafanaCloudBackpressureBehavior = ClosedEnum<
  typeof OutputGrafanaCloudBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputGrafanaCloudCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputGrafanaCloudCompression = ClosedEnum<
  typeof OutputGrafanaCloudCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputGrafanaCloudQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputGrafanaCloudQueueFullBehavior = ClosedEnum<
  typeof OutputGrafanaCloudQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputGrafanaCloudMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputGrafanaCloudMode = ClosedEnum<typeof OutputGrafanaCloudMode>;

export type OutputGrafanaCloudPqControls = {};

export type OutputGrafanaCloud = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputGrafanaCloudType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The endpoint to send logs to, such as https://logs-prod-us-central1.grafana.net
   */
  lokiUrl?: string | undefined;
  /**
   * The remote_write endpoint to send Prometheus metrics to, such as https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push
   */
  prometheusUrl?: string | undefined;
  /**
   * Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event.
   */
  message?: string | undefined;
  /**
   * Format to use when sending logs to Loki (Protobuf or JSON)
   */
  messageFormat?: OutputGrafanaCloudMessageFormat | undefined;
  /**
   * List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field. Example: '__labels: {host: "cribl.io", level: "error"}'
   */
  labels?: Array<OutputGrafanaCloudLabel> | undefined;
  /**
   * JavaScript expression that can be used to rename metrics. For example, name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name. You can access event fields' values via __e.<fieldName>.
   */
  metricRenameExpr?: string | undefined;
  prometheusAuth?: OutputGrafanaCloudPrometheusAuth | undefined;
  lokiAuth?: OutputGrafanaCloudLokiAuth | undefined;
  /**
   * Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputGrafanaCloudExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputGrafanaCloudFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Add structured metadata fields from __structuredMetadata to each log. Key-value pairs must be strings.
   */
  sendStructuredMetadata?: boolean | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputGrafanaCloudResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?: OutputGrafanaCloudTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputGrafanaCloudBackpressureBehavior | undefined;
  description?: string | undefined;
  /**
   * Compress the payload body before sending. Applies only to JSON payloads; the Protobuf variant for both Prometheus and Loki are snappy-compressed by default.
   */
  compress?: boolean | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputGrafanaCloudCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputGrafanaCloudQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputGrafanaCloudMode | undefined;
  pqControls?: OutputGrafanaCloudPqControls | undefined;
};

/** @internal */
export const OutputGrafanaCloudType$inboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudType
> = z.nativeEnum(OutputGrafanaCloudType);

/** @internal */
export const OutputGrafanaCloudType$outboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudType
> = OutputGrafanaCloudType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudType$ {
  /** @deprecated use `OutputGrafanaCloudType$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudType$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudType$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudType$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudMessageFormat$inboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudMessageFormat
> = z.nativeEnum(OutputGrafanaCloudMessageFormat);

/** @internal */
export const OutputGrafanaCloudMessageFormat$outboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudMessageFormat
> = OutputGrafanaCloudMessageFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudMessageFormat$ {
  /** @deprecated use `OutputGrafanaCloudMessageFormat$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudMessageFormat$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudMessageFormat$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudMessageFormat$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudLabel$inboundSchema: z.ZodType<
  OutputGrafanaCloudLabel,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputGrafanaCloudLabel$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputGrafanaCloudLabel$outboundSchema: z.ZodType<
  OutputGrafanaCloudLabel$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudLabel
> = z.object({
  name: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudLabel$ {
  /** @deprecated use `OutputGrafanaCloudLabel$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudLabel$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudLabel$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudLabel$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudLabel$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudLabel$Outbound;
}

export function outputGrafanaCloudLabelToJSON(
  outputGrafanaCloudLabel: OutputGrafanaCloudLabel,
): string {
  return JSON.stringify(
    OutputGrafanaCloudLabel$outboundSchema.parse(outputGrafanaCloudLabel),
  );
}

export function outputGrafanaCloudLabelFromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudLabel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudLabel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudLabel' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudPrometheusAuthAuthenticationType$inboundSchema:
  z.ZodNativeEnum<typeof OutputGrafanaCloudPrometheusAuthAuthenticationType> = z
    .nativeEnum(OutputGrafanaCloudPrometheusAuthAuthenticationType);

/** @internal */
export const OutputGrafanaCloudPrometheusAuthAuthenticationType$outboundSchema:
  z.ZodNativeEnum<typeof OutputGrafanaCloudPrometheusAuthAuthenticationType> =
    OutputGrafanaCloudPrometheusAuthAuthenticationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudPrometheusAuthAuthenticationType$ {
  /** @deprecated use `OutputGrafanaCloudPrometheusAuthAuthenticationType$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudPrometheusAuthAuthenticationType$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudPrometheusAuthAuthenticationType$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudPrometheusAuthAuthenticationType$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudPrometheusAuth$inboundSchema: z.ZodType<
  OutputGrafanaCloudPrometheusAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: OutputGrafanaCloudPrometheusAuthAuthenticationType$inboundSchema
    .default("basic"),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type OutputGrafanaCloudPrometheusAuth$Outbound = {
  authType: string;
  token?: string | undefined;
  textSecret?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const OutputGrafanaCloudPrometheusAuth$outboundSchema: z.ZodType<
  OutputGrafanaCloudPrometheusAuth$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudPrometheusAuth
> = z.object({
  authType: OutputGrafanaCloudPrometheusAuthAuthenticationType$outboundSchema
    .default("basic"),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudPrometheusAuth$ {
  /** @deprecated use `OutputGrafanaCloudPrometheusAuth$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudPrometheusAuth$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudPrometheusAuth$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudPrometheusAuth$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudPrometheusAuth$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudPrometheusAuth$Outbound;
}

export function outputGrafanaCloudPrometheusAuthToJSON(
  outputGrafanaCloudPrometheusAuth: OutputGrafanaCloudPrometheusAuth,
): string {
  return JSON.stringify(
    OutputGrafanaCloudPrometheusAuth$outboundSchema.parse(
      outputGrafanaCloudPrometheusAuth,
    ),
  );
}

export function outputGrafanaCloudPrometheusAuthFromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudPrometheusAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudPrometheusAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudPrometheusAuth' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudLokiAuthAuthenticationType$inboundSchema:
  z.ZodNativeEnum<typeof OutputGrafanaCloudLokiAuthAuthenticationType> = z
    .nativeEnum(OutputGrafanaCloudLokiAuthAuthenticationType);

/** @internal */
export const OutputGrafanaCloudLokiAuthAuthenticationType$outboundSchema:
  z.ZodNativeEnum<typeof OutputGrafanaCloudLokiAuthAuthenticationType> =
    OutputGrafanaCloudLokiAuthAuthenticationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudLokiAuthAuthenticationType$ {
  /** @deprecated use `OutputGrafanaCloudLokiAuthAuthenticationType$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudLokiAuthAuthenticationType$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudLokiAuthAuthenticationType$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudLokiAuthAuthenticationType$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudLokiAuth$inboundSchema: z.ZodType<
  OutputGrafanaCloudLokiAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: OutputGrafanaCloudLokiAuthAuthenticationType$inboundSchema.default(
    "basic",
  ),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type OutputGrafanaCloudLokiAuth$Outbound = {
  authType: string;
  token?: string | undefined;
  textSecret?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const OutputGrafanaCloudLokiAuth$outboundSchema: z.ZodType<
  OutputGrafanaCloudLokiAuth$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudLokiAuth
> = z.object({
  authType: OutputGrafanaCloudLokiAuthAuthenticationType$outboundSchema.default(
    "basic",
  ),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudLokiAuth$ {
  /** @deprecated use `OutputGrafanaCloudLokiAuth$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudLokiAuth$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudLokiAuth$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudLokiAuth$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudLokiAuth$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudLokiAuth$Outbound;
}

export function outputGrafanaCloudLokiAuthToJSON(
  outputGrafanaCloudLokiAuth: OutputGrafanaCloudLokiAuth,
): string {
  return JSON.stringify(
    OutputGrafanaCloudLokiAuth$outboundSchema.parse(outputGrafanaCloudLokiAuth),
  );
}

export function outputGrafanaCloudLokiAuthFromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudLokiAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudLokiAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudLokiAuth' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudExtraHttpHeader$inboundSchema: z.ZodType<
  OutputGrafanaCloudExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputGrafanaCloudExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputGrafanaCloudExtraHttpHeader$outboundSchema: z.ZodType<
  OutputGrafanaCloudExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudExtraHttpHeader$ {
  /** @deprecated use `OutputGrafanaCloudExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudExtraHttpHeader$Outbound;
}

export function outputGrafanaCloudExtraHttpHeaderToJSON(
  outputGrafanaCloudExtraHttpHeader: OutputGrafanaCloudExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputGrafanaCloudExtraHttpHeader$outboundSchema.parse(
      outputGrafanaCloudExtraHttpHeader,
    ),
  );
}

export function outputGrafanaCloudExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudFailedRequestLoggingMode$inboundSchema:
  z.ZodNativeEnum<typeof OutputGrafanaCloudFailedRequestLoggingMode> = z
    .nativeEnum(OutputGrafanaCloudFailedRequestLoggingMode);

/** @internal */
export const OutputGrafanaCloudFailedRequestLoggingMode$outboundSchema:
  z.ZodNativeEnum<typeof OutputGrafanaCloudFailedRequestLoggingMode> =
    OutputGrafanaCloudFailedRequestLoggingMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudFailedRequestLoggingMode$ {
  /** @deprecated use `OutputGrafanaCloudFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudResponseRetrySetting$inboundSchema: z.ZodType<
  OutputGrafanaCloudResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputGrafanaCloudResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputGrafanaCloudResponseRetrySetting$outboundSchema: z.ZodType<
  OutputGrafanaCloudResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudResponseRetrySetting$ {
  /** @deprecated use `OutputGrafanaCloudResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudResponseRetrySetting$Outbound;
}

export function outputGrafanaCloudResponseRetrySettingToJSON(
  outputGrafanaCloudResponseRetrySetting:
    OutputGrafanaCloudResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputGrafanaCloudResponseRetrySetting$outboundSchema.parse(
      outputGrafanaCloudResponseRetrySetting,
    ),
  );
}

export function outputGrafanaCloudResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGrafanaCloudResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputGrafanaCloudTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputGrafanaCloudTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputGrafanaCloudTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputGrafanaCloudTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudTimeoutRetrySettings$ {
  /** @deprecated use `OutputGrafanaCloudTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudTimeoutRetrySettings$Outbound;
}

export function outputGrafanaCloudTimeoutRetrySettingsToJSON(
  outputGrafanaCloudTimeoutRetrySettings:
    OutputGrafanaCloudTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputGrafanaCloudTimeoutRetrySettings$outboundSchema.parse(
      outputGrafanaCloudTimeoutRetrySettings,
    ),
  );
}

export function outputGrafanaCloudTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGrafanaCloudTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudBackpressureBehavior$inboundSchema:
  z.ZodNativeEnum<typeof OutputGrafanaCloudBackpressureBehavior> = z.nativeEnum(
    OutputGrafanaCloudBackpressureBehavior,
  );

/** @internal */
export const OutputGrafanaCloudBackpressureBehavior$outboundSchema:
  z.ZodNativeEnum<typeof OutputGrafanaCloudBackpressureBehavior> =
    OutputGrafanaCloudBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudBackpressureBehavior$ {
  /** @deprecated use `OutputGrafanaCloudBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudCompression
> = z.nativeEnum(OutputGrafanaCloudCompression);

/** @internal */
export const OutputGrafanaCloudCompression$outboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudCompression
> = OutputGrafanaCloudCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudCompression$ {
  /** @deprecated use `OutputGrafanaCloudCompression$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudCompression$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudCompression$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudCompression$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudQueueFullBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudQueueFullBehavior
> = z.nativeEnum(OutputGrafanaCloudQueueFullBehavior);

/** @internal */
export const OutputGrafanaCloudQueueFullBehavior$outboundSchema:
  z.ZodNativeEnum<typeof OutputGrafanaCloudQueueFullBehavior> =
    OutputGrafanaCloudQueueFullBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudQueueFullBehavior$ {
  /** @deprecated use `OutputGrafanaCloudQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudMode$inboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudMode
> = z.nativeEnum(OutputGrafanaCloudMode);

/** @internal */
export const OutputGrafanaCloudMode$outboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudMode
> = OutputGrafanaCloudMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudMode$ {
  /** @deprecated use `OutputGrafanaCloudMode$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudMode$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudMode$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudMode$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudPqControls$inboundSchema: z.ZodType<
  OutputGrafanaCloudPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputGrafanaCloudPqControls$Outbound = {};

/** @internal */
export const OutputGrafanaCloudPqControls$outboundSchema: z.ZodType<
  OutputGrafanaCloudPqControls$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudPqControls$ {
  /** @deprecated use `OutputGrafanaCloudPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudPqControls$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudPqControls$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudPqControls$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudPqControls$Outbound;
}

export function outputGrafanaCloudPqControlsToJSON(
  outputGrafanaCloudPqControls: OutputGrafanaCloudPqControls,
): string {
  return JSON.stringify(
    OutputGrafanaCloudPqControls$outboundSchema.parse(
      outputGrafanaCloudPqControls,
    ),
  );
}

export function outputGrafanaCloudPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudPqControls' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloud$inboundSchema: z.ZodType<
  OutputGrafanaCloud,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputGrafanaCloudType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  lokiUrl: z.string().optional(),
  prometheusUrl: z.string().optional(),
  message: z.string().optional(),
  messageFormat: OutputGrafanaCloudMessageFormat$inboundSchema.default(
    "protobuf",
  ),
  labels: z.array(z.lazy(() => OutputGrafanaCloudLabel$inboundSchema))
    .optional(),
  metricRenameExpr: z.string().default("name.replace(/[^a-zA-Z0-9_]/g, '_')"),
  prometheusAuth: z.lazy(() => OutputGrafanaCloudPrometheusAuth$inboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => OutputGrafanaCloudLokiAuth$inboundSchema).optional(),
  concurrency: z.number().default(1),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(15),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputGrafanaCloudExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputGrafanaCloudFailedRequestLoggingMode$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  sendStructuredMetadata: z.boolean().default(false),
  responseRetrySettings: z.array(
    z.lazy(() => OutputGrafanaCloudResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputGrafanaCloudTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputGrafanaCloudBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  compress: z.boolean().default(true),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGrafanaCloudCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputGrafanaCloudQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputGrafanaCloudMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGrafanaCloudPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type OutputGrafanaCloud$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  lokiUrl?: string | undefined;
  prometheusUrl?: string | undefined;
  message?: string | undefined;
  messageFormat: string;
  labels?: Array<OutputGrafanaCloudLabel$Outbound> | undefined;
  metricRenameExpr: string;
  prometheusAuth?: OutputGrafanaCloudPrometheusAuth$Outbound | undefined;
  lokiAuth?: OutputGrafanaCloudLokiAuth$Outbound | undefined;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?:
    | Array<OutputGrafanaCloudExtraHttpHeader$Outbound>
    | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  sendStructuredMetadata: boolean;
  responseRetrySettings?:
    | Array<OutputGrafanaCloudResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputGrafanaCloudTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  description?: string | undefined;
  compress: boolean;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputGrafanaCloudPqControls$Outbound | undefined;
};

/** @internal */
export const OutputGrafanaCloud$outboundSchema: z.ZodType<
  OutputGrafanaCloud$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloud
> = z.object({
  id: z.string().optional(),
  type: OutputGrafanaCloudType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  lokiUrl: z.string().optional(),
  prometheusUrl: z.string().optional(),
  message: z.string().optional(),
  messageFormat: OutputGrafanaCloudMessageFormat$outboundSchema.default(
    "protobuf",
  ),
  labels: z.array(z.lazy(() => OutputGrafanaCloudLabel$outboundSchema))
    .optional(),
  metricRenameExpr: z.string().default("name.replace(/[^a-zA-Z0-9_]/g, '_')"),
  prometheusAuth: z.lazy(() => OutputGrafanaCloudPrometheusAuth$outboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => OutputGrafanaCloudLokiAuth$outboundSchema).optional(),
  concurrency: z.number().default(1),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(15),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputGrafanaCloudExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputGrafanaCloudFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  sendStructuredMetadata: z.boolean().default(false),
  responseRetrySettings: z.array(
    z.lazy(() => OutputGrafanaCloudResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputGrafanaCloudTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputGrafanaCloudBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  compress: z.boolean().default(true),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGrafanaCloudCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputGrafanaCloudQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputGrafanaCloudMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGrafanaCloudPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloud$ {
  /** @deprecated use `OutputGrafanaCloud$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloud$inboundSchema;
  /** @deprecated use `OutputGrafanaCloud$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloud$outboundSchema;
  /** @deprecated use `OutputGrafanaCloud$Outbound` instead. */
  export type Outbound = OutputGrafanaCloud$Outbound;
}

export function outputGrafanaCloudToJSON(
  outputGrafanaCloud: OutputGrafanaCloud,
): string {
  return JSON.stringify(
    OutputGrafanaCloud$outboundSchema.parse(outputGrafanaCloud),
  );
}

export function outputGrafanaCloudFromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloud, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloud$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloud' from JSON`,
  );
}
