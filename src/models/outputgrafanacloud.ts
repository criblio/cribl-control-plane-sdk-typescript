/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputGrafanaCloudType2 = {
  GrafanaCloud: "grafana_cloud",
} as const;
export type OutputGrafanaCloudType2 = ClosedEnum<
  typeof OutputGrafanaCloudType2
>;

/**
 * Format to use when sending logs to Loki (Protobuf or JSON)
 */
export const OutputGrafanaCloudMessageFormat2 = {
  Protobuf: "protobuf",
  Json: "json",
} as const;
/**
 * Format to use when sending logs to Loki (Protobuf or JSON)
 */
export type OutputGrafanaCloudMessageFormat2 = OpenEnum<
  typeof OutputGrafanaCloudMessageFormat2
>;

export type OutputGrafanaCloudLabel2 = {
  name?: string | undefined;
  value: string;
};

export const OutputGrafanaCloudPrometheusAuthAuthenticationType2 = {
  None: "none",
  Token: "token",
  TextSecret: "textSecret",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
} as const;
export type OutputGrafanaCloudPrometheusAuthAuthenticationType2 = OpenEnum<
  typeof OutputGrafanaCloudPrometheusAuthAuthenticationType2
>;

export type OutputGrafanaCloudPrometheusAuth2 = {
  authType?: OutputGrafanaCloudPrometheusAuthAuthenticationType2 | undefined;
  /**
   * Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * Username for authentication
   */
  username?: string | undefined;
  /**
   * Password (API key in Grafana Cloud domain) for authentication
   */
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

export const OutputGrafanaCloudLokiAuthAuthenticationType2 = {
  None: "none",
  Token: "token",
  TextSecret: "textSecret",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
} as const;
export type OutputGrafanaCloudLokiAuthAuthenticationType2 = OpenEnum<
  typeof OutputGrafanaCloudLokiAuthAuthenticationType2
>;

export type OutputGrafanaCloudLokiAuth2 = {
  authType?: OutputGrafanaCloudLokiAuthAuthenticationType2 | undefined;
  /**
   * Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * Username for authentication
   */
  username?: string | undefined;
  /**
   * Password (API key in Grafana Cloud domain) for authentication
   */
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

export type OutputGrafanaCloudExtraHttpHeader2 = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputGrafanaCloudFailedRequestLoggingMode2 = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputGrafanaCloudFailedRequestLoggingMode2 = OpenEnum<
  typeof OutputGrafanaCloudFailedRequestLoggingMode2
>;

export type OutputGrafanaCloudResponseRetrySetting2 = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputGrafanaCloudTimeoutRetrySettings2 = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputGrafanaCloudBackpressureBehavior2 = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputGrafanaCloudBackpressureBehavior2 = OpenEnum<
  typeof OutputGrafanaCloudBackpressureBehavior2
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputGrafanaCloudCompression2 = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputGrafanaCloudCompression2 = OpenEnum<
  typeof OutputGrafanaCloudCompression2
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputGrafanaCloudQueueFullBehavior2 = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputGrafanaCloudQueueFullBehavior2 = OpenEnum<
  typeof OutputGrafanaCloudQueueFullBehavior2
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputGrafanaCloudMode2 = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputGrafanaCloudMode2 = OpenEnum<typeof OutputGrafanaCloudMode2>;

export type OutputGrafanaCloudPqControls2 = {};

export type OutputGrafanaCloudGrafanaCloud2 = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputGrafanaCloudType2;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The endpoint to send logs to, such as https://logs-prod-us-central1.grafana.net
   */
  lokiUrl?: string | undefined;
  /**
   * The remote_write endpoint to send Prometheus metrics to, such as https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push
   */
  prometheusUrl: string;
  /**
   * Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event.
   */
  message?: string | undefined;
  /**
   * Format to use when sending logs to Loki (Protobuf or JSON)
   */
  messageFormat?: OutputGrafanaCloudMessageFormat2 | undefined;
  /**
   * List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field. Example: '__labels: {host: "cribl.io", level: "error"}'
   */
  labels?: Array<OutputGrafanaCloudLabel2> | undefined;
  /**
   * JavaScript expression that can be used to rename metrics. For example, name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name. You can access event fields' values via __e.<fieldName>.
   */
  metricRenameExpr?: string | undefined;
  prometheusAuth?: OutputGrafanaCloudPrometheusAuth2 | undefined;
  lokiAuth?: OutputGrafanaCloudLokiAuth2 | undefined;
  /**
   * Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputGrafanaCloudExtraHttpHeader2> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputGrafanaCloudFailedRequestLoggingMode2
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputGrafanaCloudResponseRetrySetting2>
    | undefined;
  timeoutRetrySettings?: OutputGrafanaCloudTimeoutRetrySettings2 | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputGrafanaCloudBackpressureBehavior2 | undefined;
  description?: string | undefined;
  /**
   * Compress the payload body before sending. Applies only to JSON payloads; the Protobuf variant for both Prometheus and Loki are snappy-compressed by default.
   */
  compress?: boolean | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputGrafanaCloudCompression2 | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputGrafanaCloudQueueFullBehavior2 | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputGrafanaCloudMode2 | undefined;
  pqControls?: OutputGrafanaCloudPqControls2 | undefined;
};

export const OutputGrafanaCloudType1 = {
  GrafanaCloud: "grafana_cloud",
} as const;
export type OutputGrafanaCloudType1 = ClosedEnum<
  typeof OutputGrafanaCloudType1
>;

/**
 * Format to use when sending logs to Loki (Protobuf or JSON)
 */
export const OutputGrafanaCloudMessageFormat1 = {
  Protobuf: "protobuf",
  Json: "json",
} as const;
/**
 * Format to use when sending logs to Loki (Protobuf or JSON)
 */
export type OutputGrafanaCloudMessageFormat1 = OpenEnum<
  typeof OutputGrafanaCloudMessageFormat1
>;

export type OutputGrafanaCloudLabel1 = {
  name?: string | undefined;
  value: string;
};

export const OutputGrafanaCloudPrometheusAuthAuthenticationType1 = {
  None: "none",
  Token: "token",
  TextSecret: "textSecret",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
} as const;
export type OutputGrafanaCloudPrometheusAuthAuthenticationType1 = OpenEnum<
  typeof OutputGrafanaCloudPrometheusAuthAuthenticationType1
>;

export type OutputGrafanaCloudPrometheusAuth1 = {
  authType?: OutputGrafanaCloudPrometheusAuthAuthenticationType1 | undefined;
  /**
   * Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * Username for authentication
   */
  username?: string | undefined;
  /**
   * Password (API key in Grafana Cloud domain) for authentication
   */
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

export const OutputGrafanaCloudLokiAuthAuthenticationType1 = {
  None: "none",
  Token: "token",
  TextSecret: "textSecret",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
} as const;
export type OutputGrafanaCloudLokiAuthAuthenticationType1 = OpenEnum<
  typeof OutputGrafanaCloudLokiAuthAuthenticationType1
>;

export type OutputGrafanaCloudLokiAuth1 = {
  authType?: OutputGrafanaCloudLokiAuthAuthenticationType1 | undefined;
  /**
   * Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * Username for authentication
   */
  username?: string | undefined;
  /**
   * Password (API key in Grafana Cloud domain) for authentication
   */
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

export type OutputGrafanaCloudExtraHttpHeader1 = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputGrafanaCloudFailedRequestLoggingMode1 = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputGrafanaCloudFailedRequestLoggingMode1 = OpenEnum<
  typeof OutputGrafanaCloudFailedRequestLoggingMode1
>;

export type OutputGrafanaCloudResponseRetrySetting1 = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputGrafanaCloudTimeoutRetrySettings1 = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputGrafanaCloudBackpressureBehavior1 = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputGrafanaCloudBackpressureBehavior1 = OpenEnum<
  typeof OutputGrafanaCloudBackpressureBehavior1
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputGrafanaCloudCompression1 = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputGrafanaCloudCompression1 = OpenEnum<
  typeof OutputGrafanaCloudCompression1
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputGrafanaCloudQueueFullBehavior1 = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputGrafanaCloudQueueFullBehavior1 = OpenEnum<
  typeof OutputGrafanaCloudQueueFullBehavior1
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputGrafanaCloudMode1 = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputGrafanaCloudMode1 = OpenEnum<typeof OutputGrafanaCloudMode1>;

export type OutputGrafanaCloudPqControls1 = {};

export type OutputGrafanaCloudGrafanaCloud1 = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputGrafanaCloudType1;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The endpoint to send logs to, such as https://logs-prod-us-central1.grafana.net
   */
  lokiUrl: string;
  /**
   * The remote_write endpoint to send Prometheus metrics to, such as https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push
   */
  prometheusUrl?: string | undefined;
  /**
   * Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event.
   */
  message?: string | undefined;
  /**
   * Format to use when sending logs to Loki (Protobuf or JSON)
   */
  messageFormat?: OutputGrafanaCloudMessageFormat1 | undefined;
  /**
   * List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field. Example: '__labels: {host: "cribl.io", level: "error"}'
   */
  labels?: Array<OutputGrafanaCloudLabel1> | undefined;
  /**
   * JavaScript expression that can be used to rename metrics. For example, name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name. You can access event fields' values via __e.<fieldName>.
   */
  metricRenameExpr?: string | undefined;
  prometheusAuth?: OutputGrafanaCloudPrometheusAuth1 | undefined;
  lokiAuth?: OutputGrafanaCloudLokiAuth1 | undefined;
  /**
   * Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputGrafanaCloudExtraHttpHeader1> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputGrafanaCloudFailedRequestLoggingMode1
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputGrafanaCloudResponseRetrySetting1>
    | undefined;
  timeoutRetrySettings?: OutputGrafanaCloudTimeoutRetrySettings1 | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputGrafanaCloudBackpressureBehavior1 | undefined;
  description?: string | undefined;
  /**
   * Compress the payload body before sending. Applies only to JSON payloads; the Protobuf variant for both Prometheus and Loki are snappy-compressed by default.
   */
  compress?: boolean | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputGrafanaCloudCompression1 | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputGrafanaCloudQueueFullBehavior1 | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputGrafanaCloudMode1 | undefined;
  pqControls?: OutputGrafanaCloudPqControls1 | undefined;
};

export type OutputGrafanaCloud =
  | OutputGrafanaCloudGrafanaCloud1
  | OutputGrafanaCloudGrafanaCloud2;

/** @internal */
export const OutputGrafanaCloudType2$inboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudType2
> = z.nativeEnum(OutputGrafanaCloudType2);

/** @internal */
export const OutputGrafanaCloudType2$outboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudType2
> = OutputGrafanaCloudType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudType2$ {
  /** @deprecated use `OutputGrafanaCloudType2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudType2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudType2$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudType2$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudMessageFormat2$inboundSchema: z.ZodType<
  OutputGrafanaCloudMessageFormat2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudMessageFormat2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudMessageFormat2$outboundSchema: z.ZodType<
  OutputGrafanaCloudMessageFormat2,
  z.ZodTypeDef,
  OutputGrafanaCloudMessageFormat2
> = z.union([
  z.nativeEnum(OutputGrafanaCloudMessageFormat2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudMessageFormat2$ {
  /** @deprecated use `OutputGrafanaCloudMessageFormat2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudMessageFormat2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudMessageFormat2$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudMessageFormat2$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudLabel2$inboundSchema: z.ZodType<
  OutputGrafanaCloudLabel2,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputGrafanaCloudLabel2$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputGrafanaCloudLabel2$outboundSchema: z.ZodType<
  OutputGrafanaCloudLabel2$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudLabel2
> = z.object({
  name: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudLabel2$ {
  /** @deprecated use `OutputGrafanaCloudLabel2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudLabel2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudLabel2$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudLabel2$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudLabel2$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudLabel2$Outbound;
}

export function outputGrafanaCloudLabel2ToJSON(
  outputGrafanaCloudLabel2: OutputGrafanaCloudLabel2,
): string {
  return JSON.stringify(
    OutputGrafanaCloudLabel2$outboundSchema.parse(outputGrafanaCloudLabel2),
  );
}

export function outputGrafanaCloudLabel2FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudLabel2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudLabel2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudLabel2' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudPrometheusAuthAuthenticationType2$inboundSchema:
  z.ZodType<
    OutputGrafanaCloudPrometheusAuthAuthenticationType2,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputGrafanaCloudPrometheusAuthAuthenticationType2),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputGrafanaCloudPrometheusAuthAuthenticationType2$outboundSchema:
  z.ZodType<
    OutputGrafanaCloudPrometheusAuthAuthenticationType2,
    z.ZodTypeDef,
    OutputGrafanaCloudPrometheusAuthAuthenticationType2
  > = z.union([
    z.nativeEnum(OutputGrafanaCloudPrometheusAuthAuthenticationType2),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudPrometheusAuthAuthenticationType2$ {
  /** @deprecated use `OutputGrafanaCloudPrometheusAuthAuthenticationType2$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudPrometheusAuthAuthenticationType2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudPrometheusAuthAuthenticationType2$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudPrometheusAuthAuthenticationType2$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudPrometheusAuth2$inboundSchema: z.ZodType<
  OutputGrafanaCloudPrometheusAuth2,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: OutputGrafanaCloudPrometheusAuthAuthenticationType2$inboundSchema
    .default("basic"),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type OutputGrafanaCloudPrometheusAuth2$Outbound = {
  authType: string;
  token?: string | undefined;
  textSecret?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const OutputGrafanaCloudPrometheusAuth2$outboundSchema: z.ZodType<
  OutputGrafanaCloudPrometheusAuth2$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudPrometheusAuth2
> = z.object({
  authType: OutputGrafanaCloudPrometheusAuthAuthenticationType2$outboundSchema
    .default("basic"),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudPrometheusAuth2$ {
  /** @deprecated use `OutputGrafanaCloudPrometheusAuth2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudPrometheusAuth2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudPrometheusAuth2$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudPrometheusAuth2$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudPrometheusAuth2$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudPrometheusAuth2$Outbound;
}

export function outputGrafanaCloudPrometheusAuth2ToJSON(
  outputGrafanaCloudPrometheusAuth2: OutputGrafanaCloudPrometheusAuth2,
): string {
  return JSON.stringify(
    OutputGrafanaCloudPrometheusAuth2$outboundSchema.parse(
      outputGrafanaCloudPrometheusAuth2,
    ),
  );
}

export function outputGrafanaCloudPrometheusAuth2FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudPrometheusAuth2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudPrometheusAuth2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudPrometheusAuth2' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudLokiAuthAuthenticationType2$inboundSchema:
  z.ZodType<
    OutputGrafanaCloudLokiAuthAuthenticationType2,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputGrafanaCloudLokiAuthAuthenticationType2),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputGrafanaCloudLokiAuthAuthenticationType2$outboundSchema:
  z.ZodType<
    OutputGrafanaCloudLokiAuthAuthenticationType2,
    z.ZodTypeDef,
    OutputGrafanaCloudLokiAuthAuthenticationType2
  > = z.union([
    z.nativeEnum(OutputGrafanaCloudLokiAuthAuthenticationType2),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudLokiAuthAuthenticationType2$ {
  /** @deprecated use `OutputGrafanaCloudLokiAuthAuthenticationType2$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudLokiAuthAuthenticationType2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudLokiAuthAuthenticationType2$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudLokiAuthAuthenticationType2$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudLokiAuth2$inboundSchema: z.ZodType<
  OutputGrafanaCloudLokiAuth2,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: OutputGrafanaCloudLokiAuthAuthenticationType2$inboundSchema.default(
    "basic",
  ),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type OutputGrafanaCloudLokiAuth2$Outbound = {
  authType: string;
  token?: string | undefined;
  textSecret?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const OutputGrafanaCloudLokiAuth2$outboundSchema: z.ZodType<
  OutputGrafanaCloudLokiAuth2$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudLokiAuth2
> = z.object({
  authType: OutputGrafanaCloudLokiAuthAuthenticationType2$outboundSchema
    .default("basic"),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudLokiAuth2$ {
  /** @deprecated use `OutputGrafanaCloudLokiAuth2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudLokiAuth2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudLokiAuth2$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudLokiAuth2$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudLokiAuth2$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudLokiAuth2$Outbound;
}

export function outputGrafanaCloudLokiAuth2ToJSON(
  outputGrafanaCloudLokiAuth2: OutputGrafanaCloudLokiAuth2,
): string {
  return JSON.stringify(
    OutputGrafanaCloudLokiAuth2$outboundSchema.parse(
      outputGrafanaCloudLokiAuth2,
    ),
  );
}

export function outputGrafanaCloudLokiAuth2FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudLokiAuth2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudLokiAuth2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudLokiAuth2' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudExtraHttpHeader2$inboundSchema: z.ZodType<
  OutputGrafanaCloudExtraHttpHeader2,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputGrafanaCloudExtraHttpHeader2$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputGrafanaCloudExtraHttpHeader2$outboundSchema: z.ZodType<
  OutputGrafanaCloudExtraHttpHeader2$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudExtraHttpHeader2
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudExtraHttpHeader2$ {
  /** @deprecated use `OutputGrafanaCloudExtraHttpHeader2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudExtraHttpHeader2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudExtraHttpHeader2$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudExtraHttpHeader2$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudExtraHttpHeader2$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudExtraHttpHeader2$Outbound;
}

export function outputGrafanaCloudExtraHttpHeader2ToJSON(
  outputGrafanaCloudExtraHttpHeader2: OutputGrafanaCloudExtraHttpHeader2,
): string {
  return JSON.stringify(
    OutputGrafanaCloudExtraHttpHeader2$outboundSchema.parse(
      outputGrafanaCloudExtraHttpHeader2,
    ),
  );
}

export function outputGrafanaCloudExtraHttpHeader2FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudExtraHttpHeader2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGrafanaCloudExtraHttpHeader2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudExtraHttpHeader2' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudFailedRequestLoggingMode2$inboundSchema:
  z.ZodType<
    OutputGrafanaCloudFailedRequestLoggingMode2,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputGrafanaCloudFailedRequestLoggingMode2),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputGrafanaCloudFailedRequestLoggingMode2$outboundSchema:
  z.ZodType<
    OutputGrafanaCloudFailedRequestLoggingMode2,
    z.ZodTypeDef,
    OutputGrafanaCloudFailedRequestLoggingMode2
  > = z.union([
    z.nativeEnum(OutputGrafanaCloudFailedRequestLoggingMode2),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudFailedRequestLoggingMode2$ {
  /** @deprecated use `OutputGrafanaCloudFailedRequestLoggingMode2$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudFailedRequestLoggingMode2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudFailedRequestLoggingMode2$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudFailedRequestLoggingMode2$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudResponseRetrySetting2$inboundSchema: z.ZodType<
  OutputGrafanaCloudResponseRetrySetting2,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputGrafanaCloudResponseRetrySetting2$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputGrafanaCloudResponseRetrySetting2$outboundSchema: z.ZodType<
  OutputGrafanaCloudResponseRetrySetting2$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudResponseRetrySetting2
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudResponseRetrySetting2$ {
  /** @deprecated use `OutputGrafanaCloudResponseRetrySetting2$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudResponseRetrySetting2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudResponseRetrySetting2$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudResponseRetrySetting2$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudResponseRetrySetting2$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudResponseRetrySetting2$Outbound;
}

export function outputGrafanaCloudResponseRetrySetting2ToJSON(
  outputGrafanaCloudResponseRetrySetting2:
    OutputGrafanaCloudResponseRetrySetting2,
): string {
  return JSON.stringify(
    OutputGrafanaCloudResponseRetrySetting2$outboundSchema.parse(
      outputGrafanaCloudResponseRetrySetting2,
    ),
  );
}

export function outputGrafanaCloudResponseRetrySetting2FromJSON(
  jsonString: string,
): SafeParseResult<
  OutputGrafanaCloudResponseRetrySetting2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGrafanaCloudResponseRetrySetting2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputGrafanaCloudResponseRetrySetting2' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudTimeoutRetrySettings2$inboundSchema: z.ZodType<
  OutputGrafanaCloudTimeoutRetrySettings2,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputGrafanaCloudTimeoutRetrySettings2$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputGrafanaCloudTimeoutRetrySettings2$outboundSchema: z.ZodType<
  OutputGrafanaCloudTimeoutRetrySettings2$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudTimeoutRetrySettings2
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudTimeoutRetrySettings2$ {
  /** @deprecated use `OutputGrafanaCloudTimeoutRetrySettings2$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudTimeoutRetrySettings2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudTimeoutRetrySettings2$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudTimeoutRetrySettings2$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudTimeoutRetrySettings2$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudTimeoutRetrySettings2$Outbound;
}

export function outputGrafanaCloudTimeoutRetrySettings2ToJSON(
  outputGrafanaCloudTimeoutRetrySettings2:
    OutputGrafanaCloudTimeoutRetrySettings2,
): string {
  return JSON.stringify(
    OutputGrafanaCloudTimeoutRetrySettings2$outboundSchema.parse(
      outputGrafanaCloudTimeoutRetrySettings2,
    ),
  );
}

export function outputGrafanaCloudTimeoutRetrySettings2FromJSON(
  jsonString: string,
): SafeParseResult<
  OutputGrafanaCloudTimeoutRetrySettings2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGrafanaCloudTimeoutRetrySettings2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputGrafanaCloudTimeoutRetrySettings2' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudBackpressureBehavior2$inboundSchema: z.ZodType<
  OutputGrafanaCloudBackpressureBehavior2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudBackpressureBehavior2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudBackpressureBehavior2$outboundSchema: z.ZodType<
  OutputGrafanaCloudBackpressureBehavior2,
  z.ZodTypeDef,
  OutputGrafanaCloudBackpressureBehavior2
> = z.union([
  z.nativeEnum(OutputGrafanaCloudBackpressureBehavior2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudBackpressureBehavior2$ {
  /** @deprecated use `OutputGrafanaCloudBackpressureBehavior2$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudBackpressureBehavior2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudBackpressureBehavior2$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudBackpressureBehavior2$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudCompression2$inboundSchema: z.ZodType<
  OutputGrafanaCloudCompression2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudCompression2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudCompression2$outboundSchema: z.ZodType<
  OutputGrafanaCloudCompression2,
  z.ZodTypeDef,
  OutputGrafanaCloudCompression2
> = z.union([
  z.nativeEnum(OutputGrafanaCloudCompression2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudCompression2$ {
  /** @deprecated use `OutputGrafanaCloudCompression2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudCompression2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudCompression2$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudCompression2$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudQueueFullBehavior2$inboundSchema: z.ZodType<
  OutputGrafanaCloudQueueFullBehavior2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudQueueFullBehavior2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudQueueFullBehavior2$outboundSchema: z.ZodType<
  OutputGrafanaCloudQueueFullBehavior2,
  z.ZodTypeDef,
  OutputGrafanaCloudQueueFullBehavior2
> = z.union([
  z.nativeEnum(OutputGrafanaCloudQueueFullBehavior2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudQueueFullBehavior2$ {
  /** @deprecated use `OutputGrafanaCloudQueueFullBehavior2$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudQueueFullBehavior2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudQueueFullBehavior2$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudQueueFullBehavior2$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudMode2$inboundSchema: z.ZodType<
  OutputGrafanaCloudMode2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudMode2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudMode2$outboundSchema: z.ZodType<
  OutputGrafanaCloudMode2,
  z.ZodTypeDef,
  OutputGrafanaCloudMode2
> = z.union([
  z.nativeEnum(OutputGrafanaCloudMode2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudMode2$ {
  /** @deprecated use `OutputGrafanaCloudMode2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudMode2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudMode2$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudMode2$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudPqControls2$inboundSchema: z.ZodType<
  OutputGrafanaCloudPqControls2,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputGrafanaCloudPqControls2$Outbound = {};

/** @internal */
export const OutputGrafanaCloudPqControls2$outboundSchema: z.ZodType<
  OutputGrafanaCloudPqControls2$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudPqControls2
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudPqControls2$ {
  /** @deprecated use `OutputGrafanaCloudPqControls2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudPqControls2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudPqControls2$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudPqControls2$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudPqControls2$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudPqControls2$Outbound;
}

export function outputGrafanaCloudPqControls2ToJSON(
  outputGrafanaCloudPqControls2: OutputGrafanaCloudPqControls2,
): string {
  return JSON.stringify(
    OutputGrafanaCloudPqControls2$outboundSchema.parse(
      outputGrafanaCloudPqControls2,
    ),
  );
}

export function outputGrafanaCloudPqControls2FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudPqControls2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudPqControls2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudPqControls2' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudGrafanaCloud2$inboundSchema: z.ZodType<
  OutputGrafanaCloudGrafanaCloud2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputGrafanaCloudType2$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  lokiUrl: z.string().optional(),
  prometheusUrl: z.string(),
  message: z.string().optional(),
  messageFormat: OutputGrafanaCloudMessageFormat2$inboundSchema.default(
    "protobuf",
  ),
  labels: z.array(z.lazy(() => OutputGrafanaCloudLabel2$inboundSchema))
    .optional(),
  metricRenameExpr: z.string().default("name.replace(/[^a-zA-Z0-9_]/g, '_')"),
  prometheusAuth: z.lazy(() => OutputGrafanaCloudPrometheusAuth2$inboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => OutputGrafanaCloudLokiAuth2$inboundSchema).optional(),
  concurrency: z.number().default(1),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(15),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputGrafanaCloudExtraHttpHeader2$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputGrafanaCloudFailedRequestLoggingMode2$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputGrafanaCloudResponseRetrySetting2$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputGrafanaCloudTimeoutRetrySettings2$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputGrafanaCloudBackpressureBehavior2$inboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  compress: z.boolean().default(true),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGrafanaCloudCompression2$inboundSchema.default("none"),
  pqOnBackpressure: OutputGrafanaCloudQueueFullBehavior2$inboundSchema.default(
    "block",
  ),
  pqMode: OutputGrafanaCloudMode2$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGrafanaCloudPqControls2$inboundSchema)
    .optional(),
});

/** @internal */
export type OutputGrafanaCloudGrafanaCloud2$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  lokiUrl?: string | undefined;
  prometheusUrl: string;
  message?: string | undefined;
  messageFormat: string;
  labels?: Array<OutputGrafanaCloudLabel2$Outbound> | undefined;
  metricRenameExpr: string;
  prometheusAuth?: OutputGrafanaCloudPrometheusAuth2$Outbound | undefined;
  lokiAuth?: OutputGrafanaCloudLokiAuth2$Outbound | undefined;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?:
    | Array<OutputGrafanaCloudExtraHttpHeader2$Outbound>
    | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputGrafanaCloudResponseRetrySetting2$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputGrafanaCloudTimeoutRetrySettings2$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  description?: string | undefined;
  compress: boolean;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputGrafanaCloudPqControls2$Outbound | undefined;
};

/** @internal */
export const OutputGrafanaCloudGrafanaCloud2$outboundSchema: z.ZodType<
  OutputGrafanaCloudGrafanaCloud2$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudGrafanaCloud2
> = z.object({
  id: z.string().optional(),
  type: OutputGrafanaCloudType2$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  lokiUrl: z.string().optional(),
  prometheusUrl: z.string(),
  message: z.string().optional(),
  messageFormat: OutputGrafanaCloudMessageFormat2$outboundSchema.default(
    "protobuf",
  ),
  labels: z.array(z.lazy(() => OutputGrafanaCloudLabel2$outboundSchema))
    .optional(),
  metricRenameExpr: z.string().default("name.replace(/[^a-zA-Z0-9_]/g, '_')"),
  prometheusAuth: z.lazy(() => OutputGrafanaCloudPrometheusAuth2$outboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => OutputGrafanaCloudLokiAuth2$outboundSchema).optional(),
  concurrency: z.number().default(1),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(15),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputGrafanaCloudExtraHttpHeader2$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputGrafanaCloudFailedRequestLoggingMode2$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputGrafanaCloudResponseRetrySetting2$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputGrafanaCloudTimeoutRetrySettings2$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputGrafanaCloudBackpressureBehavior2$outboundSchema
    .default("block"),
  description: z.string().optional(),
  compress: z.boolean().default(true),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGrafanaCloudCompression2$outboundSchema.default("none"),
  pqOnBackpressure: OutputGrafanaCloudQueueFullBehavior2$outboundSchema.default(
    "block",
  ),
  pqMode: OutputGrafanaCloudMode2$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGrafanaCloudPqControls2$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudGrafanaCloud2$ {
  /** @deprecated use `OutputGrafanaCloudGrafanaCloud2$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudGrafanaCloud2$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudGrafanaCloud2$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudGrafanaCloud2$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudGrafanaCloud2$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudGrafanaCloud2$Outbound;
}

export function outputGrafanaCloudGrafanaCloud2ToJSON(
  outputGrafanaCloudGrafanaCloud2: OutputGrafanaCloudGrafanaCloud2,
): string {
  return JSON.stringify(
    OutputGrafanaCloudGrafanaCloud2$outboundSchema.parse(
      outputGrafanaCloudGrafanaCloud2,
    ),
  );
}

export function outputGrafanaCloudGrafanaCloud2FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudGrafanaCloud2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudGrafanaCloud2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudGrafanaCloud2' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudType1$inboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudType1
> = z.nativeEnum(OutputGrafanaCloudType1);

/** @internal */
export const OutputGrafanaCloudType1$outboundSchema: z.ZodNativeEnum<
  typeof OutputGrafanaCloudType1
> = OutputGrafanaCloudType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudType1$ {
  /** @deprecated use `OutputGrafanaCloudType1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudType1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudType1$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudType1$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudMessageFormat1$inboundSchema: z.ZodType<
  OutputGrafanaCloudMessageFormat1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudMessageFormat1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudMessageFormat1$outboundSchema: z.ZodType<
  OutputGrafanaCloudMessageFormat1,
  z.ZodTypeDef,
  OutputGrafanaCloudMessageFormat1
> = z.union([
  z.nativeEnum(OutputGrafanaCloudMessageFormat1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudMessageFormat1$ {
  /** @deprecated use `OutputGrafanaCloudMessageFormat1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudMessageFormat1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudMessageFormat1$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudMessageFormat1$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudLabel1$inboundSchema: z.ZodType<
  OutputGrafanaCloudLabel1,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputGrafanaCloudLabel1$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputGrafanaCloudLabel1$outboundSchema: z.ZodType<
  OutputGrafanaCloudLabel1$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudLabel1
> = z.object({
  name: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudLabel1$ {
  /** @deprecated use `OutputGrafanaCloudLabel1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudLabel1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudLabel1$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudLabel1$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudLabel1$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudLabel1$Outbound;
}

export function outputGrafanaCloudLabel1ToJSON(
  outputGrafanaCloudLabel1: OutputGrafanaCloudLabel1,
): string {
  return JSON.stringify(
    OutputGrafanaCloudLabel1$outboundSchema.parse(outputGrafanaCloudLabel1),
  );
}

export function outputGrafanaCloudLabel1FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudLabel1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudLabel1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudLabel1' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudPrometheusAuthAuthenticationType1$inboundSchema:
  z.ZodType<
    OutputGrafanaCloudPrometheusAuthAuthenticationType1,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputGrafanaCloudPrometheusAuthAuthenticationType1),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputGrafanaCloudPrometheusAuthAuthenticationType1$outboundSchema:
  z.ZodType<
    OutputGrafanaCloudPrometheusAuthAuthenticationType1,
    z.ZodTypeDef,
    OutputGrafanaCloudPrometheusAuthAuthenticationType1
  > = z.union([
    z.nativeEnum(OutputGrafanaCloudPrometheusAuthAuthenticationType1),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudPrometheusAuthAuthenticationType1$ {
  /** @deprecated use `OutputGrafanaCloudPrometheusAuthAuthenticationType1$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudPrometheusAuthAuthenticationType1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudPrometheusAuthAuthenticationType1$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudPrometheusAuthAuthenticationType1$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudPrometheusAuth1$inboundSchema: z.ZodType<
  OutputGrafanaCloudPrometheusAuth1,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: OutputGrafanaCloudPrometheusAuthAuthenticationType1$inboundSchema
    .default("basic"),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type OutputGrafanaCloudPrometheusAuth1$Outbound = {
  authType: string;
  token?: string | undefined;
  textSecret?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const OutputGrafanaCloudPrometheusAuth1$outboundSchema: z.ZodType<
  OutputGrafanaCloudPrometheusAuth1$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudPrometheusAuth1
> = z.object({
  authType: OutputGrafanaCloudPrometheusAuthAuthenticationType1$outboundSchema
    .default("basic"),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudPrometheusAuth1$ {
  /** @deprecated use `OutputGrafanaCloudPrometheusAuth1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudPrometheusAuth1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudPrometheusAuth1$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudPrometheusAuth1$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudPrometheusAuth1$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudPrometheusAuth1$Outbound;
}

export function outputGrafanaCloudPrometheusAuth1ToJSON(
  outputGrafanaCloudPrometheusAuth1: OutputGrafanaCloudPrometheusAuth1,
): string {
  return JSON.stringify(
    OutputGrafanaCloudPrometheusAuth1$outboundSchema.parse(
      outputGrafanaCloudPrometheusAuth1,
    ),
  );
}

export function outputGrafanaCloudPrometheusAuth1FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudPrometheusAuth1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudPrometheusAuth1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudPrometheusAuth1' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudLokiAuthAuthenticationType1$inboundSchema:
  z.ZodType<
    OutputGrafanaCloudLokiAuthAuthenticationType1,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputGrafanaCloudLokiAuthAuthenticationType1),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputGrafanaCloudLokiAuthAuthenticationType1$outboundSchema:
  z.ZodType<
    OutputGrafanaCloudLokiAuthAuthenticationType1,
    z.ZodTypeDef,
    OutputGrafanaCloudLokiAuthAuthenticationType1
  > = z.union([
    z.nativeEnum(OutputGrafanaCloudLokiAuthAuthenticationType1),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudLokiAuthAuthenticationType1$ {
  /** @deprecated use `OutputGrafanaCloudLokiAuthAuthenticationType1$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudLokiAuthAuthenticationType1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudLokiAuthAuthenticationType1$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudLokiAuthAuthenticationType1$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudLokiAuth1$inboundSchema: z.ZodType<
  OutputGrafanaCloudLokiAuth1,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: OutputGrafanaCloudLokiAuthAuthenticationType1$inboundSchema.default(
    "basic",
  ),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type OutputGrafanaCloudLokiAuth1$Outbound = {
  authType: string;
  token?: string | undefined;
  textSecret?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const OutputGrafanaCloudLokiAuth1$outboundSchema: z.ZodType<
  OutputGrafanaCloudLokiAuth1$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudLokiAuth1
> = z.object({
  authType: OutputGrafanaCloudLokiAuthAuthenticationType1$outboundSchema
    .default("basic"),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudLokiAuth1$ {
  /** @deprecated use `OutputGrafanaCloudLokiAuth1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudLokiAuth1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudLokiAuth1$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudLokiAuth1$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudLokiAuth1$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudLokiAuth1$Outbound;
}

export function outputGrafanaCloudLokiAuth1ToJSON(
  outputGrafanaCloudLokiAuth1: OutputGrafanaCloudLokiAuth1,
): string {
  return JSON.stringify(
    OutputGrafanaCloudLokiAuth1$outboundSchema.parse(
      outputGrafanaCloudLokiAuth1,
    ),
  );
}

export function outputGrafanaCloudLokiAuth1FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudLokiAuth1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudLokiAuth1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudLokiAuth1' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudExtraHttpHeader1$inboundSchema: z.ZodType<
  OutputGrafanaCloudExtraHttpHeader1,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputGrafanaCloudExtraHttpHeader1$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputGrafanaCloudExtraHttpHeader1$outboundSchema: z.ZodType<
  OutputGrafanaCloudExtraHttpHeader1$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudExtraHttpHeader1
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudExtraHttpHeader1$ {
  /** @deprecated use `OutputGrafanaCloudExtraHttpHeader1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudExtraHttpHeader1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudExtraHttpHeader1$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudExtraHttpHeader1$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudExtraHttpHeader1$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudExtraHttpHeader1$Outbound;
}

export function outputGrafanaCloudExtraHttpHeader1ToJSON(
  outputGrafanaCloudExtraHttpHeader1: OutputGrafanaCloudExtraHttpHeader1,
): string {
  return JSON.stringify(
    OutputGrafanaCloudExtraHttpHeader1$outboundSchema.parse(
      outputGrafanaCloudExtraHttpHeader1,
    ),
  );
}

export function outputGrafanaCloudExtraHttpHeader1FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudExtraHttpHeader1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGrafanaCloudExtraHttpHeader1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudExtraHttpHeader1' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudFailedRequestLoggingMode1$inboundSchema:
  z.ZodType<
    OutputGrafanaCloudFailedRequestLoggingMode1,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputGrafanaCloudFailedRequestLoggingMode1),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputGrafanaCloudFailedRequestLoggingMode1$outboundSchema:
  z.ZodType<
    OutputGrafanaCloudFailedRequestLoggingMode1,
    z.ZodTypeDef,
    OutputGrafanaCloudFailedRequestLoggingMode1
  > = z.union([
    z.nativeEnum(OutputGrafanaCloudFailedRequestLoggingMode1),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudFailedRequestLoggingMode1$ {
  /** @deprecated use `OutputGrafanaCloudFailedRequestLoggingMode1$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudFailedRequestLoggingMode1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudFailedRequestLoggingMode1$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudFailedRequestLoggingMode1$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudResponseRetrySetting1$inboundSchema: z.ZodType<
  OutputGrafanaCloudResponseRetrySetting1,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputGrafanaCloudResponseRetrySetting1$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputGrafanaCloudResponseRetrySetting1$outboundSchema: z.ZodType<
  OutputGrafanaCloudResponseRetrySetting1$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudResponseRetrySetting1
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudResponseRetrySetting1$ {
  /** @deprecated use `OutputGrafanaCloudResponseRetrySetting1$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudResponseRetrySetting1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudResponseRetrySetting1$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudResponseRetrySetting1$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudResponseRetrySetting1$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudResponseRetrySetting1$Outbound;
}

export function outputGrafanaCloudResponseRetrySetting1ToJSON(
  outputGrafanaCloudResponseRetrySetting1:
    OutputGrafanaCloudResponseRetrySetting1,
): string {
  return JSON.stringify(
    OutputGrafanaCloudResponseRetrySetting1$outboundSchema.parse(
      outputGrafanaCloudResponseRetrySetting1,
    ),
  );
}

export function outputGrafanaCloudResponseRetrySetting1FromJSON(
  jsonString: string,
): SafeParseResult<
  OutputGrafanaCloudResponseRetrySetting1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGrafanaCloudResponseRetrySetting1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputGrafanaCloudResponseRetrySetting1' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudTimeoutRetrySettings1$inboundSchema: z.ZodType<
  OutputGrafanaCloudTimeoutRetrySettings1,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputGrafanaCloudTimeoutRetrySettings1$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputGrafanaCloudTimeoutRetrySettings1$outboundSchema: z.ZodType<
  OutputGrafanaCloudTimeoutRetrySettings1$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudTimeoutRetrySettings1
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudTimeoutRetrySettings1$ {
  /** @deprecated use `OutputGrafanaCloudTimeoutRetrySettings1$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudTimeoutRetrySettings1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudTimeoutRetrySettings1$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudTimeoutRetrySettings1$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudTimeoutRetrySettings1$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudTimeoutRetrySettings1$Outbound;
}

export function outputGrafanaCloudTimeoutRetrySettings1ToJSON(
  outputGrafanaCloudTimeoutRetrySettings1:
    OutputGrafanaCloudTimeoutRetrySettings1,
): string {
  return JSON.stringify(
    OutputGrafanaCloudTimeoutRetrySettings1$outboundSchema.parse(
      outputGrafanaCloudTimeoutRetrySettings1,
    ),
  );
}

export function outputGrafanaCloudTimeoutRetrySettings1FromJSON(
  jsonString: string,
): SafeParseResult<
  OutputGrafanaCloudTimeoutRetrySettings1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGrafanaCloudTimeoutRetrySettings1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputGrafanaCloudTimeoutRetrySettings1' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudBackpressureBehavior1$inboundSchema: z.ZodType<
  OutputGrafanaCloudBackpressureBehavior1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudBackpressureBehavior1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudBackpressureBehavior1$outboundSchema: z.ZodType<
  OutputGrafanaCloudBackpressureBehavior1,
  z.ZodTypeDef,
  OutputGrafanaCloudBackpressureBehavior1
> = z.union([
  z.nativeEnum(OutputGrafanaCloudBackpressureBehavior1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudBackpressureBehavior1$ {
  /** @deprecated use `OutputGrafanaCloudBackpressureBehavior1$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudBackpressureBehavior1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudBackpressureBehavior1$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudBackpressureBehavior1$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudCompression1$inboundSchema: z.ZodType<
  OutputGrafanaCloudCompression1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudCompression1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudCompression1$outboundSchema: z.ZodType<
  OutputGrafanaCloudCompression1,
  z.ZodTypeDef,
  OutputGrafanaCloudCompression1
> = z.union([
  z.nativeEnum(OutputGrafanaCloudCompression1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudCompression1$ {
  /** @deprecated use `OutputGrafanaCloudCompression1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudCompression1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudCompression1$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudCompression1$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudQueueFullBehavior1$inboundSchema: z.ZodType<
  OutputGrafanaCloudQueueFullBehavior1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudQueueFullBehavior1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudQueueFullBehavior1$outboundSchema: z.ZodType<
  OutputGrafanaCloudQueueFullBehavior1,
  z.ZodTypeDef,
  OutputGrafanaCloudQueueFullBehavior1
> = z.union([
  z.nativeEnum(OutputGrafanaCloudQueueFullBehavior1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudQueueFullBehavior1$ {
  /** @deprecated use `OutputGrafanaCloudQueueFullBehavior1$inboundSchema` instead. */
  export const inboundSchema =
    OutputGrafanaCloudQueueFullBehavior1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudQueueFullBehavior1$outboundSchema` instead. */
  export const outboundSchema =
    OutputGrafanaCloudQueueFullBehavior1$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudMode1$inboundSchema: z.ZodType<
  OutputGrafanaCloudMode1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGrafanaCloudMode1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGrafanaCloudMode1$outboundSchema: z.ZodType<
  OutputGrafanaCloudMode1,
  z.ZodTypeDef,
  OutputGrafanaCloudMode1
> = z.union([
  z.nativeEnum(OutputGrafanaCloudMode1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudMode1$ {
  /** @deprecated use `OutputGrafanaCloudMode1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudMode1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudMode1$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudMode1$outboundSchema;
}

/** @internal */
export const OutputGrafanaCloudPqControls1$inboundSchema: z.ZodType<
  OutputGrafanaCloudPqControls1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputGrafanaCloudPqControls1$Outbound = {};

/** @internal */
export const OutputGrafanaCloudPqControls1$outboundSchema: z.ZodType<
  OutputGrafanaCloudPqControls1$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudPqControls1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudPqControls1$ {
  /** @deprecated use `OutputGrafanaCloudPqControls1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudPqControls1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudPqControls1$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudPqControls1$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudPqControls1$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudPqControls1$Outbound;
}

export function outputGrafanaCloudPqControls1ToJSON(
  outputGrafanaCloudPqControls1: OutputGrafanaCloudPqControls1,
): string {
  return JSON.stringify(
    OutputGrafanaCloudPqControls1$outboundSchema.parse(
      outputGrafanaCloudPqControls1,
    ),
  );
}

export function outputGrafanaCloudPqControls1FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudPqControls1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudPqControls1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudPqControls1' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloudGrafanaCloud1$inboundSchema: z.ZodType<
  OutputGrafanaCloudGrafanaCloud1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputGrafanaCloudType1$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  lokiUrl: z.string(),
  prometheusUrl: z.string().optional(),
  message: z.string().optional(),
  messageFormat: OutputGrafanaCloudMessageFormat1$inboundSchema.default(
    "protobuf",
  ),
  labels: z.array(z.lazy(() => OutputGrafanaCloudLabel1$inboundSchema))
    .optional(),
  metricRenameExpr: z.string().default("name.replace(/[^a-zA-Z0-9_]/g, '_')"),
  prometheusAuth: z.lazy(() => OutputGrafanaCloudPrometheusAuth1$inboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => OutputGrafanaCloudLokiAuth1$inboundSchema).optional(),
  concurrency: z.number().default(1),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(15),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputGrafanaCloudExtraHttpHeader1$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputGrafanaCloudFailedRequestLoggingMode1$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputGrafanaCloudResponseRetrySetting1$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputGrafanaCloudTimeoutRetrySettings1$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputGrafanaCloudBackpressureBehavior1$inboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  compress: z.boolean().default(true),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGrafanaCloudCompression1$inboundSchema.default("none"),
  pqOnBackpressure: OutputGrafanaCloudQueueFullBehavior1$inboundSchema.default(
    "block",
  ),
  pqMode: OutputGrafanaCloudMode1$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGrafanaCloudPqControls1$inboundSchema)
    .optional(),
});

/** @internal */
export type OutputGrafanaCloudGrafanaCloud1$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  lokiUrl: string;
  prometheusUrl?: string | undefined;
  message?: string | undefined;
  messageFormat: string;
  labels?: Array<OutputGrafanaCloudLabel1$Outbound> | undefined;
  metricRenameExpr: string;
  prometheusAuth?: OutputGrafanaCloudPrometheusAuth1$Outbound | undefined;
  lokiAuth?: OutputGrafanaCloudLokiAuth1$Outbound | undefined;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?:
    | Array<OutputGrafanaCloudExtraHttpHeader1$Outbound>
    | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputGrafanaCloudResponseRetrySetting1$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputGrafanaCloudTimeoutRetrySettings1$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  description?: string | undefined;
  compress: boolean;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputGrafanaCloudPqControls1$Outbound | undefined;
};

/** @internal */
export const OutputGrafanaCloudGrafanaCloud1$outboundSchema: z.ZodType<
  OutputGrafanaCloudGrafanaCloud1$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloudGrafanaCloud1
> = z.object({
  id: z.string().optional(),
  type: OutputGrafanaCloudType1$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  lokiUrl: z.string(),
  prometheusUrl: z.string().optional(),
  message: z.string().optional(),
  messageFormat: OutputGrafanaCloudMessageFormat1$outboundSchema.default(
    "protobuf",
  ),
  labels: z.array(z.lazy(() => OutputGrafanaCloudLabel1$outboundSchema))
    .optional(),
  metricRenameExpr: z.string().default("name.replace(/[^a-zA-Z0-9_]/g, '_')"),
  prometheusAuth: z.lazy(() => OutputGrafanaCloudPrometheusAuth1$outboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => OutputGrafanaCloudLokiAuth1$outboundSchema).optional(),
  concurrency: z.number().default(1),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(15),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputGrafanaCloudExtraHttpHeader1$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputGrafanaCloudFailedRequestLoggingMode1$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputGrafanaCloudResponseRetrySetting1$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputGrafanaCloudTimeoutRetrySettings1$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputGrafanaCloudBackpressureBehavior1$outboundSchema
    .default("block"),
  description: z.string().optional(),
  compress: z.boolean().default(true),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGrafanaCloudCompression1$outboundSchema.default("none"),
  pqOnBackpressure: OutputGrafanaCloudQueueFullBehavior1$outboundSchema.default(
    "block",
  ),
  pqMode: OutputGrafanaCloudMode1$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGrafanaCloudPqControls1$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloudGrafanaCloud1$ {
  /** @deprecated use `OutputGrafanaCloudGrafanaCloud1$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloudGrafanaCloud1$inboundSchema;
  /** @deprecated use `OutputGrafanaCloudGrafanaCloud1$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloudGrafanaCloud1$outboundSchema;
  /** @deprecated use `OutputGrafanaCloudGrafanaCloud1$Outbound` instead. */
  export type Outbound = OutputGrafanaCloudGrafanaCloud1$Outbound;
}

export function outputGrafanaCloudGrafanaCloud1ToJSON(
  outputGrafanaCloudGrafanaCloud1: OutputGrafanaCloudGrafanaCloud1,
): string {
  return JSON.stringify(
    OutputGrafanaCloudGrafanaCloud1$outboundSchema.parse(
      outputGrafanaCloudGrafanaCloud1,
    ),
  );
}

export function outputGrafanaCloudGrafanaCloud1FromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloudGrafanaCloud1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloudGrafanaCloud1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloudGrafanaCloud1' from JSON`,
  );
}

/** @internal */
export const OutputGrafanaCloud$inboundSchema: z.ZodType<
  OutputGrafanaCloud,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OutputGrafanaCloudGrafanaCloud1$inboundSchema),
  z.lazy(() => OutputGrafanaCloudGrafanaCloud2$inboundSchema),
]);

/** @internal */
export type OutputGrafanaCloud$Outbound =
  | OutputGrafanaCloudGrafanaCloud1$Outbound
  | OutputGrafanaCloudGrafanaCloud2$Outbound;

/** @internal */
export const OutputGrafanaCloud$outboundSchema: z.ZodType<
  OutputGrafanaCloud$Outbound,
  z.ZodTypeDef,
  OutputGrafanaCloud
> = z.union([
  z.lazy(() => OutputGrafanaCloudGrafanaCloud1$outboundSchema),
  z.lazy(() => OutputGrafanaCloudGrafanaCloud2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGrafanaCloud$ {
  /** @deprecated use `OutputGrafanaCloud$inboundSchema` instead. */
  export const inboundSchema = OutputGrafanaCloud$inboundSchema;
  /** @deprecated use `OutputGrafanaCloud$outboundSchema` instead. */
  export const outboundSchema = OutputGrafanaCloud$outboundSchema;
  /** @deprecated use `OutputGrafanaCloud$Outbound` instead. */
  export type Outbound = OutputGrafanaCloud$Outbound;
}

export function outputGrafanaCloudToJSON(
  outputGrafanaCloud: OutputGrafanaCloud,
): string {
  return JSON.stringify(
    OutputGrafanaCloud$outboundSchema.parse(outputGrafanaCloud),
  );
}

export function outputGrafanaCloudFromJSON(
  jsonString: string,
): SafeParseResult<OutputGrafanaCloud, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGrafanaCloud$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGrafanaCloud' from JSON`,
  );
}
