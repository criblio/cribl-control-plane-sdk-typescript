/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputKinesisType = {
  Kinesis: "kinesis",
} as const;
export type InputKinesisType = ClosedEnum<typeof InputKinesisType>;

export type InputKinesisConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputKinesisMode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputKinesisMode = OpenEnum<typeof InputKinesisMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputKinesisCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputKinesisCompression = OpenEnum<typeof InputKinesisCompression>;

export type InputKinesisPqControls = {};

export type InputKinesisPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputKinesisMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputKinesisCompression | undefined;
  pqControls?: InputKinesisPqControls | undefined;
};

/**
 * Location at which to start reading a shard for the first time
 */
export const ShardIteratorStart = {
  /**
   * Earliest record
   */
  TrimHorizon: "TRIM_HORIZON",
  /**
   * Latest record
   */
  Latest: "LATEST",
} as const;
/**
 * Location at which to start reading a shard for the first time
 */
export type ShardIteratorStart = OpenEnum<typeof ShardIteratorStart>;

/**
 * Format of data inside the Kinesis Stream records. Gzip compression is automatically detected.
 */
export const InputKinesisRecordDataFormat = {
  /**
   * Cribl
   */
  Cribl: "cribl",
  /**
   * Newline JSON
   */
  Ndjson: "ndjson",
  /**
   * Cloudwatch Logs
   */
  Cloudwatch: "cloudwatch",
  /**
   * Event per line
   */
  Line: "line",
} as const;
/**
 * Format of data inside the Kinesis Stream records. Gzip compression is automatically detected.
 */
export type InputKinesisRecordDataFormat = OpenEnum<
  typeof InputKinesisRecordDataFormat
>;

/**
 * The load-balancing algorithm to use for spreading out shards across Workers and Worker Processes
 */
export const ShardLoadBalancing = {
  /**
   * Consistent Hashing
   */
  ConsistentHashing: "ConsistentHashing",
  /**
   * Round Robin
   */
  RoundRobin: "RoundRobin",
} as const;
/**
 * The load-balancing algorithm to use for spreading out shards across Workers and Worker Processes
 */
export type ShardLoadBalancing = OpenEnum<typeof ShardLoadBalancing>;

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const InputKinesisAuthenticationMethod = {
  /**
   * Auto
   */
  Auto: "auto",
  /**
   * Manual
   */
  Manual: "manual",
  /**
   * Secret Key pair
   */
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type InputKinesisAuthenticationMethod = OpenEnum<
  typeof InputKinesisAuthenticationMethod
>;

/**
 * Signature version to use for signing Kinesis stream requests
 */
export const InputKinesisSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing Kinesis stream requests
 */
export type InputKinesisSignatureVersion = OpenEnum<
  typeof InputKinesisSignatureVersion
>;

export type InputKinesisMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputKinesis = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputKinesisType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputKinesisConnection> | undefined;
  pq?: InputKinesisPq | undefined;
  /**
   * Kinesis Data Stream to read data from
   */
  streamName: string;
  /**
   * Time interval in minutes between consecutive service calls
   */
  serviceInterval?: number | undefined;
  /**
   * A JavaScript expression to be called with each shardId for the stream. If the expression evaluates to a truthy value, the shard will be processed.
   */
  shardExpr?: string | undefined;
  /**
   * Location at which to start reading a shard for the first time
   */
  shardIteratorType?: ShardIteratorStart | undefined;
  /**
   * Format of data inside the Kinesis Stream records. Gzip compression is automatically detected.
   */
  payloadFormat?: InputKinesisRecordDataFormat | undefined;
  /**
   * Maximum number of records per getRecords call
   */
  getRecordsLimit?: number | undefined;
  /**
   * Maximum number of records, across all shards, to pull down at once per Worker Process
   */
  getRecordsLimitTotal?: number | undefined;
  /**
   * The load-balancing algorithm to use for spreading out shards across Workers and Worker Processes
   */
  loadBalancingAlgorithm?: ShardLoadBalancing | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: InputKinesisAuthenticationMethod | undefined;
  awsSecretKey?: string | undefined;
  /**
   * Region where the Kinesis stream is located
   */
  region: string;
  /**
   * Kinesis stream service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to Kinesis stream-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing Kinesis stream requests
   */
  signatureVersion?: InputKinesisSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access Kinesis stream
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Verify Kinesis Producer Library (KPL) event checksums
   */
  verifyKPLCheckSums?: boolean | undefined;
  /**
   * When resuming streaming from a stored state, Stream will read the next available record, rather than rereading the last-read record. Enabling this setting can cause data loss after a Worker Node's unexpected shutdown or restart.
   */
  avoidDuplicates?: boolean | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputKinesisMetadatum> | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
};

/** @internal */
export const InputKinesisType$inboundSchema: z.ZodNativeEnum<
  typeof InputKinesisType
> = z.nativeEnum(InputKinesisType);

/** @internal */
export const InputKinesisType$outboundSchema: z.ZodNativeEnum<
  typeof InputKinesisType
> = InputKinesisType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisType$ {
  /** @deprecated use `InputKinesisType$inboundSchema` instead. */
  export const inboundSchema = InputKinesisType$inboundSchema;
  /** @deprecated use `InputKinesisType$outboundSchema` instead. */
  export const outboundSchema = InputKinesisType$outboundSchema;
}

/** @internal */
export const InputKinesisConnection$inboundSchema: z.ZodType<
  InputKinesisConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputKinesisConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputKinesisConnection$outboundSchema: z.ZodType<
  InputKinesisConnection$Outbound,
  z.ZodTypeDef,
  InputKinesisConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisConnection$ {
  /** @deprecated use `InputKinesisConnection$inboundSchema` instead. */
  export const inboundSchema = InputKinesisConnection$inboundSchema;
  /** @deprecated use `InputKinesisConnection$outboundSchema` instead. */
  export const outboundSchema = InputKinesisConnection$outboundSchema;
  /** @deprecated use `InputKinesisConnection$Outbound` instead. */
  export type Outbound = InputKinesisConnection$Outbound;
}

export function inputKinesisConnectionToJSON(
  inputKinesisConnection: InputKinesisConnection,
): string {
  return JSON.stringify(
    InputKinesisConnection$outboundSchema.parse(inputKinesisConnection),
  );
}

export function inputKinesisConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputKinesisConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKinesisConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKinesisConnection' from JSON`,
  );
}

/** @internal */
export const InputKinesisMode$inboundSchema: z.ZodType<
  InputKinesisMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputKinesisMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputKinesisMode$outboundSchema: z.ZodType<
  InputKinesisMode,
  z.ZodTypeDef,
  InputKinesisMode
> = z.union([
  z.nativeEnum(InputKinesisMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisMode$ {
  /** @deprecated use `InputKinesisMode$inboundSchema` instead. */
  export const inboundSchema = InputKinesisMode$inboundSchema;
  /** @deprecated use `InputKinesisMode$outboundSchema` instead. */
  export const outboundSchema = InputKinesisMode$outboundSchema;
}

/** @internal */
export const InputKinesisCompression$inboundSchema: z.ZodType<
  InputKinesisCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputKinesisCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputKinesisCompression$outboundSchema: z.ZodType<
  InputKinesisCompression,
  z.ZodTypeDef,
  InputKinesisCompression
> = z.union([
  z.nativeEnum(InputKinesisCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisCompression$ {
  /** @deprecated use `InputKinesisCompression$inboundSchema` instead. */
  export const inboundSchema = InputKinesisCompression$inboundSchema;
  /** @deprecated use `InputKinesisCompression$outboundSchema` instead. */
  export const outboundSchema = InputKinesisCompression$outboundSchema;
}

/** @internal */
export const InputKinesisPqControls$inboundSchema: z.ZodType<
  InputKinesisPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputKinesisPqControls$Outbound = {};

/** @internal */
export const InputKinesisPqControls$outboundSchema: z.ZodType<
  InputKinesisPqControls$Outbound,
  z.ZodTypeDef,
  InputKinesisPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisPqControls$ {
  /** @deprecated use `InputKinesisPqControls$inboundSchema` instead. */
  export const inboundSchema = InputKinesisPqControls$inboundSchema;
  /** @deprecated use `InputKinesisPqControls$outboundSchema` instead. */
  export const outboundSchema = InputKinesisPqControls$outboundSchema;
  /** @deprecated use `InputKinesisPqControls$Outbound` instead. */
  export type Outbound = InputKinesisPqControls$Outbound;
}

export function inputKinesisPqControlsToJSON(
  inputKinesisPqControls: InputKinesisPqControls,
): string {
  return JSON.stringify(
    InputKinesisPqControls$outboundSchema.parse(inputKinesisPqControls),
  );
}

export function inputKinesisPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputKinesisPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKinesisPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKinesisPqControls' from JSON`,
  );
}

/** @internal */
export const InputKinesisPq$inboundSchema: z.ZodType<
  InputKinesisPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputKinesisMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputKinesisCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputKinesisPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputKinesisPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputKinesisPqControls$Outbound | undefined;
};

/** @internal */
export const InputKinesisPq$outboundSchema: z.ZodType<
  InputKinesisPq$Outbound,
  z.ZodTypeDef,
  InputKinesisPq
> = z.object({
  mode: InputKinesisMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputKinesisCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputKinesisPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisPq$ {
  /** @deprecated use `InputKinesisPq$inboundSchema` instead. */
  export const inboundSchema = InputKinesisPq$inboundSchema;
  /** @deprecated use `InputKinesisPq$outboundSchema` instead. */
  export const outboundSchema = InputKinesisPq$outboundSchema;
  /** @deprecated use `InputKinesisPq$Outbound` instead. */
  export type Outbound = InputKinesisPq$Outbound;
}

export function inputKinesisPqToJSON(inputKinesisPq: InputKinesisPq): string {
  return JSON.stringify(InputKinesisPq$outboundSchema.parse(inputKinesisPq));
}

export function inputKinesisPqFromJSON(
  jsonString: string,
): SafeParseResult<InputKinesisPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKinesisPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKinesisPq' from JSON`,
  );
}

/** @internal */
export const ShardIteratorStart$inboundSchema: z.ZodType<
  ShardIteratorStart,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ShardIteratorStart),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ShardIteratorStart$outboundSchema: z.ZodType<
  ShardIteratorStart,
  z.ZodTypeDef,
  ShardIteratorStart
> = z.union([
  z.nativeEnum(ShardIteratorStart),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShardIteratorStart$ {
  /** @deprecated use `ShardIteratorStart$inboundSchema` instead. */
  export const inboundSchema = ShardIteratorStart$inboundSchema;
  /** @deprecated use `ShardIteratorStart$outboundSchema` instead. */
  export const outboundSchema = ShardIteratorStart$outboundSchema;
}

/** @internal */
export const InputKinesisRecordDataFormat$inboundSchema: z.ZodType<
  InputKinesisRecordDataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputKinesisRecordDataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputKinesisRecordDataFormat$outboundSchema: z.ZodType<
  InputKinesisRecordDataFormat,
  z.ZodTypeDef,
  InputKinesisRecordDataFormat
> = z.union([
  z.nativeEnum(InputKinesisRecordDataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisRecordDataFormat$ {
  /** @deprecated use `InputKinesisRecordDataFormat$inboundSchema` instead. */
  export const inboundSchema = InputKinesisRecordDataFormat$inboundSchema;
  /** @deprecated use `InputKinesisRecordDataFormat$outboundSchema` instead. */
  export const outboundSchema = InputKinesisRecordDataFormat$outboundSchema;
}

/** @internal */
export const ShardLoadBalancing$inboundSchema: z.ZodType<
  ShardLoadBalancing,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ShardLoadBalancing),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ShardLoadBalancing$outboundSchema: z.ZodType<
  ShardLoadBalancing,
  z.ZodTypeDef,
  ShardLoadBalancing
> = z.union([
  z.nativeEnum(ShardLoadBalancing),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShardLoadBalancing$ {
  /** @deprecated use `ShardLoadBalancing$inboundSchema` instead. */
  export const inboundSchema = ShardLoadBalancing$inboundSchema;
  /** @deprecated use `ShardLoadBalancing$outboundSchema` instead. */
  export const outboundSchema = ShardLoadBalancing$outboundSchema;
}

/** @internal */
export const InputKinesisAuthenticationMethod$inboundSchema: z.ZodType<
  InputKinesisAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputKinesisAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputKinesisAuthenticationMethod$outboundSchema: z.ZodType<
  InputKinesisAuthenticationMethod,
  z.ZodTypeDef,
  InputKinesisAuthenticationMethod
> = z.union([
  z.nativeEnum(InputKinesisAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisAuthenticationMethod$ {
  /** @deprecated use `InputKinesisAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = InputKinesisAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputKinesisAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = InputKinesisAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputKinesisSignatureVersion$inboundSchema: z.ZodType<
  InputKinesisSignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputKinesisSignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputKinesisSignatureVersion$outboundSchema: z.ZodType<
  InputKinesisSignatureVersion,
  z.ZodTypeDef,
  InputKinesisSignatureVersion
> = z.union([
  z.nativeEnum(InputKinesisSignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisSignatureVersion$ {
  /** @deprecated use `InputKinesisSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = InputKinesisSignatureVersion$inboundSchema;
  /** @deprecated use `InputKinesisSignatureVersion$outboundSchema` instead. */
  export const outboundSchema = InputKinesisSignatureVersion$outboundSchema;
}

/** @internal */
export const InputKinesisMetadatum$inboundSchema: z.ZodType<
  InputKinesisMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputKinesisMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputKinesisMetadatum$outboundSchema: z.ZodType<
  InputKinesisMetadatum$Outbound,
  z.ZodTypeDef,
  InputKinesisMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesisMetadatum$ {
  /** @deprecated use `InputKinesisMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputKinesisMetadatum$inboundSchema;
  /** @deprecated use `InputKinesisMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputKinesisMetadatum$outboundSchema;
  /** @deprecated use `InputKinesisMetadatum$Outbound` instead. */
  export type Outbound = InputKinesisMetadatum$Outbound;
}

export function inputKinesisMetadatumToJSON(
  inputKinesisMetadatum: InputKinesisMetadatum,
): string {
  return JSON.stringify(
    InputKinesisMetadatum$outboundSchema.parse(inputKinesisMetadatum),
  );
}

export function inputKinesisMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputKinesisMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKinesisMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKinesisMetadatum' from JSON`,
  );
}

/** @internal */
export const InputKinesis$inboundSchema: z.ZodType<
  InputKinesis,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputKinesisType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputKinesisConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputKinesisPq$inboundSchema).optional(),
  streamName: z.string(),
  serviceInterval: z.number().default(1),
  shardExpr: z.string().default("true"),
  shardIteratorType: ShardIteratorStart$inboundSchema.default("TRIM_HORIZON"),
  payloadFormat: InputKinesisRecordDataFormat$inboundSchema.default("cribl"),
  getRecordsLimit: z.number().default(5000),
  getRecordsLimitTotal: z.number().default(20000),
  loadBalancingAlgorithm: ShardLoadBalancing$inboundSchema.default(
    "ConsistentHashing",
  ),
  awsAuthenticationMethod: InputKinesisAuthenticationMethod$inboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string(),
  endpoint: z.string().optional(),
  signatureVersion: InputKinesisSignatureVersion$inboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  verifyKPLCheckSums: z.boolean().default(false),
  avoidDuplicates: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputKinesisMetadatum$inboundSchema))
    .optional(),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
});

/** @internal */
export type InputKinesis$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputKinesisConnection$Outbound> | undefined;
  pq?: InputKinesisPq$Outbound | undefined;
  streamName: string;
  serviceInterval: number;
  shardExpr: string;
  shardIteratorType: string;
  payloadFormat: string;
  getRecordsLimit: number;
  getRecordsLimitTotal: number;
  loadBalancingAlgorithm: string;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region: string;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  verifyKPLCheckSums: boolean;
  avoidDuplicates: boolean;
  metadata?: Array<InputKinesisMetadatum$Outbound> | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
};

/** @internal */
export const InputKinesis$outboundSchema: z.ZodType<
  InputKinesis$Outbound,
  z.ZodTypeDef,
  InputKinesis
> = z.object({
  id: z.string().optional(),
  type: InputKinesisType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputKinesisConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputKinesisPq$outboundSchema).optional(),
  streamName: z.string(),
  serviceInterval: z.number().default(1),
  shardExpr: z.string().default("true"),
  shardIteratorType: ShardIteratorStart$outboundSchema.default("TRIM_HORIZON"),
  payloadFormat: InputKinesisRecordDataFormat$outboundSchema.default("cribl"),
  getRecordsLimit: z.number().default(5000),
  getRecordsLimitTotal: z.number().default(20000),
  loadBalancingAlgorithm: ShardLoadBalancing$outboundSchema.default(
    "ConsistentHashing",
  ),
  awsAuthenticationMethod: InputKinesisAuthenticationMethod$outboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string(),
  endpoint: z.string().optional(),
  signatureVersion: InputKinesisSignatureVersion$outboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  verifyKPLCheckSums: z.boolean().default(false),
  avoidDuplicates: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputKinesisMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKinesis$ {
  /** @deprecated use `InputKinesis$inboundSchema` instead. */
  export const inboundSchema = InputKinesis$inboundSchema;
  /** @deprecated use `InputKinesis$outboundSchema` instead. */
  export const outboundSchema = InputKinesis$outboundSchema;
  /** @deprecated use `InputKinesis$Outbound` instead. */
  export type Outbound = InputKinesis$Outbound;
}

export function inputKinesisToJSON(inputKinesis: InputKinesis): string {
  return JSON.stringify(InputKinesis$outboundSchema.parse(inputKinesis));
}

export function inputKinesisFromJSON(
  jsonString: string,
): SafeParseResult<InputKinesis, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKinesis$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKinesis' from JSON`,
  );
}
