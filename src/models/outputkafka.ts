/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputKafkaType = {
  Kafka: "kafka",
} as const;
export type OutputKafkaType = ClosedEnum<typeof OutputKafkaType>;

/**
 * Control the number of required acknowledgments.
 */
export const OutputKafkaAcknowledgments = {
  One: 1,
  Zero: 0,
  Minus1: -1,
} as const;
/**
 * Control the number of required acknowledgments.
 */
export type OutputKafkaAcknowledgments = ClosedEnum<
  typeof OutputKafkaAcknowledgments
>;

/**
 * Format to use to serialize events before writing to Kafka.
 */
export const OutputKafkaRecordDataFormat = {
  Json: "json",
  Raw: "raw",
  Protobuf: "protobuf",
} as const;
/**
 * Format to use to serialize events before writing to Kafka.
 */
export type OutputKafkaRecordDataFormat = ClosedEnum<
  typeof OutputKafkaRecordDataFormat
>;

/**
 * Codec to use to compress the data before sending to Kafka
 */
export const OutputKafkaCompression = {
  None: "none",
  Gzip: "gzip",
  Snappy: "snappy",
  Lz4: "lz4",
} as const;
/**
 * Codec to use to compress the data before sending to Kafka
 */
export type OutputKafkaCompression = ClosedEnum<typeof OutputKafkaCompression>;

/**
 * The schema format used to encode and decode event data
 */
export const OutputKafkaSchemaType = {
  Avro: "avro",
  Json: "json",
} as const;
/**
 * The schema format used to encode and decode event data
 */
export type OutputKafkaSchemaType = ClosedEnum<typeof OutputKafkaSchemaType>;

/**
 * Credentials to use when authenticating with the schema registry using basic HTTP authentication
 */
export type OutputKafkaAuth = {
  disabled?: boolean | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

export const OutputKafkaKafkaSchemaRegistryMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputKafkaKafkaSchemaRegistryMinimumTLSVersion = ClosedEnum<
  typeof OutputKafkaKafkaSchemaRegistryMinimumTLSVersion
>;

export const OutputKafkaKafkaSchemaRegistryMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputKafkaKafkaSchemaRegistryMaximumTLSVersion = ClosedEnum<
  typeof OutputKafkaKafkaSchemaRegistryMaximumTLSVersion
>;

export type OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Reject certificates that are not authorized by a CA in the CA certificate path, or by another
   *
   * @remarks
   *                     trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: OutputKafkaKafkaSchemaRegistryMinimumTLSVersion | undefined;
  maxVersion?: OutputKafkaKafkaSchemaRegistryMaximumTLSVersion | undefined;
};

export type OutputKafkaKafkaSchemaRegistryAuthentication = {
  disabled?: boolean | undefined;
  /**
   * URL for accessing the Confluent Schema Registry. Example: http://localhost:8081. To connect over TLS, use https instead of http.
   */
  schemaRegistryURL?: string | undefined;
  /**
   * The schema format used to encode and decode event data
   */
  schemaType?: OutputKafkaSchemaType | undefined;
  /**
   * Maximum time to wait for a Schema Registry connection to complete successfully
   */
  connectionTimeout?: number | undefined;
  /**
   * Maximum time to wait for the Schema Registry to respond to a request
   */
  requestTimeout?: number | undefined;
  /**
   * Maximum number of times to try fetching schemas from the Schema Registry
   */
  maxRetries?: number | undefined;
  /**
   * Credentials to use when authenticating with the schema registry using basic HTTP authentication
   */
  auth?: OutputKafkaAuth | undefined;
  tls?: OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide | undefined;
  /**
   * Used when __keySchemaIdOut is not present, to transform key values, leave blank if key transformation is not required by default.
   */
  defaultKeySchemaId?: number | undefined;
  /**
   * Used when __valueSchemaIdOut is not present, to transform _raw, leave blank if value transformation is not required by default.
   */
  defaultValueSchemaId?: number | undefined;
};

export const OutputKafkaSASLMechanism = {
  Plain: "plain",
  ScramSha256: "scram-sha-256",
  ScramSha512: "scram-sha-512",
  Kerberos: "kerberos",
} as const;
export type OutputKafkaSASLMechanism = ClosedEnum<
  typeof OutputKafkaSASLMechanism
>;

/**
 * Authentication parameters to use when connecting to brokers. Using TLS is highly recommended.
 */
export type OutputKafkaAuthentication = {
  disabled?: boolean | undefined;
  mechanism?: OutputKafkaSASLMechanism | undefined;
};

export const OutputKafkaMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputKafkaMinimumTLSVersion = ClosedEnum<
  typeof OutputKafkaMinimumTLSVersion
>;

export const OutputKafkaMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputKafkaMaximumTLSVersion = ClosedEnum<
  typeof OutputKafkaMaximumTLSVersion
>;

export type OutputKafkaTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Reject certificates that are not authorized by a CA in the CA certificate path, or by another
   *
   * @remarks
   *                     trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: OutputKafkaMinimumTLSVersion | undefined;
  maxVersion?: OutputKafkaMaximumTLSVersion | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputKafkaBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputKafkaBackpressureBehavior = ClosedEnum<
  typeof OutputKafkaBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputKafkaPqCompressCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputKafkaPqCompressCompression = ClosedEnum<
  typeof OutputKafkaPqCompressCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputKafkaQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputKafkaQueueFullBehavior = ClosedEnum<
  typeof OutputKafkaQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputKafkaMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputKafkaMode = ClosedEnum<typeof OutputKafkaMode>;

export type OutputKafkaPqControls = {};

export type OutputKafka = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputKafkaType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Enter each Kafka bootstrap server you want to use. Specify hostname and port, e.g., mykafkabroker:9092, or just hostname, in which case @{product} will assign port 9092.
   */
  brokers: Array<string>;
  /**
   * The topic to publish events to. Can be overridden using the __topicOut field.
   */
  topic: string;
  /**
   * Control the number of required acknowledgments.
   */
  ack?: OutputKafkaAcknowledgments | undefined;
  /**
   * Format to use to serialize events before writing to Kafka.
   */
  format?: OutputKafkaRecordDataFormat | undefined;
  /**
   * Codec to use to compress the data before sending to Kafka
   */
  compression?: OutputKafkaCompression | undefined;
  /**
   * Maximum size of each record batch before compression. The value must not exceed the Kafka brokers' message.max.bytes setting.
   */
  maxRecordSizeKB?: number | undefined;
  /**
   * The maximum number of events you want the Destination to allow in a batch before forcing a flush
   */
  flushEventCount?: number | undefined;
  /**
   * The maximum amount of time you want the Destination to wait before forcing a flush. Shorter intervals tend to result in smaller batches being sent.
   */
  flushPeriodSec?: number | undefined;
  kafkaSchemaRegistry?:
    | OutputKafkaKafkaSchemaRegistryAuthentication
    | undefined;
  /**
   * Maximum time to wait for a connection to complete successfully
   */
  connectionTimeout?: number | undefined;
  /**
   * Maximum time to wait for Kafka to respond to a request
   */
  requestTimeout?: number | undefined;
  /**
   * If messages are failing, you can set the maximum number of retries as high as 100 to prevent loss of data
   */
  maxRetries?: number | undefined;
  /**
   * The maximum wait time for a retry, in milliseconds. Default (and minimum) is 30,000 ms (30 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackOff?: number | undefined;
  /**
   * Initial value used to calculate the retry, in milliseconds. Maximum is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Set the backoff multiplier (2-20) to control the retry frequency for failed messages. For faster retries, use a lower multiplier. For slower retries with more delay between attempts, use a higher multiplier. The multiplier is used in an exponential backoff formula; see the Kafka [documentation](https://kafka.js.org/docs/retry-detailed) for details.
   */
  backoffRate?: number | undefined;
  /**
   * Maximum time to wait for Kafka to respond to an authentication request
   */
  authenticationTimeout?: number | undefined;
  /**
   * Specifies a time window during which @{product} can reauthenticate if needed. Creates the window measuring backward from the moment when credentials are set to expire.
   */
  reauthenticationThreshold?: number | undefined;
  /**
   * Authentication parameters to use when connecting to brokers. Using TLS is highly recommended.
   */
  sasl?: OutputKafkaAuthentication | undefined;
  tls?: OutputKafkaTLSSettingsClientSide | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputKafkaBackpressureBehavior | undefined;
  description?: string | undefined;
  /**
   * Select a set of Protobuf definitions for the events you want to send
   */
  protobufLibraryId?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputKafkaPqCompressCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputKafkaQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputKafkaMode | undefined;
  pqControls?: OutputKafkaPqControls | undefined;
};

/** @internal */
export const OutputKafkaType$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaType
> = z.nativeEnum(OutputKafkaType);

/** @internal */
export const OutputKafkaType$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaType
> = OutputKafkaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaType$ {
  /** @deprecated use `OutputKafkaType$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaType$inboundSchema;
  /** @deprecated use `OutputKafkaType$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaType$outboundSchema;
}

/** @internal */
export const OutputKafkaAcknowledgments$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaAcknowledgments
> = z.nativeEnum(OutputKafkaAcknowledgments);

/** @internal */
export const OutputKafkaAcknowledgments$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaAcknowledgments
> = OutputKafkaAcknowledgments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaAcknowledgments$ {
  /** @deprecated use `OutputKafkaAcknowledgments$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaAcknowledgments$inboundSchema;
  /** @deprecated use `OutputKafkaAcknowledgments$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaAcknowledgments$outboundSchema;
}

/** @internal */
export const OutputKafkaRecordDataFormat$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaRecordDataFormat
> = z.nativeEnum(OutputKafkaRecordDataFormat);

/** @internal */
export const OutputKafkaRecordDataFormat$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaRecordDataFormat
> = OutputKafkaRecordDataFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaRecordDataFormat$ {
  /** @deprecated use `OutputKafkaRecordDataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaRecordDataFormat$inboundSchema;
  /** @deprecated use `OutputKafkaRecordDataFormat$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaRecordDataFormat$outboundSchema;
}

/** @internal */
export const OutputKafkaCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaCompression
> = z.nativeEnum(OutputKafkaCompression);

/** @internal */
export const OutputKafkaCompression$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaCompression
> = OutputKafkaCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaCompression$ {
  /** @deprecated use `OutputKafkaCompression$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaCompression$inboundSchema;
  /** @deprecated use `OutputKafkaCompression$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaCompression$outboundSchema;
}

/** @internal */
export const OutputKafkaSchemaType$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaSchemaType
> = z.nativeEnum(OutputKafkaSchemaType);

/** @internal */
export const OutputKafkaSchemaType$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaSchemaType
> = OutputKafkaSchemaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaSchemaType$ {
  /** @deprecated use `OutputKafkaSchemaType$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaSchemaType$inboundSchema;
  /** @deprecated use `OutputKafkaSchemaType$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaSchemaType$outboundSchema;
}

/** @internal */
export const OutputKafkaAuth$inboundSchema: z.ZodType<
  OutputKafkaAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type OutputKafkaAuth$Outbound = {
  disabled: boolean;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const OutputKafkaAuth$outboundSchema: z.ZodType<
  OutputKafkaAuth$Outbound,
  z.ZodTypeDef,
  OutputKafkaAuth
> = z.object({
  disabled: z.boolean().default(true),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaAuth$ {
  /** @deprecated use `OutputKafkaAuth$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaAuth$inboundSchema;
  /** @deprecated use `OutputKafkaAuth$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaAuth$outboundSchema;
  /** @deprecated use `OutputKafkaAuth$Outbound` instead. */
  export type Outbound = OutputKafkaAuth$Outbound;
}

export function outputKafkaAuthToJSON(
  outputKafkaAuth: OutputKafkaAuth,
): string {
  return JSON.stringify(OutputKafkaAuth$outboundSchema.parse(outputKafkaAuth));
}

export function outputKafkaAuthFromJSON(
  jsonString: string,
): SafeParseResult<OutputKafkaAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputKafkaAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputKafkaAuth' from JSON`,
  );
}

/** @internal */
export const OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema:
  z.ZodNativeEnum<typeof OutputKafkaKafkaSchemaRegistryMinimumTLSVersion> = z
    .nativeEnum(OutputKafkaKafkaSchemaRegistryMinimumTLSVersion);

/** @internal */
export const OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$outboundSchema:
  z.ZodNativeEnum<typeof OutputKafkaKafkaSchemaRegistryMinimumTLSVersion> =
    OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$ {
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema =
    OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema;
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema:
  z.ZodNativeEnum<typeof OutputKafkaKafkaSchemaRegistryMaximumTLSVersion> = z
    .nativeEnum(OutputKafkaKafkaSchemaRegistryMaximumTLSVersion);

/** @internal */
export const OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$outboundSchema:
  z.ZodNativeEnum<typeof OutputKafkaKafkaSchemaRegistryMaximumTLSVersion> =
    OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$ {
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema =
    OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema;
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema:
  z.ZodType<
    OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide,
    z.ZodTypeDef,
    unknown
  > = z.object({
    disabled: z.boolean().default(true),
    rejectUnauthorized: z.boolean().default(true),
    servername: z.string().optional(),
    certificateName: z.string().optional(),
    caPath: z.string().optional(),
    privKeyPath: z.string().optional(),
    certPath: z.string().optional(),
    passphrase: z.string().optional(),
    minVersion: OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema
      .optional(),
    maxVersion: OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema
      .optional(),
  });

/** @internal */
export type OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema:
  z.ZodType<
    OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound,
    z.ZodTypeDef,
    OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide
  > = z.object({
    disabled: z.boolean().default(true),
    rejectUnauthorized: z.boolean().default(true),
    servername: z.string().optional(),
    certificateName: z.string().optional(),
    caPath: z.string().optional(),
    privKeyPath: z.string().optional(),
    certPath: z.string().optional(),
    passphrase: z.string().optional(),
    minVersion: OutputKafkaKafkaSchemaRegistryMinimumTLSVersion$outboundSchema
      .optional(),
    maxVersion: OutputKafkaKafkaSchemaRegistryMaximumTLSVersion$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$ {
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema =
    OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema =
    OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound` instead. */
  export type Outbound =
    OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound;
}

export function outputKafkaKafkaSchemaRegistryTLSSettingsClientSideToJSON(
  outputKafkaKafkaSchemaRegistryTLSSettingsClientSide:
    OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide,
): string {
  return JSON.stringify(
    OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema.parse(
      outputKafkaKafkaSchemaRegistryTLSSettingsClientSide,
    ),
  );
}

export function outputKafkaKafkaSchemaRegistryTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const OutputKafkaKafkaSchemaRegistryAuthentication$inboundSchema:
  z.ZodType<
    OutputKafkaKafkaSchemaRegistryAuthentication,
    z.ZodTypeDef,
    unknown
  > = z.object({
    disabled: z.boolean().default(true),
    schemaRegistryURL: z.string().default("http://localhost:8081"),
    schemaType: OutputKafkaSchemaType$inboundSchema.default("avro"),
    connectionTimeout: z.number().default(30000),
    requestTimeout: z.number().default(30000),
    maxRetries: z.number().default(1),
    auth: z.lazy(() => OutputKafkaAuth$inboundSchema).optional(),
    tls: z.lazy(() =>
      OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema
    ).optional(),
    defaultKeySchemaId: z.number().optional(),
    defaultValueSchemaId: z.number().optional(),
  });

/** @internal */
export type OutputKafkaKafkaSchemaRegistryAuthentication$Outbound = {
  disabled: boolean;
  schemaRegistryURL: string;
  schemaType: string;
  connectionTimeout: number;
  requestTimeout: number;
  maxRetries: number;
  auth?: OutputKafkaAuth$Outbound | undefined;
  tls?:
    | OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound
    | undefined;
  defaultKeySchemaId?: number | undefined;
  defaultValueSchemaId?: number | undefined;
};

/** @internal */
export const OutputKafkaKafkaSchemaRegistryAuthentication$outboundSchema:
  z.ZodType<
    OutputKafkaKafkaSchemaRegistryAuthentication$Outbound,
    z.ZodTypeDef,
    OutputKafkaKafkaSchemaRegistryAuthentication
  > = z.object({
    disabled: z.boolean().default(true),
    schemaRegistryURL: z.string().default("http://localhost:8081"),
    schemaType: OutputKafkaSchemaType$outboundSchema.default("avro"),
    connectionTimeout: z.number().default(30000),
    requestTimeout: z.number().default(30000),
    maxRetries: z.number().default(1),
    auth: z.lazy(() => OutputKafkaAuth$outboundSchema).optional(),
    tls: z.lazy(() =>
      OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema
    ).optional(),
    defaultKeySchemaId: z.number().optional(),
    defaultValueSchemaId: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaKafkaSchemaRegistryAuthentication$ {
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryAuthentication$inboundSchema` instead. */
  export const inboundSchema =
    OutputKafkaKafkaSchemaRegistryAuthentication$inboundSchema;
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryAuthentication$outboundSchema` instead. */
  export const outboundSchema =
    OutputKafkaKafkaSchemaRegistryAuthentication$outboundSchema;
  /** @deprecated use `OutputKafkaKafkaSchemaRegistryAuthentication$Outbound` instead. */
  export type Outbound = OutputKafkaKafkaSchemaRegistryAuthentication$Outbound;
}

export function outputKafkaKafkaSchemaRegistryAuthenticationToJSON(
  outputKafkaKafkaSchemaRegistryAuthentication:
    OutputKafkaKafkaSchemaRegistryAuthentication,
): string {
  return JSON.stringify(
    OutputKafkaKafkaSchemaRegistryAuthentication$outboundSchema.parse(
      outputKafkaKafkaSchemaRegistryAuthentication,
    ),
  );
}

export function outputKafkaKafkaSchemaRegistryAuthenticationFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputKafkaKafkaSchemaRegistryAuthentication,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputKafkaKafkaSchemaRegistryAuthentication$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputKafkaKafkaSchemaRegistryAuthentication' from JSON`,
  );
}

/** @internal */
export const OutputKafkaSASLMechanism$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaSASLMechanism
> = z.nativeEnum(OutputKafkaSASLMechanism);

/** @internal */
export const OutputKafkaSASLMechanism$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaSASLMechanism
> = OutputKafkaSASLMechanism$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaSASLMechanism$ {
  /** @deprecated use `OutputKafkaSASLMechanism$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaSASLMechanism$inboundSchema;
  /** @deprecated use `OutputKafkaSASLMechanism$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaSASLMechanism$outboundSchema;
}

/** @internal */
export const OutputKafkaAuthentication$inboundSchema: z.ZodType<
  OutputKafkaAuthentication,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  mechanism: OutputKafkaSASLMechanism$inboundSchema.default("plain"),
});

/** @internal */
export type OutputKafkaAuthentication$Outbound = {
  disabled: boolean;
  mechanism: string;
};

/** @internal */
export const OutputKafkaAuthentication$outboundSchema: z.ZodType<
  OutputKafkaAuthentication$Outbound,
  z.ZodTypeDef,
  OutputKafkaAuthentication
> = z.object({
  disabled: z.boolean().default(true),
  mechanism: OutputKafkaSASLMechanism$outboundSchema.default("plain"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaAuthentication$ {
  /** @deprecated use `OutputKafkaAuthentication$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaAuthentication$inboundSchema;
  /** @deprecated use `OutputKafkaAuthentication$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaAuthentication$outboundSchema;
  /** @deprecated use `OutputKafkaAuthentication$Outbound` instead. */
  export type Outbound = OutputKafkaAuthentication$Outbound;
}

export function outputKafkaAuthenticationToJSON(
  outputKafkaAuthentication: OutputKafkaAuthentication,
): string {
  return JSON.stringify(
    OutputKafkaAuthentication$outboundSchema.parse(outputKafkaAuthentication),
  );
}

export function outputKafkaAuthenticationFromJSON(
  jsonString: string,
): SafeParseResult<OutputKafkaAuthentication, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputKafkaAuthentication$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputKafkaAuthentication' from JSON`,
  );
}

/** @internal */
export const OutputKafkaMinimumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaMinimumTLSVersion
> = z.nativeEnum(OutputKafkaMinimumTLSVersion);

/** @internal */
export const OutputKafkaMinimumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaMinimumTLSVersion
> = OutputKafkaMinimumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaMinimumTLSVersion$ {
  /** @deprecated use `OutputKafkaMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaMinimumTLSVersion$inboundSchema;
  /** @deprecated use `OutputKafkaMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputKafkaMaximumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaMaximumTLSVersion
> = z.nativeEnum(OutputKafkaMaximumTLSVersion);

/** @internal */
export const OutputKafkaMaximumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaMaximumTLSVersion
> = OutputKafkaMaximumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaMaximumTLSVersion$ {
  /** @deprecated use `OutputKafkaMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaMaximumTLSVersion$inboundSchema;
  /** @deprecated use `OutputKafkaMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputKafkaTLSSettingsClientSide$inboundSchema: z.ZodType<
  OutputKafkaTLSSettingsClientSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputKafkaMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: OutputKafkaMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type OutputKafkaTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const OutputKafkaTLSSettingsClientSide$outboundSchema: z.ZodType<
  OutputKafkaTLSSettingsClientSide$Outbound,
  z.ZodTypeDef,
  OutputKafkaTLSSettingsClientSide
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputKafkaMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: OutputKafkaMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaTLSSettingsClientSide$ {
  /** @deprecated use `OutputKafkaTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `OutputKafkaTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `OutputKafkaTLSSettingsClientSide$Outbound` instead. */
  export type Outbound = OutputKafkaTLSSettingsClientSide$Outbound;
}

export function outputKafkaTLSSettingsClientSideToJSON(
  outputKafkaTLSSettingsClientSide: OutputKafkaTLSSettingsClientSide,
): string {
  return JSON.stringify(
    OutputKafkaTLSSettingsClientSide$outboundSchema.parse(
      outputKafkaTLSSettingsClientSide,
    ),
  );
}

export function outputKafkaTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<OutputKafkaTLSSettingsClientSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputKafkaTLSSettingsClientSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputKafkaTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const OutputKafkaBackpressureBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaBackpressureBehavior
> = z.nativeEnum(OutputKafkaBackpressureBehavior);

/** @internal */
export const OutputKafkaBackpressureBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaBackpressureBehavior
> = OutputKafkaBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaBackpressureBehavior$ {
  /** @deprecated use `OutputKafkaBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputKafkaBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputKafkaPqCompressCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaPqCompressCompression
> = z.nativeEnum(OutputKafkaPqCompressCompression);

/** @internal */
export const OutputKafkaPqCompressCompression$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaPqCompressCompression
> = OutputKafkaPqCompressCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaPqCompressCompression$ {
  /** @deprecated use `OutputKafkaPqCompressCompression$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaPqCompressCompression$inboundSchema;
  /** @deprecated use `OutputKafkaPqCompressCompression$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaPqCompressCompression$outboundSchema;
}

/** @internal */
export const OutputKafkaQueueFullBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaQueueFullBehavior
> = z.nativeEnum(OutputKafkaQueueFullBehavior);

/** @internal */
export const OutputKafkaQueueFullBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaQueueFullBehavior
> = OutputKafkaQueueFullBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaQueueFullBehavior$ {
  /** @deprecated use `OutputKafkaQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputKafkaQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputKafkaMode$inboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaMode
> = z.nativeEnum(OutputKafkaMode);

/** @internal */
export const OutputKafkaMode$outboundSchema: z.ZodNativeEnum<
  typeof OutputKafkaMode
> = OutputKafkaMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaMode$ {
  /** @deprecated use `OutputKafkaMode$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaMode$inboundSchema;
  /** @deprecated use `OutputKafkaMode$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaMode$outboundSchema;
}

/** @internal */
export const OutputKafkaPqControls$inboundSchema: z.ZodType<
  OutputKafkaPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputKafkaPqControls$Outbound = {};

/** @internal */
export const OutputKafkaPqControls$outboundSchema: z.ZodType<
  OutputKafkaPqControls$Outbound,
  z.ZodTypeDef,
  OutputKafkaPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafkaPqControls$ {
  /** @deprecated use `OutputKafkaPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputKafkaPqControls$inboundSchema;
  /** @deprecated use `OutputKafkaPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputKafkaPqControls$outboundSchema;
  /** @deprecated use `OutputKafkaPqControls$Outbound` instead. */
  export type Outbound = OutputKafkaPqControls$Outbound;
}

export function outputKafkaPqControlsToJSON(
  outputKafkaPqControls: OutputKafkaPqControls,
): string {
  return JSON.stringify(
    OutputKafkaPqControls$outboundSchema.parse(outputKafkaPqControls),
  );
}

export function outputKafkaPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputKafkaPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputKafkaPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputKafkaPqControls' from JSON`,
  );
}

/** @internal */
export const OutputKafka$inboundSchema: z.ZodType<
  OutputKafka,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputKafkaType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  brokers: z.array(z.string()),
  topic: z.string(),
  ack: OutputKafkaAcknowledgments$inboundSchema.default(1),
  format: OutputKafkaRecordDataFormat$inboundSchema.default("json"),
  compression: OutputKafkaCompression$inboundSchema.default("gzip"),
  maxRecordSizeKB: z.number().default(768),
  flushEventCount: z.number().default(1000),
  flushPeriodSec: z.number().default(1),
  kafkaSchemaRegistry: z.lazy(() =>
    OutputKafkaKafkaSchemaRegistryAuthentication$inboundSchema
  ).optional(),
  connectionTimeout: z.number().default(10000),
  requestTimeout: z.number().default(60000),
  maxRetries: z.number().default(5),
  maxBackOff: z.number().default(30000),
  initialBackoff: z.number().default(300),
  backoffRate: z.number().default(2),
  authenticationTimeout: z.number().default(10000),
  reauthenticationThreshold: z.number().default(10000),
  sasl: z.lazy(() => OutputKafkaAuthentication$inboundSchema).optional(),
  tls: z.lazy(() => OutputKafkaTLSSettingsClientSide$inboundSchema).optional(),
  onBackpressure: OutputKafkaBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  protobufLibraryId: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputKafkaPqCompressCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputKafkaQueueFullBehavior$inboundSchema.default("block"),
  pqMode: OutputKafkaMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputKafkaPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputKafka$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  brokers: Array<string>;
  topic: string;
  ack: number;
  format: string;
  compression: string;
  maxRecordSizeKB: number;
  flushEventCount: number;
  flushPeriodSec: number;
  kafkaSchemaRegistry?:
    | OutputKafkaKafkaSchemaRegistryAuthentication$Outbound
    | undefined;
  connectionTimeout: number;
  requestTimeout: number;
  maxRetries: number;
  maxBackOff: number;
  initialBackoff: number;
  backoffRate: number;
  authenticationTimeout: number;
  reauthenticationThreshold: number;
  sasl?: OutputKafkaAuthentication$Outbound | undefined;
  tls?: OutputKafkaTLSSettingsClientSide$Outbound | undefined;
  onBackpressure: string;
  description?: string | undefined;
  protobufLibraryId?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputKafkaPqControls$Outbound | undefined;
};

/** @internal */
export const OutputKafka$outboundSchema: z.ZodType<
  OutputKafka$Outbound,
  z.ZodTypeDef,
  OutputKafka
> = z.object({
  id: z.string().optional(),
  type: OutputKafkaType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  brokers: z.array(z.string()),
  topic: z.string(),
  ack: OutputKafkaAcknowledgments$outboundSchema.default(1),
  format: OutputKafkaRecordDataFormat$outboundSchema.default("json"),
  compression: OutputKafkaCompression$outboundSchema.default("gzip"),
  maxRecordSizeKB: z.number().default(768),
  flushEventCount: z.number().default(1000),
  flushPeriodSec: z.number().default(1),
  kafkaSchemaRegistry: z.lazy(() =>
    OutputKafkaKafkaSchemaRegistryAuthentication$outboundSchema
  ).optional(),
  connectionTimeout: z.number().default(10000),
  requestTimeout: z.number().default(60000),
  maxRetries: z.number().default(5),
  maxBackOff: z.number().default(30000),
  initialBackoff: z.number().default(300),
  backoffRate: z.number().default(2),
  authenticationTimeout: z.number().default(10000),
  reauthenticationThreshold: z.number().default(10000),
  sasl: z.lazy(() => OutputKafkaAuthentication$outboundSchema).optional(),
  tls: z.lazy(() => OutputKafkaTLSSettingsClientSide$outboundSchema).optional(),
  onBackpressure: OutputKafkaBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  protobufLibraryId: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputKafkaPqCompressCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputKafkaQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputKafkaMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputKafkaPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputKafka$ {
  /** @deprecated use `OutputKafka$inboundSchema` instead. */
  export const inboundSchema = OutputKafka$inboundSchema;
  /** @deprecated use `OutputKafka$outboundSchema` instead. */
  export const outboundSchema = OutputKafka$outboundSchema;
  /** @deprecated use `OutputKafka$Outbound` instead. */
  export type Outbound = OutputKafka$Outbound;
}

export function outputKafkaToJSON(outputKafka: OutputKafka): string {
  return JSON.stringify(OutputKafka$outboundSchema.parse(outputKafka));
}

export function outputKafkaFromJSON(
  jsonString: string,
): SafeParseResult<OutputKafka, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputKafka$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputKafka' from JSON`,
  );
}
