/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AreaStyleOption,
  AreaStyleOption$inboundSchema,
  AreaStyleOption$Outbound,
  AreaStyleOption$outboundSchema,
} from "./areastyleoption.js";
import {
  ChartData,
  ChartData$inboundSchema,
  ChartData$Outbound,
  ChartData$outboundSchema,
} from "./chartdata.js";
import {
  ChartType,
  ChartType$inboundSchema,
  ChartType$outboundSchema,
} from "./charttype.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChartSeries = {
  areaStyle?: AreaStyleOption | undefined;
  color?: string | undefined;
  data?: Array<ChartData> | undefined;
  map?: string | undefined;
  name: string;
  type?: ChartType | undefined;
  yAxisField?: string | undefined;
};

/** @internal */
export const ChartSeries$inboundSchema: z.ZodType<
  ChartSeries,
  z.ZodTypeDef,
  unknown
> = z.object({
  areaStyle: AreaStyleOption$inboundSchema.optional(),
  color: z.string().optional(),
  data: z.array(ChartData$inboundSchema).optional(),
  map: z.string().optional(),
  name: z.string(),
  type: ChartType$inboundSchema.optional(),
  yAxisField: z.string().optional(),
});

/** @internal */
export type ChartSeries$Outbound = {
  areaStyle?: AreaStyleOption$Outbound | undefined;
  color?: string | undefined;
  data?: Array<ChartData$Outbound> | undefined;
  map?: string | undefined;
  name: string;
  type?: string | undefined;
  yAxisField?: string | undefined;
};

/** @internal */
export const ChartSeries$outboundSchema: z.ZodType<
  ChartSeries$Outbound,
  z.ZodTypeDef,
  ChartSeries
> = z.object({
  areaStyle: AreaStyleOption$outboundSchema.optional(),
  color: z.string().optional(),
  data: z.array(ChartData$outboundSchema).optional(),
  map: z.string().optional(),
  name: z.string(),
  type: ChartType$outboundSchema.optional(),
  yAxisField: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChartSeries$ {
  /** @deprecated use `ChartSeries$inboundSchema` instead. */
  export const inboundSchema = ChartSeries$inboundSchema;
  /** @deprecated use `ChartSeries$outboundSchema` instead. */
  export const outboundSchema = ChartSeries$outboundSchema;
  /** @deprecated use `ChartSeries$Outbound` instead. */
  export type Outbound = ChartSeries$Outbound;
}

export function chartSeriesToJSON(chartSeries: ChartSeries): string {
  return JSON.stringify(ChartSeries$outboundSchema.parse(chartSeries));
}

export function chartSeriesFromJSON(
  jsonString: string,
): SafeParseResult<ChartSeries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChartSeries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChartSeries' from JSON`,
  );
}
