/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  JobStatus,
  JobStatus$inboundSchema,
  JobStatus$Outbound,
  JobStatus$outboundSchema,
} from "./jobstatus.js";
import {
  RunnableJob,
  RunnableJob$inboundSchema,
  RunnableJob$Outbound,
  RunnableJob$outboundSchema,
} from "./runnablejob.js";

export type JobInfo = {
  args: RunnableJob;
  id: string;
  keep?: boolean | undefined;
  status: JobStatus;
};

/** @internal */
export const JobInfo$inboundSchema: z.ZodType<JobInfo, z.ZodTypeDef, unknown> =
  z.object({
    args: RunnableJob$inboundSchema,
    id: z.string(),
    keep: z.boolean().optional(),
    status: JobStatus$inboundSchema,
  });

/** @internal */
export type JobInfo$Outbound = {
  args: RunnableJob$Outbound;
  id: string;
  keep?: boolean | undefined;
  status: JobStatus$Outbound;
};

/** @internal */
export const JobInfo$outboundSchema: z.ZodType<
  JobInfo$Outbound,
  z.ZodTypeDef,
  JobInfo
> = z.object({
  args: RunnableJob$outboundSchema,
  id: z.string(),
  keep: z.boolean().optional(),
  status: JobStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobInfo$ {
  /** @deprecated use `JobInfo$inboundSchema` instead. */
  export const inboundSchema = JobInfo$inboundSchema;
  /** @deprecated use `JobInfo$outboundSchema` instead. */
  export const outboundSchema = JobInfo$outboundSchema;
  /** @deprecated use `JobInfo$Outbound` instead. */
  export type Outbound = JobInfo$Outbound;
}

export function jobInfoToJSON(jobInfo: JobInfo): string {
  return JSON.stringify(JobInfo$outboundSchema.parse(jobInfo));
}

export function jobInfoFromJSON(
  jsonString: string,
): SafeParseResult<JobInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobInfo' from JSON`,
  );
}
