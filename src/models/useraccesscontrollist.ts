/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResourcePolicy,
  ResourcePolicy$inboundSchema,
  ResourcePolicy$Outbound,
  ResourcePolicy$outboundSchema,
} from "./resourcepolicy.js";

export type UserAccessControlList = {
  perms: Array<ResourcePolicy>;
  user: string;
};

/** @internal */
export const UserAccessControlList$inboundSchema: z.ZodType<
  UserAccessControlList,
  z.ZodTypeDef,
  unknown
> = z.object({
  perms: z.array(ResourcePolicy$inboundSchema),
  user: z.string(),
});

/** @internal */
export type UserAccessControlList$Outbound = {
  perms: Array<ResourcePolicy$Outbound>;
  user: string;
};

/** @internal */
export const UserAccessControlList$outboundSchema: z.ZodType<
  UserAccessControlList$Outbound,
  z.ZodTypeDef,
  UserAccessControlList
> = z.object({
  perms: z.array(ResourcePolicy$outboundSchema),
  user: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserAccessControlList$ {
  /** @deprecated use `UserAccessControlList$inboundSchema` instead. */
  export const inboundSchema = UserAccessControlList$inboundSchema;
  /** @deprecated use `UserAccessControlList$outboundSchema` instead. */
  export const outboundSchema = UserAccessControlList$outboundSchema;
  /** @deprecated use `UserAccessControlList$Outbound` instead. */
  export type Outbound = UserAccessControlList$Outbound;
}

export function userAccessControlListToJSON(
  userAccessControlList: UserAccessControlList,
): string {
  return JSON.stringify(
    UserAccessControlList$outboundSchema.parse(userAccessControlList),
  );
}

export function userAccessControlListFromJSON(
  jsonString: string,
): SafeParseResult<UserAccessControlList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserAccessControlList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserAccessControlList' from JSON`,
  );
}
