/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputLokiType = {
  Loki: "loki",
} as const;
export type OutputLokiType = ClosedEnum<typeof OutputLokiType>;

/**
 * Format to use when sending logs to Loki (Protobuf or JSON)
 */
export const OutputLokiMessageFormat = {
  /**
   * Protobuf
   */
  Protobuf: "protobuf",
  /**
   * JSON
   */
  Json: "json",
} as const;
/**
 * Format to use when sending logs to Loki (Protobuf or JSON)
 */
export type OutputLokiMessageFormat = OpenEnum<typeof OutputLokiMessageFormat>;

export type OutputLokiLabel = {
  name?: string | undefined;
  value: string;
};

export const OutputLokiAuthenticationType = {
  /**
   * None
   */
  None: "none",
  /**
   * Auth token
   */
  Token: "token",
  /**
   * Auth token (text secret)
   */
  TextSecret: "textSecret",
  /**
   * Basic
   */
  Basic: "basic",
  /**
   * Basic (credentials secret)
   */
  CredentialsSecret: "credentialsSecret",
} as const;
export type OutputLokiAuthenticationType = OpenEnum<
  typeof OutputLokiAuthenticationType
>;

export type OutputLokiExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputLokiFailedRequestLoggingMode = {
  /**
   * Payload
   */
  Payload: "payload",
  /**
   * Payload + Headers
   */
  PayloadAndHeaders: "payloadAndHeaders",
  /**
   * None
   */
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputLokiFailedRequestLoggingMode = OpenEnum<
  typeof OutputLokiFailedRequestLoggingMode
>;

export type OutputLokiResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputLokiTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputLokiBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputLokiBackpressureBehavior = OpenEnum<
  typeof OutputLokiBackpressureBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputLokiMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Always: "always",
  /**
   * Always On
   */
  Backpressure: "backpressure",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputLokiMode = OpenEnum<typeof OutputLokiMode>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputLokiCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputLokiCompression = OpenEnum<typeof OutputLokiCompression>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputLokiQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputLokiQueueFullBehavior = OpenEnum<
  typeof OutputLokiQueueFullBehavior
>;

export type OutputLokiPqControls = {};

export type OutputLoki = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputLokiType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as labels to generated logs.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The endpoint to send logs to
   */
  url: string;
  /**
   * Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event.
   */
  message?: string | undefined;
  /**
   * Format to use when sending logs to Loki (Protobuf or JSON)
   */
  messageFormat?: OutputLokiMessageFormat | undefined;
  /**
   * List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field. Example: '__labels: {host: "cribl.io", level: "error"}'
   */
  labels?: Array<OutputLokiLabel> | undefined;
  authType?: OutputLokiAuthenticationType | undefined;
  /**
   * Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki to complain about entries being delivered out of order.
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki to complain about entries being delivered out of order.
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Defaults to 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki to complain about entries being delivered out of order.
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki to complain about entries being delivered out of order.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputLokiExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?: OutputLokiFailedRequestLoggingMode | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?: Array<OutputLokiResponseRetrySetting> | undefined;
  timeoutRetrySettings?: OutputLokiTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * Add per-event HTTP headers from the __headers field to outgoing requests. Events with different headers are batched and sent separately.
   */
  enableDynamicHeaders?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputLokiBackpressureBehavior | undefined;
  /**
   * Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced.
   */
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * Username for authentication
   */
  username?: string | undefined;
  /**
   * Password (API key in Grafana Cloud domain) for authentication
   */
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Use FIFO (first in, first out) processing. Disable to forward new events to receivers before queue is flushed.
   */
  pqStrictOrdering?: boolean | undefined;
  /**
   * Throttling rate (in events per second) to impose while writing to Destinations from PQ. Defaults to 0, which disables throttling.
   */
  pqRatePerSec?: number | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputLokiMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  pqMaxBufferSize?: number | undefined;
  /**
   * How long (in seconds) to wait for backpressure to resolve before engaging the queue
   */
  pqMaxBackpressureSec?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputLokiCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputLokiQueueFullBehavior | undefined;
  pqControls?: OutputLokiPqControls | undefined;
};

/** @internal */
export const OutputLokiType$inboundSchema: z.ZodNativeEnum<
  typeof OutputLokiType
> = z.nativeEnum(OutputLokiType);

/** @internal */
export const OutputLokiType$outboundSchema: z.ZodNativeEnum<
  typeof OutputLokiType
> = OutputLokiType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiType$ {
  /** @deprecated use `OutputLokiType$inboundSchema` instead. */
  export const inboundSchema = OutputLokiType$inboundSchema;
  /** @deprecated use `OutputLokiType$outboundSchema` instead. */
  export const outboundSchema = OutputLokiType$outboundSchema;
}

/** @internal */
export const OutputLokiMessageFormat$inboundSchema: z.ZodType<
  OutputLokiMessageFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputLokiMessageFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputLokiMessageFormat$outboundSchema: z.ZodType<
  OutputLokiMessageFormat,
  z.ZodTypeDef,
  OutputLokiMessageFormat
> = z.union([
  z.nativeEnum(OutputLokiMessageFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiMessageFormat$ {
  /** @deprecated use `OutputLokiMessageFormat$inboundSchema` instead. */
  export const inboundSchema = OutputLokiMessageFormat$inboundSchema;
  /** @deprecated use `OutputLokiMessageFormat$outboundSchema` instead. */
  export const outboundSchema = OutputLokiMessageFormat$outboundSchema;
}

/** @internal */
export const OutputLokiLabel$inboundSchema: z.ZodType<
  OutputLokiLabel,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputLokiLabel$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputLokiLabel$outboundSchema: z.ZodType<
  OutputLokiLabel$Outbound,
  z.ZodTypeDef,
  OutputLokiLabel
> = z.object({
  name: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiLabel$ {
  /** @deprecated use `OutputLokiLabel$inboundSchema` instead. */
  export const inboundSchema = OutputLokiLabel$inboundSchema;
  /** @deprecated use `OutputLokiLabel$outboundSchema` instead. */
  export const outboundSchema = OutputLokiLabel$outboundSchema;
  /** @deprecated use `OutputLokiLabel$Outbound` instead. */
  export type Outbound = OutputLokiLabel$Outbound;
}

export function outputLokiLabelToJSON(
  outputLokiLabel: OutputLokiLabel,
): string {
  return JSON.stringify(OutputLokiLabel$outboundSchema.parse(outputLokiLabel));
}

export function outputLokiLabelFromJSON(
  jsonString: string,
): SafeParseResult<OutputLokiLabel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputLokiLabel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputLokiLabel' from JSON`,
  );
}

/** @internal */
export const OutputLokiAuthenticationType$inboundSchema: z.ZodType<
  OutputLokiAuthenticationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputLokiAuthenticationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputLokiAuthenticationType$outboundSchema: z.ZodType<
  OutputLokiAuthenticationType,
  z.ZodTypeDef,
  OutputLokiAuthenticationType
> = z.union([
  z.nativeEnum(OutputLokiAuthenticationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiAuthenticationType$ {
  /** @deprecated use `OutputLokiAuthenticationType$inboundSchema` instead. */
  export const inboundSchema = OutputLokiAuthenticationType$inboundSchema;
  /** @deprecated use `OutputLokiAuthenticationType$outboundSchema` instead. */
  export const outboundSchema = OutputLokiAuthenticationType$outboundSchema;
}

/** @internal */
export const OutputLokiExtraHttpHeader$inboundSchema: z.ZodType<
  OutputLokiExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputLokiExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputLokiExtraHttpHeader$outboundSchema: z.ZodType<
  OutputLokiExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputLokiExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiExtraHttpHeader$ {
  /** @deprecated use `OutputLokiExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputLokiExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputLokiExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputLokiExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputLokiExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputLokiExtraHttpHeader$Outbound;
}

export function outputLokiExtraHttpHeaderToJSON(
  outputLokiExtraHttpHeader: OutputLokiExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputLokiExtraHttpHeader$outboundSchema.parse(outputLokiExtraHttpHeader),
  );
}

export function outputLokiExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputLokiExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputLokiExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputLokiExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputLokiFailedRequestLoggingMode$inboundSchema: z.ZodType<
  OutputLokiFailedRequestLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputLokiFailedRequestLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputLokiFailedRequestLoggingMode$outboundSchema: z.ZodType<
  OutputLokiFailedRequestLoggingMode,
  z.ZodTypeDef,
  OutputLokiFailedRequestLoggingMode
> = z.union([
  z.nativeEnum(OutputLokiFailedRequestLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiFailedRequestLoggingMode$ {
  /** @deprecated use `OutputLokiFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema = OutputLokiFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputLokiFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputLokiFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputLokiResponseRetrySetting$inboundSchema: z.ZodType<
  OutputLokiResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputLokiResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputLokiResponseRetrySetting$outboundSchema: z.ZodType<
  OutputLokiResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputLokiResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiResponseRetrySetting$ {
  /** @deprecated use `OutputLokiResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema = OutputLokiResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputLokiResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema = OutputLokiResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputLokiResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputLokiResponseRetrySetting$Outbound;
}

export function outputLokiResponseRetrySettingToJSON(
  outputLokiResponseRetrySetting: OutputLokiResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputLokiResponseRetrySetting$outboundSchema.parse(
      outputLokiResponseRetrySetting,
    ),
  );
}

export function outputLokiResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputLokiResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputLokiResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputLokiResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputLokiTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputLokiTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputLokiTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputLokiTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputLokiTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputLokiTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiTimeoutRetrySettings$ {
  /** @deprecated use `OutputLokiTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema = OutputLokiTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputLokiTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema = OutputLokiTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputLokiTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputLokiTimeoutRetrySettings$Outbound;
}

export function outputLokiTimeoutRetrySettingsToJSON(
  outputLokiTimeoutRetrySettings: OutputLokiTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputLokiTimeoutRetrySettings$outboundSchema.parse(
      outputLokiTimeoutRetrySettings,
    ),
  );
}

export function outputLokiTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputLokiTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputLokiTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputLokiTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputLokiBackpressureBehavior$inboundSchema: z.ZodType<
  OutputLokiBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputLokiBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputLokiBackpressureBehavior$outboundSchema: z.ZodType<
  OutputLokiBackpressureBehavior,
  z.ZodTypeDef,
  OutputLokiBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputLokiBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiBackpressureBehavior$ {
  /** @deprecated use `OutputLokiBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputLokiBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputLokiBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputLokiBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputLokiMode$inboundSchema: z.ZodType<
  OutputLokiMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputLokiMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputLokiMode$outboundSchema: z.ZodType<
  OutputLokiMode,
  z.ZodTypeDef,
  OutputLokiMode
> = z.union([
  z.nativeEnum(OutputLokiMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiMode$ {
  /** @deprecated use `OutputLokiMode$inboundSchema` instead. */
  export const inboundSchema = OutputLokiMode$inboundSchema;
  /** @deprecated use `OutputLokiMode$outboundSchema` instead. */
  export const outboundSchema = OutputLokiMode$outboundSchema;
}

/** @internal */
export const OutputLokiCompression$inboundSchema: z.ZodType<
  OutputLokiCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputLokiCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputLokiCompression$outboundSchema: z.ZodType<
  OutputLokiCompression,
  z.ZodTypeDef,
  OutputLokiCompression
> = z.union([
  z.nativeEnum(OutputLokiCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiCompression$ {
  /** @deprecated use `OutputLokiCompression$inboundSchema` instead. */
  export const inboundSchema = OutputLokiCompression$inboundSchema;
  /** @deprecated use `OutputLokiCompression$outboundSchema` instead. */
  export const outboundSchema = OutputLokiCompression$outboundSchema;
}

/** @internal */
export const OutputLokiQueueFullBehavior$inboundSchema: z.ZodType<
  OutputLokiQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputLokiQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputLokiQueueFullBehavior$outboundSchema: z.ZodType<
  OutputLokiQueueFullBehavior,
  z.ZodTypeDef,
  OutputLokiQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputLokiQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiQueueFullBehavior$ {
  /** @deprecated use `OutputLokiQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputLokiQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputLokiQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputLokiQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputLokiPqControls$inboundSchema: z.ZodType<
  OutputLokiPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputLokiPqControls$Outbound = {};

/** @internal */
export const OutputLokiPqControls$outboundSchema: z.ZodType<
  OutputLokiPqControls$Outbound,
  z.ZodTypeDef,
  OutputLokiPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLokiPqControls$ {
  /** @deprecated use `OutputLokiPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputLokiPqControls$inboundSchema;
  /** @deprecated use `OutputLokiPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputLokiPqControls$outboundSchema;
  /** @deprecated use `OutputLokiPqControls$Outbound` instead. */
  export type Outbound = OutputLokiPqControls$Outbound;
}

export function outputLokiPqControlsToJSON(
  outputLokiPqControls: OutputLokiPqControls,
): string {
  return JSON.stringify(
    OutputLokiPqControls$outboundSchema.parse(outputLokiPqControls),
  );
}

export function outputLokiPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputLokiPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputLokiPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputLokiPqControls' from JSON`,
  );
}

/** @internal */
export const OutputLoki$inboundSchema: z.ZodType<
  OutputLoki,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputLokiType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  message: z.string().optional(),
  messageFormat: OutputLokiMessageFormat$inboundSchema.default("protobuf"),
  labels: z.array(z.lazy(() => OutputLokiLabel$inboundSchema)).optional(),
  authType: OutputLokiAuthenticationType$inboundSchema.default("none"),
  concurrency: z.number().default(1),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(15),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputLokiExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode: OutputLokiFailedRequestLoggingMode$inboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputLokiResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputLokiTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  enableDynamicHeaders: z.boolean().default(false),
  onBackpressure: OutputLokiBackpressureBehavior$inboundSchema.default("block"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  compress: z.boolean().default(true),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
  pqStrictOrdering: z.boolean().default(true),
  pqRatePerSec: z.number().default(0),
  pqMode: OutputLokiMode$inboundSchema.default("error"),
  pqMaxBufferSize: z.number().default(42),
  pqMaxBackpressureSec: z.number().default(30),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputLokiCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputLokiQueueFullBehavior$inboundSchema.default("block"),
  pqControls: z.lazy(() => OutputLokiPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputLoki$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  url: string;
  message?: string | undefined;
  messageFormat: string;
  labels?: Array<OutputLokiLabel$Outbound> | undefined;
  authType: string;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputLokiExtraHttpHeader$Outbound> | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputLokiResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?: OutputLokiTimeoutRetrySettings$Outbound | undefined;
  responseHonorRetryAfterHeader: boolean;
  enableDynamicHeaders: boolean;
  onBackpressure: string;
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  compress: boolean;
  token?: string | undefined;
  textSecret?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
  pqStrictOrdering: boolean;
  pqRatePerSec: number;
  pqMode: string;
  pqMaxBufferSize: number;
  pqMaxBackpressureSec: number;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqControls?: OutputLokiPqControls$Outbound | undefined;
};

/** @internal */
export const OutputLoki$outboundSchema: z.ZodType<
  OutputLoki$Outbound,
  z.ZodTypeDef,
  OutputLoki
> = z.object({
  id: z.string().optional(),
  type: OutputLokiType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  message: z.string().optional(),
  messageFormat: OutputLokiMessageFormat$outboundSchema.default("protobuf"),
  labels: z.array(z.lazy(() => OutputLokiLabel$outboundSchema)).optional(),
  authType: OutputLokiAuthenticationType$outboundSchema.default("none"),
  concurrency: z.number().default(1),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(15),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputLokiExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode: OutputLokiFailedRequestLoggingMode$outboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputLokiResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputLokiTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  enableDynamicHeaders: z.boolean().default(false),
  onBackpressure: OutputLokiBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  compress: z.boolean().default(true),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
  pqStrictOrdering: z.boolean().default(true),
  pqRatePerSec: z.number().default(0),
  pqMode: OutputLokiMode$outboundSchema.default("error"),
  pqMaxBufferSize: z.number().default(42),
  pqMaxBackpressureSec: z.number().default(30),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputLokiCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputLokiQueueFullBehavior$outboundSchema.default("block"),
  pqControls: z.lazy(() => OutputLokiPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputLoki$ {
  /** @deprecated use `OutputLoki$inboundSchema` instead. */
  export const inboundSchema = OutputLoki$inboundSchema;
  /** @deprecated use `OutputLoki$outboundSchema` instead. */
  export const outboundSchema = OutputLoki$outboundSchema;
  /** @deprecated use `OutputLoki$Outbound` instead. */
  export type Outbound = OutputLoki$Outbound;
}

export function outputLokiToJSON(outputLoki: OutputLoki): string {
  return JSON.stringify(OutputLoki$outboundSchema.parse(outputLoki));
}

export function outputLokiFromJSON(
  jsonString: string,
): SafeParseResult<OutputLoki, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputLoki$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputLoki' from JSON`,
  );
}
