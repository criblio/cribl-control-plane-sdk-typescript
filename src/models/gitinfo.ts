/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const RemoteEnum = {
  False: "false",
} as const;
export type RemoteEnum = OpenEnum<typeof RemoteEnum>;

export type Remote = string | RemoteEnum;

export type GitInfo = {
  remote: string | RemoteEnum;
  versioning: boolean;
};

/** @internal */
export const RemoteEnum$inboundSchema: z.ZodType<
  RemoteEnum,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(RemoteEnum),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const RemoteEnum$outboundSchema: z.ZodType<
  RemoteEnum,
  z.ZodTypeDef,
  RemoteEnum
> = z.union([
  z.nativeEnum(RemoteEnum),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoteEnum$ {
  /** @deprecated use `RemoteEnum$inboundSchema` instead. */
  export const inboundSchema = RemoteEnum$inboundSchema;
  /** @deprecated use `RemoteEnum$outboundSchema` instead. */
  export const outboundSchema = RemoteEnum$outboundSchema;
}

/** @internal */
export const Remote$inboundSchema: z.ZodType<Remote, z.ZodTypeDef, unknown> = z
  .union([z.string(), RemoteEnum$inboundSchema]);

/** @internal */
export type Remote$Outbound = string | string;

/** @internal */
export const Remote$outboundSchema: z.ZodType<
  Remote$Outbound,
  z.ZodTypeDef,
  Remote
> = z.union([z.string(), RemoteEnum$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Remote$ {
  /** @deprecated use `Remote$inboundSchema` instead. */
  export const inboundSchema = Remote$inboundSchema;
  /** @deprecated use `Remote$outboundSchema` instead. */
  export const outboundSchema = Remote$outboundSchema;
  /** @deprecated use `Remote$Outbound` instead. */
  export type Outbound = Remote$Outbound;
}

export function remoteToJSON(remote: Remote): string {
  return JSON.stringify(Remote$outboundSchema.parse(remote));
}

export function remoteFromJSON(
  jsonString: string,
): SafeParseResult<Remote, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Remote$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Remote' from JSON`,
  );
}

/** @internal */
export const GitInfo$inboundSchema: z.ZodType<GitInfo, z.ZodTypeDef, unknown> =
  z.object({
    remote: z.union([z.string(), RemoteEnum$inboundSchema]),
    versioning: z.boolean(),
  });

/** @internal */
export type GitInfo$Outbound = {
  remote: string | string;
  versioning: boolean;
};

/** @internal */
export const GitInfo$outboundSchema: z.ZodType<
  GitInfo$Outbound,
  z.ZodTypeDef,
  GitInfo
> = z.object({
  remote: z.union([z.string(), RemoteEnum$outboundSchema]),
  versioning: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitInfo$ {
  /** @deprecated use `GitInfo$inboundSchema` instead. */
  export const inboundSchema = GitInfo$inboundSchema;
  /** @deprecated use `GitInfo$outboundSchema` instead. */
  export const outboundSchema = GitInfo$outboundSchema;
  /** @deprecated use `GitInfo$Outbound` instead. */
  export type Outbound = GitInfo$Outbound;
}

export function gitInfoToJSON(gitInfo: GitInfo): string {
  return JSON.stringify(GitInfo$outboundSchema.parse(gitInfo));
}

export function gitInfoFromJSON(
  jsonString: string,
): SafeParseResult<GitInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitInfo' from JSON`,
  );
}
