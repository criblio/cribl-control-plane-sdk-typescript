/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SearchTerm = {
  isCaseSensitive: boolean;
  term: string;
};

/** @internal */
export const SearchTerm$inboundSchema: z.ZodType<
  SearchTerm,
  z.ZodTypeDef,
  unknown
> = z.object({
  isCaseSensitive: z.boolean(),
  term: z.string(),
});

/** @internal */
export type SearchTerm$Outbound = {
  isCaseSensitive: boolean;
  term: string;
};

/** @internal */
export const SearchTerm$outboundSchema: z.ZodType<
  SearchTerm$Outbound,
  z.ZodTypeDef,
  SearchTerm
> = z.object({
  isCaseSensitive: z.boolean(),
  term: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTerm$ {
  /** @deprecated use `SearchTerm$inboundSchema` instead. */
  export const inboundSchema = SearchTerm$inboundSchema;
  /** @deprecated use `SearchTerm$outboundSchema` instead. */
  export const outboundSchema = SearchTerm$outboundSchema;
  /** @deprecated use `SearchTerm$Outbound` instead. */
  export type Outbound = SearchTerm$Outbound;
}

export function searchTermToJSON(searchTerm: SearchTerm): string {
  return JSON.stringify(SearchTerm$outboundSchema.parse(searchTerm));
}

export function searchTermFromJSON(
  jsonString: string,
): SafeParseResult<SearchTerm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchTerm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchTerm' from JSON`,
  );
}
