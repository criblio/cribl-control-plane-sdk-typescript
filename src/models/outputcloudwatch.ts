/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputCloudwatchType = {
  Cloudwatch: "cloudwatch",
} as const;
export type OutputCloudwatchType = ClosedEnum<typeof OutputCloudwatchType>;

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const OutputCloudwatchAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type OutputCloudwatchAuthenticationMethod = ClosedEnum<
  typeof OutputCloudwatchAuthenticationMethod
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputCloudwatchBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputCloudwatchBackpressureBehavior = ClosedEnum<
  typeof OutputCloudwatchBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputCloudwatchCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputCloudwatchCompression = ClosedEnum<
  typeof OutputCloudwatchCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputCloudwatchQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputCloudwatchQueueFullBehavior = ClosedEnum<
  typeof OutputCloudwatchQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputCloudwatchMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputCloudwatchMode = ClosedEnum<typeof OutputCloudwatchMode>;

export type OutputCloudwatchPqControls = {};

export type OutputCloudwatch = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputCloudwatchType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * CloudWatch log group to associate events with
   */
  logGroupName: string;
  /**
   * Prefix for CloudWatch log stream name. This prefix will be used to generate a unique log stream name per cribl instance, for example: myStream_myHost_myOutputId
   */
  logStreamName: string;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: OutputCloudwatchAuthenticationMethod | undefined;
  awsSecretKey?: string | undefined;
  /**
   * Region where the CloudWatchLogs is located
   */
  region: string;
  /**
   * CloudWatchLogs service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to CloudWatchLogs-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access CloudWatchLogs
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Maximum number of queued batches before blocking
   */
  maxQueueSize?: number | undefined;
  /**
   * Maximum size (KB) of each individual record before compression. For non compressible data 1MB is the max recommended size
   */
  maxRecordSizeKB?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max record size.
   */
  flushPeriodSec?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputCloudwatchBackpressureBehavior | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputCloudwatchCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputCloudwatchQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputCloudwatchMode | undefined;
  pqControls?: OutputCloudwatchPqControls | undefined;
};

/** @internal */
export const OutputCloudwatchType$inboundSchema: z.ZodNativeEnum<
  typeof OutputCloudwatchType
> = z.nativeEnum(OutputCloudwatchType);

/** @internal */
export const OutputCloudwatchType$outboundSchema: z.ZodNativeEnum<
  typeof OutputCloudwatchType
> = OutputCloudwatchType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputCloudwatchType$ {
  /** @deprecated use `OutputCloudwatchType$inboundSchema` instead. */
  export const inboundSchema = OutputCloudwatchType$inboundSchema;
  /** @deprecated use `OutputCloudwatchType$outboundSchema` instead. */
  export const outboundSchema = OutputCloudwatchType$outboundSchema;
}

/** @internal */
export const OutputCloudwatchAuthenticationMethod$inboundSchema:
  z.ZodNativeEnum<typeof OutputCloudwatchAuthenticationMethod> = z.nativeEnum(
    OutputCloudwatchAuthenticationMethod,
  );

/** @internal */
export const OutputCloudwatchAuthenticationMethod$outboundSchema:
  z.ZodNativeEnum<typeof OutputCloudwatchAuthenticationMethod> =
    OutputCloudwatchAuthenticationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputCloudwatchAuthenticationMethod$ {
  /** @deprecated use `OutputCloudwatchAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputCloudwatchAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputCloudwatchAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputCloudwatchAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputCloudwatchBackpressureBehavior$inboundSchema:
  z.ZodNativeEnum<typeof OutputCloudwatchBackpressureBehavior> = z.nativeEnum(
    OutputCloudwatchBackpressureBehavior,
  );

/** @internal */
export const OutputCloudwatchBackpressureBehavior$outboundSchema:
  z.ZodNativeEnum<typeof OutputCloudwatchBackpressureBehavior> =
    OutputCloudwatchBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputCloudwatchBackpressureBehavior$ {
  /** @deprecated use `OutputCloudwatchBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputCloudwatchBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputCloudwatchBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputCloudwatchBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputCloudwatchCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputCloudwatchCompression
> = z.nativeEnum(OutputCloudwatchCompression);

/** @internal */
export const OutputCloudwatchCompression$outboundSchema: z.ZodNativeEnum<
  typeof OutputCloudwatchCompression
> = OutputCloudwatchCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputCloudwatchCompression$ {
  /** @deprecated use `OutputCloudwatchCompression$inboundSchema` instead. */
  export const inboundSchema = OutputCloudwatchCompression$inboundSchema;
  /** @deprecated use `OutputCloudwatchCompression$outboundSchema` instead. */
  export const outboundSchema = OutputCloudwatchCompression$outboundSchema;
}

/** @internal */
export const OutputCloudwatchQueueFullBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputCloudwatchQueueFullBehavior
> = z.nativeEnum(OutputCloudwatchQueueFullBehavior);

/** @internal */
export const OutputCloudwatchQueueFullBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputCloudwatchQueueFullBehavior
> = OutputCloudwatchQueueFullBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputCloudwatchQueueFullBehavior$ {
  /** @deprecated use `OutputCloudwatchQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputCloudwatchQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputCloudwatchQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputCloudwatchQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputCloudwatchMode$inboundSchema: z.ZodNativeEnum<
  typeof OutputCloudwatchMode
> = z.nativeEnum(OutputCloudwatchMode);

/** @internal */
export const OutputCloudwatchMode$outboundSchema: z.ZodNativeEnum<
  typeof OutputCloudwatchMode
> = OutputCloudwatchMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputCloudwatchMode$ {
  /** @deprecated use `OutputCloudwatchMode$inboundSchema` instead. */
  export const inboundSchema = OutputCloudwatchMode$inboundSchema;
  /** @deprecated use `OutputCloudwatchMode$outboundSchema` instead. */
  export const outboundSchema = OutputCloudwatchMode$outboundSchema;
}

/** @internal */
export const OutputCloudwatchPqControls$inboundSchema: z.ZodType<
  OutputCloudwatchPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputCloudwatchPqControls$Outbound = {};

/** @internal */
export const OutputCloudwatchPqControls$outboundSchema: z.ZodType<
  OutputCloudwatchPqControls$Outbound,
  z.ZodTypeDef,
  OutputCloudwatchPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputCloudwatchPqControls$ {
  /** @deprecated use `OutputCloudwatchPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputCloudwatchPqControls$inboundSchema;
  /** @deprecated use `OutputCloudwatchPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputCloudwatchPqControls$outboundSchema;
  /** @deprecated use `OutputCloudwatchPqControls$Outbound` instead. */
  export type Outbound = OutputCloudwatchPqControls$Outbound;
}

export function outputCloudwatchPqControlsToJSON(
  outputCloudwatchPqControls: OutputCloudwatchPqControls,
): string {
  return JSON.stringify(
    OutputCloudwatchPqControls$outboundSchema.parse(outputCloudwatchPqControls),
  );
}

export function outputCloudwatchPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputCloudwatchPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputCloudwatchPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputCloudwatchPqControls' from JSON`,
  );
}

/** @internal */
export const OutputCloudwatch$inboundSchema: z.ZodType<
  OutputCloudwatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputCloudwatchType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  logGroupName: z.string(),
  logStreamName: z.string(),
  awsAuthenticationMethod: OutputCloudwatchAuthenticationMethod$inboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string(),
  endpoint: z.string().optional(),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  maxQueueSize: z.number().default(5),
  maxRecordSizeKB: z.number().default(1024),
  flushPeriodSec: z.number().default(1),
  onBackpressure: OutputCloudwatchBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputCloudwatchCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputCloudwatchQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputCloudwatchMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputCloudwatchPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputCloudwatch$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  logGroupName: string;
  logStreamName: string;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region: string;
  endpoint?: string | undefined;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  maxQueueSize: number;
  maxRecordSizeKB: number;
  flushPeriodSec: number;
  onBackpressure: string;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputCloudwatchPqControls$Outbound | undefined;
};

/** @internal */
export const OutputCloudwatch$outboundSchema: z.ZodType<
  OutputCloudwatch$Outbound,
  z.ZodTypeDef,
  OutputCloudwatch
> = z.object({
  id: z.string().optional(),
  type: OutputCloudwatchType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  logGroupName: z.string(),
  logStreamName: z.string(),
  awsAuthenticationMethod: OutputCloudwatchAuthenticationMethod$outboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string(),
  endpoint: z.string().optional(),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  maxQueueSize: z.number().default(5),
  maxRecordSizeKB: z.number().default(1024),
  flushPeriodSec: z.number().default(1),
  onBackpressure: OutputCloudwatchBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputCloudwatchCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputCloudwatchQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputCloudwatchMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputCloudwatchPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputCloudwatch$ {
  /** @deprecated use `OutputCloudwatch$inboundSchema` instead. */
  export const inboundSchema = OutputCloudwatch$inboundSchema;
  /** @deprecated use `OutputCloudwatch$outboundSchema` instead. */
  export const outboundSchema = OutputCloudwatch$outboundSchema;
  /** @deprecated use `OutputCloudwatch$Outbound` instead. */
  export type Outbound = OutputCloudwatch$Outbound;
}

export function outputCloudwatchToJSON(
  outputCloudwatch: OutputCloudwatch,
): string {
  return JSON.stringify(
    OutputCloudwatch$outboundSchema.parse(outputCloudwatch),
  );
}

export function outputCloudwatchFromJSON(
  jsonString: string,
): SafeParseResult<OutputCloudwatch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputCloudwatch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputCloudwatch' from JSON`,
  );
}
