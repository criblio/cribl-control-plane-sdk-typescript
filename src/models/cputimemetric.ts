/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CPUTimeMetric = {
  billableCPUSeconds?: number | undefined;
  executorsCPUSeconds: { [k: string]: number };
  totalCPUSeconds: number;
  totalExecCPUSeconds: number;
};

/** @internal */
export const CPUTimeMetric$inboundSchema: z.ZodType<
  CPUTimeMetric,
  z.ZodTypeDef,
  unknown
> = z.object({
  billableCPUSeconds: z.number().optional(),
  executorsCPUSeconds: z.record(z.number()),
  totalCPUSeconds: z.number(),
  totalExecCPUSeconds: z.number(),
});

/** @internal */
export type CPUTimeMetric$Outbound = {
  billableCPUSeconds?: number | undefined;
  executorsCPUSeconds: { [k: string]: number };
  totalCPUSeconds: number;
  totalExecCPUSeconds: number;
};

/** @internal */
export const CPUTimeMetric$outboundSchema: z.ZodType<
  CPUTimeMetric$Outbound,
  z.ZodTypeDef,
  CPUTimeMetric
> = z.object({
  billableCPUSeconds: z.number().optional(),
  executorsCPUSeconds: z.record(z.number()),
  totalCPUSeconds: z.number(),
  totalExecCPUSeconds: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CPUTimeMetric$ {
  /** @deprecated use `CPUTimeMetric$inboundSchema` instead. */
  export const inboundSchema = CPUTimeMetric$inboundSchema;
  /** @deprecated use `CPUTimeMetric$outboundSchema` instead. */
  export const outboundSchema = CPUTimeMetric$outboundSchema;
  /** @deprecated use `CPUTimeMetric$Outbound` instead. */
  export type Outbound = CPUTimeMetric$Outbound;
}

export function cpuTimeMetricToJSON(cpuTimeMetric: CPUTimeMetric): string {
  return JSON.stringify(CPUTimeMetric$outboundSchema.parse(cpuTimeMetric));
}

export function cpuTimeMetricFromJSON(
  jsonString: string,
): SafeParseResult<CPUTimeMetric, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CPUTimeMetric$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CPUTimeMetric' from JSON`,
  );
}
