/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DeployRequestLookups,
  DeployRequestLookups$inboundSchema,
  DeployRequestLookups$Outbound,
  DeployRequestLookups$outboundSchema,
} from "./deployrequestlookups.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DeployRequest = {
  lookups?: Array<DeployRequestLookups> | undefined;
  version: string;
};

/** @internal */
export const DeployRequest$inboundSchema: z.ZodType<
  DeployRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lookups: z.array(DeployRequestLookups$inboundSchema).optional(),
  version: z.string(),
});

/** @internal */
export type DeployRequest$Outbound = {
  lookups?: Array<DeployRequestLookups$Outbound> | undefined;
  version: string;
};

/** @internal */
export const DeployRequest$outboundSchema: z.ZodType<
  DeployRequest$Outbound,
  z.ZodTypeDef,
  DeployRequest
> = z.object({
  lookups: z.array(DeployRequestLookups$outboundSchema).optional(),
  version: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployRequest$ {
  /** @deprecated use `DeployRequest$inboundSchema` instead. */
  export const inboundSchema = DeployRequest$inboundSchema;
  /** @deprecated use `DeployRequest$outboundSchema` instead. */
  export const outboundSchema = DeployRequest$outboundSchema;
  /** @deprecated use `DeployRequest$Outbound` instead. */
  export type Outbound = DeployRequest$Outbound;
}

export function deployRequestToJSON(deployRequest: DeployRequest): string {
  return JSON.stringify(DeployRequest$outboundSchema.parse(deployRequest));
}

export function deployRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeployRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployRequest' from JSON`,
  );
}
