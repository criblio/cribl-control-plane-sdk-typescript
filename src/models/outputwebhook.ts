/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputWebhookType = {
  Webhook: "webhook",
} as const;
export type OutputWebhookType = ClosedEnum<typeof OutputWebhookType>;

/**
 * The method to use when sending events
 */
export const OutputWebhookMethod = {
  Post: "POST",
  Put: "PUT",
  Patch: "PATCH",
} as const;
/**
 * The method to use when sending events
 */
export type OutputWebhookMethod = OpenEnum<typeof OutputWebhookMethod>;

/**
 * How to format events before sending out
 */
export const OutputWebhookFormat = {
  Ndjson: "ndjson",
  JsonArray: "json_array",
  Custom: "custom",
  Advanced: "advanced",
} as const;
/**
 * How to format events before sending out
 */
export type OutputWebhookFormat = OpenEnum<typeof OutputWebhookFormat>;

export type OutputWebhookExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputWebhookFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputWebhookFailedRequestLoggingMode = OpenEnum<
  typeof OutputWebhookFailedRequestLoggingMode
>;

export type OutputWebhookResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputWebhookTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputWebhookBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputWebhookBackpressureBehavior = OpenEnum<
  typeof OutputWebhookBackpressureBehavior
>;

/**
 * Authentication method to use for the HTTP request
 */
export const OutputWebhookAuthenticationType = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
/**
 * Authentication method to use for the HTTP request
 */
export type OutputWebhookAuthenticationType = OpenEnum<
  typeof OutputWebhookAuthenticationType
>;

export const OutputWebhookMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputWebhookMinimumTLSVersion = OpenEnum<
  typeof OutputWebhookMinimumTLSVersion
>;

export const OutputWebhookMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputWebhookMaximumTLSVersion = OpenEnum<
  typeof OutputWebhookMaximumTLSVersion
>;

export type OutputWebhookTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: OutputWebhookMinimumTLSVersion | undefined;
  maxVersion?: OutputWebhookMaximumTLSVersion | undefined;
};

/**
 * Codec to use to compress the persisted data
 */
export const OutputWebhookCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputWebhookCompression = OpenEnum<
  typeof OutputWebhookCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputWebhookQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputWebhookQueueFullBehavior = OpenEnum<
  typeof OutputWebhookQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputWebhookMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputWebhookMode = OpenEnum<typeof OutputWebhookMode>;

export type OutputWebhookPqControls = {};

export type OutputWebhookOauthParam = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type OutputWebhookOauthHeader = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type OutputWebhookUrl = {
  /**
   * URL of a webhook endpoint to send events to, such as http://localhost:10200
   */
  url: string;
  /**
   * Assign a weight (>0) to each endpoint to indicate its traffic-handling capability
   */
  weight?: number | undefined;
};

export type OutputWebhook = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputWebhookType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The method to use when sending events
   */
  method?: OutputWebhookMethod | undefined;
  /**
   * How to format events before sending out
   */
  format?: OutputWebhookFormat | undefined;
  /**
   * Disable to close the connection immediately after sending the outgoing request
   */
  keepAlive?: boolean | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events. You can also add headers dynamically on a per-event basis in the __headers field, as explained in [Cribl Docs](https://docs.cribl.io/stream/destinations-webhook/#internal-fields).
   */
  extraHttpHeaders?: Array<OutputWebhookExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?: OutputWebhookFailedRequestLoggingMode | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?: Array<OutputWebhookResponseRetrySetting> | undefined;
  timeoutRetrySettings?: OutputWebhookTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputWebhookBackpressureBehavior | undefined;
  /**
   * Authentication method to use for the HTTP request
   */
  authType?: OutputWebhookAuthenticationType | undefined;
  tls?: OutputWebhookTLSSettingsClientSide | undefined;
  /**
   * Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced.
   */
  totalMemoryLimitKB?: number | undefined;
  /**
   * Enable for optimal performance. Even if you have one hostname, it can expand to multiple IPs. If disabled, consider enabling round-robin DNS.
   */
  loadBalanced?: boolean | undefined;
  description?: string | undefined;
  /**
   * Expression to evaluate on events to generate output. Example: `raw=${_raw}`. See [Cribl Docs](https://docs.cribl.io/stream/destinations-webhook#custom-format) for other examples. If empty, the full event is sent as stringified JSON.
   */
  customSourceExpression?: string | undefined;
  /**
   * Whether to drop events when the source expression evaluates to null
   */
  customDropWhenNull?: boolean | undefined;
  /**
   * Delimiter string to insert between individual events. Defaults to newline character.
   */
  customEventDelimiter?: string | undefined;
  /**
   * Content type to use for request. Defaults to application/x-ndjson. Any content types set in Advanced Settings > Extra HTTP headers will override this entry.
   */
  customContentType?: string | undefined;
  /**
   * Expression specifying how to format the payload for each batch. To reference the events to send, use the `${events}` variable. Example expression: `{ "items" : [${events}] }` would send the batch inside a JSON object.
   */
  customPayloadExpression?: string | undefined;
  /**
   * HTTP content-type header value
   */
  advancedContentType?: string | undefined;
  /**
   * Custom JavaScript code to format incoming event data accessible through the __e variable. The formatted content is added to (__e['__eventOut']) if available. Otherwise, the original event is serialized as JSON. Caution: This function is evaluated in an unprotected context, allowing you to execute almost any JavaScript code.
   */
  formatEventCode?: string | undefined;
  /**
   * Optional JavaScript code to format the payload sent to the Destination. The payload, containing a batch of formatted events, is accessible through the __e['payload'] variable. The formatted payload is returned in the __e['__payloadOut'] variable. Caution: This function is evaluated in an unprotected context, allowing you to execute almost any JavaScript code.
   */
  formatPayloadCode?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputWebhookCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputWebhookQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputWebhookMode | undefined;
  pqControls?: OutputWebhookPqControls | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<OutputWebhookOauthParam> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<OutputWebhookOauthHeader> | undefined;
  /**
   * URL of a webhook endpoint to send events to, such as http://localhost:10200
   */
  url?: string | undefined;
  /**
   * Exclude all IPs of the current host from the list of any resolved hostnames
   */
  excludeSelf?: boolean | undefined;
  urls?: Array<OutputWebhookUrl> | undefined;
  /**
   * The interval in which to re-resolve any hostnames and pick up destinations from A records
   */
  dnsResolvePeriodSec?: number | undefined;
  /**
   * How far back in time to keep traffic stats for load balancing purposes
   */
  loadBalanceStatsPeriodSec?: number | undefined;
};

/** @internal */
export const OutputWebhookType$inboundSchema: z.ZodNativeEnum<
  typeof OutputWebhookType
> = z.nativeEnum(OutputWebhookType);

/** @internal */
export const OutputWebhookType$outboundSchema: z.ZodNativeEnum<
  typeof OutputWebhookType
> = OutputWebhookType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookType$ {
  /** @deprecated use `OutputWebhookType$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookType$inboundSchema;
  /** @deprecated use `OutputWebhookType$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookType$outboundSchema;
}

/** @internal */
export const OutputWebhookMethod$inboundSchema: z.ZodType<
  OutputWebhookMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookMethod$outboundSchema: z.ZodType<
  OutputWebhookMethod,
  z.ZodTypeDef,
  OutputWebhookMethod
> = z.union([
  z.nativeEnum(OutputWebhookMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookMethod$ {
  /** @deprecated use `OutputWebhookMethod$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookMethod$inboundSchema;
  /** @deprecated use `OutputWebhookMethod$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookMethod$outboundSchema;
}

/** @internal */
export const OutputWebhookFormat$inboundSchema: z.ZodType<
  OutputWebhookFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookFormat$outboundSchema: z.ZodType<
  OutputWebhookFormat,
  z.ZodTypeDef,
  OutputWebhookFormat
> = z.union([
  z.nativeEnum(OutputWebhookFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookFormat$ {
  /** @deprecated use `OutputWebhookFormat$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookFormat$inboundSchema;
  /** @deprecated use `OutputWebhookFormat$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookFormat$outboundSchema;
}

/** @internal */
export const OutputWebhookExtraHttpHeader$inboundSchema: z.ZodType<
  OutputWebhookExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputWebhookExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputWebhookExtraHttpHeader$outboundSchema: z.ZodType<
  OutputWebhookExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputWebhookExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookExtraHttpHeader$ {
  /** @deprecated use `OutputWebhookExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputWebhookExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputWebhookExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputWebhookExtraHttpHeader$Outbound;
}

export function outputWebhookExtraHttpHeaderToJSON(
  outputWebhookExtraHttpHeader: OutputWebhookExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputWebhookExtraHttpHeader$outboundSchema.parse(
      outputWebhookExtraHttpHeader,
    ),
  );
}

export function outputWebhookExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebhookExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWebhookExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebhookExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputWebhookFailedRequestLoggingMode$inboundSchema: z.ZodType<
  OutputWebhookFailedRequestLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookFailedRequestLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookFailedRequestLoggingMode$outboundSchema: z.ZodType<
  OutputWebhookFailedRequestLoggingMode,
  z.ZodTypeDef,
  OutputWebhookFailedRequestLoggingMode
> = z.union([
  z.nativeEnum(OutputWebhookFailedRequestLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookFailedRequestLoggingMode$ {
  /** @deprecated use `OutputWebhookFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputWebhookFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputWebhookFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputWebhookFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputWebhookResponseRetrySetting$inboundSchema: z.ZodType<
  OutputWebhookResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputWebhookResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputWebhookResponseRetrySetting$outboundSchema: z.ZodType<
  OutputWebhookResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputWebhookResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookResponseRetrySetting$ {
  /** @deprecated use `OutputWebhookResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputWebhookResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputWebhookResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputWebhookResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputWebhookResponseRetrySetting$Outbound;
}

export function outputWebhookResponseRetrySettingToJSON(
  outputWebhookResponseRetrySetting: OutputWebhookResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputWebhookResponseRetrySetting$outboundSchema.parse(
      outputWebhookResponseRetrySetting,
    ),
  );
}

export function outputWebhookResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebhookResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWebhookResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebhookResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputWebhookTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputWebhookTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputWebhookTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputWebhookTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputWebhookTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputWebhookTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookTimeoutRetrySettings$ {
  /** @deprecated use `OutputWebhookTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputWebhookTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputWebhookTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputWebhookTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputWebhookTimeoutRetrySettings$Outbound;
}

export function outputWebhookTimeoutRetrySettingsToJSON(
  outputWebhookTimeoutRetrySettings: OutputWebhookTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputWebhookTimeoutRetrySettings$outboundSchema.parse(
      outputWebhookTimeoutRetrySettings,
    ),
  );
}

export function outputWebhookTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebhookTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWebhookTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebhookTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputWebhookBackpressureBehavior$inboundSchema: z.ZodType<
  OutputWebhookBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookBackpressureBehavior$outboundSchema: z.ZodType<
  OutputWebhookBackpressureBehavior,
  z.ZodTypeDef,
  OutputWebhookBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputWebhookBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookBackpressureBehavior$ {
  /** @deprecated use `OutputWebhookBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputWebhookBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputWebhookBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputWebhookAuthenticationType$inboundSchema: z.ZodType<
  OutputWebhookAuthenticationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookAuthenticationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookAuthenticationType$outboundSchema: z.ZodType<
  OutputWebhookAuthenticationType,
  z.ZodTypeDef,
  OutputWebhookAuthenticationType
> = z.union([
  z.nativeEnum(OutputWebhookAuthenticationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookAuthenticationType$ {
  /** @deprecated use `OutputWebhookAuthenticationType$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookAuthenticationType$inboundSchema;
  /** @deprecated use `OutputWebhookAuthenticationType$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookAuthenticationType$outboundSchema;
}

/** @internal */
export const OutputWebhookMinimumTLSVersion$inboundSchema: z.ZodType<
  OutputWebhookMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookMinimumTLSVersion$outboundSchema: z.ZodType<
  OutputWebhookMinimumTLSVersion,
  z.ZodTypeDef,
  OutputWebhookMinimumTLSVersion
> = z.union([
  z.nativeEnum(OutputWebhookMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookMinimumTLSVersion$ {
  /** @deprecated use `OutputWebhookMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookMinimumTLSVersion$inboundSchema;
  /** @deprecated use `OutputWebhookMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputWebhookMaximumTLSVersion$inboundSchema: z.ZodType<
  OutputWebhookMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookMaximumTLSVersion$outboundSchema: z.ZodType<
  OutputWebhookMaximumTLSVersion,
  z.ZodTypeDef,
  OutputWebhookMaximumTLSVersion
> = z.union([
  z.nativeEnum(OutputWebhookMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookMaximumTLSVersion$ {
  /** @deprecated use `OutputWebhookMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookMaximumTLSVersion$inboundSchema;
  /** @deprecated use `OutputWebhookMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputWebhookTLSSettingsClientSide$inboundSchema: z.ZodType<
  OutputWebhookTLSSettingsClientSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputWebhookMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: OutputWebhookMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type OutputWebhookTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const OutputWebhookTLSSettingsClientSide$outboundSchema: z.ZodType<
  OutputWebhookTLSSettingsClientSide$Outbound,
  z.ZodTypeDef,
  OutputWebhookTLSSettingsClientSide
> = z.object({
  disabled: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputWebhookMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: OutputWebhookMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookTLSSettingsClientSide$ {
  /** @deprecated use `OutputWebhookTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `OutputWebhookTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema =
    OutputWebhookTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `OutputWebhookTLSSettingsClientSide$Outbound` instead. */
  export type Outbound = OutputWebhookTLSSettingsClientSide$Outbound;
}

export function outputWebhookTLSSettingsClientSideToJSON(
  outputWebhookTLSSettingsClientSide: OutputWebhookTLSSettingsClientSide,
): string {
  return JSON.stringify(
    OutputWebhookTLSSettingsClientSide$outboundSchema.parse(
      outputWebhookTLSSettingsClientSide,
    ),
  );
}

export function outputWebhookTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebhookTLSSettingsClientSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputWebhookTLSSettingsClientSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebhookTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const OutputWebhookCompression$inboundSchema: z.ZodType<
  OutputWebhookCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookCompression$outboundSchema: z.ZodType<
  OutputWebhookCompression,
  z.ZodTypeDef,
  OutputWebhookCompression
> = z.union([
  z.nativeEnum(OutputWebhookCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookCompression$ {
  /** @deprecated use `OutputWebhookCompression$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookCompression$inboundSchema;
  /** @deprecated use `OutputWebhookCompression$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookCompression$outboundSchema;
}

/** @internal */
export const OutputWebhookQueueFullBehavior$inboundSchema: z.ZodType<
  OutputWebhookQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookQueueFullBehavior$outboundSchema: z.ZodType<
  OutputWebhookQueueFullBehavior,
  z.ZodTypeDef,
  OutputWebhookQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputWebhookQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookQueueFullBehavior$ {
  /** @deprecated use `OutputWebhookQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputWebhookQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputWebhookMode$inboundSchema: z.ZodType<
  OutputWebhookMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputWebhookMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputWebhookMode$outboundSchema: z.ZodType<
  OutputWebhookMode,
  z.ZodTypeDef,
  OutputWebhookMode
> = z.union([
  z.nativeEnum(OutputWebhookMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookMode$ {
  /** @deprecated use `OutputWebhookMode$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookMode$inboundSchema;
  /** @deprecated use `OutputWebhookMode$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookMode$outboundSchema;
}

/** @internal */
export const OutputWebhookPqControls$inboundSchema: z.ZodType<
  OutputWebhookPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputWebhookPqControls$Outbound = {};

/** @internal */
export const OutputWebhookPqControls$outboundSchema: z.ZodType<
  OutputWebhookPqControls$Outbound,
  z.ZodTypeDef,
  OutputWebhookPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookPqControls$ {
  /** @deprecated use `OutputWebhookPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookPqControls$inboundSchema;
  /** @deprecated use `OutputWebhookPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookPqControls$outboundSchema;
  /** @deprecated use `OutputWebhookPqControls$Outbound` instead. */
  export type Outbound = OutputWebhookPqControls$Outbound;
}

export function outputWebhookPqControlsToJSON(
  outputWebhookPqControls: OutputWebhookPqControls,
): string {
  return JSON.stringify(
    OutputWebhookPqControls$outboundSchema.parse(outputWebhookPqControls),
  );
}

export function outputWebhookPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebhookPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWebhookPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebhookPqControls' from JSON`,
  );
}

/** @internal */
export const OutputWebhookOauthParam$inboundSchema: z.ZodType<
  OutputWebhookOauthParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type OutputWebhookOauthParam$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputWebhookOauthParam$outboundSchema: z.ZodType<
  OutputWebhookOauthParam$Outbound,
  z.ZodTypeDef,
  OutputWebhookOauthParam
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookOauthParam$ {
  /** @deprecated use `OutputWebhookOauthParam$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookOauthParam$inboundSchema;
  /** @deprecated use `OutputWebhookOauthParam$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookOauthParam$outboundSchema;
  /** @deprecated use `OutputWebhookOauthParam$Outbound` instead. */
  export type Outbound = OutputWebhookOauthParam$Outbound;
}

export function outputWebhookOauthParamToJSON(
  outputWebhookOauthParam: OutputWebhookOauthParam,
): string {
  return JSON.stringify(
    OutputWebhookOauthParam$outboundSchema.parse(outputWebhookOauthParam),
  );
}

export function outputWebhookOauthParamFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebhookOauthParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWebhookOauthParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebhookOauthParam' from JSON`,
  );
}

/** @internal */
export const OutputWebhookOauthHeader$inboundSchema: z.ZodType<
  OutputWebhookOauthHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type OutputWebhookOauthHeader$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputWebhookOauthHeader$outboundSchema: z.ZodType<
  OutputWebhookOauthHeader$Outbound,
  z.ZodTypeDef,
  OutputWebhookOauthHeader
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookOauthHeader$ {
  /** @deprecated use `OutputWebhookOauthHeader$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookOauthHeader$inboundSchema;
  /** @deprecated use `OutputWebhookOauthHeader$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookOauthHeader$outboundSchema;
  /** @deprecated use `OutputWebhookOauthHeader$Outbound` instead. */
  export type Outbound = OutputWebhookOauthHeader$Outbound;
}

export function outputWebhookOauthHeaderToJSON(
  outputWebhookOauthHeader: OutputWebhookOauthHeader,
): string {
  return JSON.stringify(
    OutputWebhookOauthHeader$outboundSchema.parse(outputWebhookOauthHeader),
  );
}

export function outputWebhookOauthHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebhookOauthHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWebhookOauthHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebhookOauthHeader' from JSON`,
  );
}

/** @internal */
export const OutputWebhookUrl$inboundSchema: z.ZodType<
  OutputWebhookUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  weight: z.number().default(1),
});

/** @internal */
export type OutputWebhookUrl$Outbound = {
  url: string;
  weight: number;
};

/** @internal */
export const OutputWebhookUrl$outboundSchema: z.ZodType<
  OutputWebhookUrl$Outbound,
  z.ZodTypeDef,
  OutputWebhookUrl
> = z.object({
  url: z.string(),
  weight: z.number().default(1),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhookUrl$ {
  /** @deprecated use `OutputWebhookUrl$inboundSchema` instead. */
  export const inboundSchema = OutputWebhookUrl$inboundSchema;
  /** @deprecated use `OutputWebhookUrl$outboundSchema` instead. */
  export const outboundSchema = OutputWebhookUrl$outboundSchema;
  /** @deprecated use `OutputWebhookUrl$Outbound` instead. */
  export type Outbound = OutputWebhookUrl$Outbound;
}

export function outputWebhookUrlToJSON(
  outputWebhookUrl: OutputWebhookUrl,
): string {
  return JSON.stringify(
    OutputWebhookUrl$outboundSchema.parse(outputWebhookUrl),
  );
}

export function outputWebhookUrlFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebhookUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWebhookUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebhookUrl' from JSON`,
  );
}

/** @internal */
export const OutputWebhook$inboundSchema: z.ZodType<
  OutputWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputWebhookType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  method: OutputWebhookMethod$inboundSchema.default("POST"),
  format: OutputWebhookFormat$inboundSchema.default("ndjson"),
  keepAlive: z.boolean().default(true),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputWebhookExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode: OutputWebhookFailedRequestLoggingMode$inboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputWebhookResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputWebhookTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputWebhookBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  authType: OutputWebhookAuthenticationType$inboundSchema.default("none"),
  tls: z.lazy(() => OutputWebhookTLSSettingsClientSide$inboundSchema)
    .optional(),
  totalMemoryLimitKB: z.number().optional(),
  loadBalanced: z.boolean().default(false),
  description: z.string().optional(),
  customSourceExpression: z.string().default("__httpOut"),
  customDropWhenNull: z.boolean().default(false),
  customEventDelimiter: z.string().default("\\n"),
  customContentType: z.string().default("application/x-ndjson"),
  customPayloadExpression: z.string().default("`${events}`"),
  advancedContentType: z.string().default("application/json"),
  formatEventCode: z.string().optional(),
  formatPayloadCode: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputWebhookCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputWebhookQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputWebhookMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputWebhookPqControls$inboundSchema).optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => OutputWebhookOauthParam$inboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => OutputWebhookOauthHeader$inboundSchema))
    .optional(),
  url: z.string().optional(),
  excludeSelf: z.boolean().default(false),
  urls: z.array(z.lazy(() => OutputWebhookUrl$inboundSchema)).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
});

/** @internal */
export type OutputWebhook$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  method: string;
  format: string;
  keepAlive: boolean;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputWebhookExtraHttpHeader$Outbound> | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputWebhookResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?: OutputWebhookTimeoutRetrySettings$Outbound | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  authType: string;
  tls?: OutputWebhookTLSSettingsClientSide$Outbound | undefined;
  totalMemoryLimitKB?: number | undefined;
  loadBalanced: boolean;
  description?: string | undefined;
  customSourceExpression: string;
  customDropWhenNull: boolean;
  customEventDelimiter: string;
  customContentType: string;
  customPayloadExpression: string;
  advancedContentType: string;
  formatEventCode?: string | undefined;
  formatPayloadCode?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputWebhookPqControls$Outbound | undefined;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<OutputWebhookOauthParam$Outbound> | undefined;
  oauthHeaders?: Array<OutputWebhookOauthHeader$Outbound> | undefined;
  url?: string | undefined;
  excludeSelf: boolean;
  urls?: Array<OutputWebhookUrl$Outbound> | undefined;
  dnsResolvePeriodSec: number;
  loadBalanceStatsPeriodSec: number;
};

/** @internal */
export const OutputWebhook$outboundSchema: z.ZodType<
  OutputWebhook$Outbound,
  z.ZodTypeDef,
  OutputWebhook
> = z.object({
  id: z.string().optional(),
  type: OutputWebhookType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  method: OutputWebhookMethod$outboundSchema.default("POST"),
  format: OutputWebhookFormat$outboundSchema.default("ndjson"),
  keepAlive: z.boolean().default(true),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputWebhookExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode: OutputWebhookFailedRequestLoggingMode$outboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputWebhookResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputWebhookTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputWebhookBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  authType: OutputWebhookAuthenticationType$outboundSchema.default("none"),
  tls: z.lazy(() => OutputWebhookTLSSettingsClientSide$outboundSchema)
    .optional(),
  totalMemoryLimitKB: z.number().optional(),
  loadBalanced: z.boolean().default(false),
  description: z.string().optional(),
  customSourceExpression: z.string().default("__httpOut"),
  customDropWhenNull: z.boolean().default(false),
  customEventDelimiter: z.string().default("\\n"),
  customContentType: z.string().default("application/x-ndjson"),
  customPayloadExpression: z.string().default("`${events}`"),
  advancedContentType: z.string().default("application/json"),
  formatEventCode: z.string().optional(),
  formatPayloadCode: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputWebhookCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputWebhookQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputWebhookMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputWebhookPqControls$outboundSchema).optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => OutputWebhookOauthParam$outboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => OutputWebhookOauthHeader$outboundSchema))
    .optional(),
  url: z.string().optional(),
  excludeSelf: z.boolean().default(false),
  urls: z.array(z.lazy(() => OutputWebhookUrl$outboundSchema)).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebhook$ {
  /** @deprecated use `OutputWebhook$inboundSchema` instead. */
  export const inboundSchema = OutputWebhook$inboundSchema;
  /** @deprecated use `OutputWebhook$outboundSchema` instead. */
  export const outboundSchema = OutputWebhook$outboundSchema;
  /** @deprecated use `OutputWebhook$Outbound` instead. */
  export type Outbound = OutputWebhook$Outbound;
}

export function outputWebhookToJSON(outputWebhook: OutputWebhook): string {
  return JSON.stringify(OutputWebhook$outboundSchema.parse(outputWebhook));
}

export function outputWebhookFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebhook' from JSON`,
  );
}
