/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputGoogleChronicleType = {
  GoogleChronicle: "google_chronicle",
} as const;
export type OutputGoogleChronicleType = ClosedEnum<
  typeof OutputGoogleChronicleType
>;

export const OutputGoogleChronicleAPIVersion = {
  V1: "v1",
  V2: "v2",
} as const;
export type OutputGoogleChronicleAPIVersion = OpenEnum<
  typeof OutputGoogleChronicleAPIVersion
>;

export const OutputGoogleChronicleAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
  ServiceAccount: "serviceAccount",
  ServiceAccountSecret: "serviceAccountSecret",
} as const;
export type OutputGoogleChronicleAuthenticationMethod = OpenEnum<
  typeof OutputGoogleChronicleAuthenticationMethod
>;

export type OutputGoogleChronicleResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputGoogleChronicleTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export const SendEventsAs = {
  Unstructured: "unstructured",
  Udm: "udm",
} as const;
export type SendEventsAs = OpenEnum<typeof SendEventsAs>;

export type OutputGoogleChronicleExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputGoogleChronicleFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputGoogleChronicleFailedRequestLoggingMode = OpenEnum<
  typeof OutputGoogleChronicleFailedRequestLoggingMode
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputGoogleChronicleBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputGoogleChronicleBackpressureBehavior = OpenEnum<
  typeof OutputGoogleChronicleBackpressureBehavior
>;

export type ExtraLogType = {
  logType: string;
  description?: string | undefined;
};

export type OutputGoogleChronicleCustomLabel = {
  key: string;
  value: string;
};

/**
 * Codec to use to compress the persisted data
 */
export const OutputGoogleChronicleCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputGoogleChronicleCompression = OpenEnum<
  typeof OutputGoogleChronicleCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputGoogleChronicleQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputGoogleChronicleQueueFullBehavior = OpenEnum<
  typeof OutputGoogleChronicleQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputGoogleChronicleMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputGoogleChronicleMode = OpenEnum<
  typeof OutputGoogleChronicleMode
>;

export type OutputGoogleChroniclePqControls = {};

export type OutputGoogleChronicle = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputGoogleChronicleType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  apiVersion?: OutputGoogleChronicleAPIVersion | undefined;
  authenticationMethod?: OutputGoogleChronicleAuthenticationMethod | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputGoogleChronicleResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?: OutputGoogleChronicleTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  logFormatType?: SendEventsAs | undefined;
  /**
   * Regional endpoint to send events to
   */
  region?: string | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputGoogleChronicleExtraHttpHeader> | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputGoogleChronicleFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputGoogleChronicleBackpressureBehavior | undefined;
  /**
   * Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced.
   */
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  /**
   * Custom log types. If the value "Custom" is selected in the setting "Default log type" above, the first custom log type in this table will be automatically selected as default log type.
   */
  extraLogTypes?: Array<ExtraLogType> | undefined;
  /**
   * Default log type value to send to SecOps. Can be overwritten by event field __logType.
   */
  logType?: string | undefined;
  /**
   * Name of the event field that contains the log text to send. If not specified, Stream sends a JSON representation of the whole event.
   */
  logTextField?: string | undefined;
  /**
   * A unique identifier (UUID) for your Google SecOps instance. This is provided by your Google representative and is required for API V2 authentication.
   */
  customerId?: string | undefined;
  /**
   * User-configured environment namespace to identify the data domain the logs originated from. Use namespace as a tag to identify the appropriate data domain for indexing and enrichment functionality. Can be overwritten by event field __namespace.
   */
  namespace?: string | undefined;
  /**
   * Custom labels to be added to every batch
   */
  customLabels?: Array<OutputGoogleChronicleCustomLabel> | undefined;
  /**
   * Organization's API key in Google SecOps
   */
  apiKey?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  apiKeySecret?: string | undefined;
  /**
   * Contents of service account credentials (JSON keys) file downloaded from Google Cloud. To upload a file, click the upload button at this field's upper right.
   */
  serviceAccountCredentials?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  serviceAccountCredentialsSecret?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputGoogleChronicleCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputGoogleChronicleQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputGoogleChronicleMode | undefined;
  pqControls?: OutputGoogleChroniclePqControls | undefined;
};

/** @internal */
export const OutputGoogleChronicleType$inboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleChronicleType
> = z.nativeEnum(OutputGoogleChronicleType);

/** @internal */
export const OutputGoogleChronicleType$outboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleChronicleType
> = OutputGoogleChronicleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleType$ {
  /** @deprecated use `OutputGoogleChronicleType$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleChronicleType$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleType$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleChronicleType$outboundSchema;
}

/** @internal */
export const OutputGoogleChronicleAPIVersion$inboundSchema: z.ZodType<
  OutputGoogleChronicleAPIVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGoogleChronicleAPIVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGoogleChronicleAPIVersion$outboundSchema: z.ZodType<
  OutputGoogleChronicleAPIVersion,
  z.ZodTypeDef,
  OutputGoogleChronicleAPIVersion
> = z.union([
  z.nativeEnum(OutputGoogleChronicleAPIVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleAPIVersion$ {
  /** @deprecated use `OutputGoogleChronicleAPIVersion$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleChronicleAPIVersion$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleAPIVersion$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleChronicleAPIVersion$outboundSchema;
}

/** @internal */
export const OutputGoogleChronicleAuthenticationMethod$inboundSchema: z.ZodType<
  OutputGoogleChronicleAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGoogleChronicleAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGoogleChronicleAuthenticationMethod$outboundSchema:
  z.ZodType<
    OutputGoogleChronicleAuthenticationMethod,
    z.ZodTypeDef,
    OutputGoogleChronicleAuthenticationMethod
  > = z.union([
    z.nativeEnum(OutputGoogleChronicleAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleAuthenticationMethod$ {
  /** @deprecated use `OutputGoogleChronicleAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleChronicleAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleChronicleAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputGoogleChronicleResponseRetrySetting$inboundSchema: z.ZodType<
  OutputGoogleChronicleResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputGoogleChronicleResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputGoogleChronicleResponseRetrySetting$outboundSchema:
  z.ZodType<
    OutputGoogleChronicleResponseRetrySetting$Outbound,
    z.ZodTypeDef,
    OutputGoogleChronicleResponseRetrySetting
  > = z.object({
    httpStatus: z.number(),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleResponseRetrySetting$ {
  /** @deprecated use `OutputGoogleChronicleResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleChronicleResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleChronicleResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputGoogleChronicleResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputGoogleChronicleResponseRetrySetting$Outbound;
}

export function outputGoogleChronicleResponseRetrySettingToJSON(
  outputGoogleChronicleResponseRetrySetting:
    OutputGoogleChronicleResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputGoogleChronicleResponseRetrySetting$outboundSchema.parse(
      outputGoogleChronicleResponseRetrySetting,
    ),
  );
}

export function outputGoogleChronicleResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputGoogleChronicleResponseRetrySetting,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGoogleChronicleResponseRetrySetting$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputGoogleChronicleResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputGoogleChronicleTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputGoogleChronicleTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputGoogleChronicleTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputGoogleChronicleTimeoutRetrySettings$outboundSchema:
  z.ZodType<
    OutputGoogleChronicleTimeoutRetrySettings$Outbound,
    z.ZodTypeDef,
    OutputGoogleChronicleTimeoutRetrySettings
  > = z.object({
    timeoutRetry: z.boolean().default(false),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleTimeoutRetrySettings$ {
  /** @deprecated use `OutputGoogleChronicleTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleChronicleTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleChronicleTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputGoogleChronicleTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputGoogleChronicleTimeoutRetrySettings$Outbound;
}

export function outputGoogleChronicleTimeoutRetrySettingsToJSON(
  outputGoogleChronicleTimeoutRetrySettings:
    OutputGoogleChronicleTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputGoogleChronicleTimeoutRetrySettings$outboundSchema.parse(
      outputGoogleChronicleTimeoutRetrySettings,
    ),
  );
}

export function outputGoogleChronicleTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputGoogleChronicleTimeoutRetrySettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGoogleChronicleTimeoutRetrySettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputGoogleChronicleTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const SendEventsAs$inboundSchema: z.ZodType<
  SendEventsAs,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SendEventsAs),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SendEventsAs$outboundSchema: z.ZodType<
  SendEventsAs,
  z.ZodTypeDef,
  SendEventsAs
> = z.union([
  z.nativeEnum(SendEventsAs),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEventsAs$ {
  /** @deprecated use `SendEventsAs$inboundSchema` instead. */
  export const inboundSchema = SendEventsAs$inboundSchema;
  /** @deprecated use `SendEventsAs$outboundSchema` instead. */
  export const outboundSchema = SendEventsAs$outboundSchema;
}

/** @internal */
export const OutputGoogleChronicleExtraHttpHeader$inboundSchema: z.ZodType<
  OutputGoogleChronicleExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputGoogleChronicleExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputGoogleChronicleExtraHttpHeader$outboundSchema: z.ZodType<
  OutputGoogleChronicleExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputGoogleChronicleExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleExtraHttpHeader$ {
  /** @deprecated use `OutputGoogleChronicleExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleChronicleExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleChronicleExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputGoogleChronicleExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputGoogleChronicleExtraHttpHeader$Outbound;
}

export function outputGoogleChronicleExtraHttpHeaderToJSON(
  outputGoogleChronicleExtraHttpHeader: OutputGoogleChronicleExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputGoogleChronicleExtraHttpHeader$outboundSchema.parse(
      outputGoogleChronicleExtraHttpHeader,
    ),
  );
}

export function outputGoogleChronicleExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputGoogleChronicleExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGoogleChronicleExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGoogleChronicleExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputGoogleChronicleFailedRequestLoggingMode$inboundSchema:
  z.ZodType<
    OutputGoogleChronicleFailedRequestLoggingMode,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputGoogleChronicleFailedRequestLoggingMode),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputGoogleChronicleFailedRequestLoggingMode$outboundSchema:
  z.ZodType<
    OutputGoogleChronicleFailedRequestLoggingMode,
    z.ZodTypeDef,
    OutputGoogleChronicleFailedRequestLoggingMode
  > = z.union([
    z.nativeEnum(OutputGoogleChronicleFailedRequestLoggingMode),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleFailedRequestLoggingMode$ {
  /** @deprecated use `OutputGoogleChronicleFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleChronicleFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleChronicleFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputGoogleChronicleBackpressureBehavior$inboundSchema: z.ZodType<
  OutputGoogleChronicleBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGoogleChronicleBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGoogleChronicleBackpressureBehavior$outboundSchema:
  z.ZodType<
    OutputGoogleChronicleBackpressureBehavior,
    z.ZodTypeDef,
    OutputGoogleChronicleBackpressureBehavior
  > = z.union([
    z.nativeEnum(OutputGoogleChronicleBackpressureBehavior),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleBackpressureBehavior$ {
  /** @deprecated use `OutputGoogleChronicleBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleChronicleBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleChronicleBackpressureBehavior$outboundSchema;
}

/** @internal */
export const ExtraLogType$inboundSchema: z.ZodType<
  ExtraLogType,
  z.ZodTypeDef,
  unknown
> = z.object({
  logType: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type ExtraLogType$Outbound = {
  logType: string;
  description?: string | undefined;
};

/** @internal */
export const ExtraLogType$outboundSchema: z.ZodType<
  ExtraLogType$Outbound,
  z.ZodTypeDef,
  ExtraLogType
> = z.object({
  logType: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtraLogType$ {
  /** @deprecated use `ExtraLogType$inboundSchema` instead. */
  export const inboundSchema = ExtraLogType$inboundSchema;
  /** @deprecated use `ExtraLogType$outboundSchema` instead. */
  export const outboundSchema = ExtraLogType$outboundSchema;
  /** @deprecated use `ExtraLogType$Outbound` instead. */
  export type Outbound = ExtraLogType$Outbound;
}

export function extraLogTypeToJSON(extraLogType: ExtraLogType): string {
  return JSON.stringify(ExtraLogType$outboundSchema.parse(extraLogType));
}

export function extraLogTypeFromJSON(
  jsonString: string,
): SafeParseResult<ExtraLogType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtraLogType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtraLogType' from JSON`,
  );
}

/** @internal */
export const OutputGoogleChronicleCustomLabel$inboundSchema: z.ZodType<
  OutputGoogleChronicleCustomLabel,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.string(),
});

/** @internal */
export type OutputGoogleChronicleCustomLabel$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const OutputGoogleChronicleCustomLabel$outboundSchema: z.ZodType<
  OutputGoogleChronicleCustomLabel$Outbound,
  z.ZodTypeDef,
  OutputGoogleChronicleCustomLabel
> = z.object({
  key: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleCustomLabel$ {
  /** @deprecated use `OutputGoogleChronicleCustomLabel$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleChronicleCustomLabel$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleCustomLabel$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleChronicleCustomLabel$outboundSchema;
  /** @deprecated use `OutputGoogleChronicleCustomLabel$Outbound` instead. */
  export type Outbound = OutputGoogleChronicleCustomLabel$Outbound;
}

export function outputGoogleChronicleCustomLabelToJSON(
  outputGoogleChronicleCustomLabel: OutputGoogleChronicleCustomLabel,
): string {
  return JSON.stringify(
    OutputGoogleChronicleCustomLabel$outboundSchema.parse(
      outputGoogleChronicleCustomLabel,
    ),
  );
}

export function outputGoogleChronicleCustomLabelFromJSON(
  jsonString: string,
): SafeParseResult<OutputGoogleChronicleCustomLabel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGoogleChronicleCustomLabel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGoogleChronicleCustomLabel' from JSON`,
  );
}

/** @internal */
export const OutputGoogleChronicleCompression$inboundSchema: z.ZodType<
  OutputGoogleChronicleCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGoogleChronicleCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGoogleChronicleCompression$outboundSchema: z.ZodType<
  OutputGoogleChronicleCompression,
  z.ZodTypeDef,
  OutputGoogleChronicleCompression
> = z.union([
  z.nativeEnum(OutputGoogleChronicleCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleCompression$ {
  /** @deprecated use `OutputGoogleChronicleCompression$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleChronicleCompression$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleCompression$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleChronicleCompression$outboundSchema;
}

/** @internal */
export const OutputGoogleChronicleQueueFullBehavior$inboundSchema: z.ZodType<
  OutputGoogleChronicleQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGoogleChronicleQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGoogleChronicleQueueFullBehavior$outboundSchema: z.ZodType<
  OutputGoogleChronicleQueueFullBehavior,
  z.ZodTypeDef,
  OutputGoogleChronicleQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputGoogleChronicleQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleQueueFullBehavior$ {
  /** @deprecated use `OutputGoogleChronicleQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleChronicleQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleChronicleQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputGoogleChronicleMode$inboundSchema: z.ZodType<
  OutputGoogleChronicleMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGoogleChronicleMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGoogleChronicleMode$outboundSchema: z.ZodType<
  OutputGoogleChronicleMode,
  z.ZodTypeDef,
  OutputGoogleChronicleMode
> = z.union([
  z.nativeEnum(OutputGoogleChronicleMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicleMode$ {
  /** @deprecated use `OutputGoogleChronicleMode$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleChronicleMode$inboundSchema;
  /** @deprecated use `OutputGoogleChronicleMode$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleChronicleMode$outboundSchema;
}

/** @internal */
export const OutputGoogleChroniclePqControls$inboundSchema: z.ZodType<
  OutputGoogleChroniclePqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputGoogleChroniclePqControls$Outbound = {};

/** @internal */
export const OutputGoogleChroniclePqControls$outboundSchema: z.ZodType<
  OutputGoogleChroniclePqControls$Outbound,
  z.ZodTypeDef,
  OutputGoogleChroniclePqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChroniclePqControls$ {
  /** @deprecated use `OutputGoogleChroniclePqControls$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleChroniclePqControls$inboundSchema;
  /** @deprecated use `OutputGoogleChroniclePqControls$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleChroniclePqControls$outboundSchema;
  /** @deprecated use `OutputGoogleChroniclePqControls$Outbound` instead. */
  export type Outbound = OutputGoogleChroniclePqControls$Outbound;
}

export function outputGoogleChroniclePqControlsToJSON(
  outputGoogleChroniclePqControls: OutputGoogleChroniclePqControls,
): string {
  return JSON.stringify(
    OutputGoogleChroniclePqControls$outboundSchema.parse(
      outputGoogleChroniclePqControls,
    ),
  );
}

export function outputGoogleChroniclePqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputGoogleChroniclePqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGoogleChroniclePqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGoogleChroniclePqControls' from JSON`,
  );
}

/** @internal */
export const OutputGoogleChronicle$inboundSchema: z.ZodType<
  OutputGoogleChronicle,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputGoogleChronicleType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  apiVersion: OutputGoogleChronicleAPIVersion$inboundSchema.default("v1"),
  authenticationMethod: OutputGoogleChronicleAuthenticationMethod$inboundSchema
    .default("serviceAccount"),
  responseRetrySettings: z.array(
    z.lazy(() => OutputGoogleChronicleResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputGoogleChronicleTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  logFormatType: SendEventsAs$inboundSchema.default("unstructured"),
  region: z.string().optional(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(1024),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(90),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputGoogleChronicleExtraHttpHeader$inboundSchema),
  ).optional(),
  failedRequestLoggingMode:
    OutputGoogleChronicleFailedRequestLoggingMode$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  useRoundRobinDns: z.boolean().default(false),
  onBackpressure: OutputGoogleChronicleBackpressureBehavior$inboundSchema
    .default("block"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  extraLogTypes: z.array(z.lazy(() => ExtraLogType$inboundSchema)).optional(),
  logType: z.string().optional(),
  logTextField: z.string().optional(),
  customerId: z.string().optional(),
  namespace: z.string().optional(),
  customLabels: z.array(
    z.lazy(() => OutputGoogleChronicleCustomLabel$inboundSchema),
  ).optional(),
  apiKey: z.string().optional(),
  apiKeySecret: z.string().optional(),
  serviceAccountCredentials: z.string().optional(),
  serviceAccountCredentialsSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGoogleChronicleCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputGoogleChronicleQueueFullBehavior$inboundSchema
    .default("block"),
  pqMode: OutputGoogleChronicleMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGoogleChroniclePqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type OutputGoogleChronicle$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  apiVersion: string;
  authenticationMethod: string;
  responseRetrySettings?:
    | Array<OutputGoogleChronicleResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputGoogleChronicleTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  logFormatType: string;
  region?: string | undefined;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?:
    | Array<OutputGoogleChronicleExtraHttpHeader$Outbound>
    | undefined;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  useRoundRobinDns: boolean;
  onBackpressure: string;
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  extraLogTypes?: Array<ExtraLogType$Outbound> | undefined;
  logType?: string | undefined;
  logTextField?: string | undefined;
  customerId?: string | undefined;
  namespace?: string | undefined;
  customLabels?: Array<OutputGoogleChronicleCustomLabel$Outbound> | undefined;
  apiKey?: string | undefined;
  apiKeySecret?: string | undefined;
  serviceAccountCredentials?: string | undefined;
  serviceAccountCredentialsSecret?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputGoogleChroniclePqControls$Outbound | undefined;
};

/** @internal */
export const OutputGoogleChronicle$outboundSchema: z.ZodType<
  OutputGoogleChronicle$Outbound,
  z.ZodTypeDef,
  OutputGoogleChronicle
> = z.object({
  id: z.string().optional(),
  type: OutputGoogleChronicleType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  apiVersion: OutputGoogleChronicleAPIVersion$outboundSchema.default("v1"),
  authenticationMethod: OutputGoogleChronicleAuthenticationMethod$outboundSchema
    .default("serviceAccount"),
  responseRetrySettings: z.array(
    z.lazy(() => OutputGoogleChronicleResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputGoogleChronicleTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  logFormatType: SendEventsAs$outboundSchema.default("unstructured"),
  region: z.string().optional(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(1024),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(90),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputGoogleChronicleExtraHttpHeader$outboundSchema),
  ).optional(),
  failedRequestLoggingMode:
    OutputGoogleChronicleFailedRequestLoggingMode$outboundSchema.default(
      "none",
    ),
  safeHeaders: z.array(z.string()).optional(),
  useRoundRobinDns: z.boolean().default(false),
  onBackpressure: OutputGoogleChronicleBackpressureBehavior$outboundSchema
    .default("block"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  extraLogTypes: z.array(z.lazy(() => ExtraLogType$outboundSchema)).optional(),
  logType: z.string().optional(),
  logTextField: z.string().optional(),
  customerId: z.string().optional(),
  namespace: z.string().optional(),
  customLabels: z.array(
    z.lazy(() => OutputGoogleChronicleCustomLabel$outboundSchema),
  ).optional(),
  apiKey: z.string().optional(),
  apiKeySecret: z.string().optional(),
  serviceAccountCredentials: z.string().optional(),
  serviceAccountCredentialsSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGoogleChronicleCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputGoogleChronicleQueueFullBehavior$outboundSchema
    .default("block"),
  pqMode: OutputGoogleChronicleMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGoogleChroniclePqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleChronicle$ {
  /** @deprecated use `OutputGoogleChronicle$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleChronicle$inboundSchema;
  /** @deprecated use `OutputGoogleChronicle$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleChronicle$outboundSchema;
  /** @deprecated use `OutputGoogleChronicle$Outbound` instead. */
  export type Outbound = OutputGoogleChronicle$Outbound;
}

export function outputGoogleChronicleToJSON(
  outputGoogleChronicle: OutputGoogleChronicle,
): string {
  return JSON.stringify(
    OutputGoogleChronicle$outboundSchema.parse(outputGoogleChronicle),
  );
}

export function outputGoogleChronicleFromJSON(
  jsonString: string,
): SafeParseResult<OutputGoogleChronicle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGoogleChronicle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGoogleChronicle' from JSON`,
  );
}
