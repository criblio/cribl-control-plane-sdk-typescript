/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputMinioType = {
  Minio: "minio",
} as const;
export type OutputMinioType = ClosedEnum<typeof OutputMinioType>;

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const OutputMinioAuthenticationMethod = {
  /**
   * Auto
   */
  Auto: "auto",
  /**
   * Manual
   */
  Manual: "manual",
  /**
   * Secret Key pair
   */
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type OutputMinioAuthenticationMethod = OpenEnum<
  typeof OutputMinioAuthenticationMethod
>;

/**
 * Signature version to use for signing MinIO requests
 */
export const OutputMinioSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing MinIO requests
 */
export type OutputMinioSignatureVersion = OpenEnum<
  typeof OutputMinioSignatureVersion
>;

/**
 * Object ACL to assign to uploaded objects
 */
export const OutputMinioObjectACL = {
  /**
   * Private
   */
  Private: "private",
  /**
   * Public Read Only
   */
  PublicRead: "public-read",
  /**
   * Public Read/Write
   */
  PublicReadWrite: "public-read-write",
  /**
   * Authenticated Read Only
   */
  AuthenticatedRead: "authenticated-read",
  /**
   * AWS EC2 AMI Read Only
   */
  AwsExecRead: "aws-exec-read",
  /**
   * Bucket Owner Read Only
   */
  BucketOwnerRead: "bucket-owner-read",
  /**
   * Bucket Owner Full Control
   */
  BucketOwnerFullControl: "bucket-owner-full-control",
} as const;
/**
 * Object ACL to assign to uploaded objects
 */
export type OutputMinioObjectACL = OpenEnum<typeof OutputMinioObjectACL>;

/**
 * Storage class to select for uploaded objects
 */
export const OutputMinioStorageClass = {
  /**
   * Standard
   */
  Standard: "STANDARD",
  /**
   * Reduced Redundancy Storage
   */
  ReducedRedundancy: "REDUCED_REDUNDANCY",
} as const;
/**
 * Storage class to select for uploaded objects
 */
export type OutputMinioStorageClass = OpenEnum<typeof OutputMinioStorageClass>;

/**
 * Server-side encryption for uploaded objects
 */
export const ServerSideEncryption = {
  /**
   * Amazon S3 Managed Key
   */
  Aes256: "AES256",
} as const;
/**
 * Server-side encryption for uploaded objects
 */
export type ServerSideEncryption = OpenEnum<typeof ServerSideEncryption>;

/**
 * Format of the output data
 */
export const OutputMinioDataFormat = {
  /**
   * JSON
   */
  Json: "json",
  /**
   * Raw
   */
  Raw: "raw",
  /**
   * Parquet
   */
  Parquet: "parquet",
} as const;
/**
 * Format of the output data
 */
export type OutputMinioDataFormat = OpenEnum<typeof OutputMinioDataFormat>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputMinioBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputMinioBackpressureBehavior = OpenEnum<
  typeof OutputMinioBackpressureBehavior
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputMinioDiskSpaceProtection = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputMinioDiskSpaceProtection = OpenEnum<
  typeof OutputMinioDiskSpaceProtection
>;

/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export const OutputMinioCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export type OutputMinioCompression = OpenEnum<typeof OutputMinioCompression>;

/**
 * Compression level to apply before moving files to final destination
 */
export const OutputMinioCompressionLevel = {
  /**
   * Best Speed
   */
  BestSpeed: "best_speed",
  /**
   * Normal
   */
  Normal: "normal",
  /**
   * Best Compression
   */
  BestCompression: "best_compression",
} as const;
/**
 * Compression level to apply before moving files to final destination
 */
export type OutputMinioCompressionLevel = OpenEnum<
  typeof OutputMinioCompressionLevel
>;

/**
 * Determines which data types are supported and how they are represented
 */
export const OutputMinioParquetVersion = {
  /**
   * 1.0
   */
  Parquet10: "PARQUET_1_0",
  /**
   * 2.4
   */
  Parquet24: "PARQUET_2_4",
  /**
   * 2.6
   */
  Parquet26: "PARQUET_2_6",
} as const;
/**
 * Determines which data types are supported and how they are represented
 */
export type OutputMinioParquetVersion = OpenEnum<
  typeof OutputMinioParquetVersion
>;

/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export const OutputMinioDataPageVersion = {
  /**
   * V1
   */
  DataPageV1: "DATA_PAGE_V1",
  /**
   * V2
   */
  DataPageV2: "DATA_PAGE_V2",
} as const;
/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export type OutputMinioDataPageVersion = OpenEnum<
  typeof OutputMinioDataPageVersion
>;

export type OutputMinioKeyValueMetadatum = {
  key?: string | undefined;
  value: string;
};

export type OutputMinio = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputMinioType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * MinIO service url (e.g. http://minioHost:9000)
   */
  endpoint: string;
  /**
   * Name of the destination MinIO bucket. This value can be a constant or a JavaScript expression that can only be evaluated at init time. Example referencing a Global Variable: `myBucket-${C.vars.myVar}`
   */
  bucket: string;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: OutputMinioAuthenticationMethod | undefined;
  /**
   * Secret key. This value can be a constant or a JavaScript expression, such as `${C.env.SOME_SECRET}`).
   */
  awsSecretKey?: string | undefined;
  /**
   * Region where the MinIO service/cluster is located
   */
  region?: string | undefined;
  /**
   * Filesystem location in which to buffer files, before compressing and moving to final destination. Use performant stable storage.
   */
  stagePath?: string | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Root directory to prepend to path before uploading. Enter a constant, or a JavaScript expression enclosed in quotes or backticks.
   */
  destPath?: string | undefined;
  /**
   * Signature version to use for signing MinIO requests
   */
  signatureVersion?: OutputMinioSignatureVersion | undefined;
  /**
   * Object ACL to assign to uploaded objects
   */
  objectACL?: OutputMinioObjectACL | undefined;
  /**
   * Storage class to select for uploaded objects
   */
  storageClass?: OutputMinioStorageClass | undefined;
  /**
   * Server-side encryption for uploaded objects
   */
  serverSideEncryption?: ServerSideEncryption | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates)
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Disable if you can access files within the bucket but not the bucket itself
   */
  verifyPermissions?: boolean | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * JavaScript expression defining how files are partitioned and organized. Default is date-based. If blank, Stream will fall back to the event's __partition field value – if present – otherwise to each location's root directory.
   */
  partitionExpr?: string | undefined;
  /**
   * Format of the output data
   */
  format?: OutputMinioDataFormat | undefined;
  /**
   * JavaScript expression to define the output filename prefix (can be constant)
   */
  baseFileName?: string | undefined;
  /**
   * JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`).
   */
  fileNameSuffix?: string | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * If set, this line will be written to the beginning of each output file
   */
  headerLine?: string | undefined;
  /**
   * Buffer size used to write to a file
   */
  writeHighWaterMark?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputMinioBackpressureBehavior | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?: OutputMinioDiskSpaceProtection | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of parts to upload in parallel per file. Minimum part size is 5MB.
   */
  maxConcurrentFileParts?: number | undefined;
  description?: string | undefined;
  /**
   * This value can be a constant or a JavaScript expression (`${C.env.SOME_ACCESS_KEY}`)
   */
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  /**
   * Data compression format to apply to HTTP content before it is delivered
   */
  compress?: OutputMinioCompression | undefined;
  /**
   * Compression level to apply before moving files to final destination
   */
  compressionLevel?: OutputMinioCompressionLevel | undefined;
  /**
   * Automatically calculate the schema based on the events of each Parquet file generated
   */
  automaticSchema?: boolean | undefined;
  /**
   * To add a new schema, navigate to Processing > Knowledge > Parquet Schemas
   */
  parquetSchema?: string | undefined;
  /**
   * Determines which data types are supported and how they are represented
   */
  parquetVersion?: OutputMinioParquetVersion | undefined;
  /**
   * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
   */
  parquetDataPageVersion?: OutputMinioDataPageVersion | undefined;
  /**
   * The number of rows that every group will contain. The final group can contain a smaller number of rows.
   */
  parquetRowGroupLength?: number | undefined;
  /**
   * Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression.
   */
  parquetPageSize?: string | undefined;
  /**
   * Log up to 3 rows that @{product} skips due to data mismatch
   */
  shouldLogInvalidRows?: boolean | undefined;
  /**
   * The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: "key":"OCSF Event Class", "value":"9001"
   */
  keyValueMetadata?: Array<OutputMinioKeyValueMetadatum> | undefined;
  /**
   * Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics.
   */
  enableStatistics?: boolean | undefined;
  /**
   * One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping.
   */
  enableWritePageIndex?: boolean | undefined;
  /**
   * Parquet tools can use the checksum of a Parquet page to verify data integrity
   */
  enablePageChecksum?: boolean | undefined;
  /**
   * How frequently, in seconds, to clean up empty directories
   */
  emptyDirCleanupSec?: number | undefined;
  /**
   * Storage location for files that fail to reach their final destination after maximum retries are exceeded
   */
  deadletterPath?: string | undefined;
  /**
   * The maximum number of times a file will attempt to move to its final destination before being dead-lettered
   */
  maxRetryNum?: number | undefined;
};

/** @internal */
export const OutputMinioType$inboundSchema: z.ZodNativeEnum<
  typeof OutputMinioType
> = z.nativeEnum(OutputMinioType);

/** @internal */
export const OutputMinioType$outboundSchema: z.ZodNativeEnum<
  typeof OutputMinioType
> = OutputMinioType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioType$ {
  /** @deprecated use `OutputMinioType$inboundSchema` instead. */
  export const inboundSchema = OutputMinioType$inboundSchema;
  /** @deprecated use `OutputMinioType$outboundSchema` instead. */
  export const outboundSchema = OutputMinioType$outboundSchema;
}

/** @internal */
export const OutputMinioAuthenticationMethod$inboundSchema: z.ZodType<
  OutputMinioAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioAuthenticationMethod$outboundSchema: z.ZodType<
  OutputMinioAuthenticationMethod,
  z.ZodTypeDef,
  OutputMinioAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputMinioAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioAuthenticationMethod$ {
  /** @deprecated use `OutputMinioAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputMinioAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputMinioAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = OutputMinioAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputMinioSignatureVersion$inboundSchema: z.ZodType<
  OutputMinioSignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioSignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioSignatureVersion$outboundSchema: z.ZodType<
  OutputMinioSignatureVersion,
  z.ZodTypeDef,
  OutputMinioSignatureVersion
> = z.union([
  z.nativeEnum(OutputMinioSignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioSignatureVersion$ {
  /** @deprecated use `OutputMinioSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = OutputMinioSignatureVersion$inboundSchema;
  /** @deprecated use `OutputMinioSignatureVersion$outboundSchema` instead. */
  export const outboundSchema = OutputMinioSignatureVersion$outboundSchema;
}

/** @internal */
export const OutputMinioObjectACL$inboundSchema: z.ZodType<
  OutputMinioObjectACL,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioObjectACL),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioObjectACL$outboundSchema: z.ZodType<
  OutputMinioObjectACL,
  z.ZodTypeDef,
  OutputMinioObjectACL
> = z.union([
  z.nativeEnum(OutputMinioObjectACL),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioObjectACL$ {
  /** @deprecated use `OutputMinioObjectACL$inboundSchema` instead. */
  export const inboundSchema = OutputMinioObjectACL$inboundSchema;
  /** @deprecated use `OutputMinioObjectACL$outboundSchema` instead. */
  export const outboundSchema = OutputMinioObjectACL$outboundSchema;
}

/** @internal */
export const OutputMinioStorageClass$inboundSchema: z.ZodType<
  OutputMinioStorageClass,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioStorageClass),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioStorageClass$outboundSchema: z.ZodType<
  OutputMinioStorageClass,
  z.ZodTypeDef,
  OutputMinioStorageClass
> = z.union([
  z.nativeEnum(OutputMinioStorageClass),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioStorageClass$ {
  /** @deprecated use `OutputMinioStorageClass$inboundSchema` instead. */
  export const inboundSchema = OutputMinioStorageClass$inboundSchema;
  /** @deprecated use `OutputMinioStorageClass$outboundSchema` instead. */
  export const outboundSchema = OutputMinioStorageClass$outboundSchema;
}

/** @internal */
export const ServerSideEncryption$inboundSchema: z.ZodType<
  ServerSideEncryption,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ServerSideEncryption),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ServerSideEncryption$outboundSchema: z.ZodType<
  ServerSideEncryption,
  z.ZodTypeDef,
  ServerSideEncryption
> = z.union([
  z.nativeEnum(ServerSideEncryption),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSideEncryption$ {
  /** @deprecated use `ServerSideEncryption$inboundSchema` instead. */
  export const inboundSchema = ServerSideEncryption$inboundSchema;
  /** @deprecated use `ServerSideEncryption$outboundSchema` instead. */
  export const outboundSchema = ServerSideEncryption$outboundSchema;
}

/** @internal */
export const OutputMinioDataFormat$inboundSchema: z.ZodType<
  OutputMinioDataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioDataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioDataFormat$outboundSchema: z.ZodType<
  OutputMinioDataFormat,
  z.ZodTypeDef,
  OutputMinioDataFormat
> = z.union([
  z.nativeEnum(OutputMinioDataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioDataFormat$ {
  /** @deprecated use `OutputMinioDataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputMinioDataFormat$inboundSchema;
  /** @deprecated use `OutputMinioDataFormat$outboundSchema` instead. */
  export const outboundSchema = OutputMinioDataFormat$outboundSchema;
}

/** @internal */
export const OutputMinioBackpressureBehavior$inboundSchema: z.ZodType<
  OutputMinioBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioBackpressureBehavior$outboundSchema: z.ZodType<
  OutputMinioBackpressureBehavior,
  z.ZodTypeDef,
  OutputMinioBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputMinioBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioBackpressureBehavior$ {
  /** @deprecated use `OutputMinioBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputMinioBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputMinioBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputMinioBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputMinioDiskSpaceProtection$inboundSchema: z.ZodType<
  OutputMinioDiskSpaceProtection,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioDiskSpaceProtection),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioDiskSpaceProtection$outboundSchema: z.ZodType<
  OutputMinioDiskSpaceProtection,
  z.ZodTypeDef,
  OutputMinioDiskSpaceProtection
> = z.union([
  z.nativeEnum(OutputMinioDiskSpaceProtection),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioDiskSpaceProtection$ {
  /** @deprecated use `OutputMinioDiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema = OutputMinioDiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputMinioDiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema = OutputMinioDiskSpaceProtection$outboundSchema;
}

/** @internal */
export const OutputMinioCompression$inboundSchema: z.ZodType<
  OutputMinioCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioCompression$outboundSchema: z.ZodType<
  OutputMinioCompression,
  z.ZodTypeDef,
  OutputMinioCompression
> = z.union([
  z.nativeEnum(OutputMinioCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioCompression$ {
  /** @deprecated use `OutputMinioCompression$inboundSchema` instead. */
  export const inboundSchema = OutputMinioCompression$inboundSchema;
  /** @deprecated use `OutputMinioCompression$outboundSchema` instead. */
  export const outboundSchema = OutputMinioCompression$outboundSchema;
}

/** @internal */
export const OutputMinioCompressionLevel$inboundSchema: z.ZodType<
  OutputMinioCompressionLevel,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioCompressionLevel),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioCompressionLevel$outboundSchema: z.ZodType<
  OutputMinioCompressionLevel,
  z.ZodTypeDef,
  OutputMinioCompressionLevel
> = z.union([
  z.nativeEnum(OutputMinioCompressionLevel),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioCompressionLevel$ {
  /** @deprecated use `OutputMinioCompressionLevel$inboundSchema` instead. */
  export const inboundSchema = OutputMinioCompressionLevel$inboundSchema;
  /** @deprecated use `OutputMinioCompressionLevel$outboundSchema` instead. */
  export const outboundSchema = OutputMinioCompressionLevel$outboundSchema;
}

/** @internal */
export const OutputMinioParquetVersion$inboundSchema: z.ZodType<
  OutputMinioParquetVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioParquetVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioParquetVersion$outboundSchema: z.ZodType<
  OutputMinioParquetVersion,
  z.ZodTypeDef,
  OutputMinioParquetVersion
> = z.union([
  z.nativeEnum(OutputMinioParquetVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioParquetVersion$ {
  /** @deprecated use `OutputMinioParquetVersion$inboundSchema` instead. */
  export const inboundSchema = OutputMinioParquetVersion$inboundSchema;
  /** @deprecated use `OutputMinioParquetVersion$outboundSchema` instead. */
  export const outboundSchema = OutputMinioParquetVersion$outboundSchema;
}

/** @internal */
export const OutputMinioDataPageVersion$inboundSchema: z.ZodType<
  OutputMinioDataPageVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputMinioDataPageVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputMinioDataPageVersion$outboundSchema: z.ZodType<
  OutputMinioDataPageVersion,
  z.ZodTypeDef,
  OutputMinioDataPageVersion
> = z.union([
  z.nativeEnum(OutputMinioDataPageVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioDataPageVersion$ {
  /** @deprecated use `OutputMinioDataPageVersion$inboundSchema` instead. */
  export const inboundSchema = OutputMinioDataPageVersion$inboundSchema;
  /** @deprecated use `OutputMinioDataPageVersion$outboundSchema` instead. */
  export const outboundSchema = OutputMinioDataPageVersion$outboundSchema;
}

/** @internal */
export const OutputMinioKeyValueMetadatum$inboundSchema: z.ZodType<
  OutputMinioKeyValueMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputMinioKeyValueMetadatum$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const OutputMinioKeyValueMetadatum$outboundSchema: z.ZodType<
  OutputMinioKeyValueMetadatum$Outbound,
  z.ZodTypeDef,
  OutputMinioKeyValueMetadatum
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinioKeyValueMetadatum$ {
  /** @deprecated use `OutputMinioKeyValueMetadatum$inboundSchema` instead. */
  export const inboundSchema = OutputMinioKeyValueMetadatum$inboundSchema;
  /** @deprecated use `OutputMinioKeyValueMetadatum$outboundSchema` instead. */
  export const outboundSchema = OutputMinioKeyValueMetadatum$outboundSchema;
  /** @deprecated use `OutputMinioKeyValueMetadatum$Outbound` instead. */
  export type Outbound = OutputMinioKeyValueMetadatum$Outbound;
}

export function outputMinioKeyValueMetadatumToJSON(
  outputMinioKeyValueMetadatum: OutputMinioKeyValueMetadatum,
): string {
  return JSON.stringify(
    OutputMinioKeyValueMetadatum$outboundSchema.parse(
      outputMinioKeyValueMetadatum,
    ),
  );
}

export function outputMinioKeyValueMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<OutputMinioKeyValueMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputMinioKeyValueMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputMinioKeyValueMetadatum' from JSON`,
  );
}

/** @internal */
export const OutputMinio$inboundSchema: z.ZodType<
  OutputMinio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputMinioType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  endpoint: z.string(),
  bucket: z.string(),
  awsAuthenticationMethod: OutputMinioAuthenticationMethod$inboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  destPath: z.string().optional(),
  signatureVersion: OutputMinioSignatureVersion$inboundSchema.default("v4"),
  objectACL: OutputMinioObjectACL$inboundSchema.default("private"),
  storageClass: OutputMinioStorageClass$inboundSchema.optional(),
  serverSideEncryption: ServerSideEncryption$inboundSchema.optional(),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  verifyPermissions: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputMinioDataFormat$inboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputMinioBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputMinioDiskSpaceProtection$inboundSchema.default(
    "block",
  ),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxConcurrentFileParts: z.number().default(4),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  compress: OutputMinioCompression$inboundSchema.default("gzip"),
  compressionLevel: OutputMinioCompressionLevel$inboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetSchema: z.string().optional(),
  parquetVersion: OutputMinioParquetVersion$inboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputMinioDataPageVersion$inboundSchema.default(
    "DATA_PAGE_V2",
  ),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputMinioKeyValueMetadatum$inboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/** @internal */
export type OutputMinio$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  endpoint: string;
  bucket: string;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region?: string | undefined;
  stagePath: string;
  addIdToStagePath: boolean;
  destPath?: string | undefined;
  signatureVersion: string;
  objectACL: string;
  storageClass?: string | undefined;
  serverSideEncryption?: string | undefined;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  verifyPermissions: boolean;
  removeEmptyDirs: boolean;
  partitionExpr: string;
  format: string;
  baseFileName: string;
  fileNameSuffix: string;
  maxFileSizeMB: number;
  maxOpenFiles: number;
  headerLine: string;
  writeHighWaterMark: number;
  onBackpressure: string;
  deadletterEnabled: boolean;
  onDiskFullBackpressure: string;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxConcurrentFileParts: number;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  compress: string;
  compressionLevel: string;
  automaticSchema: boolean;
  parquetSchema?: string | undefined;
  parquetVersion: string;
  parquetDataPageVersion: string;
  parquetRowGroupLength: number;
  parquetPageSize: string;
  shouldLogInvalidRows?: boolean | undefined;
  keyValueMetadata?: Array<OutputMinioKeyValueMetadatum$Outbound> | undefined;
  enableStatistics: boolean;
  enableWritePageIndex: boolean;
  enablePageChecksum: boolean;
  emptyDirCleanupSec: number;
  deadletterPath: string;
  maxRetryNum: number;
};

/** @internal */
export const OutputMinio$outboundSchema: z.ZodType<
  OutputMinio$Outbound,
  z.ZodTypeDef,
  OutputMinio
> = z.object({
  id: z.string().optional(),
  type: OutputMinioType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  endpoint: z.string(),
  bucket: z.string(),
  awsAuthenticationMethod: OutputMinioAuthenticationMethod$outboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  destPath: z.string().optional(),
  signatureVersion: OutputMinioSignatureVersion$outboundSchema.default("v4"),
  objectACL: OutputMinioObjectACL$outboundSchema.default("private"),
  storageClass: OutputMinioStorageClass$outboundSchema.optional(),
  serverSideEncryption: ServerSideEncryption$outboundSchema.optional(),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  verifyPermissions: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputMinioDataFormat$outboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputMinioBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputMinioDiskSpaceProtection$outboundSchema.default(
    "block",
  ),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxConcurrentFileParts: z.number().default(4),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  compress: OutputMinioCompression$outboundSchema.default("gzip"),
  compressionLevel: OutputMinioCompressionLevel$outboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetSchema: z.string().optional(),
  parquetVersion: OutputMinioParquetVersion$outboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputMinioDataPageVersion$outboundSchema.default(
    "DATA_PAGE_V2",
  ),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputMinioKeyValueMetadatum$outboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMinio$ {
  /** @deprecated use `OutputMinio$inboundSchema` instead. */
  export const inboundSchema = OutputMinio$inboundSchema;
  /** @deprecated use `OutputMinio$outboundSchema` instead. */
  export const outboundSchema = OutputMinio$outboundSchema;
  /** @deprecated use `OutputMinio$Outbound` instead. */
  export type Outbound = OutputMinio$Outbound;
}

export function outputMinioToJSON(outputMinio: OutputMinio): string {
  return JSON.stringify(OutputMinio$outboundSchema.parse(outputMinio));
}

export function outputMinioFromJSON(
  jsonString: string,
): SafeParseResult<OutputMinio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputMinio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputMinio' from JSON`,
  );
}
