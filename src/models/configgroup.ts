/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Commit,
  Commit$inboundSchema,
  Commit$Outbound,
  Commit$outboundSchema,
} from "./commit.js";
import {
  ConfigGroupCloud,
  ConfigGroupCloud$inboundSchema,
  ConfigGroupCloud$Outbound,
  ConfigGroupCloud$outboundSchema,
} from "./configgroupcloud.js";
import {
  ConfigGroupLookups,
  ConfigGroupLookups$inboundSchema,
  ConfigGroupLookups$Outbound,
  ConfigGroupLookups$outboundSchema,
} from "./configgrouplookups.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Maximum expected volume of data ingested by the @{group}. (This setting is available only on @{group}s consisting of Cribl-managed Cribl.Cloud @{node}s.)
 */
export const EstimatedIngestRate = {
  /**
   * 12 MB/sec
   */
  Rate12MBPerSec: 1024,
  /**
   * 24 MB/sec
   */
  Rate24MBPerSec: 2048,
  /**
   * 36 MB/sec
   */
  Rate36MBPerSec: 3072,
  /**
   * 48 MB/sec
   */
  Rate48MBPerSec: 4096,
  /**
   * 60 MB/sec
   */
  Rate60MBPerSec: 5120,
  /**
   * 84 MB/sec
   */
  Rate84MBPerSec: 7168,
  /**
   * 120 MB/sec
   */
  Rate120MBPerSec: 10240,
  /**
   * 156 MB/sec
   */
  Rate156MBPerSec: 13312,
  /**
   * 180 MB/sec
   */
  Rate180MBPerSec: 15360,
} as const;
/**
 * Maximum expected volume of data ingested by the @{group}. (This setting is available only on @{group}s consisting of Cribl-managed Cribl.Cloud @{node}s.)
 */
export type EstimatedIngestRate = OpenEnum<typeof EstimatedIngestRate>;

export type Git = {
  commit?: string | undefined;
  localChanges?: number | undefined;
  log?: Array<Commit> | undefined;
};

export const ConfigGroupType = {
  LakeAccess: "lake_access",
} as const;
export type ConfigGroupType = OpenEnum<typeof ConfigGroupType>;

export type ConfigGroup = {
  cloud?: ConfigGroupCloud | undefined;
  configVersion?: string | undefined;
  deployingWorkerCount?: number | undefined;
  description?: string | undefined;
  /**
   * Maximum expected volume of data ingested by the @{group}. (This setting is available only on @{group}s consisting of Cribl-managed Cribl.Cloud @{node}s.)
   */
  estimatedIngestRate?: EstimatedIngestRate | undefined;
  git?: Git | undefined;
  id: string;
  incompatibleWorkerCount?: number | undefined;
  inherits?: string | undefined;
  isFleet?: boolean | undefined;
  isSearch?: boolean | undefined;
  lookupDeployments?: Array<ConfigGroupLookups> | undefined;
  maxWorkerAge?: string | undefined;
  name?: string | undefined;
  onPrem?: boolean | undefined;
  provisioned?: boolean | undefined;
  streamtags?: Array<string> | undefined;
  tags?: string | undefined;
  type?: ConfigGroupType | undefined;
  upgradeVersion?: string | undefined;
  workerCount?: number | undefined;
  workerRemoteAccess?: boolean | undefined;
};

/** @internal */
export const EstimatedIngestRate$inboundSchema: z.ZodType<
  EstimatedIngestRate,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EstimatedIngestRate),
    z.number().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EstimatedIngestRate$outboundSchema: z.ZodType<
  EstimatedIngestRate,
  z.ZodTypeDef,
  EstimatedIngestRate
> = z.union([
  z.nativeEnum(EstimatedIngestRate),
  z.number().and(z.custom<Unrecognized<number>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EstimatedIngestRate$ {
  /** @deprecated use `EstimatedIngestRate$inboundSchema` instead. */
  export const inboundSchema = EstimatedIngestRate$inboundSchema;
  /** @deprecated use `EstimatedIngestRate$outboundSchema` instead. */
  export const outboundSchema = EstimatedIngestRate$outboundSchema;
}

/** @internal */
export const Git$inboundSchema: z.ZodType<Git, z.ZodTypeDef, unknown> = z
  .object({
    commit: z.string().optional(),
    localChanges: z.number().optional(),
    log: z.array(Commit$inboundSchema).optional(),
  });

/** @internal */
export type Git$Outbound = {
  commit?: string | undefined;
  localChanges?: number | undefined;
  log?: Array<Commit$Outbound> | undefined;
};

/** @internal */
export const Git$outboundSchema: z.ZodType<Git$Outbound, z.ZodTypeDef, Git> = z
  .object({
    commit: z.string().optional(),
    localChanges: z.number().optional(),
    log: z.array(Commit$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Git$ {
  /** @deprecated use `Git$inboundSchema` instead. */
  export const inboundSchema = Git$inboundSchema;
  /** @deprecated use `Git$outboundSchema` instead. */
  export const outboundSchema = Git$outboundSchema;
  /** @deprecated use `Git$Outbound` instead. */
  export type Outbound = Git$Outbound;
}

export function gitToJSON(git: Git): string {
  return JSON.stringify(Git$outboundSchema.parse(git));
}

export function gitFromJSON(
  jsonString: string,
): SafeParseResult<Git, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Git$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Git' from JSON`,
  );
}

/** @internal */
export const ConfigGroupType$inboundSchema: z.ZodType<
  ConfigGroupType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ConfigGroupType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ConfigGroupType$outboundSchema: z.ZodType<
  ConfigGroupType,
  z.ZodTypeDef,
  ConfigGroupType
> = z.union([
  z.nativeEnum(ConfigGroupType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigGroupType$ {
  /** @deprecated use `ConfigGroupType$inboundSchema` instead. */
  export const inboundSchema = ConfigGroupType$inboundSchema;
  /** @deprecated use `ConfigGroupType$outboundSchema` instead. */
  export const outboundSchema = ConfigGroupType$outboundSchema;
}

/** @internal */
export const ConfigGroup$inboundSchema: z.ZodType<
  ConfigGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud: ConfigGroupCloud$inboundSchema.optional(),
  configVersion: z.string().optional(),
  deployingWorkerCount: z.number().optional(),
  description: z.string().optional(),
  estimatedIngestRate: EstimatedIngestRate$inboundSchema.optional(),
  git: z.lazy(() => Git$inboundSchema).optional(),
  id: z.string(),
  incompatibleWorkerCount: z.number().optional(),
  inherits: z.string().optional(),
  isFleet: z.boolean().optional(),
  isSearch: z.boolean().optional(),
  lookupDeployments: z.array(ConfigGroupLookups$inboundSchema).optional(),
  maxWorkerAge: z.string().optional(),
  name: z.string().optional(),
  onPrem: z.boolean().optional(),
  provisioned: z.boolean().optional(),
  streamtags: z.array(z.string()).optional(),
  tags: z.string().optional(),
  type: ConfigGroupType$inboundSchema.optional(),
  upgradeVersion: z.string().optional(),
  workerCount: z.number().optional(),
  workerRemoteAccess: z.boolean().optional(),
});

/** @internal */
export type ConfigGroup$Outbound = {
  cloud?: ConfigGroupCloud$Outbound | undefined;
  configVersion?: string | undefined;
  deployingWorkerCount?: number | undefined;
  description?: string | undefined;
  estimatedIngestRate?: number | undefined;
  git?: Git$Outbound | undefined;
  id: string;
  incompatibleWorkerCount?: number | undefined;
  inherits?: string | undefined;
  isFleet?: boolean | undefined;
  isSearch?: boolean | undefined;
  lookupDeployments?: Array<ConfigGroupLookups$Outbound> | undefined;
  maxWorkerAge?: string | undefined;
  name?: string | undefined;
  onPrem?: boolean | undefined;
  provisioned?: boolean | undefined;
  streamtags?: Array<string> | undefined;
  tags?: string | undefined;
  type?: string | undefined;
  upgradeVersion?: string | undefined;
  workerCount?: number | undefined;
  workerRemoteAccess?: boolean | undefined;
};

/** @internal */
export const ConfigGroup$outboundSchema: z.ZodType<
  ConfigGroup$Outbound,
  z.ZodTypeDef,
  ConfigGroup
> = z.object({
  cloud: ConfigGroupCloud$outboundSchema.optional(),
  configVersion: z.string().optional(),
  deployingWorkerCount: z.number().optional(),
  description: z.string().optional(),
  estimatedIngestRate: EstimatedIngestRate$outboundSchema.optional(),
  git: z.lazy(() => Git$outboundSchema).optional(),
  id: z.string(),
  incompatibleWorkerCount: z.number().optional(),
  inherits: z.string().optional(),
  isFleet: z.boolean().optional(),
  isSearch: z.boolean().optional(),
  lookupDeployments: z.array(ConfigGroupLookups$outboundSchema).optional(),
  maxWorkerAge: z.string().optional(),
  name: z.string().optional(),
  onPrem: z.boolean().optional(),
  provisioned: z.boolean().optional(),
  streamtags: z.array(z.string()).optional(),
  tags: z.string().optional(),
  type: ConfigGroupType$outboundSchema.optional(),
  upgradeVersion: z.string().optional(),
  workerCount: z.number().optional(),
  workerRemoteAccess: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigGroup$ {
  /** @deprecated use `ConfigGroup$inboundSchema` instead. */
  export const inboundSchema = ConfigGroup$inboundSchema;
  /** @deprecated use `ConfigGroup$outboundSchema` instead. */
  export const outboundSchema = ConfigGroup$outboundSchema;
  /** @deprecated use `ConfigGroup$Outbound` instead. */
  export type Outbound = ConfigGroup$Outbound;
}

export function configGroupToJSON(configGroup: ConfigGroup): string {
  return JSON.stringify(ConfigGroup$outboundSchema.parse(configGroup));
}

export function configGroupFromJSON(
  jsonString: string,
): SafeParseResult<ConfigGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigGroup' from JSON`,
  );
}
