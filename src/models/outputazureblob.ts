/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputAzureBlobType = {
  AzureBlob: "azure_blob",
} as const;
export type OutputAzureBlobType = ClosedEnum<typeof OutputAzureBlobType>;

/**
 * Format of the output data
 */
export const OutputAzureBlobDataFormat = {
  /**
   * JSON
   */
  Json: "json",
  /**
   * Raw
   */
  Raw: "raw",
  /**
   * Parquet
   */
  Parquet: "parquet",
} as const;
/**
 * Format of the output data
 */
export type OutputAzureBlobDataFormat = OpenEnum<
  typeof OutputAzureBlobDataFormat
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputAzureBlobBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputAzureBlobBackpressureBehavior = OpenEnum<
  typeof OutputAzureBlobBackpressureBehavior
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputAzureBlobDiskSpaceProtection = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputAzureBlobDiskSpaceProtection = OpenEnum<
  typeof OutputAzureBlobDiskSpaceProtection
>;

export const OutputAzureBlobAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
  ClientSecret: "clientSecret",
  ClientCert: "clientCert",
} as const;
export type OutputAzureBlobAuthenticationMethod = OpenEnum<
  typeof OutputAzureBlobAuthenticationMethod
>;

export const BlobAccessTier = {
  /**
   * Default account access tier
   */
  Inferred: "Inferred",
  /**
   * Hot tier
   */
  Hot: "Hot",
  /**
   * Cool tier
   */
  Cool: "Cool",
  /**
   * Cold tier
   */
  Cold: "Cold",
  /**
   * Archive tier
   */
  Archive: "Archive",
} as const;
export type BlobAccessTier = OpenEnum<typeof BlobAccessTier>;

/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export const OutputAzureBlobCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export type OutputAzureBlobCompression = OpenEnum<
  typeof OutputAzureBlobCompression
>;

/**
 * Compression level to apply before moving files to final destination
 */
export const OutputAzureBlobCompressionLevel = {
  /**
   * Best Speed
   */
  BestSpeed: "best_speed",
  /**
   * Normal
   */
  Normal: "normal",
  /**
   * Best Compression
   */
  BestCompression: "best_compression",
} as const;
/**
 * Compression level to apply before moving files to final destination
 */
export type OutputAzureBlobCompressionLevel = OpenEnum<
  typeof OutputAzureBlobCompressionLevel
>;

/**
 * Determines which data types are supported and how they are represented
 */
export const OutputAzureBlobParquetVersion = {
  /**
   * 1.0
   */
  Parquet10: "PARQUET_1_0",
  /**
   * 2.4
   */
  Parquet24: "PARQUET_2_4",
  /**
   * 2.6
   */
  Parquet26: "PARQUET_2_6",
} as const;
/**
 * Determines which data types are supported and how they are represented
 */
export type OutputAzureBlobParquetVersion = OpenEnum<
  typeof OutputAzureBlobParquetVersion
>;

/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export const OutputAzureBlobDataPageVersion = {
  /**
   * V1
   */
  DataPageV1: "DATA_PAGE_V1",
  /**
   * V2
   */
  DataPageV2: "DATA_PAGE_V2",
} as const;
/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export type OutputAzureBlobDataPageVersion = OpenEnum<
  typeof OutputAzureBlobDataPageVersion
>;

export type OutputAzureBlobKeyValueMetadatum = {
  key?: string | undefined;
  value: string;
};

export type OutputAzureBlobCertificate = {
  /**
   * The certificate you registered as credentials for your app in the Azure portal
   */
  certificateName: string;
};

export type OutputAzureBlob = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputAzureBlobType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The Azure Blob Storage container name. Name can include only lowercase letters, numbers, and hyphens. For dynamic container names, enter a JavaScript expression within quotes or backticks, to be evaluated at initialization. The expression can evaluate to a constant value and can reference Global Variables, such as `myContainer-${C.env["CRIBL_WORKER_ID"]}`.
   */
  containerName: string;
  /**
   * Create the configured container in Azure Blob Storage if it does not already exist
   */
  createContainer?: boolean | undefined;
  /**
   * Root directory prepended to path before uploading. Value can be a JavaScript expression enclosed in quotes or backticks, to be evaluated at initialization. The expression can evaluate to a constant value and can reference Global Variables, such as `myBlobPrefix-${C.env["CRIBL_WORKER_ID"]}`.
   */
  destPath?: string | undefined;
  /**
   * Filesystem location in which to buffer files before compressing and moving to final destination. Use performant and stable storage.
   */
  stagePath?: string | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Maximum number of parts to upload in parallel per file
   */
  maxConcurrentFileParts?: number | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * JavaScript expression defining how files are partitioned and organized. Default is date-based. If blank, Stream will fall back to the event's __partition field value – if present – otherwise to each location's root directory.
   */
  partitionExpr?: string | undefined;
  /**
   * Format of the output data
   */
  format?: OutputAzureBlobDataFormat | undefined;
  /**
   * JavaScript expression to define the output filename prefix (can be constant)
   */
  baseFileName?: string | undefined;
  /**
   * JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`).
   */
  fileNameSuffix?: string | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * If set, this line will be written to the beginning of each output file
   */
  headerLine?: string | undefined;
  /**
   * Buffer size used to write to a file
   */
  writeHighWaterMark?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputAzureBlobBackpressureBehavior | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?: OutputAzureBlobDiskSpaceProtection | undefined;
  authType?: OutputAzureBlobAuthenticationMethod | undefined;
  storageClass?: BlobAccessTier | undefined;
  description?: string | undefined;
  /**
   * Data compression format to apply to HTTP content before it is delivered
   */
  compress?: OutputAzureBlobCompression | undefined;
  /**
   * Compression level to apply before moving files to final destination
   */
  compressionLevel?: OutputAzureBlobCompressionLevel | undefined;
  /**
   * Automatically calculate the schema based on the events of each Parquet file generated
   */
  automaticSchema?: boolean | undefined;
  /**
   * Determines which data types are supported and how they are represented
   */
  parquetVersion?: OutputAzureBlobParquetVersion | undefined;
  /**
   * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
   */
  parquetDataPageVersion?: OutputAzureBlobDataPageVersion | undefined;
  /**
   * The number of rows that every group will contain. The final group can contain a smaller number of rows.
   */
  parquetRowGroupLength?: number | undefined;
  /**
   * Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression.
   */
  parquetPageSize?: string | undefined;
  /**
   * Log up to 3 rows that @{product} skips due to data mismatch
   */
  shouldLogInvalidRows?: boolean | undefined;
  /**
   * The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: "key":"OCSF Event Class", "value":"9001"
   */
  keyValueMetadata?: Array<OutputAzureBlobKeyValueMetadatum> | undefined;
  /**
   * Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics.
   */
  enableStatistics?: boolean | undefined;
  /**
   * One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping.
   */
  enableWritePageIndex?: boolean | undefined;
  /**
   * Parquet tools can use the checksum of a Parquet page to verify data integrity
   */
  enablePageChecksum?: boolean | undefined;
  /**
   * How frequently, in seconds, to clean up empty directories
   */
  emptyDirCleanupSec?: number | undefined;
  /**
   * Storage location for files that fail to reach their final destination after maximum retries are exceeded
   */
  deadletterPath?: string | undefined;
  /**
   * The maximum number of times a file will attempt to move to its final destination before being dead-lettered
   */
  maxRetryNum?: number | undefined;
  /**
   * Enter your Azure Storage account connection string. If left blank, Stream will fall back to env.AZURE_STORAGE_CONNECTION_STRING.
   */
  connectionString?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * The name of your Azure storage account
   */
  storageAccountName?: string | undefined;
  /**
   * The service principal's tenant ID
   */
  tenantId?: string | undefined;
  /**
   * The service principal's client ID
   */
  clientId?: string | undefined;
  /**
   * The Azure cloud to use. Defaults to Azure Public Cloud.
   */
  azureCloud?: string | undefined;
  /**
   * Endpoint suffix for the service URL. Takes precedence over the Azure Cloud setting. Defaults to core.windows.net.
   */
  endpointSuffix?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  clientTextSecret?: string | undefined;
  certificate?: OutputAzureBlobCertificate | undefined;
};

/** @internal */
export const OutputAzureBlobType$inboundSchema: z.ZodNativeEnum<
  typeof OutputAzureBlobType
> = z.nativeEnum(OutputAzureBlobType);

/** @internal */
export const OutputAzureBlobType$outboundSchema: z.ZodNativeEnum<
  typeof OutputAzureBlobType
> = OutputAzureBlobType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobType$ {
  /** @deprecated use `OutputAzureBlobType$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlobType$inboundSchema;
  /** @deprecated use `OutputAzureBlobType$outboundSchema` instead. */
  export const outboundSchema = OutputAzureBlobType$outboundSchema;
}

/** @internal */
export const OutputAzureBlobDataFormat$inboundSchema: z.ZodType<
  OutputAzureBlobDataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureBlobDataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureBlobDataFormat$outboundSchema: z.ZodType<
  OutputAzureBlobDataFormat,
  z.ZodTypeDef,
  OutputAzureBlobDataFormat
> = z.union([
  z.nativeEnum(OutputAzureBlobDataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobDataFormat$ {
  /** @deprecated use `OutputAzureBlobDataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlobDataFormat$inboundSchema;
  /** @deprecated use `OutputAzureBlobDataFormat$outboundSchema` instead. */
  export const outboundSchema = OutputAzureBlobDataFormat$outboundSchema;
}

/** @internal */
export const OutputAzureBlobBackpressureBehavior$inboundSchema: z.ZodType<
  OutputAzureBlobBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureBlobBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureBlobBackpressureBehavior$outboundSchema: z.ZodType<
  OutputAzureBlobBackpressureBehavior,
  z.ZodTypeDef,
  OutputAzureBlobBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputAzureBlobBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobBackpressureBehavior$ {
  /** @deprecated use `OutputAzureBlobBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureBlobBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputAzureBlobBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureBlobBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputAzureBlobDiskSpaceProtection$inboundSchema: z.ZodType<
  OutputAzureBlobDiskSpaceProtection,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureBlobDiskSpaceProtection),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureBlobDiskSpaceProtection$outboundSchema: z.ZodType<
  OutputAzureBlobDiskSpaceProtection,
  z.ZodTypeDef,
  OutputAzureBlobDiskSpaceProtection
> = z.union([
  z.nativeEnum(OutputAzureBlobDiskSpaceProtection),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobDiskSpaceProtection$ {
  /** @deprecated use `OutputAzureBlobDiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlobDiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputAzureBlobDiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureBlobDiskSpaceProtection$outboundSchema;
}

/** @internal */
export const OutputAzureBlobAuthenticationMethod$inboundSchema: z.ZodType<
  OutputAzureBlobAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureBlobAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureBlobAuthenticationMethod$outboundSchema: z.ZodType<
  OutputAzureBlobAuthenticationMethod,
  z.ZodTypeDef,
  OutputAzureBlobAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputAzureBlobAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobAuthenticationMethod$ {
  /** @deprecated use `OutputAzureBlobAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureBlobAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputAzureBlobAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureBlobAuthenticationMethod$outboundSchema;
}

/** @internal */
export const BlobAccessTier$inboundSchema: z.ZodType<
  BlobAccessTier,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(BlobAccessTier),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const BlobAccessTier$outboundSchema: z.ZodType<
  BlobAccessTier,
  z.ZodTypeDef,
  BlobAccessTier
> = z.union([
  z.nativeEnum(BlobAccessTier),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlobAccessTier$ {
  /** @deprecated use `BlobAccessTier$inboundSchema` instead. */
  export const inboundSchema = BlobAccessTier$inboundSchema;
  /** @deprecated use `BlobAccessTier$outboundSchema` instead. */
  export const outboundSchema = BlobAccessTier$outboundSchema;
}

/** @internal */
export const OutputAzureBlobCompression$inboundSchema: z.ZodType<
  OutputAzureBlobCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureBlobCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureBlobCompression$outboundSchema: z.ZodType<
  OutputAzureBlobCompression,
  z.ZodTypeDef,
  OutputAzureBlobCompression
> = z.union([
  z.nativeEnum(OutputAzureBlobCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobCompression$ {
  /** @deprecated use `OutputAzureBlobCompression$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlobCompression$inboundSchema;
  /** @deprecated use `OutputAzureBlobCompression$outboundSchema` instead. */
  export const outboundSchema = OutputAzureBlobCompression$outboundSchema;
}

/** @internal */
export const OutputAzureBlobCompressionLevel$inboundSchema: z.ZodType<
  OutputAzureBlobCompressionLevel,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureBlobCompressionLevel),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureBlobCompressionLevel$outboundSchema: z.ZodType<
  OutputAzureBlobCompressionLevel,
  z.ZodTypeDef,
  OutputAzureBlobCompressionLevel
> = z.union([
  z.nativeEnum(OutputAzureBlobCompressionLevel),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobCompressionLevel$ {
  /** @deprecated use `OutputAzureBlobCompressionLevel$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlobCompressionLevel$inboundSchema;
  /** @deprecated use `OutputAzureBlobCompressionLevel$outboundSchema` instead. */
  export const outboundSchema = OutputAzureBlobCompressionLevel$outboundSchema;
}

/** @internal */
export const OutputAzureBlobParquetVersion$inboundSchema: z.ZodType<
  OutputAzureBlobParquetVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureBlobParquetVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureBlobParquetVersion$outboundSchema: z.ZodType<
  OutputAzureBlobParquetVersion,
  z.ZodTypeDef,
  OutputAzureBlobParquetVersion
> = z.union([
  z.nativeEnum(OutputAzureBlobParquetVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobParquetVersion$ {
  /** @deprecated use `OutputAzureBlobParquetVersion$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlobParquetVersion$inboundSchema;
  /** @deprecated use `OutputAzureBlobParquetVersion$outboundSchema` instead. */
  export const outboundSchema = OutputAzureBlobParquetVersion$outboundSchema;
}

/** @internal */
export const OutputAzureBlobDataPageVersion$inboundSchema: z.ZodType<
  OutputAzureBlobDataPageVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureBlobDataPageVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureBlobDataPageVersion$outboundSchema: z.ZodType<
  OutputAzureBlobDataPageVersion,
  z.ZodTypeDef,
  OutputAzureBlobDataPageVersion
> = z.union([
  z.nativeEnum(OutputAzureBlobDataPageVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobDataPageVersion$ {
  /** @deprecated use `OutputAzureBlobDataPageVersion$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlobDataPageVersion$inboundSchema;
  /** @deprecated use `OutputAzureBlobDataPageVersion$outboundSchema` instead. */
  export const outboundSchema = OutputAzureBlobDataPageVersion$outboundSchema;
}

/** @internal */
export const OutputAzureBlobKeyValueMetadatum$inboundSchema: z.ZodType<
  OutputAzureBlobKeyValueMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputAzureBlobKeyValueMetadatum$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const OutputAzureBlobKeyValueMetadatum$outboundSchema: z.ZodType<
  OutputAzureBlobKeyValueMetadatum$Outbound,
  z.ZodTypeDef,
  OutputAzureBlobKeyValueMetadatum
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobKeyValueMetadatum$ {
  /** @deprecated use `OutputAzureBlobKeyValueMetadatum$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlobKeyValueMetadatum$inboundSchema;
  /** @deprecated use `OutputAzureBlobKeyValueMetadatum$outboundSchema` instead. */
  export const outboundSchema = OutputAzureBlobKeyValueMetadatum$outboundSchema;
  /** @deprecated use `OutputAzureBlobKeyValueMetadatum$Outbound` instead. */
  export type Outbound = OutputAzureBlobKeyValueMetadatum$Outbound;
}

export function outputAzureBlobKeyValueMetadatumToJSON(
  outputAzureBlobKeyValueMetadatum: OutputAzureBlobKeyValueMetadatum,
): string {
  return JSON.stringify(
    OutputAzureBlobKeyValueMetadatum$outboundSchema.parse(
      outputAzureBlobKeyValueMetadatum,
    ),
  );
}

export function outputAzureBlobKeyValueMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<OutputAzureBlobKeyValueMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAzureBlobKeyValueMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAzureBlobKeyValueMetadatum' from JSON`,
  );
}

/** @internal */
export const OutputAzureBlobCertificate$inboundSchema: z.ZodType<
  OutputAzureBlobCertificate,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificateName: z.string(),
});

/** @internal */
export type OutputAzureBlobCertificate$Outbound = {
  certificateName: string;
};

/** @internal */
export const OutputAzureBlobCertificate$outboundSchema: z.ZodType<
  OutputAzureBlobCertificate$Outbound,
  z.ZodTypeDef,
  OutputAzureBlobCertificate
> = z.object({
  certificateName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlobCertificate$ {
  /** @deprecated use `OutputAzureBlobCertificate$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlobCertificate$inboundSchema;
  /** @deprecated use `OutputAzureBlobCertificate$outboundSchema` instead. */
  export const outboundSchema = OutputAzureBlobCertificate$outboundSchema;
  /** @deprecated use `OutputAzureBlobCertificate$Outbound` instead. */
  export type Outbound = OutputAzureBlobCertificate$Outbound;
}

export function outputAzureBlobCertificateToJSON(
  outputAzureBlobCertificate: OutputAzureBlobCertificate,
): string {
  return JSON.stringify(
    OutputAzureBlobCertificate$outboundSchema.parse(outputAzureBlobCertificate),
  );
}

export function outputAzureBlobCertificateFromJSON(
  jsonString: string,
): SafeParseResult<OutputAzureBlobCertificate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAzureBlobCertificate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAzureBlobCertificate' from JSON`,
  );
}

/** @internal */
export const OutputAzureBlob$inboundSchema: z.ZodType<
  OutputAzureBlob,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputAzureBlobType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  containerName: z.string(),
  createContainer: z.boolean().default(false),
  destPath: z.string().optional(),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  maxConcurrentFileParts: z.number().default(1),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputAzureBlobDataFormat$inboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputAzureBlobBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputAzureBlobDiskSpaceProtection$inboundSchema
    .default("block"),
  authType: OutputAzureBlobAuthenticationMethod$inboundSchema.default("manual"),
  storageClass: BlobAccessTier$inboundSchema.default("Inferred"),
  description: z.string().optional(),
  compress: OutputAzureBlobCompression$inboundSchema.default("gzip"),
  compressionLevel: OutputAzureBlobCompressionLevel$inboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputAzureBlobParquetVersion$inboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputAzureBlobDataPageVersion$inboundSchema.default(
    "DATA_PAGE_V2",
  ),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputAzureBlobKeyValueMetadatum$inboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
  connectionString: z.string().optional(),
  textSecret: z.string().optional(),
  storageAccountName: z.string().optional(),
  tenantId: z.string().optional(),
  clientId: z.string().optional(),
  azureCloud: z.string().optional(),
  endpointSuffix: z.string().optional(),
  clientTextSecret: z.string().optional(),
  certificate: z.lazy(() => OutputAzureBlobCertificate$inboundSchema)
    .optional(),
});

/** @internal */
export type OutputAzureBlob$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  containerName: string;
  createContainer: boolean;
  destPath?: string | undefined;
  stagePath: string;
  addIdToStagePath: boolean;
  maxConcurrentFileParts: number;
  removeEmptyDirs: boolean;
  partitionExpr: string;
  format: string;
  baseFileName: string;
  fileNameSuffix: string;
  maxFileSizeMB: number;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxOpenFiles: number;
  headerLine: string;
  writeHighWaterMark: number;
  onBackpressure: string;
  deadletterEnabled: boolean;
  onDiskFullBackpressure: string;
  authType: string;
  storageClass: string;
  description?: string | undefined;
  compress: string;
  compressionLevel: string;
  automaticSchema: boolean;
  parquetVersion: string;
  parquetDataPageVersion: string;
  parquetRowGroupLength: number;
  parquetPageSize: string;
  shouldLogInvalidRows?: boolean | undefined;
  keyValueMetadata?:
    | Array<OutputAzureBlobKeyValueMetadatum$Outbound>
    | undefined;
  enableStatistics: boolean;
  enableWritePageIndex: boolean;
  enablePageChecksum: boolean;
  emptyDirCleanupSec: number;
  deadletterPath: string;
  maxRetryNum: number;
  connectionString?: string | undefined;
  textSecret?: string | undefined;
  storageAccountName?: string | undefined;
  tenantId?: string | undefined;
  clientId?: string | undefined;
  azureCloud?: string | undefined;
  endpointSuffix?: string | undefined;
  clientTextSecret?: string | undefined;
  certificate?: OutputAzureBlobCertificate$Outbound | undefined;
};

/** @internal */
export const OutputAzureBlob$outboundSchema: z.ZodType<
  OutputAzureBlob$Outbound,
  z.ZodTypeDef,
  OutputAzureBlob
> = z.object({
  id: z.string().optional(),
  type: OutputAzureBlobType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  containerName: z.string(),
  createContainer: z.boolean().default(false),
  destPath: z.string().optional(),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  maxConcurrentFileParts: z.number().default(1),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputAzureBlobDataFormat$outboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputAzureBlobBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputAzureBlobDiskSpaceProtection$outboundSchema
    .default("block"),
  authType: OutputAzureBlobAuthenticationMethod$outboundSchema.default(
    "manual",
  ),
  storageClass: BlobAccessTier$outboundSchema.default("Inferred"),
  description: z.string().optional(),
  compress: OutputAzureBlobCompression$outboundSchema.default("gzip"),
  compressionLevel: OutputAzureBlobCompressionLevel$outboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputAzureBlobParquetVersion$outboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputAzureBlobDataPageVersion$outboundSchema.default(
    "DATA_PAGE_V2",
  ),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputAzureBlobKeyValueMetadatum$outboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
  connectionString: z.string().optional(),
  textSecret: z.string().optional(),
  storageAccountName: z.string().optional(),
  tenantId: z.string().optional(),
  clientId: z.string().optional(),
  azureCloud: z.string().optional(),
  endpointSuffix: z.string().optional(),
  clientTextSecret: z.string().optional(),
  certificate: z.lazy(() => OutputAzureBlobCertificate$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureBlob$ {
  /** @deprecated use `OutputAzureBlob$inboundSchema` instead. */
  export const inboundSchema = OutputAzureBlob$inboundSchema;
  /** @deprecated use `OutputAzureBlob$outboundSchema` instead. */
  export const outboundSchema = OutputAzureBlob$outboundSchema;
  /** @deprecated use `OutputAzureBlob$Outbound` instead. */
  export type Outbound = OutputAzureBlob$Outbound;
}

export function outputAzureBlobToJSON(
  outputAzureBlob: OutputAzureBlob,
): string {
  return JSON.stringify(OutputAzureBlob$outboundSchema.parse(outputAzureBlob));
}

export function outputAzureBlobFromJSON(
  jsonString: string,
): SafeParseResult<OutputAzureBlob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAzureBlob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAzureBlob' from JSON`,
  );
}
