/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputDynatraceHttpType = {
  DynatraceHttp: "dynatrace_http",
} as const;
export type OutputDynatraceHttpType = ClosedEnum<
  typeof OutputDynatraceHttpType
>;

/**
 * The method to use when sending events
 */
export const OutputDynatraceHttpMethod = {
  Post: "POST",
  Put: "PUT",
  Patch: "PATCH",
} as const;
/**
 * The method to use when sending events
 */
export type OutputDynatraceHttpMethod = OpenEnum<
  typeof OutputDynatraceHttpMethod
>;

export type OutputDynatraceHttpExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputDynatraceHttpFailedRequestLoggingMode = {
  /**
   * Payload
   */
  Payload: "payload",
  /**
   * Payload + Headers
   */
  PayloadAndHeaders: "payloadAndHeaders",
  /**
   * None
   */
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputDynatraceHttpFailedRequestLoggingMode = OpenEnum<
  typeof OutputDynatraceHttpFailedRequestLoggingMode
>;

export type OutputDynatraceHttpResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputDynatraceHttpTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputDynatraceHttpBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputDynatraceHttpBackpressureBehavior = OpenEnum<
  typeof OutputDynatraceHttpBackpressureBehavior
>;

export const OutputDynatraceHttpAuthenticationType = {
  /**
   * Auth token
   */
  Token: "token",
  /**
   * Token (text secret)
   */
  TextSecret: "textSecret",
} as const;
export type OutputDynatraceHttpAuthenticationType = OpenEnum<
  typeof OutputDynatraceHttpAuthenticationType
>;

/**
 * How to format events before sending. Defaults to JSON. Plaintext is not currently supported.
 */
export const OutputDynatraceHttpFormat = {
  /**
   * JSON
   */
  JsonArray: "json_array",
  /**
   * Plaintext
   */
  Plaintext: "plaintext",
} as const;
/**
 * How to format events before sending. Defaults to JSON. Plaintext is not currently supported.
 */
export type OutputDynatraceHttpFormat = OpenEnum<
  typeof OutputDynatraceHttpFormat
>;

export const Endpoint = {
  /**
   * Cloud
   */
  Cloud: "cloud",
  /**
   * ActiveGate
   */
  ActiveGate: "activeGate",
  /**
   * Manual
   */
  Manual: "manual",
} as const;
export type Endpoint = OpenEnum<typeof Endpoint>;

export const TelemetryType = {
  /**
   * Logs
   */
  Logs: "logs",
  /**
   * Metrics
   */
  Metrics: "metrics",
} as const;
export type TelemetryType = OpenEnum<typeof TelemetryType>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputDynatraceHttpCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputDynatraceHttpCompression = OpenEnum<
  typeof OutputDynatraceHttpCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputDynatraceHttpQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputDynatraceHttpQueueFullBehavior = OpenEnum<
  typeof OutputDynatraceHttpQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputDynatraceHttpMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Backpressure: "backpressure",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputDynatraceHttpMode = OpenEnum<typeof OutputDynatraceHttpMode>;

export type OutputDynatraceHttpPqControls = {};

export type OutputDynatraceHttp = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputDynatraceHttpType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The method to use when sending events
   */
  method?: OutputDynatraceHttpMethod | undefined;
  /**
   * Disable to close the connection immediately after sending the outgoing request
   */
  keepAlive?: boolean | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events. You can also add headers dynamically on a per-event basis in the __headers field, as explained in [Cribl Docs](https://docs.cribl.io/stream/destinations-webhook/#internal-fields).
   */
  extraHttpHeaders?: Array<OutputDynatraceHttpExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputDynatraceHttpFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputDynatraceHttpResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?: OutputDynatraceHttpTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputDynatraceHttpBackpressureBehavior | undefined;
  authType?: OutputDynatraceHttpAuthenticationType | undefined;
  /**
   * How to format events before sending. Defaults to JSON. Plaintext is not currently supported.
   */
  format?: OutputDynatraceHttpFormat | undefined;
  endpoint?: Endpoint | undefined;
  telemetryType?: TelemetryType | undefined;
  /**
   * Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced.
   */
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputDynatraceHttpCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputDynatraceHttpQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputDynatraceHttpMode | undefined;
  pqControls?: OutputDynatraceHttpPqControls | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * ID of the environment to send to
   */
  environmentId?: string | undefined;
  /**
   * ActiveGate domain with Log analytics collector module enabled. For example https://{activeGate-domain}:9999/e/{environment-id}/api/v2/logs/ingest.
   */
  activeGateDomain?: string | undefined;
  /**
   * URL to send events to. Can be overwritten by an event's __url field.
   */
  url?: string | undefined;
};

/** @internal */
export const OutputDynatraceHttpType$inboundSchema: z.ZodNativeEnum<
  typeof OutputDynatraceHttpType
> = z.nativeEnum(OutputDynatraceHttpType);

/** @internal */
export const OutputDynatraceHttpType$outboundSchema: z.ZodNativeEnum<
  typeof OutputDynatraceHttpType
> = OutputDynatraceHttpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpType$ {
  /** @deprecated use `OutputDynatraceHttpType$inboundSchema` instead. */
  export const inboundSchema = OutputDynatraceHttpType$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpType$outboundSchema` instead. */
  export const outboundSchema = OutputDynatraceHttpType$outboundSchema;
}

/** @internal */
export const OutputDynatraceHttpMethod$inboundSchema: z.ZodType<
  OutputDynatraceHttpMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDynatraceHttpMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDynatraceHttpMethod$outboundSchema: z.ZodType<
  OutputDynatraceHttpMethod,
  z.ZodTypeDef,
  OutputDynatraceHttpMethod
> = z.union([
  z.nativeEnum(OutputDynatraceHttpMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpMethod$ {
  /** @deprecated use `OutputDynatraceHttpMethod$inboundSchema` instead. */
  export const inboundSchema = OutputDynatraceHttpMethod$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpMethod$outboundSchema` instead. */
  export const outboundSchema = OutputDynatraceHttpMethod$outboundSchema;
}

/** @internal */
export const OutputDynatraceHttpExtraHttpHeader$inboundSchema: z.ZodType<
  OutputDynatraceHttpExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputDynatraceHttpExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputDynatraceHttpExtraHttpHeader$outboundSchema: z.ZodType<
  OutputDynatraceHttpExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputDynatraceHttpExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpExtraHttpHeader$ {
  /** @deprecated use `OutputDynatraceHttpExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputDynatraceHttpExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema =
    OutputDynatraceHttpExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputDynatraceHttpExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputDynatraceHttpExtraHttpHeader$Outbound;
}

export function outputDynatraceHttpExtraHttpHeaderToJSON(
  outputDynatraceHttpExtraHttpHeader: OutputDynatraceHttpExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputDynatraceHttpExtraHttpHeader$outboundSchema.parse(
      outputDynatraceHttpExtraHttpHeader,
    ),
  );
}

export function outputDynatraceHttpExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputDynatraceHttpExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputDynatraceHttpExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputDynatraceHttpExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputDynatraceHttpFailedRequestLoggingMode$inboundSchema:
  z.ZodType<
    OutputDynatraceHttpFailedRequestLoggingMode,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputDynatraceHttpFailedRequestLoggingMode),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputDynatraceHttpFailedRequestLoggingMode$outboundSchema:
  z.ZodType<
    OutputDynatraceHttpFailedRequestLoggingMode,
    z.ZodTypeDef,
    OutputDynatraceHttpFailedRequestLoggingMode
  > = z.union([
    z.nativeEnum(OutputDynatraceHttpFailedRequestLoggingMode),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpFailedRequestLoggingMode$ {
  /** @deprecated use `OutputDynatraceHttpFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputDynatraceHttpFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputDynatraceHttpFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputDynatraceHttpResponseRetrySetting$inboundSchema: z.ZodType<
  OutputDynatraceHttpResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputDynatraceHttpResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputDynatraceHttpResponseRetrySetting$outboundSchema: z.ZodType<
  OutputDynatraceHttpResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputDynatraceHttpResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpResponseRetrySetting$ {
  /** @deprecated use `OutputDynatraceHttpResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputDynatraceHttpResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputDynatraceHttpResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputDynatraceHttpResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputDynatraceHttpResponseRetrySetting$Outbound;
}

export function outputDynatraceHttpResponseRetrySettingToJSON(
  outputDynatraceHttpResponseRetrySetting:
    OutputDynatraceHttpResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputDynatraceHttpResponseRetrySetting$outboundSchema.parse(
      outputDynatraceHttpResponseRetrySetting,
    ),
  );
}

export function outputDynatraceHttpResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputDynatraceHttpResponseRetrySetting,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputDynatraceHttpResponseRetrySetting$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputDynatraceHttpResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputDynatraceHttpTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputDynatraceHttpTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputDynatraceHttpTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputDynatraceHttpTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputDynatraceHttpTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputDynatraceHttpTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpTimeoutRetrySettings$ {
  /** @deprecated use `OutputDynatraceHttpTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputDynatraceHttpTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputDynatraceHttpTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputDynatraceHttpTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputDynatraceHttpTimeoutRetrySettings$Outbound;
}

export function outputDynatraceHttpTimeoutRetrySettingsToJSON(
  outputDynatraceHttpTimeoutRetrySettings:
    OutputDynatraceHttpTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputDynatraceHttpTimeoutRetrySettings$outboundSchema.parse(
      outputDynatraceHttpTimeoutRetrySettings,
    ),
  );
}

export function outputDynatraceHttpTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputDynatraceHttpTimeoutRetrySettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputDynatraceHttpTimeoutRetrySettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputDynatraceHttpTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputDynatraceHttpBackpressureBehavior$inboundSchema: z.ZodType<
  OutputDynatraceHttpBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDynatraceHttpBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDynatraceHttpBackpressureBehavior$outboundSchema: z.ZodType<
  OutputDynatraceHttpBackpressureBehavior,
  z.ZodTypeDef,
  OutputDynatraceHttpBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputDynatraceHttpBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpBackpressureBehavior$ {
  /** @deprecated use `OutputDynatraceHttpBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputDynatraceHttpBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputDynatraceHttpBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputDynatraceHttpAuthenticationType$inboundSchema: z.ZodType<
  OutputDynatraceHttpAuthenticationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDynatraceHttpAuthenticationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDynatraceHttpAuthenticationType$outboundSchema: z.ZodType<
  OutputDynatraceHttpAuthenticationType,
  z.ZodTypeDef,
  OutputDynatraceHttpAuthenticationType
> = z.union([
  z.nativeEnum(OutputDynatraceHttpAuthenticationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpAuthenticationType$ {
  /** @deprecated use `OutputDynatraceHttpAuthenticationType$inboundSchema` instead. */
  export const inboundSchema =
    OutputDynatraceHttpAuthenticationType$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpAuthenticationType$outboundSchema` instead. */
  export const outboundSchema =
    OutputDynatraceHttpAuthenticationType$outboundSchema;
}

/** @internal */
export const OutputDynatraceHttpFormat$inboundSchema: z.ZodType<
  OutputDynatraceHttpFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDynatraceHttpFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDynatraceHttpFormat$outboundSchema: z.ZodType<
  OutputDynatraceHttpFormat,
  z.ZodTypeDef,
  OutputDynatraceHttpFormat
> = z.union([
  z.nativeEnum(OutputDynatraceHttpFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpFormat$ {
  /** @deprecated use `OutputDynatraceHttpFormat$inboundSchema` instead. */
  export const inboundSchema = OutputDynatraceHttpFormat$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpFormat$outboundSchema` instead. */
  export const outboundSchema = OutputDynatraceHttpFormat$outboundSchema;
}

/** @internal */
export const Endpoint$inboundSchema: z.ZodType<
  Endpoint,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Endpoint),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Endpoint$outboundSchema: z.ZodType<
  Endpoint,
  z.ZodTypeDef,
  Endpoint
> = z.union([
  z.nativeEnum(Endpoint),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Endpoint$ {
  /** @deprecated use `Endpoint$inboundSchema` instead. */
  export const inboundSchema = Endpoint$inboundSchema;
  /** @deprecated use `Endpoint$outboundSchema` instead. */
  export const outboundSchema = Endpoint$outboundSchema;
}

/** @internal */
export const TelemetryType$inboundSchema: z.ZodType<
  TelemetryType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TelemetryType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TelemetryType$outboundSchema: z.ZodType<
  TelemetryType,
  z.ZodTypeDef,
  TelemetryType
> = z.union([
  z.nativeEnum(TelemetryType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TelemetryType$ {
  /** @deprecated use `TelemetryType$inboundSchema` instead. */
  export const inboundSchema = TelemetryType$inboundSchema;
  /** @deprecated use `TelemetryType$outboundSchema` instead. */
  export const outboundSchema = TelemetryType$outboundSchema;
}

/** @internal */
export const OutputDynatraceHttpCompression$inboundSchema: z.ZodType<
  OutputDynatraceHttpCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDynatraceHttpCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDynatraceHttpCompression$outboundSchema: z.ZodType<
  OutputDynatraceHttpCompression,
  z.ZodTypeDef,
  OutputDynatraceHttpCompression
> = z.union([
  z.nativeEnum(OutputDynatraceHttpCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpCompression$ {
  /** @deprecated use `OutputDynatraceHttpCompression$inboundSchema` instead. */
  export const inboundSchema = OutputDynatraceHttpCompression$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpCompression$outboundSchema` instead. */
  export const outboundSchema = OutputDynatraceHttpCompression$outboundSchema;
}

/** @internal */
export const OutputDynatraceHttpQueueFullBehavior$inboundSchema: z.ZodType<
  OutputDynatraceHttpQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDynatraceHttpQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDynatraceHttpQueueFullBehavior$outboundSchema: z.ZodType<
  OutputDynatraceHttpQueueFullBehavior,
  z.ZodTypeDef,
  OutputDynatraceHttpQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputDynatraceHttpQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpQueueFullBehavior$ {
  /** @deprecated use `OutputDynatraceHttpQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputDynatraceHttpQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputDynatraceHttpQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputDynatraceHttpMode$inboundSchema: z.ZodType<
  OutputDynatraceHttpMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDynatraceHttpMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDynatraceHttpMode$outboundSchema: z.ZodType<
  OutputDynatraceHttpMode,
  z.ZodTypeDef,
  OutputDynatraceHttpMode
> = z.union([
  z.nativeEnum(OutputDynatraceHttpMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpMode$ {
  /** @deprecated use `OutputDynatraceHttpMode$inboundSchema` instead. */
  export const inboundSchema = OutputDynatraceHttpMode$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpMode$outboundSchema` instead. */
  export const outboundSchema = OutputDynatraceHttpMode$outboundSchema;
}

/** @internal */
export const OutputDynatraceHttpPqControls$inboundSchema: z.ZodType<
  OutputDynatraceHttpPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputDynatraceHttpPqControls$Outbound = {};

/** @internal */
export const OutputDynatraceHttpPqControls$outboundSchema: z.ZodType<
  OutputDynatraceHttpPqControls$Outbound,
  z.ZodTypeDef,
  OutputDynatraceHttpPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttpPqControls$ {
  /** @deprecated use `OutputDynatraceHttpPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputDynatraceHttpPqControls$inboundSchema;
  /** @deprecated use `OutputDynatraceHttpPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputDynatraceHttpPqControls$outboundSchema;
  /** @deprecated use `OutputDynatraceHttpPqControls$Outbound` instead. */
  export type Outbound = OutputDynatraceHttpPqControls$Outbound;
}

export function outputDynatraceHttpPqControlsToJSON(
  outputDynatraceHttpPqControls: OutputDynatraceHttpPqControls,
): string {
  return JSON.stringify(
    OutputDynatraceHttpPqControls$outboundSchema.parse(
      outputDynatraceHttpPqControls,
    ),
  );
}

export function outputDynatraceHttpPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputDynatraceHttpPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputDynatraceHttpPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputDynatraceHttpPqControls' from JSON`,
  );
}

/** @internal */
export const OutputDynatraceHttp$inboundSchema: z.ZodType<
  OutputDynatraceHttp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputDynatraceHttpType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  method: OutputDynatraceHttpMethod$inboundSchema.default("POST"),
  keepAlive: z.boolean().default(true),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputDynatraceHttpExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputDynatraceHttpFailedRequestLoggingMode$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputDynatraceHttpResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputDynatraceHttpTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputDynatraceHttpBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  authType: OutputDynatraceHttpAuthenticationType$inboundSchema.default(
    "token",
  ),
  format: OutputDynatraceHttpFormat$inboundSchema.default("json_array"),
  endpoint: Endpoint$inboundSchema.default("cloud"),
  telemetryType: TelemetryType$inboundSchema.default("logs"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputDynatraceHttpCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputDynatraceHttpQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputDynatraceHttpMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputDynatraceHttpPqControls$inboundSchema)
    .optional(),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  environmentId: z.string().optional(),
  activeGateDomain: z.string().optional(),
  url: z.string().optional(),
});

/** @internal */
export type OutputDynatraceHttp$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  method: string;
  keepAlive: boolean;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?:
    | Array<OutputDynatraceHttpExtraHttpHeader$Outbound>
    | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputDynatraceHttpResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputDynatraceHttpTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  authType: string;
  format: string;
  endpoint: string;
  telemetryType: string;
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputDynatraceHttpPqControls$Outbound | undefined;
  token?: string | undefined;
  textSecret?: string | undefined;
  environmentId?: string | undefined;
  activeGateDomain?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const OutputDynatraceHttp$outboundSchema: z.ZodType<
  OutputDynatraceHttp$Outbound,
  z.ZodTypeDef,
  OutputDynatraceHttp
> = z.object({
  id: z.string().optional(),
  type: OutputDynatraceHttpType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  method: OutputDynatraceHttpMethod$outboundSchema.default("POST"),
  keepAlive: z.boolean().default(true),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputDynatraceHttpExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputDynatraceHttpFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputDynatraceHttpResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputDynatraceHttpTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputDynatraceHttpBackpressureBehavior$outboundSchema
    .default("block"),
  authType: OutputDynatraceHttpAuthenticationType$outboundSchema.default(
    "token",
  ),
  format: OutputDynatraceHttpFormat$outboundSchema.default("json_array"),
  endpoint: Endpoint$outboundSchema.default("cloud"),
  telemetryType: TelemetryType$outboundSchema.default("logs"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputDynatraceHttpCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputDynatraceHttpQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputDynatraceHttpMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputDynatraceHttpPqControls$outboundSchema)
    .optional(),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  environmentId: z.string().optional(),
  activeGateDomain: z.string().optional(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDynatraceHttp$ {
  /** @deprecated use `OutputDynatraceHttp$inboundSchema` instead. */
  export const inboundSchema = OutputDynatraceHttp$inboundSchema;
  /** @deprecated use `OutputDynatraceHttp$outboundSchema` instead. */
  export const outboundSchema = OutputDynatraceHttp$outboundSchema;
  /** @deprecated use `OutputDynatraceHttp$Outbound` instead. */
  export type Outbound = OutputDynatraceHttp$Outbound;
}

export function outputDynatraceHttpToJSON(
  outputDynatraceHttp: OutputDynatraceHttp,
): string {
  return JSON.stringify(
    OutputDynatraceHttp$outboundSchema.parse(outputDynatraceHttp),
  );
}

export function outputDynatraceHttpFromJSON(
  jsonString: string,
): SafeParseResult<OutputDynatraceHttp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputDynatraceHttp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputDynatraceHttp' from JSON`,
  );
}
