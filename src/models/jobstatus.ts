/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type JobStatus = {
  reason?: { [k: string]: any } | undefined;
  state: { [k: string]: any };
};

/** @internal */
export const JobStatus$inboundSchema: z.ZodType<
  JobStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: z.record(z.any()).optional(),
  state: z.record(z.any()),
});

/** @internal */
export type JobStatus$Outbound = {
  reason?: { [k: string]: any } | undefined;
  state: { [k: string]: any };
};

/** @internal */
export const JobStatus$outboundSchema: z.ZodType<
  JobStatus$Outbound,
  z.ZodTypeDef,
  JobStatus
> = z.object({
  reason: z.record(z.any()).optional(),
  state: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobStatus$ {
  /** @deprecated use `JobStatus$inboundSchema` instead. */
  export const inboundSchema = JobStatus$inboundSchema;
  /** @deprecated use `JobStatus$outboundSchema` instead. */
  export const outboundSchema = JobStatus$outboundSchema;
  /** @deprecated use `JobStatus$Outbound` instead. */
  export type Outbound = JobStatus$Outbound;
}

export function jobStatusToJSON(jobStatus: JobStatus): string {
  return JSON.stringify(JobStatus$outboundSchema.parse(jobStatus));
}

export function jobStatusFromJSON(
  jsonString: string,
): SafeParseResult<JobStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobStatus' from JSON`,
  );
}
