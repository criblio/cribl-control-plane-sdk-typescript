/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * State of the Job
 */
export const State = {
  Initializing: 0,
  Pending: 1,
  Running: 2,
  Paused: 3,
  Cancelled: 4,
  Finished: 5,
  Failed: 6,
  Orphaned: 7,
  Unknown: 8,
  Length: 9,
} as const;
/**
 * State of the Job
 */
export type State = OpenEnum<typeof State>;

export type JobStatus = {
  reason?: { [k: string]: any } | undefined;
  /**
   * State of the Job
   */
  state: State;
};

/** @internal */
export const State$inboundSchema: z.ZodType<State, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(State),
    z.number().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const State$outboundSchema: z.ZodType<State, z.ZodTypeDef, State> = z
  .union([
    z.nativeEnum(State),
    z.number().and(z.custom<Unrecognized<number>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const JobStatus$inboundSchema: z.ZodType<
  JobStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: z.record(z.any()).optional(),
  state: State$inboundSchema,
});

/** @internal */
export type JobStatus$Outbound = {
  reason?: { [k: string]: any } | undefined;
  state: number;
};

/** @internal */
export const JobStatus$outboundSchema: z.ZodType<
  JobStatus$Outbound,
  z.ZodTypeDef,
  JobStatus
> = z.object({
  reason: z.record(z.any()).optional(),
  state: State$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobStatus$ {
  /** @deprecated use `JobStatus$inboundSchema` instead. */
  export const inboundSchema = JobStatus$inboundSchema;
  /** @deprecated use `JobStatus$outboundSchema` instead. */
  export const outboundSchema = JobStatus$outboundSchema;
  /** @deprecated use `JobStatus$Outbound` instead. */
  export type Outbound = JobStatus$Outbound;
}

export function jobStatusToJSON(jobStatus: JobStatus): string {
  return JSON.stringify(JobStatus$outboundSchema.parse(jobStatus));
}

export function jobStatusFromJSON(
  jsonString: string,
): SafeParseResult<JobStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobStatus' from JSON`,
  );
}
