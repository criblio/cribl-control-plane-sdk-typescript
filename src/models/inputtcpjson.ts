/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputTcpjsonType = {
  Tcpjson: "tcpjson",
} as const;
export type InputTcpjsonType = ClosedEnum<typeof InputTcpjsonType>;

export type InputTcpjsonConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputTcpjsonMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputTcpjsonMode = ClosedEnum<typeof InputTcpjsonMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputTcpjsonCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputTcpjsonCompression = ClosedEnum<
  typeof InputTcpjsonCompression
>;

export type InputTcpjsonPqControls = {};

export type InputTcpjsonPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputTcpjsonMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputTcpjsonCompression | undefined;
  pqControls?: InputTcpjsonPqControls | undefined;
};

export const InputTcpjsonMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputTcpjsonMinimumTLSVersion = ClosedEnum<
  typeof InputTcpjsonMinimumTLSVersion
>;

export const InputTcpjsonMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputTcpjsonMaximumTLSVersion = ClosedEnum<
  typeof InputTcpjsonMaximumTLSVersion
>;

export type InputTcpjsonTLSSettingsServerSide = {
  disabled?: boolean | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: InputTcpjsonMinimumTLSVersion | undefined;
  maxVersion?: InputTcpjsonMaximumTLSVersion | undefined;
};

export type InputTcpjsonMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const InputTcpjsonAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type InputTcpjsonAuthenticationMethod = ClosedEnum<
  typeof InputTcpjsonAuthenticationMethod
>;

export type InputTcpjson = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputTcpjsonType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputTcpjsonConnection> | undefined;
  pq?: InputTcpjsonPq | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  tls?: InputTcpjsonTLSSettingsServerSide | undefined;
  /**
   * Regex matching IP addresses that are allowed to establish a connection
   */
  ipWhitelistRegex?: string | undefined;
  /**
   * Maximum number of active connections allowed per Worker Process. Use 0 for unlimited.
   */
  maxActiveCxn?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. After this time, the connection will be closed. Leave at 0 for no inactive socket monitoring.
   */
  socketIdleTimeout?: number | undefined;
  /**
   * How long the server will wait after initiating a closure for a client to close its end of the connection. If the client doesn't close the connection within this time, the server will forcefully terminate the socket to prevent resource leaks and ensure efficient connection cleanup and system stability. Leave at 0 for no inactive socket monitoring.
   */
  socketEndingMaxWait?: number | undefined;
  /**
   * The maximum duration a socket can remain open, even if active. This helps manage resources and mitigate issues caused by TCP pinning. Set to 0 to disable.
   */
  socketMaxLifespan?: number | undefined;
  /**
   * Enable if the connection is proxied by a device that supports proxy protocol v1 or v2
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputTcpjsonMetadatum> | undefined;
  /**
   * Load balance traffic across all Worker Processes
   */
  enableLoadBalancing?: boolean | undefined;
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: InputTcpjsonAuthenticationMethod | undefined;
  description?: string | undefined;
  /**
   * Shared secret to be provided by any client (in authToken header field). If empty, unauthorized access is permitted.
   */
  authToken?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
};

/** @internal */
export const InputTcpjsonType$inboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonType
> = z.nativeEnum(InputTcpjsonType);

/** @internal */
export const InputTcpjsonType$outboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonType
> = InputTcpjsonType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonType$ {
  /** @deprecated use `InputTcpjsonType$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonType$inboundSchema;
  /** @deprecated use `InputTcpjsonType$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonType$outboundSchema;
}

/** @internal */
export const InputTcpjsonConnection$inboundSchema: z.ZodType<
  InputTcpjsonConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputTcpjsonConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputTcpjsonConnection$outboundSchema: z.ZodType<
  InputTcpjsonConnection$Outbound,
  z.ZodTypeDef,
  InputTcpjsonConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonConnection$ {
  /** @deprecated use `InputTcpjsonConnection$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonConnection$inboundSchema;
  /** @deprecated use `InputTcpjsonConnection$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonConnection$outboundSchema;
  /** @deprecated use `InputTcpjsonConnection$Outbound` instead. */
  export type Outbound = InputTcpjsonConnection$Outbound;
}

export function inputTcpjsonConnectionToJSON(
  inputTcpjsonConnection: InputTcpjsonConnection,
): string {
  return JSON.stringify(
    InputTcpjsonConnection$outboundSchema.parse(inputTcpjsonConnection),
  );
}

export function inputTcpjsonConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputTcpjsonConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTcpjsonConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTcpjsonConnection' from JSON`,
  );
}

/** @internal */
export const InputTcpjsonMode$inboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonMode
> = z.nativeEnum(InputTcpjsonMode);

/** @internal */
export const InputTcpjsonMode$outboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonMode
> = InputTcpjsonMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonMode$ {
  /** @deprecated use `InputTcpjsonMode$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonMode$inboundSchema;
  /** @deprecated use `InputTcpjsonMode$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonMode$outboundSchema;
}

/** @internal */
export const InputTcpjsonCompression$inboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonCompression
> = z.nativeEnum(InputTcpjsonCompression);

/** @internal */
export const InputTcpjsonCompression$outboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonCompression
> = InputTcpjsonCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonCompression$ {
  /** @deprecated use `InputTcpjsonCompression$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonCompression$inboundSchema;
  /** @deprecated use `InputTcpjsonCompression$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonCompression$outboundSchema;
}

/** @internal */
export const InputTcpjsonPqControls$inboundSchema: z.ZodType<
  InputTcpjsonPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputTcpjsonPqControls$Outbound = {};

/** @internal */
export const InputTcpjsonPqControls$outboundSchema: z.ZodType<
  InputTcpjsonPqControls$Outbound,
  z.ZodTypeDef,
  InputTcpjsonPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonPqControls$ {
  /** @deprecated use `InputTcpjsonPqControls$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonPqControls$inboundSchema;
  /** @deprecated use `InputTcpjsonPqControls$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonPqControls$outboundSchema;
  /** @deprecated use `InputTcpjsonPqControls$Outbound` instead. */
  export type Outbound = InputTcpjsonPqControls$Outbound;
}

export function inputTcpjsonPqControlsToJSON(
  inputTcpjsonPqControls: InputTcpjsonPqControls,
): string {
  return JSON.stringify(
    InputTcpjsonPqControls$outboundSchema.parse(inputTcpjsonPqControls),
  );
}

export function inputTcpjsonPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputTcpjsonPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTcpjsonPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTcpjsonPqControls' from JSON`,
  );
}

/** @internal */
export const InputTcpjsonPq$inboundSchema: z.ZodType<
  InputTcpjsonPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputTcpjsonMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputTcpjsonCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputTcpjsonPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputTcpjsonPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputTcpjsonPqControls$Outbound | undefined;
};

/** @internal */
export const InputTcpjsonPq$outboundSchema: z.ZodType<
  InputTcpjsonPq$Outbound,
  z.ZodTypeDef,
  InputTcpjsonPq
> = z.object({
  mode: InputTcpjsonMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputTcpjsonCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputTcpjsonPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonPq$ {
  /** @deprecated use `InputTcpjsonPq$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonPq$inboundSchema;
  /** @deprecated use `InputTcpjsonPq$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonPq$outboundSchema;
  /** @deprecated use `InputTcpjsonPq$Outbound` instead. */
  export type Outbound = InputTcpjsonPq$Outbound;
}

export function inputTcpjsonPqToJSON(inputTcpjsonPq: InputTcpjsonPq): string {
  return JSON.stringify(InputTcpjsonPq$outboundSchema.parse(inputTcpjsonPq));
}

export function inputTcpjsonPqFromJSON(
  jsonString: string,
): SafeParseResult<InputTcpjsonPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTcpjsonPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTcpjsonPq' from JSON`,
  );
}

/** @internal */
export const InputTcpjsonMinimumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonMinimumTLSVersion
> = z.nativeEnum(InputTcpjsonMinimumTLSVersion);

/** @internal */
export const InputTcpjsonMinimumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonMinimumTLSVersion
> = InputTcpjsonMinimumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonMinimumTLSVersion$ {
  /** @deprecated use `InputTcpjsonMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputTcpjsonMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputTcpjsonMaximumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonMaximumTLSVersion
> = z.nativeEnum(InputTcpjsonMaximumTLSVersion);

/** @internal */
export const InputTcpjsonMaximumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonMaximumTLSVersion
> = InputTcpjsonMaximumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonMaximumTLSVersion$ {
  /** @deprecated use `InputTcpjsonMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputTcpjsonMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputTcpjsonTLSSettingsServerSide$inboundSchema: z.ZodType<
  InputTcpjsonTLSSettingsServerSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputTcpjsonMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputTcpjsonMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputTcpjsonTLSSettingsServerSide$Outbound = {
  disabled: boolean;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  requestCert: boolean;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputTcpjsonTLSSettingsServerSide$outboundSchema: z.ZodType<
  InputTcpjsonTLSSettingsServerSide$Outbound,
  z.ZodTypeDef,
  InputTcpjsonTLSSettingsServerSide
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputTcpjsonMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputTcpjsonMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonTLSSettingsServerSide$ {
  /** @deprecated use `InputTcpjsonTLSSettingsServerSide$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonTLSSettingsServerSide$inboundSchema;
  /** @deprecated use `InputTcpjsonTLSSettingsServerSide$outboundSchema` instead. */
  export const outboundSchema =
    InputTcpjsonTLSSettingsServerSide$outboundSchema;
  /** @deprecated use `InputTcpjsonTLSSettingsServerSide$Outbound` instead. */
  export type Outbound = InputTcpjsonTLSSettingsServerSide$Outbound;
}

export function inputTcpjsonTLSSettingsServerSideToJSON(
  inputTcpjsonTLSSettingsServerSide: InputTcpjsonTLSSettingsServerSide,
): string {
  return JSON.stringify(
    InputTcpjsonTLSSettingsServerSide$outboundSchema.parse(
      inputTcpjsonTLSSettingsServerSide,
    ),
  );
}

export function inputTcpjsonTLSSettingsServerSideFromJSON(
  jsonString: string,
): SafeParseResult<InputTcpjsonTLSSettingsServerSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTcpjsonTLSSettingsServerSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTcpjsonTLSSettingsServerSide' from JSON`,
  );
}

/** @internal */
export const InputTcpjsonMetadatum$inboundSchema: z.ZodType<
  InputTcpjsonMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputTcpjsonMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputTcpjsonMetadatum$outboundSchema: z.ZodType<
  InputTcpjsonMetadatum$Outbound,
  z.ZodTypeDef,
  InputTcpjsonMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonMetadatum$ {
  /** @deprecated use `InputTcpjsonMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonMetadatum$inboundSchema;
  /** @deprecated use `InputTcpjsonMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonMetadatum$outboundSchema;
  /** @deprecated use `InputTcpjsonMetadatum$Outbound` instead. */
  export type Outbound = InputTcpjsonMetadatum$Outbound;
}

export function inputTcpjsonMetadatumToJSON(
  inputTcpjsonMetadatum: InputTcpjsonMetadatum,
): string {
  return JSON.stringify(
    InputTcpjsonMetadatum$outboundSchema.parse(inputTcpjsonMetadatum),
  );
}

export function inputTcpjsonMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputTcpjsonMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTcpjsonMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTcpjsonMetadatum' from JSON`,
  );
}

/** @internal */
export const InputTcpjsonAuthenticationMethod$inboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonAuthenticationMethod
> = z.nativeEnum(InputTcpjsonAuthenticationMethod);

/** @internal */
export const InputTcpjsonAuthenticationMethod$outboundSchema: z.ZodNativeEnum<
  typeof InputTcpjsonAuthenticationMethod
> = InputTcpjsonAuthenticationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjsonAuthenticationMethod$ {
  /** @deprecated use `InputTcpjsonAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = InputTcpjsonAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputTcpjsonAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = InputTcpjsonAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputTcpjson$inboundSchema: z.ZodType<
  InputTcpjson,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputTcpjsonType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputTcpjsonConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputTcpjsonPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputTcpjsonTLSSettingsServerSide$inboundSchema).optional(),
  ipWhitelistRegex: z.string().default("/.*/"),
  maxActiveCxn: z.number().default(1000),
  socketIdleTimeout: z.number().default(0),
  socketEndingMaxWait: z.number().default(30),
  socketMaxLifespan: z.number().default(0),
  enableProxyHeader: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputTcpjsonMetadatum$inboundSchema))
    .optional(),
  enableLoadBalancing: z.boolean().default(false),
  authType: InputTcpjsonAuthenticationMethod$inboundSchema.default("manual"),
  description: z.string().optional(),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/** @internal */
export type InputTcpjson$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputTcpjsonConnection$Outbound> | undefined;
  pq?: InputTcpjsonPq$Outbound | undefined;
  host: string;
  port: number;
  tls?: InputTcpjsonTLSSettingsServerSide$Outbound | undefined;
  ipWhitelistRegex: string;
  maxActiveCxn: number;
  socketIdleTimeout: number;
  socketEndingMaxWait: number;
  socketMaxLifespan: number;
  enableProxyHeader: boolean;
  metadata?: Array<InputTcpjsonMetadatum$Outbound> | undefined;
  enableLoadBalancing: boolean;
  authType: string;
  description?: string | undefined;
  authToken: string;
  textSecret?: string | undefined;
};

/** @internal */
export const InputTcpjson$outboundSchema: z.ZodType<
  InputTcpjson$Outbound,
  z.ZodTypeDef,
  InputTcpjson
> = z.object({
  id: z.string().optional(),
  type: InputTcpjsonType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputTcpjsonConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputTcpjsonPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputTcpjsonTLSSettingsServerSide$outboundSchema)
    .optional(),
  ipWhitelistRegex: z.string().default("/.*/"),
  maxActiveCxn: z.number().default(1000),
  socketIdleTimeout: z.number().default(0),
  socketEndingMaxWait: z.number().default(30),
  socketMaxLifespan: z.number().default(0),
  enableProxyHeader: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputTcpjsonMetadatum$outboundSchema))
    .optional(),
  enableLoadBalancing: z.boolean().default(false),
  authType: InputTcpjsonAuthenticationMethod$outboundSchema.default("manual"),
  description: z.string().optional(),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTcpjson$ {
  /** @deprecated use `InputTcpjson$inboundSchema` instead. */
  export const inboundSchema = InputTcpjson$inboundSchema;
  /** @deprecated use `InputTcpjson$outboundSchema` instead. */
  export const outboundSchema = InputTcpjson$outboundSchema;
  /** @deprecated use `InputTcpjson$Outbound` instead. */
  export type Outbound = InputTcpjson$Outbound;
}

export function inputTcpjsonToJSON(inputTcpjson: InputTcpjson): string {
  return JSON.stringify(InputTcpjson$outboundSchema.parse(inputTcpjson));
}

export function inputTcpjsonFromJSON(
  jsonString: string,
): SafeParseResult<InputTcpjson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTcpjson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTcpjson' from JSON`,
  );
}
