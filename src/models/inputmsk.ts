/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputMskType = {
  Msk: "msk",
} as const;
export type InputMskType = ClosedEnum<typeof InputMskType>;

export type InputMskConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputMskMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputMskMode = OpenEnum<typeof InputMskMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputMskCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputMskCompression = OpenEnum<typeof InputMskCompression>;

export type InputMskPqControls = {};

export type InputMskPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputMskMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputMskCompression | undefined;
  pqControls?: InputMskPqControls | undefined;
};

export type InputMskMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

/**
 * The schema format used to encode and decode event data
 */
export const InputMskSchemaType = {
  Avro: "avro",
  Json: "json",
} as const;
/**
 * The schema format used to encode and decode event data
 */
export type InputMskSchemaType = OpenEnum<typeof InputMskSchemaType>;

/**
 * Credentials to use when authenticating with the schema registry using basic HTTP authentication
 */
export type InputMskAuth = {
  disabled?: boolean | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

export const InputMskKafkaSchemaRegistryMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputMskKafkaSchemaRegistryMinimumTLSVersion = OpenEnum<
  typeof InputMskKafkaSchemaRegistryMinimumTLSVersion
>;

export const InputMskKafkaSchemaRegistryMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputMskKafkaSchemaRegistryMaximumTLSVersion = OpenEnum<
  typeof InputMskKafkaSchemaRegistryMaximumTLSVersion
>;

export type InputMskKafkaSchemaRegistryTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Reject certificates that are not authorized by a CA in the CA certificate path, or by another
   *
   * @remarks
   *                     trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: InputMskKafkaSchemaRegistryMinimumTLSVersion | undefined;
  maxVersion?: InputMskKafkaSchemaRegistryMaximumTLSVersion | undefined;
};

export type InputMskKafkaSchemaRegistryAuthentication = {
  disabled?: boolean | undefined;
  /**
   * URL for accessing the Confluent Schema Registry. Example: http://localhost:8081. To connect over TLS, use https instead of http.
   */
  schemaRegistryURL?: string | undefined;
  /**
   * The schema format used to encode and decode event data
   */
  schemaType?: InputMskSchemaType | undefined;
  /**
   * Maximum time to wait for a Schema Registry connection to complete successfully
   */
  connectionTimeout?: number | undefined;
  /**
   * Maximum time to wait for the Schema Registry to respond to a request
   */
  requestTimeout?: number | undefined;
  /**
   * Maximum number of times to try fetching schemas from the Schema Registry
   */
  maxRetries?: number | undefined;
  /**
   * Credentials to use when authenticating with the schema registry using basic HTTP authentication
   */
  auth?: InputMskAuth | undefined;
  tls?: InputMskKafkaSchemaRegistryTLSSettingsClientSide | undefined;
};

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const InputMskAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type InputMskAuthenticationMethod = OpenEnum<
  typeof InputMskAuthenticationMethod
>;

/**
 * Signature version to use for signing MSK cluster requests
 */
export const InputMskSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing MSK cluster requests
 */
export type InputMskSignatureVersion = OpenEnum<
  typeof InputMskSignatureVersion
>;

export const InputMskMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputMskMinimumTLSVersion = OpenEnum<
  typeof InputMskMinimumTLSVersion
>;

export const InputMskMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputMskMaximumTLSVersion = OpenEnum<
  typeof InputMskMaximumTLSVersion
>;

export type InputMskTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Reject certificates that are not authorized by a CA in the CA certificate path, or by another
   *
   * @remarks
   *                     trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: InputMskMinimumTLSVersion | undefined;
  maxVersion?: InputMskMaximumTLSVersion | undefined;
};

export type InputMsk = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputMskType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputMskConnection> | undefined;
  pq?: InputMskPq | undefined;
  /**
   * Enter each Kafka bootstrap server you want to use. Specify the hostname and port (such as mykafkabroker:9092) or just the hostname (in which case @{product} will assign port 9092).
   */
  brokers: Array<string>;
  /**
   * Topic to subscribe to. Warning: To optimize performance, Cribl suggests subscribing each Kafka Source to a single topic only.
   */
  topics: Array<string>;
  /**
   * The consumer group to which this instance belongs. Defaults to 'Cribl'.
   */
  groupId?: string | undefined;
  /**
   * Leave enabled if you want the Source, upon first subscribing to a topic, to read starting with the earliest available message
   */
  fromBeginning?: boolean | undefined;
  /**
   *       Timeout used to detect client failures when using Kafka's group-management facilities.
   *
   * @remarks
   *       If the client sends no heartbeats to the broker before the timeout expires,
   *       the broker will remove the client from the group and initiate a rebalance.
   *       Value must be between the broker's configured group.min.session.timeout.ms and group.max.session.timeout.ms.
   *       See [Kafka's documentation](https://kafka.apache.org/documentation/#consumerconfigs_session.timeout.ms) for details.
   */
  sessionTimeout?: number | undefined;
  /**
   *       Maximum allowed time for each worker to join the group after a rebalance begins.
   *
   * @remarks
   *       If the timeout is exceeded, the coordinator broker will remove the worker from the group.
   *       See [Kafka's documentation](https://kafka.apache.org/documentation/#connectconfigs_rebalance.timeout.ms) for details.
   */
  rebalanceTimeout?: number | undefined;
  /**
   *       Expected time between heartbeats to the consumer coordinator when using Kafka's group-management facilities.
   *
   * @remarks
   *       Value must be lower than sessionTimeout and typically should not exceed 1/3 of the sessionTimeout value.
   *       See [Kafka's documentation](https://kafka.apache.org/documentation/#consumerconfigs_heartbeat.interval.ms) for details.
   */
  heartbeatInterval?: number | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputMskMetadatum> | undefined;
  kafkaSchemaRegistry?: InputMskKafkaSchemaRegistryAuthentication | undefined;
  /**
   * Maximum time to wait for a connection to complete successfully
   */
  connectionTimeout?: number | undefined;
  /**
   * Maximum time to wait for Kafka to respond to a request
   */
  requestTimeout?: number | undefined;
  /**
   * If messages are failing, you can set the maximum number of retries as high as 100 to prevent loss of data
   */
  maxRetries?: number | undefined;
  /**
   * The maximum wait time for a retry, in milliseconds. Default (and minimum) is 30,000 ms (30 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackOff?: number | undefined;
  /**
   * Initial value used to calculate the retry, in milliseconds. Maximum is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Set the backoff multiplier (2-20) to control the retry frequency for failed messages. For faster retries, use a lower multiplier. For slower retries with more delay between attempts, use a higher multiplier. The multiplier is used in an exponential backoff formula; see the Kafka [documentation](https://kafka.js.org/docs/retry-detailed) for details.
   */
  backoffRate?: number | undefined;
  /**
   * Maximum time to wait for Kafka to respond to an authentication request
   */
  authenticationTimeout?: number | undefined;
  /**
   * Specifies a time window during which @{product} can reauthenticate if needed. Creates the window measuring backward from the moment when credentials are set to expire.
   */
  reauthenticationThreshold?: number | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: InputMskAuthenticationMethod | undefined;
  awsSecretKey?: string | undefined;
  /**
   * Region where the MSK cluster is located
   */
  region: string;
  /**
   * MSK cluster service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to MSK cluster-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing MSK cluster requests
   */
  signatureVersion?: InputMskSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access MSK
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  tls?: InputMskTLSSettingsClientSide | undefined;
  /**
   * How often to commit offsets. If both this and Offset commit threshold are set, @{product} commits offsets when either condition is met. If both are empty, @{product} commits offsets after each batch.
   */
  autoCommitInterval?: number | undefined;
  /**
   * How many events are needed to trigger an offset commit. If both this and Offset commit interval are set, @{product} commits offsets when either condition is met. If both are empty, @{product} commits offsets after each batch.
   */
  autoCommitThreshold?: number | undefined;
  /**
   * Maximum amount of data that Kafka will return per partition, per fetch request. Must equal or exceed the maximum message size (maxBytesPerPartition) that Kafka is configured to allow. Otherwise, @{product} can get stuck trying to retrieve messages. Defaults to 1048576 (1 MB).
   */
  maxBytesPerPartition?: number | undefined;
  /**
   * Maximum number of bytes that Kafka will return per fetch request. Defaults to 10485760 (10 MB).
   */
  maxBytes?: number | undefined;
  /**
   * Maximum number of network errors before the consumer re-creates a socket
   */
  maxSocketErrors?: number | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
};

/** @internal */
export const InputMskType$inboundSchema: z.ZodNativeEnum<typeof InputMskType> =
  z.nativeEnum(InputMskType);

/** @internal */
export const InputMskType$outboundSchema: z.ZodNativeEnum<typeof InputMskType> =
  InputMskType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskType$ {
  /** @deprecated use `InputMskType$inboundSchema` instead. */
  export const inboundSchema = InputMskType$inboundSchema;
  /** @deprecated use `InputMskType$outboundSchema` instead. */
  export const outboundSchema = InputMskType$outboundSchema;
}

/** @internal */
export const InputMskConnection$inboundSchema: z.ZodType<
  InputMskConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputMskConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputMskConnection$outboundSchema: z.ZodType<
  InputMskConnection$Outbound,
  z.ZodTypeDef,
  InputMskConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskConnection$ {
  /** @deprecated use `InputMskConnection$inboundSchema` instead. */
  export const inboundSchema = InputMskConnection$inboundSchema;
  /** @deprecated use `InputMskConnection$outboundSchema` instead. */
  export const outboundSchema = InputMskConnection$outboundSchema;
  /** @deprecated use `InputMskConnection$Outbound` instead. */
  export type Outbound = InputMskConnection$Outbound;
}

export function inputMskConnectionToJSON(
  inputMskConnection: InputMskConnection,
): string {
  return JSON.stringify(
    InputMskConnection$outboundSchema.parse(inputMskConnection),
  );
}

export function inputMskConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputMskConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputMskConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputMskConnection' from JSON`,
  );
}

/** @internal */
export const InputMskMode$inboundSchema: z.ZodType<
  InputMskMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputMskMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputMskMode$outboundSchema: z.ZodType<
  InputMskMode,
  z.ZodTypeDef,
  InputMskMode
> = z.union([
  z.nativeEnum(InputMskMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskMode$ {
  /** @deprecated use `InputMskMode$inboundSchema` instead. */
  export const inboundSchema = InputMskMode$inboundSchema;
  /** @deprecated use `InputMskMode$outboundSchema` instead. */
  export const outboundSchema = InputMskMode$outboundSchema;
}

/** @internal */
export const InputMskCompression$inboundSchema: z.ZodType<
  InputMskCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputMskCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputMskCompression$outboundSchema: z.ZodType<
  InputMskCompression,
  z.ZodTypeDef,
  InputMskCompression
> = z.union([
  z.nativeEnum(InputMskCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskCompression$ {
  /** @deprecated use `InputMskCompression$inboundSchema` instead. */
  export const inboundSchema = InputMskCompression$inboundSchema;
  /** @deprecated use `InputMskCompression$outboundSchema` instead. */
  export const outboundSchema = InputMskCompression$outboundSchema;
}

/** @internal */
export const InputMskPqControls$inboundSchema: z.ZodType<
  InputMskPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputMskPqControls$Outbound = {};

/** @internal */
export const InputMskPqControls$outboundSchema: z.ZodType<
  InputMskPqControls$Outbound,
  z.ZodTypeDef,
  InputMskPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskPqControls$ {
  /** @deprecated use `InputMskPqControls$inboundSchema` instead. */
  export const inboundSchema = InputMskPqControls$inboundSchema;
  /** @deprecated use `InputMskPqControls$outboundSchema` instead. */
  export const outboundSchema = InputMskPqControls$outboundSchema;
  /** @deprecated use `InputMskPqControls$Outbound` instead. */
  export type Outbound = InputMskPqControls$Outbound;
}

export function inputMskPqControlsToJSON(
  inputMskPqControls: InputMskPqControls,
): string {
  return JSON.stringify(
    InputMskPqControls$outboundSchema.parse(inputMskPqControls),
  );
}

export function inputMskPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputMskPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputMskPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputMskPqControls' from JSON`,
  );
}

/** @internal */
export const InputMskPq$inboundSchema: z.ZodType<
  InputMskPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputMskMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputMskCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputMskPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputMskPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputMskPqControls$Outbound | undefined;
};

/** @internal */
export const InputMskPq$outboundSchema: z.ZodType<
  InputMskPq$Outbound,
  z.ZodTypeDef,
  InputMskPq
> = z.object({
  mode: InputMskMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputMskCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputMskPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskPq$ {
  /** @deprecated use `InputMskPq$inboundSchema` instead. */
  export const inboundSchema = InputMskPq$inboundSchema;
  /** @deprecated use `InputMskPq$outboundSchema` instead. */
  export const outboundSchema = InputMskPq$outboundSchema;
  /** @deprecated use `InputMskPq$Outbound` instead. */
  export type Outbound = InputMskPq$Outbound;
}

export function inputMskPqToJSON(inputMskPq: InputMskPq): string {
  return JSON.stringify(InputMskPq$outboundSchema.parse(inputMskPq));
}

export function inputMskPqFromJSON(
  jsonString: string,
): SafeParseResult<InputMskPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputMskPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputMskPq' from JSON`,
  );
}

/** @internal */
export const InputMskMetadatum$inboundSchema: z.ZodType<
  InputMskMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputMskMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputMskMetadatum$outboundSchema: z.ZodType<
  InputMskMetadatum$Outbound,
  z.ZodTypeDef,
  InputMskMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskMetadatum$ {
  /** @deprecated use `InputMskMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputMskMetadatum$inboundSchema;
  /** @deprecated use `InputMskMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputMskMetadatum$outboundSchema;
  /** @deprecated use `InputMskMetadatum$Outbound` instead. */
  export type Outbound = InputMskMetadatum$Outbound;
}

export function inputMskMetadatumToJSON(
  inputMskMetadatum: InputMskMetadatum,
): string {
  return JSON.stringify(
    InputMskMetadatum$outboundSchema.parse(inputMskMetadatum),
  );
}

export function inputMskMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputMskMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputMskMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputMskMetadatum' from JSON`,
  );
}

/** @internal */
export const InputMskSchemaType$inboundSchema: z.ZodType<
  InputMskSchemaType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputMskSchemaType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputMskSchemaType$outboundSchema: z.ZodType<
  InputMskSchemaType,
  z.ZodTypeDef,
  InputMskSchemaType
> = z.union([
  z.nativeEnum(InputMskSchemaType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskSchemaType$ {
  /** @deprecated use `InputMskSchemaType$inboundSchema` instead. */
  export const inboundSchema = InputMskSchemaType$inboundSchema;
  /** @deprecated use `InputMskSchemaType$outboundSchema` instead. */
  export const outboundSchema = InputMskSchemaType$outboundSchema;
}

/** @internal */
export const InputMskAuth$inboundSchema: z.ZodType<
  InputMskAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type InputMskAuth$Outbound = {
  disabled: boolean;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const InputMskAuth$outboundSchema: z.ZodType<
  InputMskAuth$Outbound,
  z.ZodTypeDef,
  InputMskAuth
> = z.object({
  disabled: z.boolean().default(true),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskAuth$ {
  /** @deprecated use `InputMskAuth$inboundSchema` instead. */
  export const inboundSchema = InputMskAuth$inboundSchema;
  /** @deprecated use `InputMskAuth$outboundSchema` instead. */
  export const outboundSchema = InputMskAuth$outboundSchema;
  /** @deprecated use `InputMskAuth$Outbound` instead. */
  export type Outbound = InputMskAuth$Outbound;
}

export function inputMskAuthToJSON(inputMskAuth: InputMskAuth): string {
  return JSON.stringify(InputMskAuth$outboundSchema.parse(inputMskAuth));
}

export function inputMskAuthFromJSON(
  jsonString: string,
): SafeParseResult<InputMskAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputMskAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputMskAuth' from JSON`,
  );
}

/** @internal */
export const InputMskKafkaSchemaRegistryMinimumTLSVersion$inboundSchema:
  z.ZodType<
    InputMskKafkaSchemaRegistryMinimumTLSVersion,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(InputMskKafkaSchemaRegistryMinimumTLSVersion),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const InputMskKafkaSchemaRegistryMinimumTLSVersion$outboundSchema:
  z.ZodType<
    InputMskKafkaSchemaRegistryMinimumTLSVersion,
    z.ZodTypeDef,
    InputMskKafkaSchemaRegistryMinimumTLSVersion
  > = z.union([
    z.nativeEnum(InputMskKafkaSchemaRegistryMinimumTLSVersion),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskKafkaSchemaRegistryMinimumTLSVersion$ {
  /** @deprecated use `InputMskKafkaSchemaRegistryMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema =
    InputMskKafkaSchemaRegistryMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputMskKafkaSchemaRegistryMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputMskKafkaSchemaRegistryMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputMskKafkaSchemaRegistryMaximumTLSVersion$inboundSchema:
  z.ZodType<
    InputMskKafkaSchemaRegistryMaximumTLSVersion,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(InputMskKafkaSchemaRegistryMaximumTLSVersion),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const InputMskKafkaSchemaRegistryMaximumTLSVersion$outboundSchema:
  z.ZodType<
    InputMskKafkaSchemaRegistryMaximumTLSVersion,
    z.ZodTypeDef,
    InputMskKafkaSchemaRegistryMaximumTLSVersion
  > = z.union([
    z.nativeEnum(InputMskKafkaSchemaRegistryMaximumTLSVersion),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskKafkaSchemaRegistryMaximumTLSVersion$ {
  /** @deprecated use `InputMskKafkaSchemaRegistryMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema =
    InputMskKafkaSchemaRegistryMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputMskKafkaSchemaRegistryMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputMskKafkaSchemaRegistryMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputMskKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema:
  z.ZodType<
    InputMskKafkaSchemaRegistryTLSSettingsClientSide,
    z.ZodTypeDef,
    unknown
  > = z.object({
    disabled: z.boolean().default(true),
    rejectUnauthorized: z.boolean().default(true),
    servername: z.string().optional(),
    certificateName: z.string().optional(),
    caPath: z.string().optional(),
    privKeyPath: z.string().optional(),
    certPath: z.string().optional(),
    passphrase: z.string().optional(),
    minVersion: InputMskKafkaSchemaRegistryMinimumTLSVersion$inboundSchema
      .optional(),
    maxVersion: InputMskKafkaSchemaRegistryMaximumTLSVersion$inboundSchema
      .optional(),
  });

/** @internal */
export type InputMskKafkaSchemaRegistryTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputMskKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema:
  z.ZodType<
    InputMskKafkaSchemaRegistryTLSSettingsClientSide$Outbound,
    z.ZodTypeDef,
    InputMskKafkaSchemaRegistryTLSSettingsClientSide
  > = z.object({
    disabled: z.boolean().default(true),
    rejectUnauthorized: z.boolean().default(true),
    servername: z.string().optional(),
    certificateName: z.string().optional(),
    caPath: z.string().optional(),
    privKeyPath: z.string().optional(),
    certPath: z.string().optional(),
    passphrase: z.string().optional(),
    minVersion: InputMskKafkaSchemaRegistryMinimumTLSVersion$outboundSchema
      .optional(),
    maxVersion: InputMskKafkaSchemaRegistryMaximumTLSVersion$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskKafkaSchemaRegistryTLSSettingsClientSide$ {
  /** @deprecated use `InputMskKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema =
    InputMskKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `InputMskKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema =
    InputMskKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `InputMskKafkaSchemaRegistryTLSSettingsClientSide$Outbound` instead. */
  export type Outbound =
    InputMskKafkaSchemaRegistryTLSSettingsClientSide$Outbound;
}

export function inputMskKafkaSchemaRegistryTLSSettingsClientSideToJSON(
  inputMskKafkaSchemaRegistryTLSSettingsClientSide:
    InputMskKafkaSchemaRegistryTLSSettingsClientSide,
): string {
  return JSON.stringify(
    InputMskKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema.parse(
      inputMskKafkaSchemaRegistryTLSSettingsClientSide,
    ),
  );
}

export function inputMskKafkaSchemaRegistryTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<
  InputMskKafkaSchemaRegistryTLSSettingsClientSide,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InputMskKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InputMskKafkaSchemaRegistryTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const InputMskKafkaSchemaRegistryAuthentication$inboundSchema: z.ZodType<
  InputMskKafkaSchemaRegistryAuthentication,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  schemaRegistryURL: z.string().default("http://localhost:8081"),
  schemaType: InputMskSchemaType$inboundSchema.default("avro"),
  connectionTimeout: z.number().default(30000),
  requestTimeout: z.number().default(30000),
  maxRetries: z.number().default(1),
  auth: z.lazy(() => InputMskAuth$inboundSchema).optional(),
  tls: z.lazy(() =>
    InputMskKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema
  ).optional(),
});

/** @internal */
export type InputMskKafkaSchemaRegistryAuthentication$Outbound = {
  disabled: boolean;
  schemaRegistryURL: string;
  schemaType: string;
  connectionTimeout: number;
  requestTimeout: number;
  maxRetries: number;
  auth?: InputMskAuth$Outbound | undefined;
  tls?: InputMskKafkaSchemaRegistryTLSSettingsClientSide$Outbound | undefined;
};

/** @internal */
export const InputMskKafkaSchemaRegistryAuthentication$outboundSchema:
  z.ZodType<
    InputMskKafkaSchemaRegistryAuthentication$Outbound,
    z.ZodTypeDef,
    InputMskKafkaSchemaRegistryAuthentication
  > = z.object({
    disabled: z.boolean().default(true),
    schemaRegistryURL: z.string().default("http://localhost:8081"),
    schemaType: InputMskSchemaType$outboundSchema.default("avro"),
    connectionTimeout: z.number().default(30000),
    requestTimeout: z.number().default(30000),
    maxRetries: z.number().default(1),
    auth: z.lazy(() => InputMskAuth$outboundSchema).optional(),
    tls: z.lazy(() =>
      InputMskKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskKafkaSchemaRegistryAuthentication$ {
  /** @deprecated use `InputMskKafkaSchemaRegistryAuthentication$inboundSchema` instead. */
  export const inboundSchema =
    InputMskKafkaSchemaRegistryAuthentication$inboundSchema;
  /** @deprecated use `InputMskKafkaSchemaRegistryAuthentication$outboundSchema` instead. */
  export const outboundSchema =
    InputMskKafkaSchemaRegistryAuthentication$outboundSchema;
  /** @deprecated use `InputMskKafkaSchemaRegistryAuthentication$Outbound` instead. */
  export type Outbound = InputMskKafkaSchemaRegistryAuthentication$Outbound;
}

export function inputMskKafkaSchemaRegistryAuthenticationToJSON(
  inputMskKafkaSchemaRegistryAuthentication:
    InputMskKafkaSchemaRegistryAuthentication,
): string {
  return JSON.stringify(
    InputMskKafkaSchemaRegistryAuthentication$outboundSchema.parse(
      inputMskKafkaSchemaRegistryAuthentication,
    ),
  );
}

export function inputMskKafkaSchemaRegistryAuthenticationFromJSON(
  jsonString: string,
): SafeParseResult<
  InputMskKafkaSchemaRegistryAuthentication,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InputMskKafkaSchemaRegistryAuthentication$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InputMskKafkaSchemaRegistryAuthentication' from JSON`,
  );
}

/** @internal */
export const InputMskAuthenticationMethod$inboundSchema: z.ZodType<
  InputMskAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputMskAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputMskAuthenticationMethod$outboundSchema: z.ZodType<
  InputMskAuthenticationMethod,
  z.ZodTypeDef,
  InputMskAuthenticationMethod
> = z.union([
  z.nativeEnum(InputMskAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskAuthenticationMethod$ {
  /** @deprecated use `InputMskAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = InputMskAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputMskAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = InputMskAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputMskSignatureVersion$inboundSchema: z.ZodType<
  InputMskSignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputMskSignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputMskSignatureVersion$outboundSchema: z.ZodType<
  InputMskSignatureVersion,
  z.ZodTypeDef,
  InputMskSignatureVersion
> = z.union([
  z.nativeEnum(InputMskSignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskSignatureVersion$ {
  /** @deprecated use `InputMskSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = InputMskSignatureVersion$inboundSchema;
  /** @deprecated use `InputMskSignatureVersion$outboundSchema` instead. */
  export const outboundSchema = InputMskSignatureVersion$outboundSchema;
}

/** @internal */
export const InputMskMinimumTLSVersion$inboundSchema: z.ZodType<
  InputMskMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputMskMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputMskMinimumTLSVersion$outboundSchema: z.ZodType<
  InputMskMinimumTLSVersion,
  z.ZodTypeDef,
  InputMskMinimumTLSVersion
> = z.union([
  z.nativeEnum(InputMskMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskMinimumTLSVersion$ {
  /** @deprecated use `InputMskMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputMskMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputMskMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputMskMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputMskMaximumTLSVersion$inboundSchema: z.ZodType<
  InputMskMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputMskMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputMskMaximumTLSVersion$outboundSchema: z.ZodType<
  InputMskMaximumTLSVersion,
  z.ZodTypeDef,
  InputMskMaximumTLSVersion
> = z.union([
  z.nativeEnum(InputMskMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskMaximumTLSVersion$ {
  /** @deprecated use `InputMskMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputMskMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputMskMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputMskMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputMskTLSSettingsClientSide$inboundSchema: z.ZodType<
  InputMskTLSSettingsClientSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(false),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: InputMskMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputMskMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputMskTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputMskTLSSettingsClientSide$outboundSchema: z.ZodType<
  InputMskTLSSettingsClientSide$Outbound,
  z.ZodTypeDef,
  InputMskTLSSettingsClientSide
> = z.object({
  disabled: z.boolean().default(false),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: InputMskMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputMskMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMskTLSSettingsClientSide$ {
  /** @deprecated use `InputMskTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema = InputMskTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `InputMskTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema = InputMskTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `InputMskTLSSettingsClientSide$Outbound` instead. */
  export type Outbound = InputMskTLSSettingsClientSide$Outbound;
}

export function inputMskTLSSettingsClientSideToJSON(
  inputMskTLSSettingsClientSide: InputMskTLSSettingsClientSide,
): string {
  return JSON.stringify(
    InputMskTLSSettingsClientSide$outboundSchema.parse(
      inputMskTLSSettingsClientSide,
    ),
  );
}

export function inputMskTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<InputMskTLSSettingsClientSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputMskTLSSettingsClientSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputMskTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const InputMsk$inboundSchema: z.ZodType<
  InputMsk,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputMskType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputMskConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputMskPq$inboundSchema).optional(),
  brokers: z.array(z.string()),
  topics: z.array(z.string()),
  groupId: z.string().default("Cribl"),
  fromBeginning: z.boolean().default(true),
  sessionTimeout: z.number().default(30000),
  rebalanceTimeout: z.number().default(60000),
  heartbeatInterval: z.number().default(3000),
  metadata: z.array(z.lazy(() => InputMskMetadatum$inboundSchema)).optional(),
  kafkaSchemaRegistry: z.lazy(() =>
    InputMskKafkaSchemaRegistryAuthentication$inboundSchema
  ).optional(),
  connectionTimeout: z.number().default(10000),
  requestTimeout: z.number().default(60000),
  maxRetries: z.number().default(5),
  maxBackOff: z.number().default(30000),
  initialBackoff: z.number().default(300),
  backoffRate: z.number().default(2),
  authenticationTimeout: z.number().default(10000),
  reauthenticationThreshold: z.number().default(10000),
  awsAuthenticationMethod: InputMskAuthenticationMethod$inboundSchema.default(
    "auto",
  ),
  awsSecretKey: z.string().optional(),
  region: z.string(),
  endpoint: z.string().optional(),
  signatureVersion: InputMskSignatureVersion$inboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  tls: z.lazy(() => InputMskTLSSettingsClientSide$inboundSchema).optional(),
  autoCommitInterval: z.number().optional(),
  autoCommitThreshold: z.number().optional(),
  maxBytesPerPartition: z.number().default(1048576),
  maxBytes: z.number().default(10485760),
  maxSocketErrors: z.number().default(0),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
});

/** @internal */
export type InputMsk$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputMskConnection$Outbound> | undefined;
  pq?: InputMskPq$Outbound | undefined;
  brokers: Array<string>;
  topics: Array<string>;
  groupId: string;
  fromBeginning: boolean;
  sessionTimeout: number;
  rebalanceTimeout: number;
  heartbeatInterval: number;
  metadata?: Array<InputMskMetadatum$Outbound> | undefined;
  kafkaSchemaRegistry?:
    | InputMskKafkaSchemaRegistryAuthentication$Outbound
    | undefined;
  connectionTimeout: number;
  requestTimeout: number;
  maxRetries: number;
  maxBackOff: number;
  initialBackoff: number;
  backoffRate: number;
  authenticationTimeout: number;
  reauthenticationThreshold: number;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region: string;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  tls?: InputMskTLSSettingsClientSide$Outbound | undefined;
  autoCommitInterval?: number | undefined;
  autoCommitThreshold?: number | undefined;
  maxBytesPerPartition: number;
  maxBytes: number;
  maxSocketErrors: number;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
};

/** @internal */
export const InputMsk$outboundSchema: z.ZodType<
  InputMsk$Outbound,
  z.ZodTypeDef,
  InputMsk
> = z.object({
  id: z.string().optional(),
  type: InputMskType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputMskConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputMskPq$outboundSchema).optional(),
  brokers: z.array(z.string()),
  topics: z.array(z.string()),
  groupId: z.string().default("Cribl"),
  fromBeginning: z.boolean().default(true),
  sessionTimeout: z.number().default(30000),
  rebalanceTimeout: z.number().default(60000),
  heartbeatInterval: z.number().default(3000),
  metadata: z.array(z.lazy(() => InputMskMetadatum$outboundSchema)).optional(),
  kafkaSchemaRegistry: z.lazy(() =>
    InputMskKafkaSchemaRegistryAuthentication$outboundSchema
  ).optional(),
  connectionTimeout: z.number().default(10000),
  requestTimeout: z.number().default(60000),
  maxRetries: z.number().default(5),
  maxBackOff: z.number().default(30000),
  initialBackoff: z.number().default(300),
  backoffRate: z.number().default(2),
  authenticationTimeout: z.number().default(10000),
  reauthenticationThreshold: z.number().default(10000),
  awsAuthenticationMethod: InputMskAuthenticationMethod$outboundSchema.default(
    "auto",
  ),
  awsSecretKey: z.string().optional(),
  region: z.string(),
  endpoint: z.string().optional(),
  signatureVersion: InputMskSignatureVersion$outboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  tls: z.lazy(() => InputMskTLSSettingsClientSide$outboundSchema).optional(),
  autoCommitInterval: z.number().optional(),
  autoCommitThreshold: z.number().optional(),
  maxBytesPerPartition: z.number().default(1048576),
  maxBytes: z.number().default(10485760),
  maxSocketErrors: z.number().default(0),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMsk$ {
  /** @deprecated use `InputMsk$inboundSchema` instead. */
  export const inboundSchema = InputMsk$inboundSchema;
  /** @deprecated use `InputMsk$outboundSchema` instead. */
  export const outboundSchema = InputMsk$outboundSchema;
  /** @deprecated use `InputMsk$Outbound` instead. */
  export type Outbound = InputMsk$Outbound;
}

export function inputMskToJSON(inputMsk: InputMsk): string {
  return JSON.stringify(InputMsk$outboundSchema.parse(inputMsk));
}

export function inputMskFromJSON(
  jsonString: string,
): SafeParseResult<InputMsk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputMsk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputMsk' from JSON`,
  );
}
