/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSumoLogicType = {
  SumoLogic: "sumo_logic",
} as const;
export type OutputSumoLogicType = ClosedEnum<typeof OutputSumoLogicType>;

/**
 * Preserve the raw event format instead of JSONifying it
 */
export const OutputSumoLogicDataFormat = {
  Json: "json",
  Raw: "raw",
} as const;
/**
 * Preserve the raw event format instead of JSONifying it
 */
export type OutputSumoLogicDataFormat = OpenEnum<
  typeof OutputSumoLogicDataFormat
>;

export type OutputSumoLogicExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputSumoLogicFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputSumoLogicFailedRequestLoggingMode = OpenEnum<
  typeof OutputSumoLogicFailedRequestLoggingMode
>;

export type OutputSumoLogicResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputSumoLogicTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSumoLogicBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSumoLogicBackpressureBehavior = OpenEnum<
  typeof OutputSumoLogicBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputSumoLogicCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputSumoLogicCompression = OpenEnum<
  typeof OutputSumoLogicCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputSumoLogicQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputSumoLogicQueueFullBehavior = OpenEnum<
  typeof OutputSumoLogicQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputSumoLogicMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputSumoLogicMode = OpenEnum<typeof OutputSumoLogicMode>;

export type OutputSumoLogicPqControls = {};

export type OutputSumoLogic = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSumoLogicType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Sumo Logic HTTP collector URL to which events should be sent
   */
  url: string;
  /**
   * Override the source name configured on the Sumo Logic HTTP collector. This can also be overridden at the event level with the __sourceName field.
   */
  customSource?: string | undefined;
  /**
   * Override the source category configured on the Sumo Logic HTTP collector. This can also be overridden at the event level with the __sourceCategory field.
   */
  customCategory?: string | undefined;
  /**
   * Preserve the raw event format instead of JSONifying it
   */
  format?: OutputSumoLogicDataFormat | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputSumoLogicExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputSumoLogicFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputSumoLogicResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?: OutputSumoLogicTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSumoLogicBackpressureBehavior | undefined;
  /**
   * Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced.
   */
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputSumoLogicCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputSumoLogicQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputSumoLogicMode | undefined;
  pqControls?: OutputSumoLogicPqControls | undefined;
};

/** @internal */
export const OutputSumoLogicType$inboundSchema: z.ZodNativeEnum<
  typeof OutputSumoLogicType
> = z.nativeEnum(OutputSumoLogicType);

/** @internal */
export const OutputSumoLogicType$outboundSchema: z.ZodNativeEnum<
  typeof OutputSumoLogicType
> = OutputSumoLogicType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicType$ {
  /** @deprecated use `OutputSumoLogicType$inboundSchema` instead. */
  export const inboundSchema = OutputSumoLogicType$inboundSchema;
  /** @deprecated use `OutputSumoLogicType$outboundSchema` instead. */
  export const outboundSchema = OutputSumoLogicType$outboundSchema;
}

/** @internal */
export const OutputSumoLogicDataFormat$inboundSchema: z.ZodType<
  OutputSumoLogicDataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSumoLogicDataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSumoLogicDataFormat$outboundSchema: z.ZodType<
  OutputSumoLogicDataFormat,
  z.ZodTypeDef,
  OutputSumoLogicDataFormat
> = z.union([
  z.nativeEnum(OutputSumoLogicDataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicDataFormat$ {
  /** @deprecated use `OutputSumoLogicDataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputSumoLogicDataFormat$inboundSchema;
  /** @deprecated use `OutputSumoLogicDataFormat$outboundSchema` instead. */
  export const outboundSchema = OutputSumoLogicDataFormat$outboundSchema;
}

/** @internal */
export const OutputSumoLogicExtraHttpHeader$inboundSchema: z.ZodType<
  OutputSumoLogicExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputSumoLogicExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputSumoLogicExtraHttpHeader$outboundSchema: z.ZodType<
  OutputSumoLogicExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputSumoLogicExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicExtraHttpHeader$ {
  /** @deprecated use `OutputSumoLogicExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputSumoLogicExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputSumoLogicExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputSumoLogicExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputSumoLogicExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputSumoLogicExtraHttpHeader$Outbound;
}

export function outputSumoLogicExtraHttpHeaderToJSON(
  outputSumoLogicExtraHttpHeader: OutputSumoLogicExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputSumoLogicExtraHttpHeader$outboundSchema.parse(
      outputSumoLogicExtraHttpHeader,
    ),
  );
}

export function outputSumoLogicExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputSumoLogicExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSumoLogicExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSumoLogicExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputSumoLogicFailedRequestLoggingMode$inboundSchema: z.ZodType<
  OutputSumoLogicFailedRequestLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSumoLogicFailedRequestLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSumoLogicFailedRequestLoggingMode$outboundSchema: z.ZodType<
  OutputSumoLogicFailedRequestLoggingMode,
  z.ZodTypeDef,
  OutputSumoLogicFailedRequestLoggingMode
> = z.union([
  z.nativeEnum(OutputSumoLogicFailedRequestLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicFailedRequestLoggingMode$ {
  /** @deprecated use `OutputSumoLogicFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputSumoLogicFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputSumoLogicFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputSumoLogicFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputSumoLogicResponseRetrySetting$inboundSchema: z.ZodType<
  OutputSumoLogicResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputSumoLogicResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputSumoLogicResponseRetrySetting$outboundSchema: z.ZodType<
  OutputSumoLogicResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputSumoLogicResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicResponseRetrySetting$ {
  /** @deprecated use `OutputSumoLogicResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputSumoLogicResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputSumoLogicResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputSumoLogicResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputSumoLogicResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputSumoLogicResponseRetrySetting$Outbound;
}

export function outputSumoLogicResponseRetrySettingToJSON(
  outputSumoLogicResponseRetrySetting: OutputSumoLogicResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputSumoLogicResponseRetrySetting$outboundSchema.parse(
      outputSumoLogicResponseRetrySetting,
    ),
  );
}

export function outputSumoLogicResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputSumoLogicResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSumoLogicResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSumoLogicResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputSumoLogicTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputSumoLogicTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputSumoLogicTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputSumoLogicTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputSumoLogicTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputSumoLogicTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicTimeoutRetrySettings$ {
  /** @deprecated use `OutputSumoLogicTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputSumoLogicTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputSumoLogicTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputSumoLogicTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputSumoLogicTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputSumoLogicTimeoutRetrySettings$Outbound;
}

export function outputSumoLogicTimeoutRetrySettingsToJSON(
  outputSumoLogicTimeoutRetrySettings: OutputSumoLogicTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputSumoLogicTimeoutRetrySettings$outboundSchema.parse(
      outputSumoLogicTimeoutRetrySettings,
    ),
  );
}

export function outputSumoLogicTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSumoLogicTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSumoLogicTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSumoLogicTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputSumoLogicBackpressureBehavior$inboundSchema: z.ZodType<
  OutputSumoLogicBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSumoLogicBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSumoLogicBackpressureBehavior$outboundSchema: z.ZodType<
  OutputSumoLogicBackpressureBehavior,
  z.ZodTypeDef,
  OutputSumoLogicBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputSumoLogicBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicBackpressureBehavior$ {
  /** @deprecated use `OutputSumoLogicBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputSumoLogicBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSumoLogicBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputSumoLogicBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputSumoLogicCompression$inboundSchema: z.ZodType<
  OutputSumoLogicCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSumoLogicCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSumoLogicCompression$outboundSchema: z.ZodType<
  OutputSumoLogicCompression,
  z.ZodTypeDef,
  OutputSumoLogicCompression
> = z.union([
  z.nativeEnum(OutputSumoLogicCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicCompression$ {
  /** @deprecated use `OutputSumoLogicCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSumoLogicCompression$inboundSchema;
  /** @deprecated use `OutputSumoLogicCompression$outboundSchema` instead. */
  export const outboundSchema = OutputSumoLogicCompression$outboundSchema;
}

/** @internal */
export const OutputSumoLogicQueueFullBehavior$inboundSchema: z.ZodType<
  OutputSumoLogicQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSumoLogicQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSumoLogicQueueFullBehavior$outboundSchema: z.ZodType<
  OutputSumoLogicQueueFullBehavior,
  z.ZodTypeDef,
  OutputSumoLogicQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputSumoLogicQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicQueueFullBehavior$ {
  /** @deprecated use `OutputSumoLogicQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSumoLogicQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputSumoLogicQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSumoLogicQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputSumoLogicMode$inboundSchema: z.ZodType<
  OutputSumoLogicMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSumoLogicMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSumoLogicMode$outboundSchema: z.ZodType<
  OutputSumoLogicMode,
  z.ZodTypeDef,
  OutputSumoLogicMode
> = z.union([
  z.nativeEnum(OutputSumoLogicMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicMode$ {
  /** @deprecated use `OutputSumoLogicMode$inboundSchema` instead. */
  export const inboundSchema = OutputSumoLogicMode$inboundSchema;
  /** @deprecated use `OutputSumoLogicMode$outboundSchema` instead. */
  export const outboundSchema = OutputSumoLogicMode$outboundSchema;
}

/** @internal */
export const OutputSumoLogicPqControls$inboundSchema: z.ZodType<
  OutputSumoLogicPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSumoLogicPqControls$Outbound = {};

/** @internal */
export const OutputSumoLogicPqControls$outboundSchema: z.ZodType<
  OutputSumoLogicPqControls$Outbound,
  z.ZodTypeDef,
  OutputSumoLogicPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogicPqControls$ {
  /** @deprecated use `OutputSumoLogicPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputSumoLogicPqControls$inboundSchema;
  /** @deprecated use `OutputSumoLogicPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputSumoLogicPqControls$outboundSchema;
  /** @deprecated use `OutputSumoLogicPqControls$Outbound` instead. */
  export type Outbound = OutputSumoLogicPqControls$Outbound;
}

export function outputSumoLogicPqControlsToJSON(
  outputSumoLogicPqControls: OutputSumoLogicPqControls,
): string {
  return JSON.stringify(
    OutputSumoLogicPqControls$outboundSchema.parse(outputSumoLogicPqControls),
  );
}

export function outputSumoLogicPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSumoLogicPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSumoLogicPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSumoLogicPqControls' from JSON`,
  );
}

/** @internal */
export const OutputSumoLogic$inboundSchema: z.ZodType<
  OutputSumoLogic,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSumoLogicType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  customSource: z.string().optional(),
  customCategory: z.string().optional(),
  format: OutputSumoLogicDataFormat$inboundSchema.default("json"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(1024),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputSumoLogicExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputSumoLogicFailedRequestLoggingMode$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputSumoLogicResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputSumoLogicTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputSumoLogicBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSumoLogicCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputSumoLogicQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputSumoLogicMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSumoLogicPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputSumoLogic$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  url: string;
  customSource?: string | undefined;
  customCategory?: string | undefined;
  format: string;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputSumoLogicExtraHttpHeader$Outbound> | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputSumoLogicResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputSumoLogicTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputSumoLogicPqControls$Outbound | undefined;
};

/** @internal */
export const OutputSumoLogic$outboundSchema: z.ZodType<
  OutputSumoLogic$Outbound,
  z.ZodTypeDef,
  OutputSumoLogic
> = z.object({
  id: z.string().optional(),
  type: OutputSumoLogicType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  customSource: z.string().optional(),
  customCategory: z.string().optional(),
  format: OutputSumoLogicDataFormat$outboundSchema.default("json"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(1024),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputSumoLogicExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputSumoLogicFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputSumoLogicResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputSumoLogicTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputSumoLogicBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSumoLogicCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputSumoLogicQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputSumoLogicMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSumoLogicPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSumoLogic$ {
  /** @deprecated use `OutputSumoLogic$inboundSchema` instead. */
  export const inboundSchema = OutputSumoLogic$inboundSchema;
  /** @deprecated use `OutputSumoLogic$outboundSchema` instead. */
  export const outboundSchema = OutputSumoLogic$outboundSchema;
  /** @deprecated use `OutputSumoLogic$Outbound` instead. */
  export type Outbound = OutputSumoLogic$Outbound;
}

export function outputSumoLogicToJSON(
  outputSumoLogic: OutputSumoLogic,
): string {
  return JSON.stringify(OutputSumoLogic$outboundSchema.parse(outputSumoLogic));
}

export function outputSumoLogicFromJSON(
  jsonString: string,
): SafeParseResult<OutputSumoLogic, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSumoLogic$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSumoLogic' from JSON`,
  );
}
