/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LogicalPlan,
  LogicalPlan$inboundSchema,
  LogicalPlan$Outbound,
  LogicalPlan$outboundSchema,
} from "./logicalplan.js";
import {
  Pipeline,
  Pipeline$inboundSchema,
  Pipeline$Outbound,
  Pipeline$outboundSchema,
} from "./pipeline.js";
import {
  SearchTerm,
  SearchTerm$inboundSchema,
  SearchTerm$Outbound,
  SearchTerm$outboundSchema,
} from "./searchterm.js";
import {
  SortByField,
  SortByField$inboundSchema,
  SortByField$Outbound,
  SortByField$outboundSchema,
} from "./sortbyfield.js";

export type LogicalPlans = {
  combined?: { [k: string]: Array<LogicalPlan> } | undefined;
  coordinated?: LogicalPlan | undefined;
  federated?: LogicalPlan | undefined;
};

export type Pipelines = {
  combined?: Pipeline | undefined;
  coordinated?: Pipeline | undefined;
  federated?: Pipeline | undefined;
};

export type SearchConfig = {
  canComputeMetadataDistributively?: boolean | undefined;
  datasets: Array<string>;
  hasSendOperator: boolean;
  logicalPlans: LogicalPlans;
  orderedFieldNames: Array<string>;
  pipelines: Pipelines;
  referencedColumnPaths?: Array<Array<string>> | undefined;
  searchTerms: Array<SearchTerm>;
  sortFields?: Array<SortByField> | undefined;
  useFormattedVisualization: boolean;
};

/** @internal */
export const LogicalPlans$inboundSchema: z.ZodType<
  LogicalPlans,
  z.ZodTypeDef,
  unknown
> = z.object({
  Combined: z.record(z.array(LogicalPlan$inboundSchema)).optional(),
  Coordinated: LogicalPlan$inboundSchema.optional(),
  Federated: LogicalPlan$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Combined": "combined",
    "Coordinated": "coordinated",
    "Federated": "federated",
  });
});

/** @internal */
export type LogicalPlans$Outbound = {
  Combined?: { [k: string]: Array<LogicalPlan$Outbound> } | undefined;
  Coordinated?: LogicalPlan$Outbound | undefined;
  Federated?: LogicalPlan$Outbound | undefined;
};

/** @internal */
export const LogicalPlans$outboundSchema: z.ZodType<
  LogicalPlans$Outbound,
  z.ZodTypeDef,
  LogicalPlans
> = z.object({
  combined: z.record(z.array(LogicalPlan$outboundSchema)).optional(),
  coordinated: LogicalPlan$outboundSchema.optional(),
  federated: LogicalPlan$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    combined: "Combined",
    coordinated: "Coordinated",
    federated: "Federated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogicalPlans$ {
  /** @deprecated use `LogicalPlans$inboundSchema` instead. */
  export const inboundSchema = LogicalPlans$inboundSchema;
  /** @deprecated use `LogicalPlans$outboundSchema` instead. */
  export const outboundSchema = LogicalPlans$outboundSchema;
  /** @deprecated use `LogicalPlans$Outbound` instead. */
  export type Outbound = LogicalPlans$Outbound;
}

export function logicalPlansToJSON(logicalPlans: LogicalPlans): string {
  return JSON.stringify(LogicalPlans$outboundSchema.parse(logicalPlans));
}

export function logicalPlansFromJSON(
  jsonString: string,
): SafeParseResult<LogicalPlans, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogicalPlans$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogicalPlans' from JSON`,
  );
}

/** @internal */
export const Pipelines$inboundSchema: z.ZodType<
  Pipelines,
  z.ZodTypeDef,
  unknown
> = z.object({
  Combined: Pipeline$inboundSchema.optional(),
  Coordinated: Pipeline$inboundSchema.optional(),
  Federated: Pipeline$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Combined": "combined",
    "Coordinated": "coordinated",
    "Federated": "federated",
  });
});

/** @internal */
export type Pipelines$Outbound = {
  Combined?: Pipeline$Outbound | undefined;
  Coordinated?: Pipeline$Outbound | undefined;
  Federated?: Pipeline$Outbound | undefined;
};

/** @internal */
export const Pipelines$outboundSchema: z.ZodType<
  Pipelines$Outbound,
  z.ZodTypeDef,
  Pipelines
> = z.object({
  combined: Pipeline$outboundSchema.optional(),
  coordinated: Pipeline$outboundSchema.optional(),
  federated: Pipeline$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    combined: "Combined",
    coordinated: "Coordinated",
    federated: "Federated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pipelines$ {
  /** @deprecated use `Pipelines$inboundSchema` instead. */
  export const inboundSchema = Pipelines$inboundSchema;
  /** @deprecated use `Pipelines$outboundSchema` instead. */
  export const outboundSchema = Pipelines$outboundSchema;
  /** @deprecated use `Pipelines$Outbound` instead. */
  export type Outbound = Pipelines$Outbound;
}

export function pipelinesToJSON(pipelines: Pipelines): string {
  return JSON.stringify(Pipelines$outboundSchema.parse(pipelines));
}

export function pipelinesFromJSON(
  jsonString: string,
): SafeParseResult<Pipelines, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pipelines$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pipelines' from JSON`,
  );
}

/** @internal */
export const SearchConfig$inboundSchema: z.ZodType<
  SearchConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  canComputeMetadataDistributively: z.boolean().optional(),
  datasets: z.array(z.string()),
  hasSendOperator: z.boolean(),
  logicalPlans: z.lazy(() => LogicalPlans$inboundSchema),
  orderedFieldNames: z.array(z.string()),
  pipelines: z.lazy(() => Pipelines$inboundSchema),
  referencedColumnPaths: z.array(z.array(z.string())).optional(),
  searchTerms: z.array(SearchTerm$inboundSchema),
  sortFields: z.array(SortByField$inboundSchema).optional(),
  useFormattedVisualization: z.boolean(),
});

/** @internal */
export type SearchConfig$Outbound = {
  canComputeMetadataDistributively?: boolean | undefined;
  datasets: Array<string>;
  hasSendOperator: boolean;
  logicalPlans: LogicalPlans$Outbound;
  orderedFieldNames: Array<string>;
  pipelines: Pipelines$Outbound;
  referencedColumnPaths?: Array<Array<string>> | undefined;
  searchTerms: Array<SearchTerm$Outbound>;
  sortFields?: Array<SortByField$Outbound> | undefined;
  useFormattedVisualization: boolean;
};

/** @internal */
export const SearchConfig$outboundSchema: z.ZodType<
  SearchConfig$Outbound,
  z.ZodTypeDef,
  SearchConfig
> = z.object({
  canComputeMetadataDistributively: z.boolean().optional(),
  datasets: z.array(z.string()),
  hasSendOperator: z.boolean(),
  logicalPlans: z.lazy(() => LogicalPlans$outboundSchema),
  orderedFieldNames: z.array(z.string()),
  pipelines: z.lazy(() => Pipelines$outboundSchema),
  referencedColumnPaths: z.array(z.array(z.string())).optional(),
  searchTerms: z.array(SearchTerm$outboundSchema),
  sortFields: z.array(SortByField$outboundSchema).optional(),
  useFormattedVisualization: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchConfig$ {
  /** @deprecated use `SearchConfig$inboundSchema` instead. */
  export const inboundSchema = SearchConfig$inboundSchema;
  /** @deprecated use `SearchConfig$outboundSchema` instead. */
  export const outboundSchema = SearchConfig$outboundSchema;
  /** @deprecated use `SearchConfig$Outbound` instead. */
  export type Outbound = SearchConfig$Outbound;
}

export function searchConfigToJSON(searchConfig: SearchConfig): string {
  return JSON.stringify(SearchConfig$outboundSchema.parse(searchConfig));
}

export function searchConfigFromJSON(
  jsonString: string,
): SafeParseResult<SearchConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchConfig' from JSON`,
  );
}
