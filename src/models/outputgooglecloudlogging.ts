/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputGoogleCloudLoggingType = {
  GoogleCloudLogging: "google_cloud_logging",
} as const;
export type OutputGoogleCloudLoggingType = ClosedEnum<
  typeof OutputGoogleCloudLoggingType
>;

export const LogLocationType = {
  Project: "project",
  Organization: "organization",
  BillingAccount: "billingAccount",
  Folder: "folder",
} as const;
export type LogLocationType = OpenEnum<typeof LogLocationType>;

/**
 * Format to use when sending payload. Defaults to Text.
 */
export const PayloadFormat = {
  Text: "text",
  Json: "json",
} as const;
/**
 * Format to use when sending payload. Defaults to Text.
 */
export type PayloadFormat = OpenEnum<typeof PayloadFormat>;

export type LogLabel = {
  /**
   * Label name
   */
  label: string;
  /**
   * JavaScript expression to compute the label's value.
   */
  valueExpression: string;
};

export type ResourceTypeLabel = {
  /**
   * Label name
   */
  label: string;
  /**
   * JavaScript expression to compute the label's value.
   */
  valueExpression: string;
};

/**
 * Choose Auto to use Google Application Default Credentials (ADC), Manual to enter Google service account credentials directly, or Secret to select or create a stored secret that references Google service account credentials.
 */
export const OutputGoogleCloudLoggingGoogleAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Choose Auto to use Google Application Default Credentials (ADC), Manual to enter Google service account credentials directly, or Secret to select or create a stored secret that references Google service account credentials.
 */
export type OutputGoogleCloudLoggingGoogleAuthenticationMethod = OpenEnum<
  typeof OutputGoogleCloudLoggingGoogleAuthenticationMethod
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputGoogleCloudLoggingBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputGoogleCloudLoggingBackpressureBehavior = OpenEnum<
  typeof OutputGoogleCloudLoggingBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputGoogleCloudLoggingCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputGoogleCloudLoggingCompression = OpenEnum<
  typeof OutputGoogleCloudLoggingCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputGoogleCloudLoggingQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputGoogleCloudLoggingQueueFullBehavior = OpenEnum<
  typeof OutputGoogleCloudLoggingQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputGoogleCloudLoggingMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputGoogleCloudLoggingMode = OpenEnum<
  typeof OutputGoogleCloudLoggingMode
>;

export type OutputGoogleCloudLoggingPqControls = {};

export type OutputGoogleCloudLogging = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputGoogleCloudLoggingType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  logLocationType: LogLocationType;
  /**
   * JavaScript expression to compute the value of the log name.
   */
  logNameExpression: string;
  /**
   * Format to use when sending payload. Defaults to Text.
   */
  payloadFormat?: PayloadFormat | undefined;
  /**
   * Labels to apply to the log entry
   */
  logLabels?: Array<LogLabel> | undefined;
  /**
   * JavaScript expression to compute the value of the managed resource type field. Must evaluate to one of the valid values [here](https://cloud.google.com/logging/docs/api/v2/resource-list#resource-types). Defaults to "global".
   */
  resourceTypeExpression?: string | undefined;
  /**
   * Labels to apply to the managed resource. These must correspond to the valid labels for the specified resource type (see [here](https://cloud.google.com/logging/docs/api/v2/resource-list#resource-types)). Otherwise, they will be dropped by Google Cloud Logging.
   */
  resourceTypeLabels?: Array<ResourceTypeLabel> | undefined;
  /**
   * JavaScript expression to compute the value of the severity field. Must evaluate to one of the severity values supported by Google Cloud Logging [here](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity) (case insensitive). Defaults to "DEFAULT".
   */
  severityExpression?: string | undefined;
  /**
   * JavaScript expression to compute the value of the insert ID field.
   */
  insertIdExpression?: string | undefined;
  /**
   * Choose Auto to use Google Application Default Credentials (ADC), Manual to enter Google service account credentials directly, or Secret to select or create a stored secret that references Google service account credentials.
   */
  googleAuthMethod?:
    | OutputGoogleCloudLoggingGoogleAuthenticationMethod
    | undefined;
  /**
   * Contents of service account credentials (JSON keys) file downloaded from Google Cloud. To upload a file, click the upload button at this field's upper right.
   */
  serviceAccountCredentials?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  secret?: string | undefined;
  /**
   * Maximum size, in KB, of the request body.
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Max number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max record size.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Maximum number of ongoing requests before blocking.
   */
  concurrency?: number | undefined;
  /**
   * Amount of time (milliseconds) to wait for the connection to establish before retrying
   */
  connectionTimeout?: number | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it.
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum number of requests to limit to per second.
   */
  throttleRateReqPerSec?: number | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request method as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  requestMethodExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request URL as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  requestUrlExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request size as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  requestSizeExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request method as a number. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  statusExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP response size as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  responseSizeExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request user agent as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  userAgentExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request remote IP as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  remoteIpExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request server IP as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  serverIpExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request referer as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  refererExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request latency, formatted as <seconds>.<nanoseconds>s (for example, 1.23s). See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  latencyExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request cache lookup as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  cacheLookupExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request cache hit as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  cacheHitExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request cache validated with origin server as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  cacheValidatedExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request cache fill bytes as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  cacheFillBytesExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the HTTP request protocol as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details.
   */
  protocolExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry operation ID as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details.
   */
  idExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry operation producer as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details.
   */
  producerExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry operation first flag as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details.
   */
  firstExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry operation last flag as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details.
   */
  lastExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry source location file as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentrysourcelocation) for details.
   */
  fileExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry source location line as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentrysourcelocation) for details.
   */
  lineExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry source location function as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentrysourcelocation) for details.
   */
  functionExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry log split UID as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logsplit) for details.
   */
  uidExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry log split index as a number. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logsplit) for details.
   */
  indexExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the log entry log split total splits as a number. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logsplit) for details.
   */
  totalSplitsExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the REST resource name of the trace being written as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) for details.
   */
  traceExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the ID of the cloud trace span associated with the current operation in which the log is being written as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) for details.
   */
  spanIdExpression?: string | undefined;
  /**
   * A JavaScript expression that evaluates to the the sampling decision of the span associated with the log entry. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) for details.
   */
  traceSampledExpression?: string | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputGoogleCloudLoggingBackpressureBehavior | undefined;
  /**
   * Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced.
   */
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  /**
   * JavaScript expression to compute the value of the folder ID with which log entries should be associated.
   */
  logLocationExpression: string;
  /**
   * JavaScript expression to compute the value of the payload. Must evaluate to a JavaScript object value. If an invalid value is encountered it will result in the default value instead. Defaults to the entire event.
   */
  payloadExpression?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputGoogleCloudLoggingCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputGoogleCloudLoggingQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputGoogleCloudLoggingMode | undefined;
  pqControls?: OutputGoogleCloudLoggingPqControls | undefined;
};

/** @internal */
export const OutputGoogleCloudLoggingType$inboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleCloudLoggingType
> = z.nativeEnum(OutputGoogleCloudLoggingType);

/** @internal */
export const OutputGoogleCloudLoggingType$outboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleCloudLoggingType
> = OutputGoogleCloudLoggingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudLoggingType$ {
  /** @deprecated use `OutputGoogleCloudLoggingType$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleCloudLoggingType$inboundSchema;
  /** @deprecated use `OutputGoogleCloudLoggingType$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleCloudLoggingType$outboundSchema;
}

/** @internal */
export const LogLocationType$inboundSchema: z.ZodType<
  LogLocationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(LogLocationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const LogLocationType$outboundSchema: z.ZodType<
  LogLocationType,
  z.ZodTypeDef,
  LogLocationType
> = z.union([
  z.nativeEnum(LogLocationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogLocationType$ {
  /** @deprecated use `LogLocationType$inboundSchema` instead. */
  export const inboundSchema = LogLocationType$inboundSchema;
  /** @deprecated use `LogLocationType$outboundSchema` instead. */
  export const outboundSchema = LogLocationType$outboundSchema;
}

/** @internal */
export const PayloadFormat$inboundSchema: z.ZodType<
  PayloadFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PayloadFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PayloadFormat$outboundSchema: z.ZodType<
  PayloadFormat,
  z.ZodTypeDef,
  PayloadFormat
> = z.union([
  z.nativeEnum(PayloadFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadFormat$ {
  /** @deprecated use `PayloadFormat$inboundSchema` instead. */
  export const inboundSchema = PayloadFormat$inboundSchema;
  /** @deprecated use `PayloadFormat$outboundSchema` instead. */
  export const outboundSchema = PayloadFormat$outboundSchema;
}

/** @internal */
export const LogLabel$inboundSchema: z.ZodType<
  LogLabel,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  valueExpression: z.string(),
});

/** @internal */
export type LogLabel$Outbound = {
  label: string;
  valueExpression: string;
};

/** @internal */
export const LogLabel$outboundSchema: z.ZodType<
  LogLabel$Outbound,
  z.ZodTypeDef,
  LogLabel
> = z.object({
  label: z.string(),
  valueExpression: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogLabel$ {
  /** @deprecated use `LogLabel$inboundSchema` instead. */
  export const inboundSchema = LogLabel$inboundSchema;
  /** @deprecated use `LogLabel$outboundSchema` instead. */
  export const outboundSchema = LogLabel$outboundSchema;
  /** @deprecated use `LogLabel$Outbound` instead. */
  export type Outbound = LogLabel$Outbound;
}

export function logLabelToJSON(logLabel: LogLabel): string {
  return JSON.stringify(LogLabel$outboundSchema.parse(logLabel));
}

export function logLabelFromJSON(
  jsonString: string,
): SafeParseResult<LogLabel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogLabel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogLabel' from JSON`,
  );
}

/** @internal */
export const ResourceTypeLabel$inboundSchema: z.ZodType<
  ResourceTypeLabel,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  valueExpression: z.string(),
});

/** @internal */
export type ResourceTypeLabel$Outbound = {
  label: string;
  valueExpression: string;
};

/** @internal */
export const ResourceTypeLabel$outboundSchema: z.ZodType<
  ResourceTypeLabel$Outbound,
  z.ZodTypeDef,
  ResourceTypeLabel
> = z.object({
  label: z.string(),
  valueExpression: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceTypeLabel$ {
  /** @deprecated use `ResourceTypeLabel$inboundSchema` instead. */
  export const inboundSchema = ResourceTypeLabel$inboundSchema;
  /** @deprecated use `ResourceTypeLabel$outboundSchema` instead. */
  export const outboundSchema = ResourceTypeLabel$outboundSchema;
  /** @deprecated use `ResourceTypeLabel$Outbound` instead. */
  export type Outbound = ResourceTypeLabel$Outbound;
}

export function resourceTypeLabelToJSON(
  resourceTypeLabel: ResourceTypeLabel,
): string {
  return JSON.stringify(
    ResourceTypeLabel$outboundSchema.parse(resourceTypeLabel),
  );
}

export function resourceTypeLabelFromJSON(
  jsonString: string,
): SafeParseResult<ResourceTypeLabel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceTypeLabel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceTypeLabel' from JSON`,
  );
}

/** @internal */
export const OutputGoogleCloudLoggingGoogleAuthenticationMethod$inboundSchema:
  z.ZodType<
    OutputGoogleCloudLoggingGoogleAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputGoogleCloudLoggingGoogleAuthenticationMethod),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputGoogleCloudLoggingGoogleAuthenticationMethod$outboundSchema:
  z.ZodType<
    OutputGoogleCloudLoggingGoogleAuthenticationMethod,
    z.ZodTypeDef,
    OutputGoogleCloudLoggingGoogleAuthenticationMethod
  > = z.union([
    z.nativeEnum(OutputGoogleCloudLoggingGoogleAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudLoggingGoogleAuthenticationMethod$ {
  /** @deprecated use `OutputGoogleCloudLoggingGoogleAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudLoggingGoogleAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputGoogleCloudLoggingGoogleAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudLoggingGoogleAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudLoggingBackpressureBehavior$inboundSchema:
  z.ZodType<
    OutputGoogleCloudLoggingBackpressureBehavior,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputGoogleCloudLoggingBackpressureBehavior),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputGoogleCloudLoggingBackpressureBehavior$outboundSchema:
  z.ZodType<
    OutputGoogleCloudLoggingBackpressureBehavior,
    z.ZodTypeDef,
    OutputGoogleCloudLoggingBackpressureBehavior
  > = z.union([
    z.nativeEnum(OutputGoogleCloudLoggingBackpressureBehavior),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudLoggingBackpressureBehavior$ {
  /** @deprecated use `OutputGoogleCloudLoggingBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudLoggingBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputGoogleCloudLoggingBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudLoggingBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudLoggingCompression$inboundSchema: z.ZodType<
  OutputGoogleCloudLoggingCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGoogleCloudLoggingCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGoogleCloudLoggingCompression$outboundSchema: z.ZodType<
  OutputGoogleCloudLoggingCompression,
  z.ZodTypeDef,
  OutputGoogleCloudLoggingCompression
> = z.union([
  z.nativeEnum(OutputGoogleCloudLoggingCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudLoggingCompression$ {
  /** @deprecated use `OutputGoogleCloudLoggingCompression$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudLoggingCompression$inboundSchema;
  /** @deprecated use `OutputGoogleCloudLoggingCompression$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudLoggingCompression$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudLoggingQueueFullBehavior$inboundSchema: z.ZodType<
  OutputGoogleCloudLoggingQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGoogleCloudLoggingQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGoogleCloudLoggingQueueFullBehavior$outboundSchema:
  z.ZodType<
    OutputGoogleCloudLoggingQueueFullBehavior,
    z.ZodTypeDef,
    OutputGoogleCloudLoggingQueueFullBehavior
  > = z.union([
    z.nativeEnum(OutputGoogleCloudLoggingQueueFullBehavior),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudLoggingQueueFullBehavior$ {
  /** @deprecated use `OutputGoogleCloudLoggingQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudLoggingQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputGoogleCloudLoggingQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudLoggingQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudLoggingMode$inboundSchema: z.ZodType<
  OutputGoogleCloudLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputGoogleCloudLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputGoogleCloudLoggingMode$outboundSchema: z.ZodType<
  OutputGoogleCloudLoggingMode,
  z.ZodTypeDef,
  OutputGoogleCloudLoggingMode
> = z.union([
  z.nativeEnum(OutputGoogleCloudLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudLoggingMode$ {
  /** @deprecated use `OutputGoogleCloudLoggingMode$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleCloudLoggingMode$inboundSchema;
  /** @deprecated use `OutputGoogleCloudLoggingMode$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleCloudLoggingMode$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudLoggingPqControls$inboundSchema: z.ZodType<
  OutputGoogleCloudLoggingPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputGoogleCloudLoggingPqControls$Outbound = {};

/** @internal */
export const OutputGoogleCloudLoggingPqControls$outboundSchema: z.ZodType<
  OutputGoogleCloudLoggingPqControls$Outbound,
  z.ZodTypeDef,
  OutputGoogleCloudLoggingPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudLoggingPqControls$ {
  /** @deprecated use `OutputGoogleCloudLoggingPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleCloudLoggingPqControls$inboundSchema;
  /** @deprecated use `OutputGoogleCloudLoggingPqControls$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudLoggingPqControls$outboundSchema;
  /** @deprecated use `OutputGoogleCloudLoggingPqControls$Outbound` instead. */
  export type Outbound = OutputGoogleCloudLoggingPqControls$Outbound;
}

export function outputGoogleCloudLoggingPqControlsToJSON(
  outputGoogleCloudLoggingPqControls: OutputGoogleCloudLoggingPqControls,
): string {
  return JSON.stringify(
    OutputGoogleCloudLoggingPqControls$outboundSchema.parse(
      outputGoogleCloudLoggingPqControls,
    ),
  );
}

export function outputGoogleCloudLoggingPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputGoogleCloudLoggingPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGoogleCloudLoggingPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGoogleCloudLoggingPqControls' from JSON`,
  );
}

/** @internal */
export const OutputGoogleCloudLogging$inboundSchema: z.ZodType<
  OutputGoogleCloudLogging,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputGoogleCloudLoggingType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  logLocationType: LogLocationType$inboundSchema,
  logNameExpression: z.string(),
  payloadFormat: PayloadFormat$inboundSchema.default("text"),
  logLabels: z.array(z.lazy(() => LogLabel$inboundSchema)).optional(),
  resourceTypeExpression: z.string().optional(),
  resourceTypeLabels: z.array(z.lazy(() => ResourceTypeLabel$inboundSchema))
    .optional(),
  severityExpression: z.string().optional(),
  insertIdExpression: z.string().optional(),
  googleAuthMethod:
    OutputGoogleCloudLoggingGoogleAuthenticationMethod$inboundSchema.default(
      "manual",
    ),
  serviceAccountCredentials: z.string().optional(),
  secret: z.string().optional(),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  flushPeriodSec: z.number().default(1),
  concurrency: z.number().default(5),
  connectionTimeout: z.number().default(10000),
  timeoutSec: z.number().default(30),
  throttleRateReqPerSec: z.number().int().optional(),
  requestMethodExpression: z.string().optional(),
  requestUrlExpression: z.string().optional(),
  requestSizeExpression: z.string().optional(),
  statusExpression: z.string().optional(),
  responseSizeExpression: z.string().optional(),
  userAgentExpression: z.string().optional(),
  remoteIpExpression: z.string().optional(),
  serverIpExpression: z.string().optional(),
  refererExpression: z.string().optional(),
  latencyExpression: z.string().optional(),
  cacheLookupExpression: z.string().optional(),
  cacheHitExpression: z.string().optional(),
  cacheValidatedExpression: z.string().optional(),
  cacheFillBytesExpression: z.string().optional(),
  protocolExpression: z.string().optional(),
  idExpression: z.string().optional(),
  producerExpression: z.string().optional(),
  firstExpression: z.string().optional(),
  lastExpression: z.string().optional(),
  fileExpression: z.string().optional(),
  lineExpression: z.string().optional(),
  functionExpression: z.string().optional(),
  uidExpression: z.string().optional(),
  indexExpression: z.string().optional(),
  totalSplitsExpression: z.string().optional(),
  traceExpression: z.string().optional(),
  spanIdExpression: z.string().optional(),
  traceSampledExpression: z.string().optional(),
  onBackpressure: OutputGoogleCloudLoggingBackpressureBehavior$inboundSchema
    .default("block"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  logLocationExpression: z.string(),
  payloadExpression: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGoogleCloudLoggingCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputGoogleCloudLoggingQueueFullBehavior$inboundSchema
    .default("block"),
  pqMode: OutputGoogleCloudLoggingMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGoogleCloudLoggingPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type OutputGoogleCloudLogging$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  logLocationType: string;
  logNameExpression: string;
  payloadFormat: string;
  logLabels?: Array<LogLabel$Outbound> | undefined;
  resourceTypeExpression?: string | undefined;
  resourceTypeLabels?: Array<ResourceTypeLabel$Outbound> | undefined;
  severityExpression?: string | undefined;
  insertIdExpression?: string | undefined;
  googleAuthMethod: string;
  serviceAccountCredentials?: string | undefined;
  secret?: string | undefined;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  flushPeriodSec: number;
  concurrency: number;
  connectionTimeout: number;
  timeoutSec: number;
  throttleRateReqPerSec?: number | undefined;
  requestMethodExpression?: string | undefined;
  requestUrlExpression?: string | undefined;
  requestSizeExpression?: string | undefined;
  statusExpression?: string | undefined;
  responseSizeExpression?: string | undefined;
  userAgentExpression?: string | undefined;
  remoteIpExpression?: string | undefined;
  serverIpExpression?: string | undefined;
  refererExpression?: string | undefined;
  latencyExpression?: string | undefined;
  cacheLookupExpression?: string | undefined;
  cacheHitExpression?: string | undefined;
  cacheValidatedExpression?: string | undefined;
  cacheFillBytesExpression?: string | undefined;
  protocolExpression?: string | undefined;
  idExpression?: string | undefined;
  producerExpression?: string | undefined;
  firstExpression?: string | undefined;
  lastExpression?: string | undefined;
  fileExpression?: string | undefined;
  lineExpression?: string | undefined;
  functionExpression?: string | undefined;
  uidExpression?: string | undefined;
  indexExpression?: string | undefined;
  totalSplitsExpression?: string | undefined;
  traceExpression?: string | undefined;
  spanIdExpression?: string | undefined;
  traceSampledExpression?: string | undefined;
  onBackpressure: string;
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  logLocationExpression: string;
  payloadExpression?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputGoogleCloudLoggingPqControls$Outbound | undefined;
};

/** @internal */
export const OutputGoogleCloudLogging$outboundSchema: z.ZodType<
  OutputGoogleCloudLogging$Outbound,
  z.ZodTypeDef,
  OutputGoogleCloudLogging
> = z.object({
  id: z.string().optional(),
  type: OutputGoogleCloudLoggingType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  logLocationType: LogLocationType$outboundSchema,
  logNameExpression: z.string(),
  payloadFormat: PayloadFormat$outboundSchema.default("text"),
  logLabels: z.array(z.lazy(() => LogLabel$outboundSchema)).optional(),
  resourceTypeExpression: z.string().optional(),
  resourceTypeLabels: z.array(z.lazy(() => ResourceTypeLabel$outboundSchema))
    .optional(),
  severityExpression: z.string().optional(),
  insertIdExpression: z.string().optional(),
  googleAuthMethod:
    OutputGoogleCloudLoggingGoogleAuthenticationMethod$outboundSchema.default(
      "manual",
    ),
  serviceAccountCredentials: z.string().optional(),
  secret: z.string().optional(),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  flushPeriodSec: z.number().default(1),
  concurrency: z.number().default(5),
  connectionTimeout: z.number().default(10000),
  timeoutSec: z.number().default(30),
  throttleRateReqPerSec: z.number().int().optional(),
  requestMethodExpression: z.string().optional(),
  requestUrlExpression: z.string().optional(),
  requestSizeExpression: z.string().optional(),
  statusExpression: z.string().optional(),
  responseSizeExpression: z.string().optional(),
  userAgentExpression: z.string().optional(),
  remoteIpExpression: z.string().optional(),
  serverIpExpression: z.string().optional(),
  refererExpression: z.string().optional(),
  latencyExpression: z.string().optional(),
  cacheLookupExpression: z.string().optional(),
  cacheHitExpression: z.string().optional(),
  cacheValidatedExpression: z.string().optional(),
  cacheFillBytesExpression: z.string().optional(),
  protocolExpression: z.string().optional(),
  idExpression: z.string().optional(),
  producerExpression: z.string().optional(),
  firstExpression: z.string().optional(),
  lastExpression: z.string().optional(),
  fileExpression: z.string().optional(),
  lineExpression: z.string().optional(),
  functionExpression: z.string().optional(),
  uidExpression: z.string().optional(),
  indexExpression: z.string().optional(),
  totalSplitsExpression: z.string().optional(),
  traceExpression: z.string().optional(),
  spanIdExpression: z.string().optional(),
  traceSampledExpression: z.string().optional(),
  onBackpressure: OutputGoogleCloudLoggingBackpressureBehavior$outboundSchema
    .default("block"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  logLocationExpression: z.string(),
  payloadExpression: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGoogleCloudLoggingCompression$outboundSchema.default(
    "none",
  ),
  pqOnBackpressure: OutputGoogleCloudLoggingQueueFullBehavior$outboundSchema
    .default("block"),
  pqMode: OutputGoogleCloudLoggingMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGoogleCloudLoggingPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudLogging$ {
  /** @deprecated use `OutputGoogleCloudLogging$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleCloudLogging$inboundSchema;
  /** @deprecated use `OutputGoogleCloudLogging$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleCloudLogging$outboundSchema;
  /** @deprecated use `OutputGoogleCloudLogging$Outbound` instead. */
  export type Outbound = OutputGoogleCloudLogging$Outbound;
}

export function outputGoogleCloudLoggingToJSON(
  outputGoogleCloudLogging: OutputGoogleCloudLogging,
): string {
  return JSON.stringify(
    OutputGoogleCloudLogging$outboundSchema.parse(outputGoogleCloudLogging),
  );
}

export function outputGoogleCloudLoggingFromJSON(
  jsonString: string,
): SafeParseResult<OutputGoogleCloudLogging, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGoogleCloudLogging$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGoogleCloudLogging' from JSON`,
  );
}
