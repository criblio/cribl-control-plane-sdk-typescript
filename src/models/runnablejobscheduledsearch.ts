/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const RunnableJobScheduledSearchJobType = {
  Collection: "collection",
  Executor: "executor",
  ScheduledSearch: "scheduledSearch",
} as const;
export type RunnableJobScheduledSearchJobType = OpenEnum<
  typeof RunnableJobScheduledSearchJobType
>;

export const RunnableJobScheduledSearchType = {
  Collection: "collection",
} as const;
export type RunnableJobScheduledSearchType = ClosedEnum<
  typeof RunnableJobScheduledSearchType
>;

/**
 * Level at which to set task logging
 */
export const RunnableJobScheduledSearchLogLevel = {
  Error: "error",
  Warn: "warn",
  Info: "info",
  Debug: "debug",
  Silly: "silly",
} as const;
/**
 * Level at which to set task logging
 */
export type RunnableJobScheduledSearchLogLevel = ClosedEnum<
  typeof RunnableJobScheduledSearchLogLevel
>;

export type RunnableJobScheduledSearchTimeWarning = {};

export type RunnableJobScheduledSearchRunSettings = {
  type?: RunnableJobScheduledSearchType | undefined;
  /**
   * Reschedule tasks that failed with non-fatal errors
   */
  rescheduleDroppedTasks?: boolean | undefined;
  /**
   * Maximum number of times a task can be rescheduled
   */
  maxTaskReschedule?: number | undefined;
  /**
   * Level at which to set task logging
   */
  logLevel?: RunnableJobScheduledSearchLogLevel | undefined;
  /**
   * Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
   */
  jobTimeout?: string | undefined;
  /**
   * Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
   */
  mode?: string | undefined;
  timeRangeType?: string | undefined;
  /**
   * Earliest time to collect data for the selected timezone
   */
  earliest?: number | undefined;
  /**
   * Latest time to collect data for the selected timezone
   */
  latest?: number | undefined;
  timestampTimezone?: any | undefined;
  timeWarning?: RunnableJobScheduledSearchTimeWarning | undefined;
  /**
   * A filter for tokens in the provided collect path and/or the events being collected
   */
  expression?: string | undefined;
  /**
   * Limits the bundle size for small tasks. For example,
   *
   * @remarks
   *
   *         if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
   */
  minTaskSize?: string | undefined;
  /**
   * Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB,
   *
   * @remarks
   *
   *         you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
   */
  maxTaskSize?: string | undefined;
};

/**
 * Configuration for a scheduled job
 */
export type RunnableJobScheduledSearchSchedule = {
  /**
   * Enable to configure scheduling for this Collector
   */
  enabled?: boolean | undefined;
  /**
   * Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits
   */
  skippable?: boolean | undefined;
  /**
   * If Stream Leader (or single instance) restarts, run all missed jobs according to their original schedules
   */
  resumeMissed?: boolean | undefined;
  /**
   * A cron schedule on which to run this job
   */
  cronSchedule?: string | undefined;
  /**
   * The maximum number of instances of this scheduled job that may be running at any time
   */
  maxConcurrentRuns?: number | undefined;
  run?: RunnableJobScheduledSearchRunSettings | undefined;
};

export type RunnableJobScheduledSearch = {
  /**
   * Unique ID for this Job
   */
  id?: string | undefined;
  description?: string | undefined;
  type: RunnableJobScheduledSearchJobType;
  /**
   * Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
   */
  ttl?: string | undefined;
  /**
   * When enabled, this job's artifacts are not counted toward the Worker Group's finished job artifacts limit. Artifacts will be removed only after the Collector's configured time to live.
   */
  ignoreGroupJobsLimit?: boolean | undefined;
  /**
   * List of fields to remove from Discover results. Wildcards (for example, aws*) are allowed. This is useful when discovery returns sensitive fields that should not be exposed in the Jobs user interface.
   */
  removeFields?: Array<string> | undefined;
  /**
   * Resume the ad hoc job if a failure condition causes Stream to restart during job execution
   */
  resumeOnBoot?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Configuration for a scheduled job
   */
  schedule?: RunnableJobScheduledSearchSchedule | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Identifies which search query to run
   */
  savedQueryId: string;
};

/** @internal */
export const RunnableJobScheduledSearchJobType$inboundSchema: z.ZodType<
  RunnableJobScheduledSearchJobType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(RunnableJobScheduledSearchJobType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const RunnableJobScheduledSearchJobType$outboundSchema: z.ZodType<
  RunnableJobScheduledSearchJobType,
  z.ZodTypeDef,
  RunnableJobScheduledSearchJobType
> = z.union([
  z.nativeEnum(RunnableJobScheduledSearchJobType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobScheduledSearchJobType$ {
  /** @deprecated use `RunnableJobScheduledSearchJobType$inboundSchema` instead. */
  export const inboundSchema = RunnableJobScheduledSearchJobType$inboundSchema;
  /** @deprecated use `RunnableJobScheduledSearchJobType$outboundSchema` instead. */
  export const outboundSchema =
    RunnableJobScheduledSearchJobType$outboundSchema;
}

/** @internal */
export const RunnableJobScheduledSearchType$inboundSchema: z.ZodNativeEnum<
  typeof RunnableJobScheduledSearchType
> = z.nativeEnum(RunnableJobScheduledSearchType);

/** @internal */
export const RunnableJobScheduledSearchType$outboundSchema: z.ZodNativeEnum<
  typeof RunnableJobScheduledSearchType
> = RunnableJobScheduledSearchType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobScheduledSearchType$ {
  /** @deprecated use `RunnableJobScheduledSearchType$inboundSchema` instead. */
  export const inboundSchema = RunnableJobScheduledSearchType$inboundSchema;
  /** @deprecated use `RunnableJobScheduledSearchType$outboundSchema` instead. */
  export const outboundSchema = RunnableJobScheduledSearchType$outboundSchema;
}

/** @internal */
export const RunnableJobScheduledSearchLogLevel$inboundSchema: z.ZodNativeEnum<
  typeof RunnableJobScheduledSearchLogLevel
> = z.nativeEnum(RunnableJobScheduledSearchLogLevel);

/** @internal */
export const RunnableJobScheduledSearchLogLevel$outboundSchema: z.ZodNativeEnum<
  typeof RunnableJobScheduledSearchLogLevel
> = RunnableJobScheduledSearchLogLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobScheduledSearchLogLevel$ {
  /** @deprecated use `RunnableJobScheduledSearchLogLevel$inboundSchema` instead. */
  export const inboundSchema = RunnableJobScheduledSearchLogLevel$inboundSchema;
  /** @deprecated use `RunnableJobScheduledSearchLogLevel$outboundSchema` instead. */
  export const outboundSchema =
    RunnableJobScheduledSearchLogLevel$outboundSchema;
}

/** @internal */
export const RunnableJobScheduledSearchTimeWarning$inboundSchema: z.ZodType<
  RunnableJobScheduledSearchTimeWarning,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RunnableJobScheduledSearchTimeWarning$Outbound = {};

/** @internal */
export const RunnableJobScheduledSearchTimeWarning$outboundSchema: z.ZodType<
  RunnableJobScheduledSearchTimeWarning$Outbound,
  z.ZodTypeDef,
  RunnableJobScheduledSearchTimeWarning
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobScheduledSearchTimeWarning$ {
  /** @deprecated use `RunnableJobScheduledSearchTimeWarning$inboundSchema` instead. */
  export const inboundSchema =
    RunnableJobScheduledSearchTimeWarning$inboundSchema;
  /** @deprecated use `RunnableJobScheduledSearchTimeWarning$outboundSchema` instead. */
  export const outboundSchema =
    RunnableJobScheduledSearchTimeWarning$outboundSchema;
  /** @deprecated use `RunnableJobScheduledSearchTimeWarning$Outbound` instead. */
  export type Outbound = RunnableJobScheduledSearchTimeWarning$Outbound;
}

export function runnableJobScheduledSearchTimeWarningToJSON(
  runnableJobScheduledSearchTimeWarning: RunnableJobScheduledSearchTimeWarning,
): string {
  return JSON.stringify(
    RunnableJobScheduledSearchTimeWarning$outboundSchema.parse(
      runnableJobScheduledSearchTimeWarning,
    ),
  );
}

export function runnableJobScheduledSearchTimeWarningFromJSON(
  jsonString: string,
): SafeParseResult<RunnableJobScheduledSearchTimeWarning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunnableJobScheduledSearchTimeWarning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunnableJobScheduledSearchTimeWarning' from JSON`,
  );
}

/** @internal */
export const RunnableJobScheduledSearchRunSettings$inboundSchema: z.ZodType<
  RunnableJobScheduledSearchRunSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunnableJobScheduledSearchType$inboundSchema.optional(),
  rescheduleDroppedTasks: z.boolean().default(true),
  maxTaskReschedule: z.number().default(1),
  logLevel: RunnableJobScheduledSearchLogLevel$inboundSchema.default("info"),
  jobTimeout: z.string().default("0"),
  mode: z.string().default("list"),
  timeRangeType: z.string().default("relative"),
  earliest: z.number().optional(),
  latest: z.number().optional(),
  timestampTimezone: z.any().optional(),
  timeWarning: z.lazy(() => RunnableJobScheduledSearchTimeWarning$inboundSchema)
    .optional(),
  expression: z.string().default("true"),
  minTaskSize: z.string().default("1MB"),
  maxTaskSize: z.string().default("10MB"),
});

/** @internal */
export type RunnableJobScheduledSearchRunSettings$Outbound = {
  type?: string | undefined;
  rescheduleDroppedTasks: boolean;
  maxTaskReschedule: number;
  logLevel: string;
  jobTimeout: string;
  mode: string;
  timeRangeType: string;
  earliest?: number | undefined;
  latest?: number | undefined;
  timestampTimezone?: any | undefined;
  timeWarning?: RunnableJobScheduledSearchTimeWarning$Outbound | undefined;
  expression: string;
  minTaskSize: string;
  maxTaskSize: string;
};

/** @internal */
export const RunnableJobScheduledSearchRunSettings$outboundSchema: z.ZodType<
  RunnableJobScheduledSearchRunSettings$Outbound,
  z.ZodTypeDef,
  RunnableJobScheduledSearchRunSettings
> = z.object({
  type: RunnableJobScheduledSearchType$outboundSchema.optional(),
  rescheduleDroppedTasks: z.boolean().default(true),
  maxTaskReschedule: z.number().default(1),
  logLevel: RunnableJobScheduledSearchLogLevel$outboundSchema.default("info"),
  jobTimeout: z.string().default("0"),
  mode: z.string().default("list"),
  timeRangeType: z.string().default("relative"),
  earliest: z.number().optional(),
  latest: z.number().optional(),
  timestampTimezone: z.any().optional(),
  timeWarning: z.lazy(() =>
    RunnableJobScheduledSearchTimeWarning$outboundSchema
  ).optional(),
  expression: z.string().default("true"),
  minTaskSize: z.string().default("1MB"),
  maxTaskSize: z.string().default("10MB"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobScheduledSearchRunSettings$ {
  /** @deprecated use `RunnableJobScheduledSearchRunSettings$inboundSchema` instead. */
  export const inboundSchema =
    RunnableJobScheduledSearchRunSettings$inboundSchema;
  /** @deprecated use `RunnableJobScheduledSearchRunSettings$outboundSchema` instead. */
  export const outboundSchema =
    RunnableJobScheduledSearchRunSettings$outboundSchema;
  /** @deprecated use `RunnableJobScheduledSearchRunSettings$Outbound` instead. */
  export type Outbound = RunnableJobScheduledSearchRunSettings$Outbound;
}

export function runnableJobScheduledSearchRunSettingsToJSON(
  runnableJobScheduledSearchRunSettings: RunnableJobScheduledSearchRunSettings,
): string {
  return JSON.stringify(
    RunnableJobScheduledSearchRunSettings$outboundSchema.parse(
      runnableJobScheduledSearchRunSettings,
    ),
  );
}

export function runnableJobScheduledSearchRunSettingsFromJSON(
  jsonString: string,
): SafeParseResult<RunnableJobScheduledSearchRunSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunnableJobScheduledSearchRunSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunnableJobScheduledSearchRunSettings' from JSON`,
  );
}

/** @internal */
export const RunnableJobScheduledSearchSchedule$inboundSchema: z.ZodType<
  RunnableJobScheduledSearchSchedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  skippable: z.boolean().default(true),
  resumeMissed: z.boolean().default(false),
  cronSchedule: z.string().default("*/5 * * * *"),
  maxConcurrentRuns: z.number().default(1),
  run: z.lazy(() => RunnableJobScheduledSearchRunSettings$inboundSchema)
    .optional(),
});

/** @internal */
export type RunnableJobScheduledSearchSchedule$Outbound = {
  enabled?: boolean | undefined;
  skippable: boolean;
  resumeMissed: boolean;
  cronSchedule: string;
  maxConcurrentRuns: number;
  run?: RunnableJobScheduledSearchRunSettings$Outbound | undefined;
};

/** @internal */
export const RunnableJobScheduledSearchSchedule$outboundSchema: z.ZodType<
  RunnableJobScheduledSearchSchedule$Outbound,
  z.ZodTypeDef,
  RunnableJobScheduledSearchSchedule
> = z.object({
  enabled: z.boolean().optional(),
  skippable: z.boolean().default(true),
  resumeMissed: z.boolean().default(false),
  cronSchedule: z.string().default("*/5 * * * *"),
  maxConcurrentRuns: z.number().default(1),
  run: z.lazy(() => RunnableJobScheduledSearchRunSettings$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobScheduledSearchSchedule$ {
  /** @deprecated use `RunnableJobScheduledSearchSchedule$inboundSchema` instead. */
  export const inboundSchema = RunnableJobScheduledSearchSchedule$inboundSchema;
  /** @deprecated use `RunnableJobScheduledSearchSchedule$outboundSchema` instead. */
  export const outboundSchema =
    RunnableJobScheduledSearchSchedule$outboundSchema;
  /** @deprecated use `RunnableJobScheduledSearchSchedule$Outbound` instead. */
  export type Outbound = RunnableJobScheduledSearchSchedule$Outbound;
}

export function runnableJobScheduledSearchScheduleToJSON(
  runnableJobScheduledSearchSchedule: RunnableJobScheduledSearchSchedule,
): string {
  return JSON.stringify(
    RunnableJobScheduledSearchSchedule$outboundSchema.parse(
      runnableJobScheduledSearchSchedule,
    ),
  );
}

export function runnableJobScheduledSearchScheduleFromJSON(
  jsonString: string,
): SafeParseResult<RunnableJobScheduledSearchSchedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RunnableJobScheduledSearchSchedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunnableJobScheduledSearchSchedule' from JSON`,
  );
}

/** @internal */
export const RunnableJobScheduledSearch$inboundSchema: z.ZodType<
  RunnableJobScheduledSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  description: z.string().optional(),
  type: RunnableJobScheduledSearchJobType$inboundSchema,
  ttl: z.string().default("4h"),
  ignoreGroupJobsLimit: z.boolean().default(false),
  removeFields: z.array(z.string()).optional(),
  resumeOnBoot: z.boolean().default(false),
  environment: z.string().optional(),
  schedule: z.lazy(() => RunnableJobScheduledSearchSchedule$inboundSchema)
    .optional(),
  streamtags: z.array(z.string()).optional(),
  savedQueryId: z.string(),
});

/** @internal */
export type RunnableJobScheduledSearch$Outbound = {
  id?: string | undefined;
  description?: string | undefined;
  type: string;
  ttl: string;
  ignoreGroupJobsLimit: boolean;
  removeFields?: Array<string> | undefined;
  resumeOnBoot: boolean;
  environment?: string | undefined;
  schedule?: RunnableJobScheduledSearchSchedule$Outbound | undefined;
  streamtags?: Array<string> | undefined;
  savedQueryId: string;
};

/** @internal */
export const RunnableJobScheduledSearch$outboundSchema: z.ZodType<
  RunnableJobScheduledSearch$Outbound,
  z.ZodTypeDef,
  RunnableJobScheduledSearch
> = z.object({
  id: z.string().optional(),
  description: z.string().optional(),
  type: RunnableJobScheduledSearchJobType$outboundSchema,
  ttl: z.string().default("4h"),
  ignoreGroupJobsLimit: z.boolean().default(false),
  removeFields: z.array(z.string()).optional(),
  resumeOnBoot: z.boolean().default(false),
  environment: z.string().optional(),
  schedule: z.lazy(() => RunnableJobScheduledSearchSchedule$outboundSchema)
    .optional(),
  streamtags: z.array(z.string()).optional(),
  savedQueryId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobScheduledSearch$ {
  /** @deprecated use `RunnableJobScheduledSearch$inboundSchema` instead. */
  export const inboundSchema = RunnableJobScheduledSearch$inboundSchema;
  /** @deprecated use `RunnableJobScheduledSearch$outboundSchema` instead. */
  export const outboundSchema = RunnableJobScheduledSearch$outboundSchema;
  /** @deprecated use `RunnableJobScheduledSearch$Outbound` instead. */
  export type Outbound = RunnableJobScheduledSearch$Outbound;
}

export function runnableJobScheduledSearchToJSON(
  runnableJobScheduledSearch: RunnableJobScheduledSearch,
): string {
  return JSON.stringify(
    RunnableJobScheduledSearch$outboundSchema.parse(runnableJobScheduledSearch),
  );
}

export function runnableJobScheduledSearchFromJSON(
  jsonString: string,
): SafeParseResult<RunnableJobScheduledSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunnableJobScheduledSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunnableJobScheduledSearch' from JSON`,
  );
}
