/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputAzureDataExplorerType = {
  AzureDataExplorer: "azure_data_explorer",
} as const;
export type OutputAzureDataExplorerType = ClosedEnum<
  typeof OutputAzureDataExplorerType
>;

export const IngestionMode = {
  /**
   * Batching
   */
  Batching: "batching",
  /**
   * Streaming
   */
  Streaming: "streaming",
} as const;
export type IngestionMode = OpenEnum<typeof IngestionMode>;

/**
 * Endpoint used to acquire authentication tokens from Azure
 */
export const MicrosoftEntraIDAuthenticationEndpoint = {
  HttpsLoginMicrosoftonlineCom: "https://login.microsoftonline.com",
  HttpsLoginMicrosoftonlineUs: "https://login.microsoftonline.us",
  HttpsLoginPartnerMicrosoftonlineCn:
    "https://login.partner.microsoftonline.cn",
} as const;
/**
 * Endpoint used to acquire authentication tokens from Azure
 */
export type MicrosoftEntraIDAuthenticationEndpoint = OpenEnum<
  typeof MicrosoftEntraIDAuthenticationEndpoint
>;

/**
 * The type of OAuth 2.0 client credentials grant flow to use
 */
export const OutputAzureDataExplorerAuthenticationMethod = {
  /**
   * Client secret
   */
  ClientSecret: "clientSecret",
  /**
   * Client secret (text secret)
   */
  ClientTextSecret: "clientTextSecret",
  /**
   * Certificate
   */
  Certificate: "certificate",
} as const;
/**
 * The type of OAuth 2.0 client credentials grant flow to use
 */
export type OutputAzureDataExplorerAuthenticationMethod = OpenEnum<
  typeof OutputAzureDataExplorerAuthenticationMethod
>;

export type OutputAzureDataExplorerCertificate = {
  /**
   * The certificate you registered as credentials for your app in the Azure portal
   */
  certificateName?: string | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputAzureDataExplorerBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputAzureDataExplorerBackpressureBehavior = OpenEnum<
  typeof OutputAzureDataExplorerBackpressureBehavior
>;

/**
 * Format of the output data
 */
export const OutputAzureDataExplorerDataFormat = {
  /**
   * JSON
   */
  Json: "json",
  /**
   * Raw
   */
  Raw: "raw",
  /**
   * Parquet
   */
  Parquet: "parquet",
} as const;
/**
 * Format of the output data
 */
export type OutputAzureDataExplorerDataFormat = OpenEnum<
  typeof OutputAzureDataExplorerDataFormat
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputAzureDataExplorerDiskSpaceProtection = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputAzureDataExplorerDiskSpaceProtection = OpenEnum<
  typeof OutputAzureDataExplorerDiskSpaceProtection
>;

export const PrefixOptional = {
  /**
   * drop-by
   */
  DropBy: "dropBy",
  /**
   * ingest-by
   */
  IngestBy: "ingestBy",
} as const;
export type PrefixOptional = OpenEnum<typeof PrefixOptional>;

export type ExtentTag = {
  prefix?: PrefixOptional | undefined;
  value: string;
};

export type IngestIfNotExist = {
  value: string;
};

/**
 * Level of ingestion status reporting. Defaults to FailuresOnly.
 */
export const ReportLevel = {
  /**
   * FailuresOnly
   */
  FailuresOnly: "failuresOnly",
  /**
   * DoNotReport
   */
  DoNotReport: "doNotReport",
  /**
   * FailuresAndSuccesses
   */
  FailuresAndSuccesses: "failuresAndSuccesses",
} as const;
/**
 * Level of ingestion status reporting. Defaults to FailuresOnly.
 */
export type ReportLevel = OpenEnum<typeof ReportLevel>;

/**
 * Target of the ingestion status reporting. Defaults to Queue.
 */
export const ReportMethod = {
  /**
   * Queue
   */
  Queue: "queue",
  /**
   * Table
   */
  Table: "table",
  /**
   * QueueAndTable
   */
  QueueAndTable: "queueAndTable",
} as const;
/**
 * Target of the ingestion status reporting. Defaults to Queue.
 */
export type ReportMethod = OpenEnum<typeof ReportMethod>;

export type AdditionalProperty = {
  key: string;
  value: string;
};

export type OutputAzureDataExplorerResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputAzureDataExplorerTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export const OutputAzureDataExplorerCompressCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export type OutputAzureDataExplorerCompressCompression = OpenEnum<
  typeof OutputAzureDataExplorerCompressCompression
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputAzureDataExplorerPqCompressCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputAzureDataExplorerPqCompressCompression = OpenEnum<
  typeof OutputAzureDataExplorerPqCompressCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputAzureDataExplorerQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputAzureDataExplorerQueueFullBehavior = OpenEnum<
  typeof OutputAzureDataExplorerQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputAzureDataExplorerMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Backpressure: "backpressure",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputAzureDataExplorerMode = OpenEnum<
  typeof OutputAzureDataExplorerMode
>;

export type OutputAzureDataExplorerPqControls = {};

export type OutputAzureDataExplorer = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputAzureDataExplorerType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The base URI for your cluster. Typically, `https://<cluster>.<region>.kusto.windows.net`.
   */
  clusterUrl: string;
  /**
   * Name of the database containing the table where data will be ingested
   */
  database: string;
  /**
   * Name of the table to ingest data into
   */
  table: string;
  /**
   * When saving or starting the Destination, validate the database name and credentials; also validate table name, except when creating a new table. Disable if your Azure app does not have both the Database Viewer and the Table Viewer role.
   */
  validateDatabaseSettings?: boolean | undefined;
  ingestMode?: IngestionMode | undefined;
  /**
   * Endpoint used to acquire authentication tokens from Azure
   */
  oauthEndpoint?: MicrosoftEntraIDAuthenticationEndpoint | undefined;
  /**
   * Directory ID (tenant identifier) in Azure Active Directory
   */
  tenantId: string;
  /**
   * client_id to pass in the OAuth request parameter
   */
  clientId: string;
  /**
   * Scope to pass in the OAuth request parameter
   */
  scope: string;
  /**
   * The type of OAuth 2.0 client credentials grant flow to use
   */
  oauthType?: OutputAzureDataExplorerAuthenticationMethod | undefined;
  description?: string | undefined;
  /**
   * The client secret that you generated for your app in the Azure portal
   */
  clientSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  certificate?: OutputAzureDataExplorerCertificate | undefined;
  /**
   * The ingestion service URI for your cluster. Typically, `https://ingest-<cluster>.<region>.kusto.windows.net`.
   */
  ingestUrl?: string | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputAzureDataExplorerBackpressureBehavior | undefined;
  /**
   * Send a JSON mapping object instead of specifying an existing named data mapping
   */
  isMappingObj?: boolean | undefined;
  /**
   * Format of the output data
   */
  format?: OutputAzureDataExplorerDataFormat | undefined;
  /**
   * Filesystem location in which to buffer files before compressing and moving to final destination. Use performant and stable storage.
   */
  stagePath?: string | undefined;
  /**
   * JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`).
   */
  fileNameSuffix?: string | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * Maximum number of parts to upload in parallel per file
   */
  maxConcurrentFileParts?: number | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?:
    | OutputAzureDataExplorerDiskSpaceProtection
    | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Bypass the data management service's aggregation mechanism
   */
  flushImmediately?: boolean | undefined;
  /**
   * Prevent blob deletion after ingestion is complete
   */
  retainBlobOnSuccess?: boolean | undefined;
  /**
   * Strings or tags associated with the extent (ingested data shard)
   */
  extentTags?: Array<ExtentTag> | undefined;
  /**
   * Prevents duplicate ingestion by verifying whether an extent with the specified ingest-by tag already exists
   */
  ingestIfNotExists?: Array<IngestIfNotExist> | undefined;
  /**
   * Level of ingestion status reporting. Defaults to FailuresOnly.
   */
  reportLevel?: ReportLevel | undefined;
  /**
   * Target of the ingestion status reporting. Defaults to Queue.
   */
  reportMethod?: ReportMethod | undefined;
  /**
   * Optionally, enter additional configuration properties to send to the ingestion service
   */
  additionalProperties?: Array<AdditionalProperty> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputAzureDataExplorerResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?:
    | OutputAzureDataExplorerTimeoutRetrySettings
    | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * Data compression format to apply to HTTP content before it is delivered
   */
  compress?: OutputAzureDataExplorerCompressCompression | undefined;
  /**
   * Enter the name of a data mapping associated with your target table. Or, if incoming event and target table fields match exactly, you can leave the field empty.
   */
  mappingRef?: string | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Disable to close the connection immediately after sending the outgoing request
   */
  keepAlive?: boolean | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputAzureDataExplorerPqCompressCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputAzureDataExplorerQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputAzureDataExplorerMode | undefined;
  pqControls?: OutputAzureDataExplorerPqControls | undefined;
  /**
   * How frequently, in seconds, to clean up empty directories
   */
  emptyDirCleanupSec?: number | undefined;
};

/** @internal */
export const OutputAzureDataExplorerType$inboundSchema: z.ZodNativeEnum<
  typeof OutputAzureDataExplorerType
> = z.nativeEnum(OutputAzureDataExplorerType);

/** @internal */
export const OutputAzureDataExplorerType$outboundSchema: z.ZodNativeEnum<
  typeof OutputAzureDataExplorerType
> = OutputAzureDataExplorerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerType$ {
  /** @deprecated use `OutputAzureDataExplorerType$inboundSchema` instead. */
  export const inboundSchema = OutputAzureDataExplorerType$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerType$outboundSchema` instead. */
  export const outboundSchema = OutputAzureDataExplorerType$outboundSchema;
}

/** @internal */
export const IngestionMode$inboundSchema: z.ZodType<
  IngestionMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(IngestionMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const IngestionMode$outboundSchema: z.ZodType<
  IngestionMode,
  z.ZodTypeDef,
  IngestionMode
> = z.union([
  z.nativeEnum(IngestionMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestionMode$ {
  /** @deprecated use `IngestionMode$inboundSchema` instead. */
  export const inboundSchema = IngestionMode$inboundSchema;
  /** @deprecated use `IngestionMode$outboundSchema` instead. */
  export const outboundSchema = IngestionMode$outboundSchema;
}

/** @internal */
export const MicrosoftEntraIDAuthenticationEndpoint$inboundSchema: z.ZodType<
  MicrosoftEntraIDAuthenticationEndpoint,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(MicrosoftEntraIDAuthenticationEndpoint),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const MicrosoftEntraIDAuthenticationEndpoint$outboundSchema: z.ZodType<
  MicrosoftEntraIDAuthenticationEndpoint,
  z.ZodTypeDef,
  MicrosoftEntraIDAuthenticationEndpoint
> = z.union([
  z.nativeEnum(MicrosoftEntraIDAuthenticationEndpoint),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MicrosoftEntraIDAuthenticationEndpoint$ {
  /** @deprecated use `MicrosoftEntraIDAuthenticationEndpoint$inboundSchema` instead. */
  export const inboundSchema =
    MicrosoftEntraIDAuthenticationEndpoint$inboundSchema;
  /** @deprecated use `MicrosoftEntraIDAuthenticationEndpoint$outboundSchema` instead. */
  export const outboundSchema =
    MicrosoftEntraIDAuthenticationEndpoint$outboundSchema;
}

/** @internal */
export const OutputAzureDataExplorerAuthenticationMethod$inboundSchema:
  z.ZodType<
    OutputAzureDataExplorerAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputAzureDataExplorerAuthenticationMethod),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputAzureDataExplorerAuthenticationMethod$outboundSchema:
  z.ZodType<
    OutputAzureDataExplorerAuthenticationMethod,
    z.ZodTypeDef,
    OutputAzureDataExplorerAuthenticationMethod
  > = z.union([
    z.nativeEnum(OutputAzureDataExplorerAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerAuthenticationMethod$ {
  /** @deprecated use `OutputAzureDataExplorerAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureDataExplorerAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputAzureDataExplorerCertificate$inboundSchema: z.ZodType<
  OutputAzureDataExplorerCertificate,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificateName: z.string().optional(),
});

/** @internal */
export type OutputAzureDataExplorerCertificate$Outbound = {
  certificateName?: string | undefined;
};

/** @internal */
export const OutputAzureDataExplorerCertificate$outboundSchema: z.ZodType<
  OutputAzureDataExplorerCertificate$Outbound,
  z.ZodTypeDef,
  OutputAzureDataExplorerCertificate
> = z.object({
  certificateName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerCertificate$ {
  /** @deprecated use `OutputAzureDataExplorerCertificate$inboundSchema` instead. */
  export const inboundSchema = OutputAzureDataExplorerCertificate$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerCertificate$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerCertificate$outboundSchema;
  /** @deprecated use `OutputAzureDataExplorerCertificate$Outbound` instead. */
  export type Outbound = OutputAzureDataExplorerCertificate$Outbound;
}

export function outputAzureDataExplorerCertificateToJSON(
  outputAzureDataExplorerCertificate: OutputAzureDataExplorerCertificate,
): string {
  return JSON.stringify(
    OutputAzureDataExplorerCertificate$outboundSchema.parse(
      outputAzureDataExplorerCertificate,
    ),
  );
}

export function outputAzureDataExplorerCertificateFromJSON(
  jsonString: string,
): SafeParseResult<OutputAzureDataExplorerCertificate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputAzureDataExplorerCertificate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAzureDataExplorerCertificate' from JSON`,
  );
}

/** @internal */
export const OutputAzureDataExplorerBackpressureBehavior$inboundSchema:
  z.ZodType<
    OutputAzureDataExplorerBackpressureBehavior,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputAzureDataExplorerBackpressureBehavior),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputAzureDataExplorerBackpressureBehavior$outboundSchema:
  z.ZodType<
    OutputAzureDataExplorerBackpressureBehavior,
    z.ZodTypeDef,
    OutputAzureDataExplorerBackpressureBehavior
  > = z.union([
    z.nativeEnum(OutputAzureDataExplorerBackpressureBehavior),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerBackpressureBehavior$ {
  /** @deprecated use `OutputAzureDataExplorerBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureDataExplorerBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputAzureDataExplorerDataFormat$inboundSchema: z.ZodType<
  OutputAzureDataExplorerDataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureDataExplorerDataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureDataExplorerDataFormat$outboundSchema: z.ZodType<
  OutputAzureDataExplorerDataFormat,
  z.ZodTypeDef,
  OutputAzureDataExplorerDataFormat
> = z.union([
  z.nativeEnum(OutputAzureDataExplorerDataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerDataFormat$ {
  /** @deprecated use `OutputAzureDataExplorerDataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputAzureDataExplorerDataFormat$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerDataFormat$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerDataFormat$outboundSchema;
}

/** @internal */
export const OutputAzureDataExplorerDiskSpaceProtection$inboundSchema:
  z.ZodType<OutputAzureDataExplorerDiskSpaceProtection, z.ZodTypeDef, unknown> =
    z
      .union([
        z.nativeEnum(OutputAzureDataExplorerDiskSpaceProtection),
        z.string().transform(catchUnrecognizedEnum),
      ]);

/** @internal */
export const OutputAzureDataExplorerDiskSpaceProtection$outboundSchema:
  z.ZodType<
    OutputAzureDataExplorerDiskSpaceProtection,
    z.ZodTypeDef,
    OutputAzureDataExplorerDiskSpaceProtection
  > = z.union([
    z.nativeEnum(OutputAzureDataExplorerDiskSpaceProtection),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerDiskSpaceProtection$ {
  /** @deprecated use `OutputAzureDataExplorerDiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureDataExplorerDiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerDiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerDiskSpaceProtection$outboundSchema;
}

/** @internal */
export const PrefixOptional$inboundSchema: z.ZodType<
  PrefixOptional,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PrefixOptional),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PrefixOptional$outboundSchema: z.ZodType<
  PrefixOptional,
  z.ZodTypeDef,
  PrefixOptional
> = z.union([
  z.nativeEnum(PrefixOptional),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefixOptional$ {
  /** @deprecated use `PrefixOptional$inboundSchema` instead. */
  export const inboundSchema = PrefixOptional$inboundSchema;
  /** @deprecated use `PrefixOptional$outboundSchema` instead. */
  export const outboundSchema = PrefixOptional$outboundSchema;
}

/** @internal */
export const ExtentTag$inboundSchema: z.ZodType<
  ExtentTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  prefix: PrefixOptional$inboundSchema.optional(),
  value: z.string(),
});

/** @internal */
export type ExtentTag$Outbound = {
  prefix?: string | undefined;
  value: string;
};

/** @internal */
export const ExtentTag$outboundSchema: z.ZodType<
  ExtentTag$Outbound,
  z.ZodTypeDef,
  ExtentTag
> = z.object({
  prefix: PrefixOptional$outboundSchema.optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtentTag$ {
  /** @deprecated use `ExtentTag$inboundSchema` instead. */
  export const inboundSchema = ExtentTag$inboundSchema;
  /** @deprecated use `ExtentTag$outboundSchema` instead. */
  export const outboundSchema = ExtentTag$outboundSchema;
  /** @deprecated use `ExtentTag$Outbound` instead. */
  export type Outbound = ExtentTag$Outbound;
}

export function extentTagToJSON(extentTag: ExtentTag): string {
  return JSON.stringify(ExtentTag$outboundSchema.parse(extentTag));
}

export function extentTagFromJSON(
  jsonString: string,
): SafeParseResult<ExtentTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtentTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtentTag' from JSON`,
  );
}

/** @internal */
export const IngestIfNotExist$inboundSchema: z.ZodType<
  IngestIfNotExist,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type IngestIfNotExist$Outbound = {
  value: string;
};

/** @internal */
export const IngestIfNotExist$outboundSchema: z.ZodType<
  IngestIfNotExist$Outbound,
  z.ZodTypeDef,
  IngestIfNotExist
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestIfNotExist$ {
  /** @deprecated use `IngestIfNotExist$inboundSchema` instead. */
  export const inboundSchema = IngestIfNotExist$inboundSchema;
  /** @deprecated use `IngestIfNotExist$outboundSchema` instead. */
  export const outboundSchema = IngestIfNotExist$outboundSchema;
  /** @deprecated use `IngestIfNotExist$Outbound` instead. */
  export type Outbound = IngestIfNotExist$Outbound;
}

export function ingestIfNotExistToJSON(
  ingestIfNotExist: IngestIfNotExist,
): string {
  return JSON.stringify(
    IngestIfNotExist$outboundSchema.parse(ingestIfNotExist),
  );
}

export function ingestIfNotExistFromJSON(
  jsonString: string,
): SafeParseResult<IngestIfNotExist, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IngestIfNotExist$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IngestIfNotExist' from JSON`,
  );
}

/** @internal */
export const ReportLevel$inboundSchema: z.ZodType<
  ReportLevel,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ReportLevel),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ReportLevel$outboundSchema: z.ZodType<
  ReportLevel,
  z.ZodTypeDef,
  ReportLevel
> = z.union([
  z.nativeEnum(ReportLevel),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportLevel$ {
  /** @deprecated use `ReportLevel$inboundSchema` instead. */
  export const inboundSchema = ReportLevel$inboundSchema;
  /** @deprecated use `ReportLevel$outboundSchema` instead. */
  export const outboundSchema = ReportLevel$outboundSchema;
}

/** @internal */
export const ReportMethod$inboundSchema: z.ZodType<
  ReportMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ReportMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ReportMethod$outboundSchema: z.ZodType<
  ReportMethod,
  z.ZodTypeDef,
  ReportMethod
> = z.union([
  z.nativeEnum(ReportMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportMethod$ {
  /** @deprecated use `ReportMethod$inboundSchema` instead. */
  export const inboundSchema = ReportMethod$inboundSchema;
  /** @deprecated use `ReportMethod$outboundSchema` instead. */
  export const outboundSchema = ReportMethod$outboundSchema;
}

/** @internal */
export const AdditionalProperty$inboundSchema: z.ZodType<
  AdditionalProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.string(),
});

/** @internal */
export type AdditionalProperty$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const AdditionalProperty$outboundSchema: z.ZodType<
  AdditionalProperty$Outbound,
  z.ZodTypeDef,
  AdditionalProperty
> = z.object({
  key: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalProperty$ {
  /** @deprecated use `AdditionalProperty$inboundSchema` instead. */
  export const inboundSchema = AdditionalProperty$inboundSchema;
  /** @deprecated use `AdditionalProperty$outboundSchema` instead. */
  export const outboundSchema = AdditionalProperty$outboundSchema;
  /** @deprecated use `AdditionalProperty$Outbound` instead. */
  export type Outbound = AdditionalProperty$Outbound;
}

export function additionalPropertyToJSON(
  additionalProperty: AdditionalProperty,
): string {
  return JSON.stringify(
    AdditionalProperty$outboundSchema.parse(additionalProperty),
  );
}

export function additionalPropertyFromJSON(
  jsonString: string,
): SafeParseResult<AdditionalProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdditionalProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdditionalProperty' from JSON`,
  );
}

/** @internal */
export const OutputAzureDataExplorerResponseRetrySetting$inboundSchema:
  z.ZodType<
    OutputAzureDataExplorerResponseRetrySetting,
    z.ZodTypeDef,
    unknown
  > = z.object({
    httpStatus: z.number(),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/** @internal */
export type OutputAzureDataExplorerResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputAzureDataExplorerResponseRetrySetting$outboundSchema:
  z.ZodType<
    OutputAzureDataExplorerResponseRetrySetting$Outbound,
    z.ZodTypeDef,
    OutputAzureDataExplorerResponseRetrySetting
  > = z.object({
    httpStatus: z.number(),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerResponseRetrySetting$ {
  /** @deprecated use `OutputAzureDataExplorerResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureDataExplorerResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputAzureDataExplorerResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputAzureDataExplorerResponseRetrySetting$Outbound;
}

export function outputAzureDataExplorerResponseRetrySettingToJSON(
  outputAzureDataExplorerResponseRetrySetting:
    OutputAzureDataExplorerResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputAzureDataExplorerResponseRetrySetting$outboundSchema.parse(
      outputAzureDataExplorerResponseRetrySetting,
    ),
  );
}

export function outputAzureDataExplorerResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputAzureDataExplorerResponseRetrySetting,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputAzureDataExplorerResponseRetrySetting$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputAzureDataExplorerResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputAzureDataExplorerTimeoutRetrySettings$inboundSchema:
  z.ZodType<
    OutputAzureDataExplorerTimeoutRetrySettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    timeoutRetry: z.boolean().default(false),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/** @internal */
export type OutputAzureDataExplorerTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputAzureDataExplorerTimeoutRetrySettings$outboundSchema:
  z.ZodType<
    OutputAzureDataExplorerTimeoutRetrySettings$Outbound,
    z.ZodTypeDef,
    OutputAzureDataExplorerTimeoutRetrySettings
  > = z.object({
    timeoutRetry: z.boolean().default(false),
    initialBackoff: z.number().default(1000),
    backoffRate: z.number().default(2),
    maxBackoff: z.number().default(10000),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerTimeoutRetrySettings$ {
  /** @deprecated use `OutputAzureDataExplorerTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureDataExplorerTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputAzureDataExplorerTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputAzureDataExplorerTimeoutRetrySettings$Outbound;
}

export function outputAzureDataExplorerTimeoutRetrySettingsToJSON(
  outputAzureDataExplorerTimeoutRetrySettings:
    OutputAzureDataExplorerTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputAzureDataExplorerTimeoutRetrySettings$outboundSchema.parse(
      outputAzureDataExplorerTimeoutRetrySettings,
    ),
  );
}

export function outputAzureDataExplorerTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputAzureDataExplorerTimeoutRetrySettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputAzureDataExplorerTimeoutRetrySettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputAzureDataExplorerTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputAzureDataExplorerCompressCompression$inboundSchema:
  z.ZodType<OutputAzureDataExplorerCompressCompression, z.ZodTypeDef, unknown> =
    z
      .union([
        z.nativeEnum(OutputAzureDataExplorerCompressCompression),
        z.string().transform(catchUnrecognizedEnum),
      ]);

/** @internal */
export const OutputAzureDataExplorerCompressCompression$outboundSchema:
  z.ZodType<
    OutputAzureDataExplorerCompressCompression,
    z.ZodTypeDef,
    OutputAzureDataExplorerCompressCompression
  > = z.union([
    z.nativeEnum(OutputAzureDataExplorerCompressCompression),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerCompressCompression$ {
  /** @deprecated use `OutputAzureDataExplorerCompressCompression$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureDataExplorerCompressCompression$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerCompressCompression$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerCompressCompression$outboundSchema;
}

/** @internal */
export const OutputAzureDataExplorerPqCompressCompression$inboundSchema:
  z.ZodType<
    OutputAzureDataExplorerPqCompressCompression,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputAzureDataExplorerPqCompressCompression),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputAzureDataExplorerPqCompressCompression$outboundSchema:
  z.ZodType<
    OutputAzureDataExplorerPqCompressCompression,
    z.ZodTypeDef,
    OutputAzureDataExplorerPqCompressCompression
  > = z.union([
    z.nativeEnum(OutputAzureDataExplorerPqCompressCompression),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerPqCompressCompression$ {
  /** @deprecated use `OutputAzureDataExplorerPqCompressCompression$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureDataExplorerPqCompressCompression$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerPqCompressCompression$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerPqCompressCompression$outboundSchema;
}

/** @internal */
export const OutputAzureDataExplorerQueueFullBehavior$inboundSchema: z.ZodType<
  OutputAzureDataExplorerQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureDataExplorerQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureDataExplorerQueueFullBehavior$outboundSchema: z.ZodType<
  OutputAzureDataExplorerQueueFullBehavior,
  z.ZodTypeDef,
  OutputAzureDataExplorerQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputAzureDataExplorerQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerQueueFullBehavior$ {
  /** @deprecated use `OutputAzureDataExplorerQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputAzureDataExplorerQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputAzureDataExplorerMode$inboundSchema: z.ZodType<
  OutputAzureDataExplorerMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputAzureDataExplorerMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputAzureDataExplorerMode$outboundSchema: z.ZodType<
  OutputAzureDataExplorerMode,
  z.ZodTypeDef,
  OutputAzureDataExplorerMode
> = z.union([
  z.nativeEnum(OutputAzureDataExplorerMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerMode$ {
  /** @deprecated use `OutputAzureDataExplorerMode$inboundSchema` instead. */
  export const inboundSchema = OutputAzureDataExplorerMode$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerMode$outboundSchema` instead. */
  export const outboundSchema = OutputAzureDataExplorerMode$outboundSchema;
}

/** @internal */
export const OutputAzureDataExplorerPqControls$inboundSchema: z.ZodType<
  OutputAzureDataExplorerPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputAzureDataExplorerPqControls$Outbound = {};

/** @internal */
export const OutputAzureDataExplorerPqControls$outboundSchema: z.ZodType<
  OutputAzureDataExplorerPqControls$Outbound,
  z.ZodTypeDef,
  OutputAzureDataExplorerPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorerPqControls$ {
  /** @deprecated use `OutputAzureDataExplorerPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputAzureDataExplorerPqControls$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorerPqControls$outboundSchema` instead. */
  export const outboundSchema =
    OutputAzureDataExplorerPqControls$outboundSchema;
  /** @deprecated use `OutputAzureDataExplorerPqControls$Outbound` instead. */
  export type Outbound = OutputAzureDataExplorerPqControls$Outbound;
}

export function outputAzureDataExplorerPqControlsToJSON(
  outputAzureDataExplorerPqControls: OutputAzureDataExplorerPqControls,
): string {
  return JSON.stringify(
    OutputAzureDataExplorerPqControls$outboundSchema.parse(
      outputAzureDataExplorerPqControls,
    ),
  );
}

export function outputAzureDataExplorerPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputAzureDataExplorerPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAzureDataExplorerPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAzureDataExplorerPqControls' from JSON`,
  );
}

/** @internal */
export const OutputAzureDataExplorer$inboundSchema: z.ZodType<
  OutputAzureDataExplorer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputAzureDataExplorerType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  clusterUrl: z.string(),
  database: z.string(),
  table: z.string(),
  validateDatabaseSettings: z.boolean().default(true),
  ingestMode: IngestionMode$inboundSchema.default("batching"),
  oauthEndpoint: MicrosoftEntraIDAuthenticationEndpoint$inboundSchema.default(
    "https://login.microsoftonline.com",
  ),
  tenantId: z.string(),
  clientId: z.string(),
  scope: z.string(),
  oauthType: OutputAzureDataExplorerAuthenticationMethod$inboundSchema.default(
    "clientSecret",
  ),
  description: z.string().optional(),
  clientSecret: z.string().optional(),
  textSecret: z.string().optional(),
  certificate: z.lazy(() => OutputAzureDataExplorerCertificate$inboundSchema)
    .optional(),
  ingestUrl: z.string().optional(),
  onBackpressure: OutputAzureDataExplorerBackpressureBehavior$inboundSchema
    .default("block"),
  isMappingObj: z.boolean().default(false),
  format: OutputAzureDataExplorerDataFormat$inboundSchema.default("json"),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  maxConcurrentFileParts: z.number().default(1),
  onDiskFullBackpressure:
    OutputAzureDataExplorerDiskSpaceProtection$inboundSchema.default("block"),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  deadletterEnabled: z.boolean().default(false),
  timeoutSec: z.number().default(30),
  flushImmediately: z.boolean().default(false),
  retainBlobOnSuccess: z.boolean().default(false),
  extentTags: z.array(z.lazy(() => ExtentTag$inboundSchema)).optional(),
  ingestIfNotExists: z.array(z.lazy(() => IngestIfNotExist$inboundSchema))
    .optional(),
  reportLevel: ReportLevel$inboundSchema.default("failuresOnly"),
  reportMethod: ReportMethod$inboundSchema.default("queue"),
  additionalProperties: z.array(z.lazy(() => AdditionalProperty$inboundSchema))
    .optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputAzureDataExplorerResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputAzureDataExplorerTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  compress: OutputAzureDataExplorerCompressCompression$inboundSchema.default(
    "gzip",
  ),
  mappingRef: z.string().optional(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  flushPeriodSec: z.number().default(1),
  rejectUnauthorized: z.boolean().default(true),
  useRoundRobinDns: z.boolean().default(false),
  keepAlive: z.boolean().default(true),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputAzureDataExplorerPqCompressCompression$inboundSchema
    .default("none"),
  pqOnBackpressure: OutputAzureDataExplorerQueueFullBehavior$inboundSchema
    .default("block"),
  pqMode: OutputAzureDataExplorerMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputAzureDataExplorerPqControls$inboundSchema)
    .optional(),
  emptyDirCleanupSec: z.number().default(300),
});

/** @internal */
export type OutputAzureDataExplorer$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  clusterUrl: string;
  database: string;
  table: string;
  validateDatabaseSettings: boolean;
  ingestMode: string;
  oauthEndpoint: string;
  tenantId: string;
  clientId: string;
  scope: string;
  oauthType: string;
  description?: string | undefined;
  clientSecret?: string | undefined;
  textSecret?: string | undefined;
  certificate?: OutputAzureDataExplorerCertificate$Outbound | undefined;
  ingestUrl?: string | undefined;
  onBackpressure: string;
  isMappingObj: boolean;
  format: string;
  stagePath: string;
  fileNameSuffix: string;
  maxFileSizeMB: number;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxOpenFiles: number;
  maxConcurrentFileParts: number;
  onDiskFullBackpressure: string;
  addIdToStagePath: boolean;
  removeEmptyDirs: boolean;
  deadletterEnabled: boolean;
  timeoutSec: number;
  flushImmediately: boolean;
  retainBlobOnSuccess: boolean;
  extentTags?: Array<ExtentTag$Outbound> | undefined;
  ingestIfNotExists?: Array<IngestIfNotExist$Outbound> | undefined;
  reportLevel: string;
  reportMethod: string;
  additionalProperties?: Array<AdditionalProperty$Outbound> | undefined;
  responseRetrySettings?:
    | Array<OutputAzureDataExplorerResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputAzureDataExplorerTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  compress: string;
  mappingRef?: string | undefined;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  flushPeriodSec: number;
  rejectUnauthorized: boolean;
  useRoundRobinDns: boolean;
  keepAlive: boolean;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputAzureDataExplorerPqControls$Outbound | undefined;
  emptyDirCleanupSec: number;
};

/** @internal */
export const OutputAzureDataExplorer$outboundSchema: z.ZodType<
  OutputAzureDataExplorer$Outbound,
  z.ZodTypeDef,
  OutputAzureDataExplorer
> = z.object({
  id: z.string().optional(),
  type: OutputAzureDataExplorerType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  clusterUrl: z.string(),
  database: z.string(),
  table: z.string(),
  validateDatabaseSettings: z.boolean().default(true),
  ingestMode: IngestionMode$outboundSchema.default("batching"),
  oauthEndpoint: MicrosoftEntraIDAuthenticationEndpoint$outboundSchema.default(
    "https://login.microsoftonline.com",
  ),
  tenantId: z.string(),
  clientId: z.string(),
  scope: z.string(),
  oauthType: OutputAzureDataExplorerAuthenticationMethod$outboundSchema.default(
    "clientSecret",
  ),
  description: z.string().optional(),
  clientSecret: z.string().optional(),
  textSecret: z.string().optional(),
  certificate: z.lazy(() => OutputAzureDataExplorerCertificate$outboundSchema)
    .optional(),
  ingestUrl: z.string().optional(),
  onBackpressure: OutputAzureDataExplorerBackpressureBehavior$outboundSchema
    .default("block"),
  isMappingObj: z.boolean().default(false),
  format: OutputAzureDataExplorerDataFormat$outboundSchema.default("json"),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  maxConcurrentFileParts: z.number().default(1),
  onDiskFullBackpressure:
    OutputAzureDataExplorerDiskSpaceProtection$outboundSchema.default("block"),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  deadletterEnabled: z.boolean().default(false),
  timeoutSec: z.number().default(30),
  flushImmediately: z.boolean().default(false),
  retainBlobOnSuccess: z.boolean().default(false),
  extentTags: z.array(z.lazy(() => ExtentTag$outboundSchema)).optional(),
  ingestIfNotExists: z.array(z.lazy(() => IngestIfNotExist$outboundSchema))
    .optional(),
  reportLevel: ReportLevel$outboundSchema.default("failuresOnly"),
  reportMethod: ReportMethod$outboundSchema.default("queue"),
  additionalProperties: z.array(z.lazy(() => AdditionalProperty$outboundSchema))
    .optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputAzureDataExplorerResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputAzureDataExplorerTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  compress: OutputAzureDataExplorerCompressCompression$outboundSchema.default(
    "gzip",
  ),
  mappingRef: z.string().optional(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  flushPeriodSec: z.number().default(1),
  rejectUnauthorized: z.boolean().default(true),
  useRoundRobinDns: z.boolean().default(false),
  keepAlive: z.boolean().default(true),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputAzureDataExplorerPqCompressCompression$outboundSchema
    .default("none"),
  pqOnBackpressure: OutputAzureDataExplorerQueueFullBehavior$outboundSchema
    .default("block"),
  pqMode: OutputAzureDataExplorerMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputAzureDataExplorerPqControls$outboundSchema)
    .optional(),
  emptyDirCleanupSec: z.number().default(300),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAzureDataExplorer$ {
  /** @deprecated use `OutputAzureDataExplorer$inboundSchema` instead. */
  export const inboundSchema = OutputAzureDataExplorer$inboundSchema;
  /** @deprecated use `OutputAzureDataExplorer$outboundSchema` instead. */
  export const outboundSchema = OutputAzureDataExplorer$outboundSchema;
  /** @deprecated use `OutputAzureDataExplorer$Outbound` instead. */
  export type Outbound = OutputAzureDataExplorer$Outbound;
}

export function outputAzureDataExplorerToJSON(
  outputAzureDataExplorer: OutputAzureDataExplorer,
): string {
  return JSON.stringify(
    OutputAzureDataExplorer$outboundSchema.parse(outputAzureDataExplorer),
  );
}

export function outputAzureDataExplorerFromJSON(
  jsonString: string,
): SafeParseResult<OutputAzureDataExplorer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAzureDataExplorer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAzureDataExplorer' from JSON`,
  );
}
