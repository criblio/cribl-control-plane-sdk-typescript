/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type GitFile = {
  children?: Array<GitFile> | undefined;
  name: string;
  state?: string | undefined;
};

/** @internal */
export const GitFile$inboundSchema: z.ZodType<GitFile, z.ZodTypeDef, unknown> =
  z.object({
    children: z.array(z.lazy(() => GitFile$inboundSchema)).optional(),
    name: z.string(),
    state: z.string().optional(),
  });

/** @internal */
export type GitFile$Outbound = {
  children?: Array<GitFile$Outbound> | undefined;
  name: string;
  state?: string | undefined;
};

/** @internal */
export const GitFile$outboundSchema: z.ZodType<
  GitFile$Outbound,
  z.ZodTypeDef,
  GitFile
> = z.object({
  children: z.array(z.lazy(() => GitFile$outboundSchema)).optional(),
  name: z.string(),
  state: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitFile$ {
  /** @deprecated use `GitFile$inboundSchema` instead. */
  export const inboundSchema = GitFile$inboundSchema;
  /** @deprecated use `GitFile$outboundSchema` instead. */
  export const outboundSchema = GitFile$outboundSchema;
  /** @deprecated use `GitFile$Outbound` instead. */
  export type Outbound = GitFile$Outbound;
}

export function gitFileToJSON(gitFile: GitFile): string {
  return JSON.stringify(GitFile$outboundSchema.parse(gitFile));
}

export function gitFileFromJSON(
  jsonString: string,
): SafeParseResult<GitFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitFile' from JSON`,
  );
}
