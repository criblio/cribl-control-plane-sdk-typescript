/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const VisualizationElementTypeEnum3 = {
  CustomThroughputMetrics: "custom.throughputMetrics",
  CustomFlowMatrix: "custom.flowMatrix",
} as const;
export type VisualizationElementTypeEnum3 = OpenEnum<
  typeof VisualizationElementTypeEnum3
>;

export const VisualizationElementTypeEnum2 = {
  ListEvents: "list.events",
  ListTable: "list.table",
} as const;
export type VisualizationElementTypeEnum2 = OpenEnum<
  typeof VisualizationElementTypeEnum2
>;

export const VisualizationElementTypeEnum1 = {
  ChartArea: "chart.area",
  ChartColumn: "chart.column",
  ChartFunnel: "chart.funnel",
  ChartGauge: "chart.gauge",
  ChartHorizontalBar: "chart.horizontalBar",
  ChartLine: "chart.line",
  ChartMap: "chart.map",
  ChartPie: "chart.pie",
  ChartScatter: "chart.scatter",
  CounterSingle: "counter.single",
} as const;
export type VisualizationElementTypeEnum1 = OpenEnum<
  typeof VisualizationElementTypeEnum1
>;

export type VisualizationElementType =
  | VisualizationElementTypeEnum1
  | VisualizationElementTypeEnum2
  | VisualizationElementTypeEnum3;

/** @internal */
export const VisualizationElementTypeEnum3$inboundSchema: z.ZodType<
  VisualizationElementTypeEnum3,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(VisualizationElementTypeEnum3),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const VisualizationElementTypeEnum3$outboundSchema: z.ZodType<
  VisualizationElementTypeEnum3,
  z.ZodTypeDef,
  VisualizationElementTypeEnum3
> = z.union([
  z.nativeEnum(VisualizationElementTypeEnum3),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisualizationElementTypeEnum3$ {
  /** @deprecated use `VisualizationElementTypeEnum3$inboundSchema` instead. */
  export const inboundSchema = VisualizationElementTypeEnum3$inboundSchema;
  /** @deprecated use `VisualizationElementTypeEnum3$outboundSchema` instead. */
  export const outboundSchema = VisualizationElementTypeEnum3$outboundSchema;
}

/** @internal */
export const VisualizationElementTypeEnum2$inboundSchema: z.ZodType<
  VisualizationElementTypeEnum2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(VisualizationElementTypeEnum2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const VisualizationElementTypeEnum2$outboundSchema: z.ZodType<
  VisualizationElementTypeEnum2,
  z.ZodTypeDef,
  VisualizationElementTypeEnum2
> = z.union([
  z.nativeEnum(VisualizationElementTypeEnum2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisualizationElementTypeEnum2$ {
  /** @deprecated use `VisualizationElementTypeEnum2$inboundSchema` instead. */
  export const inboundSchema = VisualizationElementTypeEnum2$inboundSchema;
  /** @deprecated use `VisualizationElementTypeEnum2$outboundSchema` instead. */
  export const outboundSchema = VisualizationElementTypeEnum2$outboundSchema;
}

/** @internal */
export const VisualizationElementTypeEnum1$inboundSchema: z.ZodType<
  VisualizationElementTypeEnum1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(VisualizationElementTypeEnum1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const VisualizationElementTypeEnum1$outboundSchema: z.ZodType<
  VisualizationElementTypeEnum1,
  z.ZodTypeDef,
  VisualizationElementTypeEnum1
> = z.union([
  z.nativeEnum(VisualizationElementTypeEnum1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisualizationElementTypeEnum1$ {
  /** @deprecated use `VisualizationElementTypeEnum1$inboundSchema` instead. */
  export const inboundSchema = VisualizationElementTypeEnum1$inboundSchema;
  /** @deprecated use `VisualizationElementTypeEnum1$outboundSchema` instead. */
  export const outboundSchema = VisualizationElementTypeEnum1$outboundSchema;
}

/** @internal */
export const VisualizationElementType$inboundSchema: z.ZodType<
  VisualizationElementType,
  z.ZodTypeDef,
  unknown
> = z.union([
  VisualizationElementTypeEnum1$inboundSchema,
  VisualizationElementTypeEnum2$inboundSchema,
  VisualizationElementTypeEnum3$inboundSchema,
]);

/** @internal */
export type VisualizationElementType$Outbound = string | string | string;

/** @internal */
export const VisualizationElementType$outboundSchema: z.ZodType<
  VisualizationElementType$Outbound,
  z.ZodTypeDef,
  VisualizationElementType
> = z.union([
  VisualizationElementTypeEnum1$outboundSchema,
  VisualizationElementTypeEnum2$outboundSchema,
  VisualizationElementTypeEnum3$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisualizationElementType$ {
  /** @deprecated use `VisualizationElementType$inboundSchema` instead. */
  export const inboundSchema = VisualizationElementType$inboundSchema;
  /** @deprecated use `VisualizationElementType$outboundSchema` instead. */
  export const outboundSchema = VisualizationElementType$outboundSchema;
  /** @deprecated use `VisualizationElementType$Outbound` instead. */
  export type Outbound = VisualizationElementType$Outbound;
}

export function visualizationElementTypeToJSON(
  visualizationElementType: VisualizationElementType,
): string {
  return JSON.stringify(
    VisualizationElementType$outboundSchema.parse(visualizationElementType),
  );
}

export function visualizationElementTypeFromJSON(
  jsonString: string,
): SafeParseResult<VisualizationElementType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VisualizationElementType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VisualizationElementType' from JSON`,
  );
}
