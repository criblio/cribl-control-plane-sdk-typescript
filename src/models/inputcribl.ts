/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputCriblType = {
  Cribl: "cribl",
} as const;
export type InputCriblType = ClosedEnum<typeof InputCriblType>;

export type InputCriblConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputCriblMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputCriblMode = ClosedEnum<typeof InputCriblMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputCriblCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputCriblCompression = ClosedEnum<typeof InputCriblCompression>;

export type InputCriblPqControls = {};

export type InputCriblPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputCriblMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputCriblCompression | undefined;
  pqControls?: InputCriblPqControls | undefined;
};

export type InputCriblMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputCribl = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputCriblType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputCriblConnection> | undefined;
  pq?: InputCriblPq | undefined;
  filter?: string | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputCriblMetadatum> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputCriblType$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblType
> = z.nativeEnum(InputCriblType);

/** @internal */
export const InputCriblType$outboundSchema: z.ZodNativeEnum<
  typeof InputCriblType
> = InputCriblType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblType$ {
  /** @deprecated use `InputCriblType$inboundSchema` instead. */
  export const inboundSchema = InputCriblType$inboundSchema;
  /** @deprecated use `InputCriblType$outboundSchema` instead. */
  export const outboundSchema = InputCriblType$outboundSchema;
}

/** @internal */
export const InputCriblConnection$inboundSchema: z.ZodType<
  InputCriblConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputCriblConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputCriblConnection$outboundSchema: z.ZodType<
  InputCriblConnection$Outbound,
  z.ZodTypeDef,
  InputCriblConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblConnection$ {
  /** @deprecated use `InputCriblConnection$inboundSchema` instead. */
  export const inboundSchema = InputCriblConnection$inboundSchema;
  /** @deprecated use `InputCriblConnection$outboundSchema` instead. */
  export const outboundSchema = InputCriblConnection$outboundSchema;
  /** @deprecated use `InputCriblConnection$Outbound` instead. */
  export type Outbound = InputCriblConnection$Outbound;
}

export function inputCriblConnectionToJSON(
  inputCriblConnection: InputCriblConnection,
): string {
  return JSON.stringify(
    InputCriblConnection$outboundSchema.parse(inputCriblConnection),
  );
}

export function inputCriblConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblConnection' from JSON`,
  );
}

/** @internal */
export const InputCriblMode$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblMode
> = z.nativeEnum(InputCriblMode);

/** @internal */
export const InputCriblMode$outboundSchema: z.ZodNativeEnum<
  typeof InputCriblMode
> = InputCriblMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblMode$ {
  /** @deprecated use `InputCriblMode$inboundSchema` instead. */
  export const inboundSchema = InputCriblMode$inboundSchema;
  /** @deprecated use `InputCriblMode$outboundSchema` instead. */
  export const outboundSchema = InputCriblMode$outboundSchema;
}

/** @internal */
export const InputCriblCompression$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblCompression
> = z.nativeEnum(InputCriblCompression);

/** @internal */
export const InputCriblCompression$outboundSchema: z.ZodNativeEnum<
  typeof InputCriblCompression
> = InputCriblCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblCompression$ {
  /** @deprecated use `InputCriblCompression$inboundSchema` instead. */
  export const inboundSchema = InputCriblCompression$inboundSchema;
  /** @deprecated use `InputCriblCompression$outboundSchema` instead. */
  export const outboundSchema = InputCriblCompression$outboundSchema;
}

/** @internal */
export const InputCriblPqControls$inboundSchema: z.ZodType<
  InputCriblPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputCriblPqControls$Outbound = {};

/** @internal */
export const InputCriblPqControls$outboundSchema: z.ZodType<
  InputCriblPqControls$Outbound,
  z.ZodTypeDef,
  InputCriblPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblPqControls$ {
  /** @deprecated use `InputCriblPqControls$inboundSchema` instead. */
  export const inboundSchema = InputCriblPqControls$inboundSchema;
  /** @deprecated use `InputCriblPqControls$outboundSchema` instead. */
  export const outboundSchema = InputCriblPqControls$outboundSchema;
  /** @deprecated use `InputCriblPqControls$Outbound` instead. */
  export type Outbound = InputCriblPqControls$Outbound;
}

export function inputCriblPqControlsToJSON(
  inputCriblPqControls: InputCriblPqControls,
): string {
  return JSON.stringify(
    InputCriblPqControls$outboundSchema.parse(inputCriblPqControls),
  );
}

export function inputCriblPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblPqControls' from JSON`,
  );
}

/** @internal */
export const InputCriblPq$inboundSchema: z.ZodType<
  InputCriblPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputCriblMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputCriblCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputCriblPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputCriblPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputCriblPqControls$Outbound | undefined;
};

/** @internal */
export const InputCriblPq$outboundSchema: z.ZodType<
  InputCriblPq$Outbound,
  z.ZodTypeDef,
  InputCriblPq
> = z.object({
  mode: InputCriblMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputCriblCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputCriblPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblPq$ {
  /** @deprecated use `InputCriblPq$inboundSchema` instead. */
  export const inboundSchema = InputCriblPq$inboundSchema;
  /** @deprecated use `InputCriblPq$outboundSchema` instead. */
  export const outboundSchema = InputCriblPq$outboundSchema;
  /** @deprecated use `InputCriblPq$Outbound` instead. */
  export type Outbound = InputCriblPq$Outbound;
}

export function inputCriblPqToJSON(inputCriblPq: InputCriblPq): string {
  return JSON.stringify(InputCriblPq$outboundSchema.parse(inputCriblPq));
}

export function inputCriblPqFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblPq' from JSON`,
  );
}

/** @internal */
export const InputCriblMetadatum$inboundSchema: z.ZodType<
  InputCriblMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputCriblMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputCriblMetadatum$outboundSchema: z.ZodType<
  InputCriblMetadatum$Outbound,
  z.ZodTypeDef,
  InputCriblMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblMetadatum$ {
  /** @deprecated use `InputCriblMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputCriblMetadatum$inboundSchema;
  /** @deprecated use `InputCriblMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputCriblMetadatum$outboundSchema;
  /** @deprecated use `InputCriblMetadatum$Outbound` instead. */
  export type Outbound = InputCriblMetadatum$Outbound;
}

export function inputCriblMetadatumToJSON(
  inputCriblMetadatum: InputCriblMetadatum,
): string {
  return JSON.stringify(
    InputCriblMetadatum$outboundSchema.parse(inputCriblMetadatum),
  );
}

export function inputCriblMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblMetadatum' from JSON`,
  );
}

/** @internal */
export const InputCribl$inboundSchema: z.ZodType<
  InputCribl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputCriblType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputCriblConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputCriblPq$inboundSchema).optional(),
  filter: z.string().optional(),
  metadata: z.array(z.lazy(() => InputCriblMetadatum$inboundSchema)).optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputCribl$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputCriblConnection$Outbound> | undefined;
  pq?: InputCriblPq$Outbound | undefined;
  filter?: string | undefined;
  metadata?: Array<InputCriblMetadatum$Outbound> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputCribl$outboundSchema: z.ZodType<
  InputCribl$Outbound,
  z.ZodTypeDef,
  InputCribl
> = z.object({
  id: z.string().optional(),
  type: InputCriblType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputCriblConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputCriblPq$outboundSchema).optional(),
  filter: z.string().optional(),
  metadata: z.array(z.lazy(() => InputCriblMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCribl$ {
  /** @deprecated use `InputCribl$inboundSchema` instead. */
  export const inboundSchema = InputCribl$inboundSchema;
  /** @deprecated use `InputCribl$outboundSchema` instead. */
  export const outboundSchema = InputCribl$outboundSchema;
  /** @deprecated use `InputCribl$Outbound` instead. */
  export type Outbound = InputCribl$Outbound;
}

export function inputCriblToJSON(inputCribl: InputCribl): string {
  return JSON.stringify(InputCribl$outboundSchema.parse(inputCribl));
}

export function inputCriblFromJSON(
  jsonString: string,
): SafeParseResult<InputCribl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCribl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCribl' from JSON`,
  );
}
