/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PackUpgradeRequest = {
  allowCustomFunctions?: boolean | undefined;
  minor?: string | undefined;
  source: string;
  spec?: string | undefined;
};

/** @internal */
export const PackUpgradeRequest$inboundSchema: z.ZodType<
  PackUpgradeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowCustomFunctions: z.boolean().optional(),
  minor: z.string().optional(),
  source: z.string(),
  spec: z.string().optional(),
});

/** @internal */
export type PackUpgradeRequest$Outbound = {
  allowCustomFunctions?: boolean | undefined;
  minor?: string | undefined;
  source: string;
  spec?: string | undefined;
};

/** @internal */
export const PackUpgradeRequest$outboundSchema: z.ZodType<
  PackUpgradeRequest$Outbound,
  z.ZodTypeDef,
  PackUpgradeRequest
> = z.object({
  allowCustomFunctions: z.boolean().optional(),
  minor: z.string().optional(),
  source: z.string(),
  spec: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PackUpgradeRequest$ {
  /** @deprecated use `PackUpgradeRequest$inboundSchema` instead. */
  export const inboundSchema = PackUpgradeRequest$inboundSchema;
  /** @deprecated use `PackUpgradeRequest$outboundSchema` instead. */
  export const outboundSchema = PackUpgradeRequest$outboundSchema;
  /** @deprecated use `PackUpgradeRequest$Outbound` instead. */
  export type Outbound = PackUpgradeRequest$Outbound;
}

export function packUpgradeRequestToJSON(
  packUpgradeRequest: PackUpgradeRequest,
): string {
  return JSON.stringify(
    PackUpgradeRequest$outboundSchema.parse(packUpgradeRequest),
  );
}

export function packUpgradeRequestFromJSON(
  jsonString: string,
): SafeParseResult<PackUpgradeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PackUpgradeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PackUpgradeRequest' from JSON`,
  );
}
