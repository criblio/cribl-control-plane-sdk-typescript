/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputLokiType = {
  Loki: "loki",
} as const;
export type InputLokiType = ClosedEnum<typeof InputLokiType>;

export type InputLokiConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputLokiMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputLokiMode = ClosedEnum<typeof InputLokiMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputLokiCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputLokiCompression = ClosedEnum<typeof InputLokiCompression>;

export type InputLokiPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputLokiMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputLokiCompression | undefined;
};

export const InputLokiMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputLokiMinimumTLSVersion = ClosedEnum<
  typeof InputLokiMinimumTLSVersion
>;

export const InputLokiMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputLokiMaximumTLSVersion = ClosedEnum<
  typeof InputLokiMaximumTLSVersion
>;

export type InputLokiTLSSettingsServerSide = {
  disabled?: boolean | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: InputLokiMinimumTLSVersion | undefined;
  maxVersion?: InputLokiMaximumTLSVersion | undefined;
};

/**
 * Loki logs authentication type
 */
export const InputLokiAuthenticationType = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
/**
 * Loki logs authentication type
 */
export type InputLokiAuthenticationType = ClosedEnum<
  typeof InputLokiAuthenticationType
>;

export type InputLokiMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputLokiOauthParam = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type InputLokiOauthHeader = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type InputLoki = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputLokiType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputLokiConnection> | undefined;
  pq?: InputLokiPq | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  tls?: InputLokiTLSSettingsServerSide | undefined;
  /**
   * Maximum number of active requests allowed per Worker Process. Set to 0 for unlimited. Caution: Increasing the limit above the default value, or setting it to unlimited, may degrade performance and reduce throughput.
   */
  maxActiveReq?: number | undefined;
  /**
   * Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
   */
  maxRequestsPerSocket?: number | undefined;
  /**
   * Extract the client IP and port from PROXY protocol v1/v2. When enabled, the X-Forwarded-For header is ignored. Disable to use the X-Forwarded-For header for client IP extraction.
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Add request headers to events, in the __headers field
   */
  captureHeaders?: boolean | undefined;
  /**
   * How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
   */
  activityLogSampleRate?: number | undefined;
  /**
   * How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
   */
  requestTimeout?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
   */
  socketTimeout?: number | undefined;
  /**
   * After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 second, maximum 600 seconds (10 minutes).
   */
  keepAliveTimeout?: number | undefined;
  /**
   * Expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
   */
  enableHealthCheck?: boolean | undefined;
  /**
   * Messages from matched IP addresses will be processed, unless also matched by the denylist
   */
  ipAllowlistRegex?: string | undefined;
  /**
   * Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
   */
  ipDenylistRegex?: string | undefined;
  /**
   * Absolute path on which to listen for Loki logs requests. Defaults to /loki/api/v1/push, which will (in this example) expand as: 'http://<your‑upstream‑URL>:<your‑port>/loki/api/v1/push'.
   */
  lokiAPI?: string | undefined;
  /**
   * Extract structured metadata from the Loki 3.5.3+ format and place it in the __structuredMetadata field. When disabled, uses legacy Loki parsing for backward compatibility.
   */
  extractStructuredMetadata?: boolean | undefined;
  /**
   * Loki logs authentication type
   */
  authType?: InputLokiAuthenticationType | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputLokiMetadatum> | undefined;
  description?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<InputLokiOauthParam> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<InputLokiOauthHeader> | undefined;
};

/** @internal */
export const InputLokiType$inboundSchema: z.ZodNativeEnum<
  typeof InputLokiType
> = z.nativeEnum(InputLokiType);

/** @internal */
export const InputLokiType$outboundSchema: z.ZodNativeEnum<
  typeof InputLokiType
> = InputLokiType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiType$ {
  /** @deprecated use `InputLokiType$inboundSchema` instead. */
  export const inboundSchema = InputLokiType$inboundSchema;
  /** @deprecated use `InputLokiType$outboundSchema` instead. */
  export const outboundSchema = InputLokiType$outboundSchema;
}

/** @internal */
export const InputLokiConnection$inboundSchema: z.ZodType<
  InputLokiConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputLokiConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputLokiConnection$outboundSchema: z.ZodType<
  InputLokiConnection$Outbound,
  z.ZodTypeDef,
  InputLokiConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiConnection$ {
  /** @deprecated use `InputLokiConnection$inboundSchema` instead. */
  export const inboundSchema = InputLokiConnection$inboundSchema;
  /** @deprecated use `InputLokiConnection$outboundSchema` instead. */
  export const outboundSchema = InputLokiConnection$outboundSchema;
  /** @deprecated use `InputLokiConnection$Outbound` instead. */
  export type Outbound = InputLokiConnection$Outbound;
}

export function inputLokiConnectionToJSON(
  inputLokiConnection: InputLokiConnection,
): string {
  return JSON.stringify(
    InputLokiConnection$outboundSchema.parse(inputLokiConnection),
  );
}

export function inputLokiConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputLokiConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputLokiConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputLokiConnection' from JSON`,
  );
}

/** @internal */
export const InputLokiMode$inboundSchema: z.ZodNativeEnum<
  typeof InputLokiMode
> = z.nativeEnum(InputLokiMode);

/** @internal */
export const InputLokiMode$outboundSchema: z.ZodNativeEnum<
  typeof InputLokiMode
> = InputLokiMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiMode$ {
  /** @deprecated use `InputLokiMode$inboundSchema` instead. */
  export const inboundSchema = InputLokiMode$inboundSchema;
  /** @deprecated use `InputLokiMode$outboundSchema` instead. */
  export const outboundSchema = InputLokiMode$outboundSchema;
}

/** @internal */
export const InputLokiCompression$inboundSchema: z.ZodNativeEnum<
  typeof InputLokiCompression
> = z.nativeEnum(InputLokiCompression);

/** @internal */
export const InputLokiCompression$outboundSchema: z.ZodNativeEnum<
  typeof InputLokiCompression
> = InputLokiCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiCompression$ {
  /** @deprecated use `InputLokiCompression$inboundSchema` instead. */
  export const inboundSchema = InputLokiCompression$inboundSchema;
  /** @deprecated use `InputLokiCompression$outboundSchema` instead. */
  export const outboundSchema = InputLokiCompression$outboundSchema;
}

/** @internal */
export const InputLokiPq$inboundSchema: z.ZodType<
  InputLokiPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputLokiMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputLokiCompression$inboundSchema.default("none"),
});

/** @internal */
export type InputLokiPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
};

/** @internal */
export const InputLokiPq$outboundSchema: z.ZodType<
  InputLokiPq$Outbound,
  z.ZodTypeDef,
  InputLokiPq
> = z.object({
  mode: InputLokiMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputLokiCompression$outboundSchema.default("none"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiPq$ {
  /** @deprecated use `InputLokiPq$inboundSchema` instead. */
  export const inboundSchema = InputLokiPq$inboundSchema;
  /** @deprecated use `InputLokiPq$outboundSchema` instead. */
  export const outboundSchema = InputLokiPq$outboundSchema;
  /** @deprecated use `InputLokiPq$Outbound` instead. */
  export type Outbound = InputLokiPq$Outbound;
}

export function inputLokiPqToJSON(inputLokiPq: InputLokiPq): string {
  return JSON.stringify(InputLokiPq$outboundSchema.parse(inputLokiPq));
}

export function inputLokiPqFromJSON(
  jsonString: string,
): SafeParseResult<InputLokiPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputLokiPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputLokiPq' from JSON`,
  );
}

/** @internal */
export const InputLokiMinimumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputLokiMinimumTLSVersion
> = z.nativeEnum(InputLokiMinimumTLSVersion);

/** @internal */
export const InputLokiMinimumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof InputLokiMinimumTLSVersion
> = InputLokiMinimumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiMinimumTLSVersion$ {
  /** @deprecated use `InputLokiMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputLokiMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputLokiMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputLokiMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputLokiMaximumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputLokiMaximumTLSVersion
> = z.nativeEnum(InputLokiMaximumTLSVersion);

/** @internal */
export const InputLokiMaximumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof InputLokiMaximumTLSVersion
> = InputLokiMaximumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiMaximumTLSVersion$ {
  /** @deprecated use `InputLokiMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputLokiMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputLokiMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputLokiMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputLokiTLSSettingsServerSide$inboundSchema: z.ZodType<
  InputLokiTLSSettingsServerSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputLokiMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputLokiMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputLokiTLSSettingsServerSide$Outbound = {
  disabled: boolean;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  requestCert: boolean;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputLokiTLSSettingsServerSide$outboundSchema: z.ZodType<
  InputLokiTLSSettingsServerSide$Outbound,
  z.ZodTypeDef,
  InputLokiTLSSettingsServerSide
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputLokiMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputLokiMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiTLSSettingsServerSide$ {
  /** @deprecated use `InputLokiTLSSettingsServerSide$inboundSchema` instead. */
  export const inboundSchema = InputLokiTLSSettingsServerSide$inboundSchema;
  /** @deprecated use `InputLokiTLSSettingsServerSide$outboundSchema` instead. */
  export const outboundSchema = InputLokiTLSSettingsServerSide$outboundSchema;
  /** @deprecated use `InputLokiTLSSettingsServerSide$Outbound` instead. */
  export type Outbound = InputLokiTLSSettingsServerSide$Outbound;
}

export function inputLokiTLSSettingsServerSideToJSON(
  inputLokiTLSSettingsServerSide: InputLokiTLSSettingsServerSide,
): string {
  return JSON.stringify(
    InputLokiTLSSettingsServerSide$outboundSchema.parse(
      inputLokiTLSSettingsServerSide,
    ),
  );
}

export function inputLokiTLSSettingsServerSideFromJSON(
  jsonString: string,
): SafeParseResult<InputLokiTLSSettingsServerSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputLokiTLSSettingsServerSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputLokiTLSSettingsServerSide' from JSON`,
  );
}

/** @internal */
export const InputLokiAuthenticationType$inboundSchema: z.ZodNativeEnum<
  typeof InputLokiAuthenticationType
> = z.nativeEnum(InputLokiAuthenticationType);

/** @internal */
export const InputLokiAuthenticationType$outboundSchema: z.ZodNativeEnum<
  typeof InputLokiAuthenticationType
> = InputLokiAuthenticationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiAuthenticationType$ {
  /** @deprecated use `InputLokiAuthenticationType$inboundSchema` instead. */
  export const inboundSchema = InputLokiAuthenticationType$inboundSchema;
  /** @deprecated use `InputLokiAuthenticationType$outboundSchema` instead. */
  export const outboundSchema = InputLokiAuthenticationType$outboundSchema;
}

/** @internal */
export const InputLokiMetadatum$inboundSchema: z.ZodType<
  InputLokiMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputLokiMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputLokiMetadatum$outboundSchema: z.ZodType<
  InputLokiMetadatum$Outbound,
  z.ZodTypeDef,
  InputLokiMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiMetadatum$ {
  /** @deprecated use `InputLokiMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputLokiMetadatum$inboundSchema;
  /** @deprecated use `InputLokiMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputLokiMetadatum$outboundSchema;
  /** @deprecated use `InputLokiMetadatum$Outbound` instead. */
  export type Outbound = InputLokiMetadatum$Outbound;
}

export function inputLokiMetadatumToJSON(
  inputLokiMetadatum: InputLokiMetadatum,
): string {
  return JSON.stringify(
    InputLokiMetadatum$outboundSchema.parse(inputLokiMetadatum),
  );
}

export function inputLokiMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputLokiMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputLokiMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputLokiMetadatum' from JSON`,
  );
}

/** @internal */
export const InputLokiOauthParam$inboundSchema: z.ZodType<
  InputLokiOauthParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputLokiOauthParam$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputLokiOauthParam$outboundSchema: z.ZodType<
  InputLokiOauthParam$Outbound,
  z.ZodTypeDef,
  InputLokiOauthParam
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiOauthParam$ {
  /** @deprecated use `InputLokiOauthParam$inboundSchema` instead. */
  export const inboundSchema = InputLokiOauthParam$inboundSchema;
  /** @deprecated use `InputLokiOauthParam$outboundSchema` instead. */
  export const outboundSchema = InputLokiOauthParam$outboundSchema;
  /** @deprecated use `InputLokiOauthParam$Outbound` instead. */
  export type Outbound = InputLokiOauthParam$Outbound;
}

export function inputLokiOauthParamToJSON(
  inputLokiOauthParam: InputLokiOauthParam,
): string {
  return JSON.stringify(
    InputLokiOauthParam$outboundSchema.parse(inputLokiOauthParam),
  );
}

export function inputLokiOauthParamFromJSON(
  jsonString: string,
): SafeParseResult<InputLokiOauthParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputLokiOauthParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputLokiOauthParam' from JSON`,
  );
}

/** @internal */
export const InputLokiOauthHeader$inboundSchema: z.ZodType<
  InputLokiOauthHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputLokiOauthHeader$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputLokiOauthHeader$outboundSchema: z.ZodType<
  InputLokiOauthHeader$Outbound,
  z.ZodTypeDef,
  InputLokiOauthHeader
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLokiOauthHeader$ {
  /** @deprecated use `InputLokiOauthHeader$inboundSchema` instead. */
  export const inboundSchema = InputLokiOauthHeader$inboundSchema;
  /** @deprecated use `InputLokiOauthHeader$outboundSchema` instead. */
  export const outboundSchema = InputLokiOauthHeader$outboundSchema;
  /** @deprecated use `InputLokiOauthHeader$Outbound` instead. */
  export type Outbound = InputLokiOauthHeader$Outbound;
}

export function inputLokiOauthHeaderToJSON(
  inputLokiOauthHeader: InputLokiOauthHeader,
): string {
  return JSON.stringify(
    InputLokiOauthHeader$outboundSchema.parse(inputLokiOauthHeader),
  );
}

export function inputLokiOauthHeaderFromJSON(
  jsonString: string,
): SafeParseResult<InputLokiOauthHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputLokiOauthHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputLokiOauthHeader' from JSON`,
  );
}

/** @internal */
export const InputLoki$inboundSchema: z.ZodType<
  InputLoki,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputLokiType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputLokiConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputLokiPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputLokiTLSSettingsServerSide$inboundSchema).optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  lokiAPI: z.string().default("/loki/api/v1/push"),
  extractStructuredMetadata: z.boolean().default(false),
  authType: InputLokiAuthenticationType$inboundSchema.default("none"),
  metadata: z.array(z.lazy(() => InputLokiMetadatum$inboundSchema)).optional(),
  description: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => InputLokiOauthParam$inboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => InputLokiOauthHeader$inboundSchema))
    .optional(),
});

/** @internal */
export type InputLoki$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputLokiConnection$Outbound> | undefined;
  pq?: InputLokiPq$Outbound | undefined;
  host: string;
  port: number;
  tls?: InputLokiTLSSettingsServerSide$Outbound | undefined;
  maxActiveReq: number;
  maxRequestsPerSocket: number;
  enableProxyHeader: boolean;
  captureHeaders: boolean;
  activityLogSampleRate: number;
  requestTimeout: number;
  socketTimeout: number;
  keepAliveTimeout: number;
  enableHealthCheck: boolean;
  ipAllowlistRegex: string;
  ipDenylistRegex: string;
  lokiAPI: string;
  extractStructuredMetadata: boolean;
  authType: string;
  metadata?: Array<InputLokiMetadatum$Outbound> | undefined;
  description?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<InputLokiOauthParam$Outbound> | undefined;
  oauthHeaders?: Array<InputLokiOauthHeader$Outbound> | undefined;
};

/** @internal */
export const InputLoki$outboundSchema: z.ZodType<
  InputLoki$Outbound,
  z.ZodTypeDef,
  InputLoki
> = z.object({
  id: z.string().optional(),
  type: InputLokiType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputLokiConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputLokiPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputLokiTLSSettingsServerSide$outboundSchema).optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  lokiAPI: z.string().default("/loki/api/v1/push"),
  extractStructuredMetadata: z.boolean().default(false),
  authType: InputLokiAuthenticationType$outboundSchema.default("none"),
  metadata: z.array(z.lazy(() => InputLokiMetadatum$outboundSchema)).optional(),
  description: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => InputLokiOauthParam$outboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => InputLokiOauthHeader$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputLoki$ {
  /** @deprecated use `InputLoki$inboundSchema` instead. */
  export const inboundSchema = InputLoki$inboundSchema;
  /** @deprecated use `InputLoki$outboundSchema` instead. */
  export const outboundSchema = InputLoki$outboundSchema;
  /** @deprecated use `InputLoki$Outbound` instead. */
  export type Outbound = InputLoki$Outbound;
}

export function inputLokiToJSON(inputLoki: InputLoki): string {
  return JSON.stringify(InputLoki$outboundSchema.parse(inputLoki));
}

export function inputLokiFromJSON(
  jsonString: string,
): SafeParseResult<InputLoki, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputLoki$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputLoki' from JSON`,
  );
}
