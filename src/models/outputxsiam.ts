/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputXsiamType = {
  Xsiam: "xsiam",
} as const;
export type OutputXsiamType = ClosedEnum<typeof OutputXsiamType>;

export type OutputXsiamExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputXsiamFailedRequestLoggingMode = {
  /**
   * Payload
   */
  Payload: "payload",
  /**
   * Payload + Headers
   */
  PayloadAndHeaders: "payloadAndHeaders",
  /**
   * None
   */
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputXsiamFailedRequestLoggingMode = OpenEnum<
  typeof OutputXsiamFailedRequestLoggingMode
>;

/**
 * Enter a token directly, or provide a secret referencing a token
 */
export const OutputXsiamAuthenticationMethod = {
  Token: "token",
  Secret: "secret",
} as const;
/**
 * Enter a token directly, or provide a secret referencing a token
 */
export type OutputXsiamAuthenticationMethod = OpenEnum<
  typeof OutputXsiamAuthenticationMethod
>;

export type OutputXsiamResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputXsiamTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputXsiamBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputXsiamBackpressureBehavior = OpenEnum<
  typeof OutputXsiamBackpressureBehavior
>;

export type OutputXsiamUrl = {
  url?: any | undefined;
  /**
   * Assign a weight (>0) to each endpoint to indicate its traffic-handling capability
   */
  weight?: number | undefined;
};

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputXsiamMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Always: "always",
  /**
   * Always On
   */
  Backpressure: "backpressure",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputXsiamMode = OpenEnum<typeof OutputXsiamMode>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputXsiamCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputXsiamCompression = OpenEnum<typeof OutputXsiamCompression>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputXsiamQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputXsiamQueueFullBehavior = OpenEnum<
  typeof OutputXsiamQueueFullBehavior
>;

export type OutputXsiamPqControls = {};

export type OutputXsiam = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputXsiamType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Enable for optimal performance. Even if you have one hostname, it can expand to multiple IPs. If disabled, consider enabling round-robin DNS.
   */
  loadBalanced?: boolean | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputXsiamExtraHttpHeader> | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?: OutputXsiamFailedRequestLoggingMode | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Enter a token directly, or provide a secret referencing a token
   */
  authType?: OutputXsiamAuthenticationMethod | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?: Array<OutputXsiamResponseRetrySetting> | undefined;
  timeoutRetrySettings?: OutputXsiamTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * Maximum number of requests to limit to per second
   */
  throttleRateReqPerSec?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputXsiamBackpressureBehavior | undefined;
  /**
   * Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced.
   */
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  /**
   * XSIAM endpoint URL to send events to, such as https://api-{tenant external URL}/logs/v1/event
   */
  url?: string | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Exclude all IPs of the current host from the list of any resolved hostnames
   */
  excludeSelf?: boolean | undefined;
  urls?: Array<OutputXsiamUrl> | undefined;
  /**
   * The interval in which to re-resolve any hostnames and pick up destinations from A records
   */
  dnsResolvePeriodSec?: number | undefined;
  /**
   * How far back in time to keep traffic stats for load balancing purposes
   */
  loadBalanceStatsPeriodSec?: number | undefined;
  /**
   * XSIAM authentication token
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * Use FIFO (first in, first out) processing. Disable to forward new events to receivers before queue is flushed.
   */
  pqStrictOrdering?: boolean | undefined;
  /**
   * Throttling rate (in events per second) to impose while writing to Destinations from PQ. Defaults to 0, which disables throttling.
   */
  pqRatePerSec?: number | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputXsiamMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  pqMaxBufferSize?: number | undefined;
  /**
   * How long (in seconds) to wait for backpressure to resolve before engaging the queue
   */
  pqMaxBackpressureSec?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputXsiamCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputXsiamQueueFullBehavior | undefined;
  pqControls?: OutputXsiamPqControls | undefined;
};

/** @internal */
export const OutputXsiamType$inboundSchema: z.ZodNativeEnum<
  typeof OutputXsiamType
> = z.nativeEnum(OutputXsiamType);

/** @internal */
export const OutputXsiamType$outboundSchema: z.ZodNativeEnum<
  typeof OutputXsiamType
> = OutputXsiamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamType$ {
  /** @deprecated use `OutputXsiamType$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamType$inboundSchema;
  /** @deprecated use `OutputXsiamType$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamType$outboundSchema;
}

/** @internal */
export const OutputXsiamExtraHttpHeader$inboundSchema: z.ZodType<
  OutputXsiamExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputXsiamExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputXsiamExtraHttpHeader$outboundSchema: z.ZodType<
  OutputXsiamExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputXsiamExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamExtraHttpHeader$ {
  /** @deprecated use `OutputXsiamExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputXsiamExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputXsiamExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputXsiamExtraHttpHeader$Outbound;
}

export function outputXsiamExtraHttpHeaderToJSON(
  outputXsiamExtraHttpHeader: OutputXsiamExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputXsiamExtraHttpHeader$outboundSchema.parse(outputXsiamExtraHttpHeader),
  );
}

export function outputXsiamExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputXsiamExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputXsiamExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputXsiamExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputXsiamFailedRequestLoggingMode$inboundSchema: z.ZodType<
  OutputXsiamFailedRequestLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputXsiamFailedRequestLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputXsiamFailedRequestLoggingMode$outboundSchema: z.ZodType<
  OutputXsiamFailedRequestLoggingMode,
  z.ZodTypeDef,
  OutputXsiamFailedRequestLoggingMode
> = z.union([
  z.nativeEnum(OutputXsiamFailedRequestLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamFailedRequestLoggingMode$ {
  /** @deprecated use `OutputXsiamFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputXsiamFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputXsiamFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputXsiamFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputXsiamAuthenticationMethod$inboundSchema: z.ZodType<
  OutputXsiamAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputXsiamAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputXsiamAuthenticationMethod$outboundSchema: z.ZodType<
  OutputXsiamAuthenticationMethod,
  z.ZodTypeDef,
  OutputXsiamAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputXsiamAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamAuthenticationMethod$ {
  /** @deprecated use `OutputXsiamAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputXsiamAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputXsiamResponseRetrySetting$inboundSchema: z.ZodType<
  OutputXsiamResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputXsiamResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputXsiamResponseRetrySetting$outboundSchema: z.ZodType<
  OutputXsiamResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputXsiamResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamResponseRetrySetting$ {
  /** @deprecated use `OutputXsiamResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputXsiamResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputXsiamResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputXsiamResponseRetrySetting$Outbound;
}

export function outputXsiamResponseRetrySettingToJSON(
  outputXsiamResponseRetrySetting: OutputXsiamResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputXsiamResponseRetrySetting$outboundSchema.parse(
      outputXsiamResponseRetrySetting,
    ),
  );
}

export function outputXsiamResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputXsiamResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputXsiamResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputXsiamResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputXsiamTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputXsiamTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputXsiamTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputXsiamTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputXsiamTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputXsiamTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamTimeoutRetrySettings$ {
  /** @deprecated use `OutputXsiamTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputXsiamTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputXsiamTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputXsiamTimeoutRetrySettings$Outbound;
}

export function outputXsiamTimeoutRetrySettingsToJSON(
  outputXsiamTimeoutRetrySettings: OutputXsiamTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputXsiamTimeoutRetrySettings$outboundSchema.parse(
      outputXsiamTimeoutRetrySettings,
    ),
  );
}

export function outputXsiamTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputXsiamTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputXsiamTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputXsiamTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputXsiamBackpressureBehavior$inboundSchema: z.ZodType<
  OutputXsiamBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputXsiamBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputXsiamBackpressureBehavior$outboundSchema: z.ZodType<
  OutputXsiamBackpressureBehavior,
  z.ZodTypeDef,
  OutputXsiamBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputXsiamBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamBackpressureBehavior$ {
  /** @deprecated use `OutputXsiamBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputXsiamBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputXsiamUrl$inboundSchema: z.ZodType<
  OutputXsiamUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.any().optional(),
  weight: z.number().default(1),
});

/** @internal */
export type OutputXsiamUrl$Outbound = {
  url?: any | undefined;
  weight: number;
};

/** @internal */
export const OutputXsiamUrl$outboundSchema: z.ZodType<
  OutputXsiamUrl$Outbound,
  z.ZodTypeDef,
  OutputXsiamUrl
> = z.object({
  url: z.any().optional(),
  weight: z.number().default(1),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamUrl$ {
  /** @deprecated use `OutputXsiamUrl$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamUrl$inboundSchema;
  /** @deprecated use `OutputXsiamUrl$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamUrl$outboundSchema;
  /** @deprecated use `OutputXsiamUrl$Outbound` instead. */
  export type Outbound = OutputXsiamUrl$Outbound;
}

export function outputXsiamUrlToJSON(outputXsiamUrl: OutputXsiamUrl): string {
  return JSON.stringify(OutputXsiamUrl$outboundSchema.parse(outputXsiamUrl));
}

export function outputXsiamUrlFromJSON(
  jsonString: string,
): SafeParseResult<OutputXsiamUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputXsiamUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputXsiamUrl' from JSON`,
  );
}

/** @internal */
export const OutputXsiamMode$inboundSchema: z.ZodType<
  OutputXsiamMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputXsiamMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputXsiamMode$outboundSchema: z.ZodType<
  OutputXsiamMode,
  z.ZodTypeDef,
  OutputXsiamMode
> = z.union([
  z.nativeEnum(OutputXsiamMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamMode$ {
  /** @deprecated use `OutputXsiamMode$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamMode$inboundSchema;
  /** @deprecated use `OutputXsiamMode$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamMode$outboundSchema;
}

/** @internal */
export const OutputXsiamCompression$inboundSchema: z.ZodType<
  OutputXsiamCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputXsiamCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputXsiamCompression$outboundSchema: z.ZodType<
  OutputXsiamCompression,
  z.ZodTypeDef,
  OutputXsiamCompression
> = z.union([
  z.nativeEnum(OutputXsiamCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamCompression$ {
  /** @deprecated use `OutputXsiamCompression$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamCompression$inboundSchema;
  /** @deprecated use `OutputXsiamCompression$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamCompression$outboundSchema;
}

/** @internal */
export const OutputXsiamQueueFullBehavior$inboundSchema: z.ZodType<
  OutputXsiamQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputXsiamQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputXsiamQueueFullBehavior$outboundSchema: z.ZodType<
  OutputXsiamQueueFullBehavior,
  z.ZodTypeDef,
  OutputXsiamQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputXsiamQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamQueueFullBehavior$ {
  /** @deprecated use `OutputXsiamQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputXsiamQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputXsiamPqControls$inboundSchema: z.ZodType<
  OutputXsiamPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputXsiamPqControls$Outbound = {};

/** @internal */
export const OutputXsiamPqControls$outboundSchema: z.ZodType<
  OutputXsiamPqControls$Outbound,
  z.ZodTypeDef,
  OutputXsiamPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiamPqControls$ {
  /** @deprecated use `OutputXsiamPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputXsiamPqControls$inboundSchema;
  /** @deprecated use `OutputXsiamPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputXsiamPqControls$outboundSchema;
  /** @deprecated use `OutputXsiamPqControls$Outbound` instead. */
  export type Outbound = OutputXsiamPqControls$Outbound;
}

export function outputXsiamPqControlsToJSON(
  outputXsiamPqControls: OutputXsiamPqControls,
): string {
  return JSON.stringify(
    OutputXsiamPqControls$outboundSchema.parse(outputXsiamPqControls),
  );
}

export function outputXsiamPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputXsiamPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputXsiamPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputXsiamPqControls' from JSON`,
  );
}

/** @internal */
export const OutputXsiam$inboundSchema: z.ZodType<
  OutputXsiam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputXsiamType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  loadBalanced: z.boolean().default(false),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(10000),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputXsiamExtraHttpHeader$inboundSchema),
  ).optional(),
  failedRequestLoggingMode: OutputXsiamFailedRequestLoggingMode$inboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  authType: OutputXsiamAuthenticationMethod$inboundSchema.default("token"),
  responseRetrySettings: z.array(
    z.lazy(() => OutputXsiamResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputXsiamTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  throttleRateReqPerSec: z.number().int().default(400),
  onBackpressure: OutputXsiamBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  url: z.string().default("http://localhost:8088/logs/v1/event"),
  useRoundRobinDns: z.boolean().default(false),
  excludeSelf: z.boolean().default(false),
  urls: z.array(z.lazy(() => OutputXsiamUrl$inboundSchema)).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  pqStrictOrdering: z.boolean().default(true),
  pqRatePerSec: z.number().default(0),
  pqMode: OutputXsiamMode$inboundSchema.default("error"),
  pqMaxBufferSize: z.number().default(42),
  pqMaxBackpressureSec: z.number().default(30),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputXsiamCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputXsiamQueueFullBehavior$inboundSchema.default("block"),
  pqControls: z.lazy(() => OutputXsiamPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputXsiam$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  loadBalanced: boolean;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputXsiamExtraHttpHeader$Outbound> | undefined;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  authType: string;
  responseRetrySettings?:
    | Array<OutputXsiamResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?: OutputXsiamTimeoutRetrySettings$Outbound | undefined;
  responseHonorRetryAfterHeader: boolean;
  throttleRateReqPerSec: number;
  onBackpressure: string;
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  url: string;
  useRoundRobinDns: boolean;
  excludeSelf: boolean;
  urls?: Array<OutputXsiamUrl$Outbound> | undefined;
  dnsResolvePeriodSec: number;
  loadBalanceStatsPeriodSec: number;
  token?: string | undefined;
  textSecret?: string | undefined;
  pqStrictOrdering: boolean;
  pqRatePerSec: number;
  pqMode: string;
  pqMaxBufferSize: number;
  pqMaxBackpressureSec: number;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqControls?: OutputXsiamPqControls$Outbound | undefined;
};

/** @internal */
export const OutputXsiam$outboundSchema: z.ZodType<
  OutputXsiam$Outbound,
  z.ZodTypeDef,
  OutputXsiam
> = z.object({
  id: z.string().optional(),
  type: OutputXsiamType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  loadBalanced: z.boolean().default(false),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(10000),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputXsiamExtraHttpHeader$outboundSchema),
  ).optional(),
  failedRequestLoggingMode: OutputXsiamFailedRequestLoggingMode$outboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  authType: OutputXsiamAuthenticationMethod$outboundSchema.default("token"),
  responseRetrySettings: z.array(
    z.lazy(() => OutputXsiamResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputXsiamTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  throttleRateReqPerSec: z.number().int().default(400),
  onBackpressure: OutputXsiamBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  url: z.string().default("http://localhost:8088/logs/v1/event"),
  useRoundRobinDns: z.boolean().default(false),
  excludeSelf: z.boolean().default(false),
  urls: z.array(z.lazy(() => OutputXsiamUrl$outboundSchema)).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  pqStrictOrdering: z.boolean().default(true),
  pqRatePerSec: z.number().default(0),
  pqMode: OutputXsiamMode$outboundSchema.default("error"),
  pqMaxBufferSize: z.number().default(42),
  pqMaxBackpressureSec: z.number().default(30),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputXsiamCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputXsiamQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqControls: z.lazy(() => OutputXsiamPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputXsiam$ {
  /** @deprecated use `OutputXsiam$inboundSchema` instead. */
  export const inboundSchema = OutputXsiam$inboundSchema;
  /** @deprecated use `OutputXsiam$outboundSchema` instead. */
  export const outboundSchema = OutputXsiam$outboundSchema;
  /** @deprecated use `OutputXsiam$Outbound` instead. */
  export type Outbound = OutputXsiam$Outbound;
}

export function outputXsiamToJSON(outputXsiam: OutputXsiam): string {
  return JSON.stringify(OutputXsiam$outboundSchema.parse(outputXsiam));
}

export function outputXsiamFromJSON(
  jsonString: string,
): SafeParseResult<OutputXsiam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputXsiam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputXsiam' from JSON`,
  );
}
