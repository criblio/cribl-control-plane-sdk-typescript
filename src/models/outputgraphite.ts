/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputGraphiteType = {
  Graphite: "graphite",
} as const;
export type OutputGraphiteType = ClosedEnum<typeof OutputGraphiteType>;

/**
 * Protocol to use when communicating with the destination.
 */
export const OutputGraphiteDestinationProtocol = {
  Udp: "udp",
  Tcp: "tcp",
} as const;
/**
 * Protocol to use when communicating with the destination.
 */
export type OutputGraphiteDestinationProtocol = ClosedEnum<
  typeof OutputGraphiteDestinationProtocol
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputGraphiteBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputGraphiteBackpressureBehavior = ClosedEnum<
  typeof OutputGraphiteBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputGraphiteCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputGraphiteCompression = ClosedEnum<
  typeof OutputGraphiteCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputGraphiteQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputGraphiteQueueFullBehavior = ClosedEnum<
  typeof OutputGraphiteQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputGraphiteMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputGraphiteMode = ClosedEnum<typeof OutputGraphiteMode>;

export type OutputGraphitePqControls = {};

export type OutputGraphite = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputGraphiteType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Protocol to use when communicating with the destination.
   */
  protocol?: OutputGraphiteDestinationProtocol | undefined;
  /**
   * The hostname of the destination.
   */
  host: string;
  /**
   * Destination port.
   */
  port?: number | undefined;
  /**
   * When protocol is UDP, specifies the maximum size of packets sent to the destination. Also known as the MTU for the network path to the destination system.
   */
  mtu?: number | undefined;
  /**
   * When protocol is TCP, specifies how often buffers should be flushed, resulting in records sent to the destination.
   */
  flushPeriodSec?: number | undefined;
  /**
   * How often to resolve the destination hostname to an IP address. Ignored if the destination is an IP address. A value of 0 means every batch sent will incur a DNS lookup.
   */
  dnsResolvePeriodSec?: number | undefined;
  description?: string | undefined;
  /**
   * Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
   */
  throttleRatePerSec?: string | undefined;
  /**
   * Amount of time (milliseconds) to wait for the connection to establish before retrying
   */
  connectionTimeout?: number | undefined;
  /**
   * Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
   */
  writeTimeout?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputGraphiteBackpressureBehavior | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputGraphiteCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputGraphiteQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputGraphiteMode | undefined;
  pqControls?: OutputGraphitePqControls | undefined;
};

/** @internal */
export const OutputGraphiteType$inboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteType
> = z.nativeEnum(OutputGraphiteType);

/** @internal */
export const OutputGraphiteType$outboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteType
> = OutputGraphiteType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGraphiteType$ {
  /** @deprecated use `OutputGraphiteType$inboundSchema` instead. */
  export const inboundSchema = OutputGraphiteType$inboundSchema;
  /** @deprecated use `OutputGraphiteType$outboundSchema` instead. */
  export const outboundSchema = OutputGraphiteType$outboundSchema;
}

/** @internal */
export const OutputGraphiteDestinationProtocol$inboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteDestinationProtocol
> = z.nativeEnum(OutputGraphiteDestinationProtocol);

/** @internal */
export const OutputGraphiteDestinationProtocol$outboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteDestinationProtocol
> = OutputGraphiteDestinationProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGraphiteDestinationProtocol$ {
  /** @deprecated use `OutputGraphiteDestinationProtocol$inboundSchema` instead. */
  export const inboundSchema = OutputGraphiteDestinationProtocol$inboundSchema;
  /** @deprecated use `OutputGraphiteDestinationProtocol$outboundSchema` instead. */
  export const outboundSchema =
    OutputGraphiteDestinationProtocol$outboundSchema;
}

/** @internal */
export const OutputGraphiteBackpressureBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteBackpressureBehavior
> = z.nativeEnum(OutputGraphiteBackpressureBehavior);

/** @internal */
export const OutputGraphiteBackpressureBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteBackpressureBehavior
> = OutputGraphiteBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGraphiteBackpressureBehavior$ {
  /** @deprecated use `OutputGraphiteBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputGraphiteBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputGraphiteBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputGraphiteBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputGraphiteCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteCompression
> = z.nativeEnum(OutputGraphiteCompression);

/** @internal */
export const OutputGraphiteCompression$outboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteCompression
> = OutputGraphiteCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGraphiteCompression$ {
  /** @deprecated use `OutputGraphiteCompression$inboundSchema` instead. */
  export const inboundSchema = OutputGraphiteCompression$inboundSchema;
  /** @deprecated use `OutputGraphiteCompression$outboundSchema` instead. */
  export const outboundSchema = OutputGraphiteCompression$outboundSchema;
}

/** @internal */
export const OutputGraphiteQueueFullBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteQueueFullBehavior
> = z.nativeEnum(OutputGraphiteQueueFullBehavior);

/** @internal */
export const OutputGraphiteQueueFullBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteQueueFullBehavior
> = OutputGraphiteQueueFullBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGraphiteQueueFullBehavior$ {
  /** @deprecated use `OutputGraphiteQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputGraphiteQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputGraphiteQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputGraphiteQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputGraphiteMode$inboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteMode
> = z.nativeEnum(OutputGraphiteMode);

/** @internal */
export const OutputGraphiteMode$outboundSchema: z.ZodNativeEnum<
  typeof OutputGraphiteMode
> = OutputGraphiteMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGraphiteMode$ {
  /** @deprecated use `OutputGraphiteMode$inboundSchema` instead. */
  export const inboundSchema = OutputGraphiteMode$inboundSchema;
  /** @deprecated use `OutputGraphiteMode$outboundSchema` instead. */
  export const outboundSchema = OutputGraphiteMode$outboundSchema;
}

/** @internal */
export const OutputGraphitePqControls$inboundSchema: z.ZodType<
  OutputGraphitePqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputGraphitePqControls$Outbound = {};

/** @internal */
export const OutputGraphitePqControls$outboundSchema: z.ZodType<
  OutputGraphitePqControls$Outbound,
  z.ZodTypeDef,
  OutputGraphitePqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGraphitePqControls$ {
  /** @deprecated use `OutputGraphitePqControls$inboundSchema` instead. */
  export const inboundSchema = OutputGraphitePqControls$inboundSchema;
  /** @deprecated use `OutputGraphitePqControls$outboundSchema` instead. */
  export const outboundSchema = OutputGraphitePqControls$outboundSchema;
  /** @deprecated use `OutputGraphitePqControls$Outbound` instead. */
  export type Outbound = OutputGraphitePqControls$Outbound;
}

export function outputGraphitePqControlsToJSON(
  outputGraphitePqControls: OutputGraphitePqControls,
): string {
  return JSON.stringify(
    OutputGraphitePqControls$outboundSchema.parse(outputGraphitePqControls),
  );
}

export function outputGraphitePqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputGraphitePqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGraphitePqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGraphitePqControls' from JSON`,
  );
}

/** @internal */
export const OutputGraphite$inboundSchema: z.ZodType<
  OutputGraphite,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputGraphiteType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  protocol: OutputGraphiteDestinationProtocol$inboundSchema.default("udp"),
  host: z.string(),
  port: z.number().default(8125),
  mtu: z.number().default(512),
  flushPeriodSec: z.number().default(1),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  onBackpressure: OutputGraphiteBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGraphiteCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputGraphiteQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputGraphiteMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGraphitePqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputGraphite$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  protocol: string;
  host: string;
  port: number;
  mtu: number;
  flushPeriodSec: number;
  dnsResolvePeriodSec: number;
  description?: string | undefined;
  throttleRatePerSec: string;
  connectionTimeout: number;
  writeTimeout: number;
  onBackpressure: string;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputGraphitePqControls$Outbound | undefined;
};

/** @internal */
export const OutputGraphite$outboundSchema: z.ZodType<
  OutputGraphite$Outbound,
  z.ZodTypeDef,
  OutputGraphite
> = z.object({
  id: z.string().optional(),
  type: OutputGraphiteType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  protocol: OutputGraphiteDestinationProtocol$outboundSchema.default("udp"),
  host: z.string(),
  port: z.number().default(8125),
  mtu: z.number().default(512),
  flushPeriodSec: z.number().default(1),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  onBackpressure: OutputGraphiteBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputGraphiteCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputGraphiteQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputGraphiteMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputGraphitePqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGraphite$ {
  /** @deprecated use `OutputGraphite$inboundSchema` instead. */
  export const inboundSchema = OutputGraphite$inboundSchema;
  /** @deprecated use `OutputGraphite$outboundSchema` instead. */
  export const outboundSchema = OutputGraphite$outboundSchema;
  /** @deprecated use `OutputGraphite$Outbound` instead. */
  export type Outbound = OutputGraphite$Outbound;
}

export function outputGraphiteToJSON(outputGraphite: OutputGraphite): string {
  return JSON.stringify(OutputGraphite$outboundSchema.parse(outputGraphite));
}

export function outputGraphiteFromJSON(
  jsonString: string,
): SafeParseResult<OutputGraphite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGraphite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGraphite' from JSON`,
  );
}
