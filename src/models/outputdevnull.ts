/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputDevnullType = {
  Devnull: "devnull",
} as const;
export type OutputDevnullType = ClosedEnum<typeof OutputDevnullType>;

export type OutputDevnull = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputDevnullType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
};

/** @internal */
export const OutputDevnullType$inboundSchema: z.ZodNativeEnum<
  typeof OutputDevnullType
> = z.nativeEnum(OutputDevnullType);

/** @internal */
export const OutputDevnullType$outboundSchema: z.ZodNativeEnum<
  typeof OutputDevnullType
> = OutputDevnullType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDevnullType$ {
  /** @deprecated use `OutputDevnullType$inboundSchema` instead. */
  export const inboundSchema = OutputDevnullType$inboundSchema;
  /** @deprecated use `OutputDevnullType$outboundSchema` instead. */
  export const outboundSchema = OutputDevnullType$outboundSchema;
}

/** @internal */
export const OutputDevnull$inboundSchema: z.ZodType<
  OutputDevnull,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputDevnullType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
});

/** @internal */
export type OutputDevnull$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
};

/** @internal */
export const OutputDevnull$outboundSchema: z.ZodType<
  OutputDevnull$Outbound,
  z.ZodTypeDef,
  OutputDevnull
> = z.object({
  id: z.string().optional(),
  type: OutputDevnullType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDevnull$ {
  /** @deprecated use `OutputDevnull$inboundSchema` instead. */
  export const inboundSchema = OutputDevnull$inboundSchema;
  /** @deprecated use `OutputDevnull$outboundSchema` instead. */
  export const outboundSchema = OutputDevnull$outboundSchema;
  /** @deprecated use `OutputDevnull$Outbound` instead. */
  export type Outbound = OutputDevnull$Outbound;
}

export function outputDevnullToJSON(outputDevnull: OutputDevnull): string {
  return JSON.stringify(OutputDevnull$outboundSchema.parse(outputDevnull));
}

export function outputDevnullFromJSON(
  jsonString: string,
): SafeParseResult<OutputDevnull, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputDevnull$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputDevnull' from JSON`,
  );
}
