/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type HBLeaderInfo = {
  host: string;
  port: number;
  servername?: string | undefined;
  tls?: boolean | undefined;
};

/** @internal */
export const HBLeaderInfo$inboundSchema: z.ZodType<
  HBLeaderInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  port: z.number(),
  servername: z.string().optional(),
  tls: z.boolean().optional(),
});

/** @internal */
export type HBLeaderInfo$Outbound = {
  host: string;
  port: number;
  servername?: string | undefined;
  tls?: boolean | undefined;
};

/** @internal */
export const HBLeaderInfo$outboundSchema: z.ZodType<
  HBLeaderInfo$Outbound,
  z.ZodTypeDef,
  HBLeaderInfo
> = z.object({
  host: z.string(),
  port: z.number(),
  servername: z.string().optional(),
  tls: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HBLeaderInfo$ {
  /** @deprecated use `HBLeaderInfo$inboundSchema` instead. */
  export const inboundSchema = HBLeaderInfo$inboundSchema;
  /** @deprecated use `HBLeaderInfo$outboundSchema` instead. */
  export const outboundSchema = HBLeaderInfo$outboundSchema;
  /** @deprecated use `HBLeaderInfo$Outbound` instead. */
  export type Outbound = HBLeaderInfo$Outbound;
}

export function hbLeaderInfoToJSON(hbLeaderInfo: HBLeaderInfo): string {
  return JSON.stringify(HBLeaderInfo$outboundSchema.parse(hbLeaderInfo));
}

export function hbLeaderInfoFromJSON(
  jsonString: string,
): SafeParseResult<HBLeaderInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HBLeaderInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HBLeaderInfo' from JSON`,
  );
}
