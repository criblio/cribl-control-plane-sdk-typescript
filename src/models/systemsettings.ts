/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AppMode,
  AppMode$inboundSchema,
  AppMode$outboundSchema,
} from "./appmode.js";
import {
  AuthConfig,
  AuthConfig$inboundSchema,
  AuthConfig$Outbound,
  AuthConfig$outboundSchema,
} from "./authconfig.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  GitSettings,
  GitSettings$inboundSchema,
  GitSettings$Outbound,
  GitSettings$outboundSchema,
} from "./gitsettings.js";
import {
  JobSettings,
  JobSettings$inboundSchema,
  JobSettings$Outbound,
  JobSettings$outboundSchema,
} from "./jobsettings.js";
import {
  Limits,
  Limits$inboundSchema,
  Limits$Outbound,
  Limits$outboundSchema,
} from "./limits.js";
import {
  RedisCacheLimits,
  RedisCacheLimits$inboundSchema,
  RedisCacheLimits$Outbound,
  RedisCacheLimits$outboundSchema,
} from "./rediscachelimits.js";
import {
  RedisLimits,
  RedisLimits$inboundSchema,
  RedisLimits$Outbound,
  RedisLimits$outboundSchema,
} from "./redislimits.js";
import {
  SearchSettings,
  SearchSettings$inboundSchema,
  SearchSettings$Outbound,
  SearchSettings$outboundSchema,
} from "./searchsettings.js";
import {
  ServicesLimits,
  ServicesLimits$inboundSchema,
  ServicesLimits$Outbound,
  ServicesLimits$outboundSchema,
} from "./serviceslimits.js";
import {
  UpgradeGroupSettings,
  UpgradeGroupSettings$inboundSchema,
  UpgradeGroupSettings$Outbound,
  UpgradeGroupSettings$outboundSchema,
} from "./upgradegroupsettings.js";
import {
  UpgradeSettings,
  UpgradeSettings$inboundSchema,
  UpgradeSettings$Outbound,
  UpgradeSettings$outboundSchema,
} from "./upgradesettings.js";

export type SystemSettingsHeaders = {};

export type SystemSettingsSsl = {
  caPath?: string | undefined;
  certPath: string;
  disabled: boolean;
  passphrase: string;
  privKeyPath: string;
};

export type SystemSettingsApi = {
  baseUrl?: string | undefined;
  disableApiCache?: boolean | undefined;
  disabled: boolean;
  headers?: SystemSettingsHeaders | undefined;
  host: string;
  idleSessionTTL?: number | undefined;
  listenOnPort?: boolean | undefined;
  loginRateLimit?: string | undefined;
  port: number;
  protocol: string;
  scripts?: boolean | undefined;
  sensitiveFields?: Array<string> | undefined;
  ssl: SystemSettingsSsl;
  ssoRateLimit?: string | undefined;
  workerRemoteAccess: boolean;
};

export type SystemSettingsBackups = {
  backupPersistence: string;
  backupsDirectory: string;
};

export type SystemSettingsCustomLogo = {
  enabled: boolean;
  logoDescription: string;
  logoImage: string;
};

export type Distributed = {
  mode: AppMode;
};

export type SystemSettingsPii = {
  enablePiiDetection: boolean;
};

export type SystemSettingsProxy = {
  useEnvVars: boolean;
};

export type SystemSettingsRollback = {
  rollbackEnabled: boolean;
  rollbackRetries?: number | undefined;
  rollbackTimeout?: number | undefined;
};

export type SystemSettingsShutdown = {
  drainTimeout: number;
};

export type SystemSettingsSni = {
  disableSNIRouting: boolean;
};

export type SystemSettingsSockets = {
  directory?: string | undefined;
};

export const SystemSettingsUpgrade = {
  False: "false",
  Api: "api",
} as const;
export type SystemSettingsUpgrade = ClosedEnum<typeof SystemSettingsUpgrade>;

export type SystemSettingsSystem = {
  intercom: boolean;
  upgrade: SystemSettingsUpgrade;
};

export type SystemSettingsTls = {
  defaultCipherList: string;
  defaultEcdhCurve: string;
  maxVersion: string;
  minVersion: string;
  rejectUnauthorized: boolean;
};

export type SystemSettingsWorkers = {
  count: number;
  enableHeapSnapshots?: boolean | undefined;
  loadThrottlePerc?: number | undefined;
  memory: number;
  minimum: number;
  startupMaxConns?: number | undefined;
  startupThrottleTimeout?: number | undefined;
  v8SingleThread?: boolean | undefined;
};

export type SystemSettings = {
  api: SystemSettingsApi;
  auth: AuthConfig;
  backups: SystemSettingsBackups;
  customLogo: SystemSettingsCustomLogo;
  distributed: Distributed;
  fips: boolean;
  git: GitSettings;
  jobLimits: JobSettings;
  limits: Limits;
  pii: SystemSettingsPii;
  proxy: SystemSettingsProxy;
  redisCacheLimits: RedisCacheLimits;
  redisLimits: RedisLimits;
  rollback: SystemSettingsRollback;
  searchLimits: SearchSettings;
  servicesLimits: ServicesLimits;
  shutdown: SystemSettingsShutdown;
  sni: SystemSettingsSni;
  sockets?: SystemSettingsSockets | undefined;
  system: SystemSettingsSystem;
  tls: SystemSettingsTls;
  upgradeGroupSettings: UpgradeGroupSettings;
  upgradeSettings: UpgradeSettings;
  workers: SystemSettingsWorkers;
};

/** @internal */
export const SystemSettingsHeaders$inboundSchema: z.ZodType<
  SystemSettingsHeaders,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SystemSettingsHeaders$Outbound = {};

/** @internal */
export const SystemSettingsHeaders$outboundSchema: z.ZodType<
  SystemSettingsHeaders$Outbound,
  z.ZodTypeDef,
  SystemSettingsHeaders
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsHeaders$ {
  /** @deprecated use `SystemSettingsHeaders$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsHeaders$inboundSchema;
  /** @deprecated use `SystemSettingsHeaders$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsHeaders$outboundSchema;
  /** @deprecated use `SystemSettingsHeaders$Outbound` instead. */
  export type Outbound = SystemSettingsHeaders$Outbound;
}

export function systemSettingsHeadersToJSON(
  systemSettingsHeaders: SystemSettingsHeaders,
): string {
  return JSON.stringify(
    SystemSettingsHeaders$outboundSchema.parse(systemSettingsHeaders),
  );
}

export function systemSettingsHeadersFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsHeaders, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsHeaders$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsHeaders' from JSON`,
  );
}

/** @internal */
export const SystemSettingsSsl$inboundSchema: z.ZodType<
  SystemSettingsSsl,
  z.ZodTypeDef,
  unknown
> = z.object({
  caPath: z.string().optional(),
  certPath: z.string(),
  disabled: z.boolean(),
  passphrase: z.string(),
  privKeyPath: z.string(),
});

/** @internal */
export type SystemSettingsSsl$Outbound = {
  caPath?: string | undefined;
  certPath: string;
  disabled: boolean;
  passphrase: string;
  privKeyPath: string;
};

/** @internal */
export const SystemSettingsSsl$outboundSchema: z.ZodType<
  SystemSettingsSsl$Outbound,
  z.ZodTypeDef,
  SystemSettingsSsl
> = z.object({
  caPath: z.string().optional(),
  certPath: z.string(),
  disabled: z.boolean(),
  passphrase: z.string(),
  privKeyPath: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsSsl$ {
  /** @deprecated use `SystemSettingsSsl$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsSsl$inboundSchema;
  /** @deprecated use `SystemSettingsSsl$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsSsl$outboundSchema;
  /** @deprecated use `SystemSettingsSsl$Outbound` instead. */
  export type Outbound = SystemSettingsSsl$Outbound;
}

export function systemSettingsSslToJSON(
  systemSettingsSsl: SystemSettingsSsl,
): string {
  return JSON.stringify(
    SystemSettingsSsl$outboundSchema.parse(systemSettingsSsl),
  );
}

export function systemSettingsSslFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsSsl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsSsl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsSsl' from JSON`,
  );
}

/** @internal */
export const SystemSettingsApi$inboundSchema: z.ZodType<
  SystemSettingsApi,
  z.ZodTypeDef,
  unknown
> = z.object({
  baseUrl: z.string().optional(),
  disableApiCache: z.boolean().optional(),
  disabled: z.boolean(),
  headers: z.lazy(() => SystemSettingsHeaders$inboundSchema).optional(),
  host: z.string(),
  idleSessionTTL: z.number().optional(),
  listenOnPort: z.boolean().optional(),
  loginRateLimit: z.string().optional(),
  port: z.number(),
  protocol: z.string(),
  scripts: z.boolean().optional(),
  sensitiveFields: z.array(z.string()).optional(),
  ssl: z.lazy(() => SystemSettingsSsl$inboundSchema),
  ssoRateLimit: z.string().optional(),
  workerRemoteAccess: z.boolean(),
});

/** @internal */
export type SystemSettingsApi$Outbound = {
  baseUrl?: string | undefined;
  disableApiCache?: boolean | undefined;
  disabled: boolean;
  headers?: SystemSettingsHeaders$Outbound | undefined;
  host: string;
  idleSessionTTL?: number | undefined;
  listenOnPort?: boolean | undefined;
  loginRateLimit?: string | undefined;
  port: number;
  protocol: string;
  scripts?: boolean | undefined;
  sensitiveFields?: Array<string> | undefined;
  ssl: SystemSettingsSsl$Outbound;
  ssoRateLimit?: string | undefined;
  workerRemoteAccess: boolean;
};

/** @internal */
export const SystemSettingsApi$outboundSchema: z.ZodType<
  SystemSettingsApi$Outbound,
  z.ZodTypeDef,
  SystemSettingsApi
> = z.object({
  baseUrl: z.string().optional(),
  disableApiCache: z.boolean().optional(),
  disabled: z.boolean(),
  headers: z.lazy(() => SystemSettingsHeaders$outboundSchema).optional(),
  host: z.string(),
  idleSessionTTL: z.number().optional(),
  listenOnPort: z.boolean().optional(),
  loginRateLimit: z.string().optional(),
  port: z.number(),
  protocol: z.string(),
  scripts: z.boolean().optional(),
  sensitiveFields: z.array(z.string()).optional(),
  ssl: z.lazy(() => SystemSettingsSsl$outboundSchema),
  ssoRateLimit: z.string().optional(),
  workerRemoteAccess: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsApi$ {
  /** @deprecated use `SystemSettingsApi$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsApi$inboundSchema;
  /** @deprecated use `SystemSettingsApi$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsApi$outboundSchema;
  /** @deprecated use `SystemSettingsApi$Outbound` instead. */
  export type Outbound = SystemSettingsApi$Outbound;
}

export function systemSettingsApiToJSON(
  systemSettingsApi: SystemSettingsApi,
): string {
  return JSON.stringify(
    SystemSettingsApi$outboundSchema.parse(systemSettingsApi),
  );
}

export function systemSettingsApiFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsApi, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsApi$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsApi' from JSON`,
  );
}

/** @internal */
export const SystemSettingsBackups$inboundSchema: z.ZodType<
  SystemSettingsBackups,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupPersistence: z.string(),
  backupsDirectory: z.string(),
});

/** @internal */
export type SystemSettingsBackups$Outbound = {
  backupPersistence: string;
  backupsDirectory: string;
};

/** @internal */
export const SystemSettingsBackups$outboundSchema: z.ZodType<
  SystemSettingsBackups$Outbound,
  z.ZodTypeDef,
  SystemSettingsBackups
> = z.object({
  backupPersistence: z.string(),
  backupsDirectory: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsBackups$ {
  /** @deprecated use `SystemSettingsBackups$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsBackups$inboundSchema;
  /** @deprecated use `SystemSettingsBackups$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsBackups$outboundSchema;
  /** @deprecated use `SystemSettingsBackups$Outbound` instead. */
  export type Outbound = SystemSettingsBackups$Outbound;
}

export function systemSettingsBackupsToJSON(
  systemSettingsBackups: SystemSettingsBackups,
): string {
  return JSON.stringify(
    SystemSettingsBackups$outboundSchema.parse(systemSettingsBackups),
  );
}

export function systemSettingsBackupsFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsBackups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsBackups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsBackups' from JSON`,
  );
}

/** @internal */
export const SystemSettingsCustomLogo$inboundSchema: z.ZodType<
  SystemSettingsCustomLogo,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean(),
  logoDescription: z.string(),
  logoImage: z.string(),
});

/** @internal */
export type SystemSettingsCustomLogo$Outbound = {
  enabled: boolean;
  logoDescription: string;
  logoImage: string;
};

/** @internal */
export const SystemSettingsCustomLogo$outboundSchema: z.ZodType<
  SystemSettingsCustomLogo$Outbound,
  z.ZodTypeDef,
  SystemSettingsCustomLogo
> = z.object({
  enabled: z.boolean(),
  logoDescription: z.string(),
  logoImage: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsCustomLogo$ {
  /** @deprecated use `SystemSettingsCustomLogo$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsCustomLogo$inboundSchema;
  /** @deprecated use `SystemSettingsCustomLogo$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsCustomLogo$outboundSchema;
  /** @deprecated use `SystemSettingsCustomLogo$Outbound` instead. */
  export type Outbound = SystemSettingsCustomLogo$Outbound;
}

export function systemSettingsCustomLogoToJSON(
  systemSettingsCustomLogo: SystemSettingsCustomLogo,
): string {
  return JSON.stringify(
    SystemSettingsCustomLogo$outboundSchema.parse(systemSettingsCustomLogo),
  );
}

export function systemSettingsCustomLogoFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsCustomLogo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsCustomLogo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsCustomLogo' from JSON`,
  );
}

/** @internal */
export const Distributed$inboundSchema: z.ZodType<
  Distributed,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: AppMode$inboundSchema,
});

/** @internal */
export type Distributed$Outbound = {
  mode: string;
};

/** @internal */
export const Distributed$outboundSchema: z.ZodType<
  Distributed$Outbound,
  z.ZodTypeDef,
  Distributed
> = z.object({
  mode: AppMode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Distributed$ {
  /** @deprecated use `Distributed$inboundSchema` instead. */
  export const inboundSchema = Distributed$inboundSchema;
  /** @deprecated use `Distributed$outboundSchema` instead. */
  export const outboundSchema = Distributed$outboundSchema;
  /** @deprecated use `Distributed$Outbound` instead. */
  export type Outbound = Distributed$Outbound;
}

export function distributedToJSON(distributed: Distributed): string {
  return JSON.stringify(Distributed$outboundSchema.parse(distributed));
}

export function distributedFromJSON(
  jsonString: string,
): SafeParseResult<Distributed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Distributed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Distributed' from JSON`,
  );
}

/** @internal */
export const SystemSettingsPii$inboundSchema: z.ZodType<
  SystemSettingsPii,
  z.ZodTypeDef,
  unknown
> = z.object({
  enablePiiDetection: z.boolean(),
});

/** @internal */
export type SystemSettingsPii$Outbound = {
  enablePiiDetection: boolean;
};

/** @internal */
export const SystemSettingsPii$outboundSchema: z.ZodType<
  SystemSettingsPii$Outbound,
  z.ZodTypeDef,
  SystemSettingsPii
> = z.object({
  enablePiiDetection: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsPii$ {
  /** @deprecated use `SystemSettingsPii$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsPii$inboundSchema;
  /** @deprecated use `SystemSettingsPii$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsPii$outboundSchema;
  /** @deprecated use `SystemSettingsPii$Outbound` instead. */
  export type Outbound = SystemSettingsPii$Outbound;
}

export function systemSettingsPiiToJSON(
  systemSettingsPii: SystemSettingsPii,
): string {
  return JSON.stringify(
    SystemSettingsPii$outboundSchema.parse(systemSettingsPii),
  );
}

export function systemSettingsPiiFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsPii, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsPii$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsPii' from JSON`,
  );
}

/** @internal */
export const SystemSettingsProxy$inboundSchema: z.ZodType<
  SystemSettingsProxy,
  z.ZodTypeDef,
  unknown
> = z.object({
  useEnvVars: z.boolean(),
});

/** @internal */
export type SystemSettingsProxy$Outbound = {
  useEnvVars: boolean;
};

/** @internal */
export const SystemSettingsProxy$outboundSchema: z.ZodType<
  SystemSettingsProxy$Outbound,
  z.ZodTypeDef,
  SystemSettingsProxy
> = z.object({
  useEnvVars: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsProxy$ {
  /** @deprecated use `SystemSettingsProxy$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsProxy$inboundSchema;
  /** @deprecated use `SystemSettingsProxy$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsProxy$outboundSchema;
  /** @deprecated use `SystemSettingsProxy$Outbound` instead. */
  export type Outbound = SystemSettingsProxy$Outbound;
}

export function systemSettingsProxyToJSON(
  systemSettingsProxy: SystemSettingsProxy,
): string {
  return JSON.stringify(
    SystemSettingsProxy$outboundSchema.parse(systemSettingsProxy),
  );
}

export function systemSettingsProxyFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsProxy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsProxy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsProxy' from JSON`,
  );
}

/** @internal */
export const SystemSettingsRollback$inboundSchema: z.ZodType<
  SystemSettingsRollback,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollbackEnabled: z.boolean(),
  rollbackRetries: z.number().optional(),
  rollbackTimeout: z.number().optional(),
});

/** @internal */
export type SystemSettingsRollback$Outbound = {
  rollbackEnabled: boolean;
  rollbackRetries?: number | undefined;
  rollbackTimeout?: number | undefined;
};

/** @internal */
export const SystemSettingsRollback$outboundSchema: z.ZodType<
  SystemSettingsRollback$Outbound,
  z.ZodTypeDef,
  SystemSettingsRollback
> = z.object({
  rollbackEnabled: z.boolean(),
  rollbackRetries: z.number().optional(),
  rollbackTimeout: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsRollback$ {
  /** @deprecated use `SystemSettingsRollback$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsRollback$inboundSchema;
  /** @deprecated use `SystemSettingsRollback$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsRollback$outboundSchema;
  /** @deprecated use `SystemSettingsRollback$Outbound` instead. */
  export type Outbound = SystemSettingsRollback$Outbound;
}

export function systemSettingsRollbackToJSON(
  systemSettingsRollback: SystemSettingsRollback,
): string {
  return JSON.stringify(
    SystemSettingsRollback$outboundSchema.parse(systemSettingsRollback),
  );
}

export function systemSettingsRollbackFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsRollback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsRollback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsRollback' from JSON`,
  );
}

/** @internal */
export const SystemSettingsShutdown$inboundSchema: z.ZodType<
  SystemSettingsShutdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  drainTimeout: z.number(),
});

/** @internal */
export type SystemSettingsShutdown$Outbound = {
  drainTimeout: number;
};

/** @internal */
export const SystemSettingsShutdown$outboundSchema: z.ZodType<
  SystemSettingsShutdown$Outbound,
  z.ZodTypeDef,
  SystemSettingsShutdown
> = z.object({
  drainTimeout: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsShutdown$ {
  /** @deprecated use `SystemSettingsShutdown$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsShutdown$inboundSchema;
  /** @deprecated use `SystemSettingsShutdown$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsShutdown$outboundSchema;
  /** @deprecated use `SystemSettingsShutdown$Outbound` instead. */
  export type Outbound = SystemSettingsShutdown$Outbound;
}

export function systemSettingsShutdownToJSON(
  systemSettingsShutdown: SystemSettingsShutdown,
): string {
  return JSON.stringify(
    SystemSettingsShutdown$outboundSchema.parse(systemSettingsShutdown),
  );
}

export function systemSettingsShutdownFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsShutdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsShutdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsShutdown' from JSON`,
  );
}

/** @internal */
export const SystemSettingsSni$inboundSchema: z.ZodType<
  SystemSettingsSni,
  z.ZodTypeDef,
  unknown
> = z.object({
  disableSNIRouting: z.boolean(),
});

/** @internal */
export type SystemSettingsSni$Outbound = {
  disableSNIRouting: boolean;
};

/** @internal */
export const SystemSettingsSni$outboundSchema: z.ZodType<
  SystemSettingsSni$Outbound,
  z.ZodTypeDef,
  SystemSettingsSni
> = z.object({
  disableSNIRouting: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsSni$ {
  /** @deprecated use `SystemSettingsSni$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsSni$inboundSchema;
  /** @deprecated use `SystemSettingsSni$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsSni$outboundSchema;
  /** @deprecated use `SystemSettingsSni$Outbound` instead. */
  export type Outbound = SystemSettingsSni$Outbound;
}

export function systemSettingsSniToJSON(
  systemSettingsSni: SystemSettingsSni,
): string {
  return JSON.stringify(
    SystemSettingsSni$outboundSchema.parse(systemSettingsSni),
  );
}

export function systemSettingsSniFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsSni, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsSni$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsSni' from JSON`,
  );
}

/** @internal */
export const SystemSettingsSockets$inboundSchema: z.ZodType<
  SystemSettingsSockets,
  z.ZodTypeDef,
  unknown
> = z.object({
  directory: z.string().optional(),
});

/** @internal */
export type SystemSettingsSockets$Outbound = {
  directory?: string | undefined;
};

/** @internal */
export const SystemSettingsSockets$outboundSchema: z.ZodType<
  SystemSettingsSockets$Outbound,
  z.ZodTypeDef,
  SystemSettingsSockets
> = z.object({
  directory: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsSockets$ {
  /** @deprecated use `SystemSettingsSockets$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsSockets$inboundSchema;
  /** @deprecated use `SystemSettingsSockets$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsSockets$outboundSchema;
  /** @deprecated use `SystemSettingsSockets$Outbound` instead. */
  export type Outbound = SystemSettingsSockets$Outbound;
}

export function systemSettingsSocketsToJSON(
  systemSettingsSockets: SystemSettingsSockets,
): string {
  return JSON.stringify(
    SystemSettingsSockets$outboundSchema.parse(systemSettingsSockets),
  );
}

export function systemSettingsSocketsFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsSockets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsSockets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsSockets' from JSON`,
  );
}

/** @internal */
export const SystemSettingsUpgrade$inboundSchema: z.ZodNativeEnum<
  typeof SystemSettingsUpgrade
> = z.nativeEnum(SystemSettingsUpgrade);

/** @internal */
export const SystemSettingsUpgrade$outboundSchema: z.ZodNativeEnum<
  typeof SystemSettingsUpgrade
> = SystemSettingsUpgrade$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsUpgrade$ {
  /** @deprecated use `SystemSettingsUpgrade$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsUpgrade$inboundSchema;
  /** @deprecated use `SystemSettingsUpgrade$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsUpgrade$outboundSchema;
}

/** @internal */
export const SystemSettingsSystem$inboundSchema: z.ZodType<
  SystemSettingsSystem,
  z.ZodTypeDef,
  unknown
> = z.object({
  intercom: z.boolean(),
  upgrade: SystemSettingsUpgrade$inboundSchema,
});

/** @internal */
export type SystemSettingsSystem$Outbound = {
  intercom: boolean;
  upgrade: string;
};

/** @internal */
export const SystemSettingsSystem$outboundSchema: z.ZodType<
  SystemSettingsSystem$Outbound,
  z.ZodTypeDef,
  SystemSettingsSystem
> = z.object({
  intercom: z.boolean(),
  upgrade: SystemSettingsUpgrade$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsSystem$ {
  /** @deprecated use `SystemSettingsSystem$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsSystem$inboundSchema;
  /** @deprecated use `SystemSettingsSystem$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsSystem$outboundSchema;
  /** @deprecated use `SystemSettingsSystem$Outbound` instead. */
  export type Outbound = SystemSettingsSystem$Outbound;
}

export function systemSettingsSystemToJSON(
  systemSettingsSystem: SystemSettingsSystem,
): string {
  return JSON.stringify(
    SystemSettingsSystem$outboundSchema.parse(systemSettingsSystem),
  );
}

export function systemSettingsSystemFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsSystem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsSystem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsSystem' from JSON`,
  );
}

/** @internal */
export const SystemSettingsTls$inboundSchema: z.ZodType<
  SystemSettingsTls,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultCipherList: z.string(),
  defaultEcdhCurve: z.string(),
  maxVersion: z.string(),
  minVersion: z.string(),
  rejectUnauthorized: z.boolean(),
});

/** @internal */
export type SystemSettingsTls$Outbound = {
  defaultCipherList: string;
  defaultEcdhCurve: string;
  maxVersion: string;
  minVersion: string;
  rejectUnauthorized: boolean;
};

/** @internal */
export const SystemSettingsTls$outboundSchema: z.ZodType<
  SystemSettingsTls$Outbound,
  z.ZodTypeDef,
  SystemSettingsTls
> = z.object({
  defaultCipherList: z.string(),
  defaultEcdhCurve: z.string(),
  maxVersion: z.string(),
  minVersion: z.string(),
  rejectUnauthorized: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsTls$ {
  /** @deprecated use `SystemSettingsTls$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsTls$inboundSchema;
  /** @deprecated use `SystemSettingsTls$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsTls$outboundSchema;
  /** @deprecated use `SystemSettingsTls$Outbound` instead. */
  export type Outbound = SystemSettingsTls$Outbound;
}

export function systemSettingsTlsToJSON(
  systemSettingsTls: SystemSettingsTls,
): string {
  return JSON.stringify(
    SystemSettingsTls$outboundSchema.parse(systemSettingsTls),
  );
}

export function systemSettingsTlsFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsTls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsTls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsTls' from JSON`,
  );
}

/** @internal */
export const SystemSettingsWorkers$inboundSchema: z.ZodType<
  SystemSettingsWorkers,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
  enableHeapSnapshots: z.boolean().optional(),
  loadThrottlePerc: z.number().optional(),
  memory: z.number(),
  minimum: z.number(),
  startupMaxConns: z.number().optional(),
  startupThrottleTimeout: z.number().optional(),
  v8SingleThread: z.boolean().optional(),
});

/** @internal */
export type SystemSettingsWorkers$Outbound = {
  count: number;
  enableHeapSnapshots?: boolean | undefined;
  loadThrottlePerc?: number | undefined;
  memory: number;
  minimum: number;
  startupMaxConns?: number | undefined;
  startupThrottleTimeout?: number | undefined;
  v8SingleThread?: boolean | undefined;
};

/** @internal */
export const SystemSettingsWorkers$outboundSchema: z.ZodType<
  SystemSettingsWorkers$Outbound,
  z.ZodTypeDef,
  SystemSettingsWorkers
> = z.object({
  count: z.number(),
  enableHeapSnapshots: z.boolean().optional(),
  loadThrottlePerc: z.number().optional(),
  memory: z.number(),
  minimum: z.number(),
  startupMaxConns: z.number().optional(),
  startupThrottleTimeout: z.number().optional(),
  v8SingleThread: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsWorkers$ {
  /** @deprecated use `SystemSettingsWorkers$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsWorkers$inboundSchema;
  /** @deprecated use `SystemSettingsWorkers$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsWorkers$outboundSchema;
  /** @deprecated use `SystemSettingsWorkers$Outbound` instead. */
  export type Outbound = SystemSettingsWorkers$Outbound;
}

export function systemSettingsWorkersToJSON(
  systemSettingsWorkers: SystemSettingsWorkers,
): string {
  return JSON.stringify(
    SystemSettingsWorkers$outboundSchema.parse(systemSettingsWorkers),
  );
}

export function systemSettingsWorkersFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsWorkers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsWorkers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsWorkers' from JSON`,
  );
}

/** @internal */
export const SystemSettings$inboundSchema: z.ZodType<
  SystemSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  api: z.lazy(() => SystemSettingsApi$inboundSchema),
  auth: AuthConfig$inboundSchema,
  backups: z.lazy(() => SystemSettingsBackups$inboundSchema),
  customLogo: z.lazy(() => SystemSettingsCustomLogo$inboundSchema),
  distributed: z.lazy(() => Distributed$inboundSchema),
  fips: z.boolean(),
  git: GitSettings$inboundSchema,
  jobLimits: JobSettings$inboundSchema,
  limits: Limits$inboundSchema,
  pii: z.lazy(() => SystemSettingsPii$inboundSchema),
  proxy: z.lazy(() => SystemSettingsProxy$inboundSchema),
  redisCacheLimits: RedisCacheLimits$inboundSchema,
  redisLimits: RedisLimits$inboundSchema,
  rollback: z.lazy(() => SystemSettingsRollback$inboundSchema),
  searchLimits: SearchSettings$inboundSchema,
  servicesLimits: ServicesLimits$inboundSchema,
  shutdown: z.lazy(() => SystemSettingsShutdown$inboundSchema),
  sni: z.lazy(() => SystemSettingsSni$inboundSchema),
  sockets: z.lazy(() => SystemSettingsSockets$inboundSchema).optional(),
  system: z.lazy(() => SystemSettingsSystem$inboundSchema),
  tls: z.lazy(() => SystemSettingsTls$inboundSchema),
  upgradeGroupSettings: UpgradeGroupSettings$inboundSchema,
  upgradeSettings: UpgradeSettings$inboundSchema,
  workers: z.lazy(() => SystemSettingsWorkers$inboundSchema),
});

/** @internal */
export type SystemSettings$Outbound = {
  api: SystemSettingsApi$Outbound;
  auth: AuthConfig$Outbound;
  backups: SystemSettingsBackups$Outbound;
  customLogo: SystemSettingsCustomLogo$Outbound;
  distributed: Distributed$Outbound;
  fips: boolean;
  git: GitSettings$Outbound;
  jobLimits: JobSettings$Outbound;
  limits: Limits$Outbound;
  pii: SystemSettingsPii$Outbound;
  proxy: SystemSettingsProxy$Outbound;
  redisCacheLimits: RedisCacheLimits$Outbound;
  redisLimits: RedisLimits$Outbound;
  rollback: SystemSettingsRollback$Outbound;
  searchLimits: SearchSettings$Outbound;
  servicesLimits: ServicesLimits$Outbound;
  shutdown: SystemSettingsShutdown$Outbound;
  sni: SystemSettingsSni$Outbound;
  sockets?: SystemSettingsSockets$Outbound | undefined;
  system: SystemSettingsSystem$Outbound;
  tls: SystemSettingsTls$Outbound;
  upgradeGroupSettings: UpgradeGroupSettings$Outbound;
  upgradeSettings: UpgradeSettings$Outbound;
  workers: SystemSettingsWorkers$Outbound;
};

/** @internal */
export const SystemSettings$outboundSchema: z.ZodType<
  SystemSettings$Outbound,
  z.ZodTypeDef,
  SystemSettings
> = z.object({
  api: z.lazy(() => SystemSettingsApi$outboundSchema),
  auth: AuthConfig$outboundSchema,
  backups: z.lazy(() => SystemSettingsBackups$outboundSchema),
  customLogo: z.lazy(() => SystemSettingsCustomLogo$outboundSchema),
  distributed: z.lazy(() => Distributed$outboundSchema),
  fips: z.boolean(),
  git: GitSettings$outboundSchema,
  jobLimits: JobSettings$outboundSchema,
  limits: Limits$outboundSchema,
  pii: z.lazy(() => SystemSettingsPii$outboundSchema),
  proxy: z.lazy(() => SystemSettingsProxy$outboundSchema),
  redisCacheLimits: RedisCacheLimits$outboundSchema,
  redisLimits: RedisLimits$outboundSchema,
  rollback: z.lazy(() => SystemSettingsRollback$outboundSchema),
  searchLimits: SearchSettings$outboundSchema,
  servicesLimits: ServicesLimits$outboundSchema,
  shutdown: z.lazy(() => SystemSettingsShutdown$outboundSchema),
  sni: z.lazy(() => SystemSettingsSni$outboundSchema),
  sockets: z.lazy(() => SystemSettingsSockets$outboundSchema).optional(),
  system: z.lazy(() => SystemSettingsSystem$outboundSchema),
  tls: z.lazy(() => SystemSettingsTls$outboundSchema),
  upgradeGroupSettings: UpgradeGroupSettings$outboundSchema,
  upgradeSettings: UpgradeSettings$outboundSchema,
  workers: z.lazy(() => SystemSettingsWorkers$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettings$ {
  /** @deprecated use `SystemSettings$inboundSchema` instead. */
  export const inboundSchema = SystemSettings$inboundSchema;
  /** @deprecated use `SystemSettings$outboundSchema` instead. */
  export const outboundSchema = SystemSettings$outboundSchema;
  /** @deprecated use `SystemSettings$Outbound` instead. */
  export type Outbound = SystemSettings$Outbound;
}

export function systemSettingsToJSON(systemSettings: SystemSettings): string {
  return JSON.stringify(SystemSettings$outboundSchema.parse(systemSettings));
}

export function systemSettingsFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettings' from JSON`,
  );
}
