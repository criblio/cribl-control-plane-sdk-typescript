/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type OutpostNodeInfo = {
  guid: string;
  host: string;
};

/** @internal */
export const OutpostNodeInfo$inboundSchema: z.ZodType<
  OutpostNodeInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  guid: z.string(),
  host: z.string(),
});

/** @internal */
export type OutpostNodeInfo$Outbound = {
  guid: string;
  host: string;
};

/** @internal */
export const OutpostNodeInfo$outboundSchema: z.ZodType<
  OutpostNodeInfo$Outbound,
  z.ZodTypeDef,
  OutpostNodeInfo
> = z.object({
  guid: z.string(),
  host: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutpostNodeInfo$ {
  /** @deprecated use `OutpostNodeInfo$inboundSchema` instead. */
  export const inboundSchema = OutpostNodeInfo$inboundSchema;
  /** @deprecated use `OutpostNodeInfo$outboundSchema` instead. */
  export const outboundSchema = OutpostNodeInfo$outboundSchema;
  /** @deprecated use `OutpostNodeInfo$Outbound` instead. */
  export type Outbound = OutpostNodeInfo$Outbound;
}

export function outpostNodeInfoToJSON(
  outpostNodeInfo: OutpostNodeInfo,
): string {
  return JSON.stringify(OutpostNodeInfo$outboundSchema.parse(outpostNodeInfo));
}

export function outpostNodeInfoFromJSON(
  jsonString: string,
): SafeParseResult<OutpostNodeInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutpostNodeInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutpostNodeInfo' from JSON`,
  );
}
