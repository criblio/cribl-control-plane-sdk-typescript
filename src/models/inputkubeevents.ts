/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputKubeEventsType = {
  KubeEvents: "kube_events",
} as const;
export type InputKubeEventsType = ClosedEnum<typeof InputKubeEventsType>;

export type InputKubeEventsConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputKubeEventsMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputKubeEventsMode = ClosedEnum<typeof InputKubeEventsMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputKubeEventsCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputKubeEventsCompression = ClosedEnum<
  typeof InputKubeEventsCompression
>;

export type InputKubeEventsPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputKubeEventsMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputKubeEventsCompression | undefined;
};

export type InputKubeEventsRule = {
  /**
   * JavaScript expression applied to Kubernetes objects. Return 'true' to include it.
   */
  filter: string;
  /**
   * Optional description of this rule's purpose
   */
  description?: string | undefined;
};

export type InputKubeEventsMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputKubeEvents = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputKubeEventsType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputKubeEventsConnection> | undefined;
  pq?: InputKubeEventsPq | undefined;
  /**
   * Filtering on event fields
   */
  rules?: Array<InputKubeEventsRule> | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputKubeEventsMetadatum> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputKubeEventsType$inboundSchema: z.ZodNativeEnum<
  typeof InputKubeEventsType
> = z.nativeEnum(InputKubeEventsType);

/** @internal */
export const InputKubeEventsType$outboundSchema: z.ZodNativeEnum<
  typeof InputKubeEventsType
> = InputKubeEventsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKubeEventsType$ {
  /** @deprecated use `InputKubeEventsType$inboundSchema` instead. */
  export const inboundSchema = InputKubeEventsType$inboundSchema;
  /** @deprecated use `InputKubeEventsType$outboundSchema` instead. */
  export const outboundSchema = InputKubeEventsType$outboundSchema;
}

/** @internal */
export const InputKubeEventsConnection$inboundSchema: z.ZodType<
  InputKubeEventsConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputKubeEventsConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputKubeEventsConnection$outboundSchema: z.ZodType<
  InputKubeEventsConnection$Outbound,
  z.ZodTypeDef,
  InputKubeEventsConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKubeEventsConnection$ {
  /** @deprecated use `InputKubeEventsConnection$inboundSchema` instead. */
  export const inboundSchema = InputKubeEventsConnection$inboundSchema;
  /** @deprecated use `InputKubeEventsConnection$outboundSchema` instead. */
  export const outboundSchema = InputKubeEventsConnection$outboundSchema;
  /** @deprecated use `InputKubeEventsConnection$Outbound` instead. */
  export type Outbound = InputKubeEventsConnection$Outbound;
}

export function inputKubeEventsConnectionToJSON(
  inputKubeEventsConnection: InputKubeEventsConnection,
): string {
  return JSON.stringify(
    InputKubeEventsConnection$outboundSchema.parse(inputKubeEventsConnection),
  );
}

export function inputKubeEventsConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputKubeEventsConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKubeEventsConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKubeEventsConnection' from JSON`,
  );
}

/** @internal */
export const InputKubeEventsMode$inboundSchema: z.ZodNativeEnum<
  typeof InputKubeEventsMode
> = z.nativeEnum(InputKubeEventsMode);

/** @internal */
export const InputKubeEventsMode$outboundSchema: z.ZodNativeEnum<
  typeof InputKubeEventsMode
> = InputKubeEventsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKubeEventsMode$ {
  /** @deprecated use `InputKubeEventsMode$inboundSchema` instead. */
  export const inboundSchema = InputKubeEventsMode$inboundSchema;
  /** @deprecated use `InputKubeEventsMode$outboundSchema` instead. */
  export const outboundSchema = InputKubeEventsMode$outboundSchema;
}

/** @internal */
export const InputKubeEventsCompression$inboundSchema: z.ZodNativeEnum<
  typeof InputKubeEventsCompression
> = z.nativeEnum(InputKubeEventsCompression);

/** @internal */
export const InputKubeEventsCompression$outboundSchema: z.ZodNativeEnum<
  typeof InputKubeEventsCompression
> = InputKubeEventsCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKubeEventsCompression$ {
  /** @deprecated use `InputKubeEventsCompression$inboundSchema` instead. */
  export const inboundSchema = InputKubeEventsCompression$inboundSchema;
  /** @deprecated use `InputKubeEventsCompression$outboundSchema` instead. */
  export const outboundSchema = InputKubeEventsCompression$outboundSchema;
}

/** @internal */
export const InputKubeEventsPq$inboundSchema: z.ZodType<
  InputKubeEventsPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputKubeEventsMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputKubeEventsCompression$inboundSchema.default("none"),
});

/** @internal */
export type InputKubeEventsPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
};

/** @internal */
export const InputKubeEventsPq$outboundSchema: z.ZodType<
  InputKubeEventsPq$Outbound,
  z.ZodTypeDef,
  InputKubeEventsPq
> = z.object({
  mode: InputKubeEventsMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputKubeEventsCompression$outboundSchema.default("none"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKubeEventsPq$ {
  /** @deprecated use `InputKubeEventsPq$inboundSchema` instead. */
  export const inboundSchema = InputKubeEventsPq$inboundSchema;
  /** @deprecated use `InputKubeEventsPq$outboundSchema` instead. */
  export const outboundSchema = InputKubeEventsPq$outboundSchema;
  /** @deprecated use `InputKubeEventsPq$Outbound` instead. */
  export type Outbound = InputKubeEventsPq$Outbound;
}

export function inputKubeEventsPqToJSON(
  inputKubeEventsPq: InputKubeEventsPq,
): string {
  return JSON.stringify(
    InputKubeEventsPq$outboundSchema.parse(inputKubeEventsPq),
  );
}

export function inputKubeEventsPqFromJSON(
  jsonString: string,
): SafeParseResult<InputKubeEventsPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKubeEventsPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKubeEventsPq' from JSON`,
  );
}

/** @internal */
export const InputKubeEventsRule$inboundSchema: z.ZodType<
  InputKubeEventsRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type InputKubeEventsRule$Outbound = {
  filter: string;
  description?: string | undefined;
};

/** @internal */
export const InputKubeEventsRule$outboundSchema: z.ZodType<
  InputKubeEventsRule$Outbound,
  z.ZodTypeDef,
  InputKubeEventsRule
> = z.object({
  filter: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKubeEventsRule$ {
  /** @deprecated use `InputKubeEventsRule$inboundSchema` instead. */
  export const inboundSchema = InputKubeEventsRule$inboundSchema;
  /** @deprecated use `InputKubeEventsRule$outboundSchema` instead. */
  export const outboundSchema = InputKubeEventsRule$outboundSchema;
  /** @deprecated use `InputKubeEventsRule$Outbound` instead. */
  export type Outbound = InputKubeEventsRule$Outbound;
}

export function inputKubeEventsRuleToJSON(
  inputKubeEventsRule: InputKubeEventsRule,
): string {
  return JSON.stringify(
    InputKubeEventsRule$outboundSchema.parse(inputKubeEventsRule),
  );
}

export function inputKubeEventsRuleFromJSON(
  jsonString: string,
): SafeParseResult<InputKubeEventsRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKubeEventsRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKubeEventsRule' from JSON`,
  );
}

/** @internal */
export const InputKubeEventsMetadatum$inboundSchema: z.ZodType<
  InputKubeEventsMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputKubeEventsMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputKubeEventsMetadatum$outboundSchema: z.ZodType<
  InputKubeEventsMetadatum$Outbound,
  z.ZodTypeDef,
  InputKubeEventsMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKubeEventsMetadatum$ {
  /** @deprecated use `InputKubeEventsMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputKubeEventsMetadatum$inboundSchema;
  /** @deprecated use `InputKubeEventsMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputKubeEventsMetadatum$outboundSchema;
  /** @deprecated use `InputKubeEventsMetadatum$Outbound` instead. */
  export type Outbound = InputKubeEventsMetadatum$Outbound;
}

export function inputKubeEventsMetadatumToJSON(
  inputKubeEventsMetadatum: InputKubeEventsMetadatum,
): string {
  return JSON.stringify(
    InputKubeEventsMetadatum$outboundSchema.parse(inputKubeEventsMetadatum),
  );
}

export function inputKubeEventsMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputKubeEventsMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKubeEventsMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKubeEventsMetadatum' from JSON`,
  );
}

/** @internal */
export const InputKubeEvents$inboundSchema: z.ZodType<
  InputKubeEvents,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputKubeEventsType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputKubeEventsConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputKubeEventsPq$inboundSchema).optional(),
  rules: z.array(z.lazy(() => InputKubeEventsRule$inboundSchema)).optional(),
  metadata: z.array(z.lazy(() => InputKubeEventsMetadatum$inboundSchema))
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputKubeEvents$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputKubeEventsConnection$Outbound> | undefined;
  pq?: InputKubeEventsPq$Outbound | undefined;
  rules?: Array<InputKubeEventsRule$Outbound> | undefined;
  metadata?: Array<InputKubeEventsMetadatum$Outbound> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputKubeEvents$outboundSchema: z.ZodType<
  InputKubeEvents$Outbound,
  z.ZodTypeDef,
  InputKubeEvents
> = z.object({
  id: z.string().optional(),
  type: InputKubeEventsType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputKubeEventsConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputKubeEventsPq$outboundSchema).optional(),
  rules: z.array(z.lazy(() => InputKubeEventsRule$outboundSchema)).optional(),
  metadata: z.array(z.lazy(() => InputKubeEventsMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKubeEvents$ {
  /** @deprecated use `InputKubeEvents$inboundSchema` instead. */
  export const inboundSchema = InputKubeEvents$inboundSchema;
  /** @deprecated use `InputKubeEvents$outboundSchema` instead. */
  export const outboundSchema = InputKubeEvents$outboundSchema;
  /** @deprecated use `InputKubeEvents$Outbound` instead. */
  export type Outbound = InputKubeEvents$Outbound;
}

export function inputKubeEventsToJSON(
  inputKubeEvents: InputKubeEvents,
): string {
  return JSON.stringify(InputKubeEvents$outboundSchema.parse(inputKubeEvents));
}

export function inputKubeEventsFromJSON(
  jsonString: string,
): SafeParseResult<InputKubeEvents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKubeEvents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKubeEvents' from JSON`,
  );
}
