/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const RunnableJobExecutorJobType = {
  Collection: "collection",
  Executor: "executor",
  ScheduledSearch: "scheduledSearch",
} as const;
export type RunnableJobExecutorJobType = OpenEnum<
  typeof RunnableJobExecutorJobType
>;

export const RunnableJobExecutorType = {
  Collection: "collection",
} as const;
export type RunnableJobExecutorType = ClosedEnum<
  typeof RunnableJobExecutorType
>;

/**
 * Level at which to set task logging
 */
export const RunnableJobExecutorScheduleLogLevel = {
  Error: "error",
  Warn: "warn",
  Info: "info",
  Debug: "debug",
  Silly: "silly",
} as const;
/**
 * Level at which to set task logging
 */
export type RunnableJobExecutorScheduleLogLevel = ClosedEnum<
  typeof RunnableJobExecutorScheduleLogLevel
>;

export type RunnableJobExecutorTimeWarning = {};

export type RunnableJobExecutorRunSettings = {
  type?: RunnableJobExecutorType | undefined;
  /**
   * Reschedule tasks that failed with non-fatal errors
   */
  rescheduleDroppedTasks?: boolean | undefined;
  /**
   * Maximum number of times a task can be rescheduled
   */
  maxTaskReschedule?: number | undefined;
  /**
   * Level at which to set task logging
   */
  logLevel?: RunnableJobExecutorScheduleLogLevel | undefined;
  /**
   * Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
   */
  jobTimeout?: string | undefined;
  /**
   * Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
   */
  mode?: string | undefined;
  timeRangeType?: string | undefined;
  /**
   * Earliest time to collect data for the selected timezone
   */
  earliest?: number | undefined;
  /**
   * Latest time to collect data for the selected timezone
   */
  latest?: number | undefined;
  timestampTimezone?: any | undefined;
  timeWarning?: RunnableJobExecutorTimeWarning | undefined;
  /**
   * A filter for tokens in the provided collect path and/or the events being collected
   */
  expression?: string | undefined;
  /**
   * Limits the bundle size for small tasks. For example,
   *
   * @remarks
   *
   *         if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
   */
  minTaskSize?: string | undefined;
  /**
   * Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB,
   *
   * @remarks
   *
   *         you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
   */
  maxTaskSize?: string | undefined;
};

/**
 * Configuration for a scheduled job
 */
export type RunnableJobExecutorSchedule = {
  /**
   * Enable to configure scheduling for this Collector
   */
  enabled?: boolean | undefined;
  /**
   * Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits
   */
  skippable?: boolean | undefined;
  /**
   * If Stream Leader (or single instance) restarts, run all missed jobs according to their original schedules
   */
  resumeMissed?: boolean | undefined;
  /**
   * A cron schedule on which to run this job
   */
  cronSchedule?: string | undefined;
  /**
   * The maximum number of instances of this scheduled job that may be running at any time
   */
  maxConcurrentRuns?: number | undefined;
  run?: RunnableJobExecutorRunSettings | undefined;
};

export type ExecutorSpecificSettings = {};

export type Executor = {
  /**
   * The type of executor to run
   */
  type: string;
  /**
   * Determines whether or not to write task results to disk
   */
  storeTaskResults?: boolean | undefined;
  conf?: ExecutorSpecificSettings | undefined;
};

/**
 * Level at which to set task logging
 */
export const RunnableJobExecutorLogLevel = {
  Error: "error",
  Warn: "warn",
  Info: "info",
  Debug: "debug",
  Silly: "silly",
} as const;
/**
 * Level at which to set task logging
 */
export type RunnableJobExecutorLogLevel = OpenEnum<
  typeof RunnableJobExecutorLogLevel
>;

export type RunnableJobExecutorRun = {
  /**
   * Reschedule tasks that failed with non-fatal errors
   */
  rescheduleDroppedTasks?: boolean | undefined;
  /**
   * Maximum number of times a task can be rescheduled
   */
  maxTaskReschedule?: number | undefined;
  /**
   * Level at which to set task logging
   */
  logLevel?: RunnableJobExecutorLogLevel | undefined;
  /**
   * Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
   */
  jobTimeout?: string | undefined;
};

export type RunnableJobExecutor = {
  /**
   * Unique ID for this Job
   */
  id?: string | undefined;
  description?: string | undefined;
  type?: RunnableJobExecutorJobType | undefined;
  /**
   * Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
   */
  ttl?: string | undefined;
  /**
   * When enabled, this job's artifacts are not counted toward the Worker Group's finished job artifacts limit. Artifacts will be removed only after the Collector's configured time to live.
   */
  ignoreGroupJobsLimit?: boolean | undefined;
  /**
   * List of fields to remove from Discover results. Wildcards (for example, aws*) are allowed. This is useful when discovery returns sensitive fields that should not be exposed in the Jobs user interface.
   */
  removeFields?: Array<string> | undefined;
  /**
   * Resume the ad hoc job if a failure condition causes Stream to restart during job execution
   */
  resumeOnBoot?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Configuration for a scheduled job
   */
  schedule?: RunnableJobExecutorSchedule | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  executor: Executor;
  run: RunnableJobExecutorRun;
};

/** @internal */
export const RunnableJobExecutorJobType$inboundSchema: z.ZodType<
  RunnableJobExecutorJobType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(RunnableJobExecutorJobType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const RunnableJobExecutorJobType$outboundSchema: z.ZodType<
  RunnableJobExecutorJobType,
  z.ZodTypeDef,
  RunnableJobExecutorJobType
> = z.union([
  z.nativeEnum(RunnableJobExecutorJobType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobExecutorJobType$ {
  /** @deprecated use `RunnableJobExecutorJobType$inboundSchema` instead. */
  export const inboundSchema = RunnableJobExecutorJobType$inboundSchema;
  /** @deprecated use `RunnableJobExecutorJobType$outboundSchema` instead. */
  export const outboundSchema = RunnableJobExecutorJobType$outboundSchema;
}

/** @internal */
export const RunnableJobExecutorType$inboundSchema: z.ZodNativeEnum<
  typeof RunnableJobExecutorType
> = z.nativeEnum(RunnableJobExecutorType);

/** @internal */
export const RunnableJobExecutorType$outboundSchema: z.ZodNativeEnum<
  typeof RunnableJobExecutorType
> = RunnableJobExecutorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobExecutorType$ {
  /** @deprecated use `RunnableJobExecutorType$inboundSchema` instead. */
  export const inboundSchema = RunnableJobExecutorType$inboundSchema;
  /** @deprecated use `RunnableJobExecutorType$outboundSchema` instead. */
  export const outboundSchema = RunnableJobExecutorType$outboundSchema;
}

/** @internal */
export const RunnableJobExecutorScheduleLogLevel$inboundSchema: z.ZodNativeEnum<
  typeof RunnableJobExecutorScheduleLogLevel
> = z.nativeEnum(RunnableJobExecutorScheduleLogLevel);

/** @internal */
export const RunnableJobExecutorScheduleLogLevel$outboundSchema:
  z.ZodNativeEnum<typeof RunnableJobExecutorScheduleLogLevel> =
    RunnableJobExecutorScheduleLogLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobExecutorScheduleLogLevel$ {
  /** @deprecated use `RunnableJobExecutorScheduleLogLevel$inboundSchema` instead. */
  export const inboundSchema =
    RunnableJobExecutorScheduleLogLevel$inboundSchema;
  /** @deprecated use `RunnableJobExecutorScheduleLogLevel$outboundSchema` instead. */
  export const outboundSchema =
    RunnableJobExecutorScheduleLogLevel$outboundSchema;
}

/** @internal */
export const RunnableJobExecutorTimeWarning$inboundSchema: z.ZodType<
  RunnableJobExecutorTimeWarning,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RunnableJobExecutorTimeWarning$Outbound = {};

/** @internal */
export const RunnableJobExecutorTimeWarning$outboundSchema: z.ZodType<
  RunnableJobExecutorTimeWarning$Outbound,
  z.ZodTypeDef,
  RunnableJobExecutorTimeWarning
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobExecutorTimeWarning$ {
  /** @deprecated use `RunnableJobExecutorTimeWarning$inboundSchema` instead. */
  export const inboundSchema = RunnableJobExecutorTimeWarning$inboundSchema;
  /** @deprecated use `RunnableJobExecutorTimeWarning$outboundSchema` instead. */
  export const outboundSchema = RunnableJobExecutorTimeWarning$outboundSchema;
  /** @deprecated use `RunnableJobExecutorTimeWarning$Outbound` instead. */
  export type Outbound = RunnableJobExecutorTimeWarning$Outbound;
}

export function runnableJobExecutorTimeWarningToJSON(
  runnableJobExecutorTimeWarning: RunnableJobExecutorTimeWarning,
): string {
  return JSON.stringify(
    RunnableJobExecutorTimeWarning$outboundSchema.parse(
      runnableJobExecutorTimeWarning,
    ),
  );
}

export function runnableJobExecutorTimeWarningFromJSON(
  jsonString: string,
): SafeParseResult<RunnableJobExecutorTimeWarning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunnableJobExecutorTimeWarning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunnableJobExecutorTimeWarning' from JSON`,
  );
}

/** @internal */
export const RunnableJobExecutorRunSettings$inboundSchema: z.ZodType<
  RunnableJobExecutorRunSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RunnableJobExecutorType$inboundSchema.optional(),
  rescheduleDroppedTasks: z.boolean().default(true),
  maxTaskReschedule: z.number().default(1),
  logLevel: RunnableJobExecutorScheduleLogLevel$inboundSchema.default("info"),
  jobTimeout: z.string().default("0"),
  mode: z.string().default("list"),
  timeRangeType: z.string().default("relative"),
  earliest: z.number().optional(),
  latest: z.number().optional(),
  timestampTimezone: z.any().optional(),
  timeWarning: z.lazy(() => RunnableJobExecutorTimeWarning$inboundSchema)
    .optional(),
  expression: z.string().default("true"),
  minTaskSize: z.string().default("1MB"),
  maxTaskSize: z.string().default("10MB"),
});

/** @internal */
export type RunnableJobExecutorRunSettings$Outbound = {
  type?: string | undefined;
  rescheduleDroppedTasks: boolean;
  maxTaskReschedule: number;
  logLevel: string;
  jobTimeout: string;
  mode: string;
  timeRangeType: string;
  earliest?: number | undefined;
  latest?: number | undefined;
  timestampTimezone?: any | undefined;
  timeWarning?: RunnableJobExecutorTimeWarning$Outbound | undefined;
  expression: string;
  minTaskSize: string;
  maxTaskSize: string;
};

/** @internal */
export const RunnableJobExecutorRunSettings$outboundSchema: z.ZodType<
  RunnableJobExecutorRunSettings$Outbound,
  z.ZodTypeDef,
  RunnableJobExecutorRunSettings
> = z.object({
  type: RunnableJobExecutorType$outboundSchema.optional(),
  rescheduleDroppedTasks: z.boolean().default(true),
  maxTaskReschedule: z.number().default(1),
  logLevel: RunnableJobExecutorScheduleLogLevel$outboundSchema.default("info"),
  jobTimeout: z.string().default("0"),
  mode: z.string().default("list"),
  timeRangeType: z.string().default("relative"),
  earliest: z.number().optional(),
  latest: z.number().optional(),
  timestampTimezone: z.any().optional(),
  timeWarning: z.lazy(() => RunnableJobExecutorTimeWarning$outboundSchema)
    .optional(),
  expression: z.string().default("true"),
  minTaskSize: z.string().default("1MB"),
  maxTaskSize: z.string().default("10MB"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobExecutorRunSettings$ {
  /** @deprecated use `RunnableJobExecutorRunSettings$inboundSchema` instead. */
  export const inboundSchema = RunnableJobExecutorRunSettings$inboundSchema;
  /** @deprecated use `RunnableJobExecutorRunSettings$outboundSchema` instead. */
  export const outboundSchema = RunnableJobExecutorRunSettings$outboundSchema;
  /** @deprecated use `RunnableJobExecutorRunSettings$Outbound` instead. */
  export type Outbound = RunnableJobExecutorRunSettings$Outbound;
}

export function runnableJobExecutorRunSettingsToJSON(
  runnableJobExecutorRunSettings: RunnableJobExecutorRunSettings,
): string {
  return JSON.stringify(
    RunnableJobExecutorRunSettings$outboundSchema.parse(
      runnableJobExecutorRunSettings,
    ),
  );
}

export function runnableJobExecutorRunSettingsFromJSON(
  jsonString: string,
): SafeParseResult<RunnableJobExecutorRunSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunnableJobExecutorRunSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunnableJobExecutorRunSettings' from JSON`,
  );
}

/** @internal */
export const RunnableJobExecutorSchedule$inboundSchema: z.ZodType<
  RunnableJobExecutorSchedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  skippable: z.boolean().default(true),
  resumeMissed: z.boolean().default(false),
  cronSchedule: z.string().default("*/5 * * * *"),
  maxConcurrentRuns: z.number().default(1),
  run: z.lazy(() => RunnableJobExecutorRunSettings$inboundSchema).optional(),
});

/** @internal */
export type RunnableJobExecutorSchedule$Outbound = {
  enabled?: boolean | undefined;
  skippable: boolean;
  resumeMissed: boolean;
  cronSchedule: string;
  maxConcurrentRuns: number;
  run?: RunnableJobExecutorRunSettings$Outbound | undefined;
};

/** @internal */
export const RunnableJobExecutorSchedule$outboundSchema: z.ZodType<
  RunnableJobExecutorSchedule$Outbound,
  z.ZodTypeDef,
  RunnableJobExecutorSchedule
> = z.object({
  enabled: z.boolean().optional(),
  skippable: z.boolean().default(true),
  resumeMissed: z.boolean().default(false),
  cronSchedule: z.string().default("*/5 * * * *"),
  maxConcurrentRuns: z.number().default(1),
  run: z.lazy(() => RunnableJobExecutorRunSettings$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobExecutorSchedule$ {
  /** @deprecated use `RunnableJobExecutorSchedule$inboundSchema` instead. */
  export const inboundSchema = RunnableJobExecutorSchedule$inboundSchema;
  /** @deprecated use `RunnableJobExecutorSchedule$outboundSchema` instead. */
  export const outboundSchema = RunnableJobExecutorSchedule$outboundSchema;
  /** @deprecated use `RunnableJobExecutorSchedule$Outbound` instead. */
  export type Outbound = RunnableJobExecutorSchedule$Outbound;
}

export function runnableJobExecutorScheduleToJSON(
  runnableJobExecutorSchedule: RunnableJobExecutorSchedule,
): string {
  return JSON.stringify(
    RunnableJobExecutorSchedule$outboundSchema.parse(
      runnableJobExecutorSchedule,
    ),
  );
}

export function runnableJobExecutorScheduleFromJSON(
  jsonString: string,
): SafeParseResult<RunnableJobExecutorSchedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunnableJobExecutorSchedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunnableJobExecutorSchedule' from JSON`,
  );
}

/** @internal */
export const ExecutorSpecificSettings$inboundSchema: z.ZodType<
  ExecutorSpecificSettings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExecutorSpecificSettings$Outbound = {};

/** @internal */
export const ExecutorSpecificSettings$outboundSchema: z.ZodType<
  ExecutorSpecificSettings$Outbound,
  z.ZodTypeDef,
  ExecutorSpecificSettings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecutorSpecificSettings$ {
  /** @deprecated use `ExecutorSpecificSettings$inboundSchema` instead. */
  export const inboundSchema = ExecutorSpecificSettings$inboundSchema;
  /** @deprecated use `ExecutorSpecificSettings$outboundSchema` instead. */
  export const outboundSchema = ExecutorSpecificSettings$outboundSchema;
  /** @deprecated use `ExecutorSpecificSettings$Outbound` instead. */
  export type Outbound = ExecutorSpecificSettings$Outbound;
}

export function executorSpecificSettingsToJSON(
  executorSpecificSettings: ExecutorSpecificSettings,
): string {
  return JSON.stringify(
    ExecutorSpecificSettings$outboundSchema.parse(executorSpecificSettings),
  );
}

export function executorSpecificSettingsFromJSON(
  jsonString: string,
): SafeParseResult<ExecutorSpecificSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExecutorSpecificSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecutorSpecificSettings' from JSON`,
  );
}

/** @internal */
export const Executor$inboundSchema: z.ZodType<
  Executor,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  storeTaskResults: z.boolean().default(true),
  conf: z.lazy(() => ExecutorSpecificSettings$inboundSchema).optional(),
});

/** @internal */
export type Executor$Outbound = {
  type: string;
  storeTaskResults: boolean;
  conf?: ExecutorSpecificSettings$Outbound | undefined;
};

/** @internal */
export const Executor$outboundSchema: z.ZodType<
  Executor$Outbound,
  z.ZodTypeDef,
  Executor
> = z.object({
  type: z.string(),
  storeTaskResults: z.boolean().default(true),
  conf: z.lazy(() => ExecutorSpecificSettings$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Executor$ {
  /** @deprecated use `Executor$inboundSchema` instead. */
  export const inboundSchema = Executor$inboundSchema;
  /** @deprecated use `Executor$outboundSchema` instead. */
  export const outboundSchema = Executor$outboundSchema;
  /** @deprecated use `Executor$Outbound` instead. */
  export type Outbound = Executor$Outbound;
}

export function executorToJSON(executor: Executor): string {
  return JSON.stringify(Executor$outboundSchema.parse(executor));
}

export function executorFromJSON(
  jsonString: string,
): SafeParseResult<Executor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Executor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Executor' from JSON`,
  );
}

/** @internal */
export const RunnableJobExecutorLogLevel$inboundSchema: z.ZodType<
  RunnableJobExecutorLogLevel,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(RunnableJobExecutorLogLevel),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const RunnableJobExecutorLogLevel$outboundSchema: z.ZodType<
  RunnableJobExecutorLogLevel,
  z.ZodTypeDef,
  RunnableJobExecutorLogLevel
> = z.union([
  z.nativeEnum(RunnableJobExecutorLogLevel),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobExecutorLogLevel$ {
  /** @deprecated use `RunnableJobExecutorLogLevel$inboundSchema` instead. */
  export const inboundSchema = RunnableJobExecutorLogLevel$inboundSchema;
  /** @deprecated use `RunnableJobExecutorLogLevel$outboundSchema` instead. */
  export const outboundSchema = RunnableJobExecutorLogLevel$outboundSchema;
}

/** @internal */
export const RunnableJobExecutorRun$inboundSchema: z.ZodType<
  RunnableJobExecutorRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  rescheduleDroppedTasks: z.boolean().default(true),
  maxTaskReschedule: z.number().default(1),
  logLevel: RunnableJobExecutorLogLevel$inboundSchema.default("info"),
  jobTimeout: z.string().default("0"),
});

/** @internal */
export type RunnableJobExecutorRun$Outbound = {
  rescheduleDroppedTasks: boolean;
  maxTaskReschedule: number;
  logLevel: string;
  jobTimeout: string;
};

/** @internal */
export const RunnableJobExecutorRun$outboundSchema: z.ZodType<
  RunnableJobExecutorRun$Outbound,
  z.ZodTypeDef,
  RunnableJobExecutorRun
> = z.object({
  rescheduleDroppedTasks: z.boolean().default(true),
  maxTaskReschedule: z.number().default(1),
  logLevel: RunnableJobExecutorLogLevel$outboundSchema.default("info"),
  jobTimeout: z.string().default("0"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobExecutorRun$ {
  /** @deprecated use `RunnableJobExecutorRun$inboundSchema` instead. */
  export const inboundSchema = RunnableJobExecutorRun$inboundSchema;
  /** @deprecated use `RunnableJobExecutorRun$outboundSchema` instead. */
  export const outboundSchema = RunnableJobExecutorRun$outboundSchema;
  /** @deprecated use `RunnableJobExecutorRun$Outbound` instead. */
  export type Outbound = RunnableJobExecutorRun$Outbound;
}

export function runnableJobExecutorRunToJSON(
  runnableJobExecutorRun: RunnableJobExecutorRun,
): string {
  return JSON.stringify(
    RunnableJobExecutorRun$outboundSchema.parse(runnableJobExecutorRun),
  );
}

export function runnableJobExecutorRunFromJSON(
  jsonString: string,
): SafeParseResult<RunnableJobExecutorRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunnableJobExecutorRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunnableJobExecutorRun' from JSON`,
  );
}

/** @internal */
export const RunnableJobExecutor$inboundSchema: z.ZodType<
  RunnableJobExecutor,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  description: z.string().optional(),
  type: RunnableJobExecutorJobType$inboundSchema.optional(),
  ttl: z.string().default("4h"),
  ignoreGroupJobsLimit: z.boolean().default(false),
  removeFields: z.array(z.string()).optional(),
  resumeOnBoot: z.boolean().default(false),
  environment: z.string().optional(),
  schedule: z.lazy(() => RunnableJobExecutorSchedule$inboundSchema).optional(),
  streamtags: z.array(z.string()).optional(),
  executor: z.lazy(() => Executor$inboundSchema),
  run: z.lazy(() => RunnableJobExecutorRun$inboundSchema),
});

/** @internal */
export type RunnableJobExecutor$Outbound = {
  id?: string | undefined;
  description?: string | undefined;
  type?: string | undefined;
  ttl: string;
  ignoreGroupJobsLimit: boolean;
  removeFields?: Array<string> | undefined;
  resumeOnBoot: boolean;
  environment?: string | undefined;
  schedule?: RunnableJobExecutorSchedule$Outbound | undefined;
  streamtags?: Array<string> | undefined;
  executor: Executor$Outbound;
  run: RunnableJobExecutorRun$Outbound;
};

/** @internal */
export const RunnableJobExecutor$outboundSchema: z.ZodType<
  RunnableJobExecutor$Outbound,
  z.ZodTypeDef,
  RunnableJobExecutor
> = z.object({
  id: z.string().optional(),
  description: z.string().optional(),
  type: RunnableJobExecutorJobType$outboundSchema.optional(),
  ttl: z.string().default("4h"),
  ignoreGroupJobsLimit: z.boolean().default(false),
  removeFields: z.array(z.string()).optional(),
  resumeOnBoot: z.boolean().default(false),
  environment: z.string().optional(),
  schedule: z.lazy(() => RunnableJobExecutorSchedule$outboundSchema).optional(),
  streamtags: z.array(z.string()).optional(),
  executor: z.lazy(() => Executor$outboundSchema),
  run: z.lazy(() => RunnableJobExecutorRun$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunnableJobExecutor$ {
  /** @deprecated use `RunnableJobExecutor$inboundSchema` instead. */
  export const inboundSchema = RunnableJobExecutor$inboundSchema;
  /** @deprecated use `RunnableJobExecutor$outboundSchema` instead. */
  export const outboundSchema = RunnableJobExecutor$outboundSchema;
  /** @deprecated use `RunnableJobExecutor$Outbound` instead. */
  export type Outbound = RunnableJobExecutor$Outbound;
}

export function runnableJobExecutorToJSON(
  runnableJobExecutor: RunnableJobExecutor,
): string {
  return JSON.stringify(
    RunnableJobExecutor$outboundSchema.parse(runnableJobExecutor),
  );
}

export function runnableJobExecutorFromJSON(
  jsonString: string,
): SafeParseResult<RunnableJobExecutor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunnableJobExecutor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunnableJobExecutor' from JSON`,
  );
}
