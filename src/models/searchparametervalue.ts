/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SearchParameterValue = string | number | boolean;

/** @internal */
export const SearchParameterValue$inboundSchema: z.ZodType<
  SearchParameterValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchParameterValue$Outbound = string | number | boolean;

/** @internal */
export const SearchParameterValue$outboundSchema: z.ZodType<
  SearchParameterValue$Outbound,
  z.ZodTypeDef,
  SearchParameterValue
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchParameterValue$ {
  /** @deprecated use `SearchParameterValue$inboundSchema` instead. */
  export const inboundSchema = SearchParameterValue$inboundSchema;
  /** @deprecated use `SearchParameterValue$outboundSchema` instead. */
  export const outboundSchema = SearchParameterValue$outboundSchema;
  /** @deprecated use `SearchParameterValue$Outbound` instead. */
  export type Outbound = SearchParameterValue$Outbound;
}

export function searchParameterValueToJSON(
  searchParameterValue: SearchParameterValue,
): string {
  return JSON.stringify(
    SearchParameterValue$outboundSchema.parse(searchParameterValue),
  );
}

export function searchParameterValueFromJSON(
  jsonString: string,
): SafeParseResult<SearchParameterValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchParameterValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchParameterValue' from JSON`,
  );
}
