/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputOffice365MgmtType = {
  Office365Mgmt: "office365_mgmt",
} as const;
export type InputOffice365MgmtType = ClosedEnum<typeof InputOffice365MgmtType>;

export type InputOffice365MgmtConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputOffice365MgmtMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputOffice365MgmtMode = OpenEnum<typeof InputOffice365MgmtMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputOffice365MgmtCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputOffice365MgmtCompression = OpenEnum<
  typeof InputOffice365MgmtCompression
>;

export type InputOffice365MgmtPqControls = {};

export type InputOffice365MgmtPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputOffice365MgmtMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputOffice365MgmtCompression | undefined;
  pqControls?: InputOffice365MgmtPqControls | undefined;
};

/**
 * Office 365 subscription plan for your organization, typically Office 365 Enterprise
 */
export const InputOffice365MgmtSubscriptionPlan = {
  EnterpriseGcc: "enterprise_gcc",
  Gcc: "gcc",
  GccHigh: "gcc_high",
  Dod: "dod",
} as const;
/**
 * Office 365 subscription plan for your organization, typically Office 365 Enterprise
 */
export type InputOffice365MgmtSubscriptionPlan = OpenEnum<
  typeof InputOffice365MgmtSubscriptionPlan
>;

export type InputOffice365MgmtMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

/**
 * Collector runtime Log Level
 */
export const InputOffice365MgmtLogLevel = {
  Error: "error",
  Warn: "warn",
  Info: "info",
  Debug: "debug",
} as const;
/**
 * Collector runtime Log Level
 */
export type InputOffice365MgmtLogLevel = OpenEnum<
  typeof InputOffice365MgmtLogLevel
>;

export type InputOffice365MgmtContentConfig = {
  /**
   * Office 365 Management Activity API Content Type
   */
  contentType?: string | undefined;
  /**
   * If interval type is minutes the value entered must evenly divisible by 60 or save will fail
   */
  description?: string | undefined;
  interval?: number | undefined;
  /**
   * Collector runtime Log Level
   */
  logLevel?: InputOffice365MgmtLogLevel | undefined;
  enabled?: boolean | undefined;
};

/**
 * The algorithm to use when performing HTTP retries
 */
export const InputOffice365MgmtRetryType = {
  None: "none",
  Backoff: "backoff",
  Static: "static",
} as const;
/**
 * The algorithm to use when performing HTTP retries
 */
export type InputOffice365MgmtRetryType = OpenEnum<
  typeof InputOffice365MgmtRetryType
>;

export type InputOffice365MgmtRetryRules = {
  /**
   * The algorithm to use when performing HTTP retries
   */
  type?: InputOffice365MgmtRetryType | undefined;
  /**
   * Time interval between failed request and first retry (kickoff). Maximum allowed value is 20,000 ms (1/3 minute).
   */
  interval?: number | undefined;
  /**
   * The maximum number of times to retry a failed HTTP request
   */
  limit?: number | undefined;
  /**
   * Base for exponential backoff, e.g., base 2 means that retries will occur after 2, then 4, then 8 seconds, and so on
   */
  multiplier?: number | undefined;
  /**
   * List of http codes that trigger a retry. Leave empty to use the default list of 429, 500, and 503.
   */
  codes?: Array<number> | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) or a timestamp after which to retry the request. The delay is limited to 20 seconds, even if the Retry-After header specifies a longer delay. When disabled, all Retry-After headers are ignored.
   */
  enableHeader?: boolean | undefined;
  /**
   * Make a single retry attempt when a connection timeout (ETIMEDOUT) error occurs
   */
  retryConnectTimeout?: boolean | undefined;
  /**
   * Retry request when a connection reset (ECONNRESET) error occurs
   */
  retryConnectReset?: boolean | undefined;
};

/**
 * Enter client secret directly, or select a stored secret
 */
export const InputOffice365MgmtAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Enter client secret directly, or select a stored secret
 */
export type InputOffice365MgmtAuthenticationMethod = OpenEnum<
  typeof InputOffice365MgmtAuthenticationMethod
>;

export type InputOffice365Mgmt = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputOffice365MgmtType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputOffice365MgmtConnection> | undefined;
  pq?: InputOffice365MgmtPq | undefined;
  /**
   * Office 365 subscription plan for your organization, typically Office 365 Enterprise
   */
  planType?: InputOffice365MgmtSubscriptionPlan | undefined;
  /**
   * Office 365 Azure Tenant ID
   */
  tenantId: string;
  /**
   * Office 365 Azure Application ID
   */
  appId: string;
  /**
   * HTTP request inactivity timeout, use 0 to disable
   */
  timeout?: number | undefined;
  /**
   * How often workers should check in with the scheduler to keep job subscription alive
   */
  keepAliveTime?: number | undefined;
  /**
   * Maximum time the job is allowed to run (e.g., 30, 45s or 15m). Units are seconds, if not specified. Enter 0 for unlimited time.
   */
  jobTimeout?: string | undefined;
  /**
   * The number of Keep Alive Time periods before an inactive worker will have its job subscription revoked.
   */
  maxMissedKeepAlives?: number | undefined;
  /**
   * Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
   */
  ttl?: string | undefined;
  /**
   * When enabled, this job's artifacts are not counted toward the Worker Group's finished job artifacts limit. Artifacts will be removed only after the Collector's configured time to live.
   */
  ignoreGroupJobsLimit?: boolean | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputOffice365MgmtMetadatum> | undefined;
  /**
   * Optional Publisher Identifier to use in API requests, defaults to tenant id if not defined. For more information see [here](https://docs.microsoft.com/en-us/office/office-365-management-api/office-365-management-activity-api-reference#start-a-subscription)
   */
  publisherIdentifier?: string | undefined;
  /**
   * Enable Office 365 Management Activity API content types and polling intervals. Polling intervals are used to set up search date range and cron schedule, e.g.: * /${interval} * * * *. Because of this, intervals entered must be evenly divisible by 60 to give a predictable schedule.
   */
  contentConfig?: Array<InputOffice365MgmtContentConfig> | undefined;
  /**
   * Use this setting to account for ingestion lag. This is necessary because there can be a lag of 60 - 90 minutes (or longer) before Office 365 events are available for retrieval.
   */
  ingestionLag?: number | undefined;
  retryRules?: InputOffice365MgmtRetryRules | undefined;
  /**
   * Enter client secret directly, or select a stored secret
   */
  authType?: InputOffice365MgmtAuthenticationMethod | undefined;
  description?: string | undefined;
  /**
   * Office 365 Azure client secret
   */
  clientSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
};

/** @internal */
export const InputOffice365MgmtType$inboundSchema: z.ZodNativeEnum<
  typeof InputOffice365MgmtType
> = z.nativeEnum(InputOffice365MgmtType);

/** @internal */
export const InputOffice365MgmtType$outboundSchema: z.ZodNativeEnum<
  typeof InputOffice365MgmtType
> = InputOffice365MgmtType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtType$ {
  /** @deprecated use `InputOffice365MgmtType$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtType$inboundSchema;
  /** @deprecated use `InputOffice365MgmtType$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtType$outboundSchema;
}

/** @internal */
export const InputOffice365MgmtConnection$inboundSchema: z.ZodType<
  InputOffice365MgmtConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputOffice365MgmtConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputOffice365MgmtConnection$outboundSchema: z.ZodType<
  InputOffice365MgmtConnection$Outbound,
  z.ZodTypeDef,
  InputOffice365MgmtConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtConnection$ {
  /** @deprecated use `InputOffice365MgmtConnection$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtConnection$inboundSchema;
  /** @deprecated use `InputOffice365MgmtConnection$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtConnection$outboundSchema;
  /** @deprecated use `InputOffice365MgmtConnection$Outbound` instead. */
  export type Outbound = InputOffice365MgmtConnection$Outbound;
}

export function inputOffice365MgmtConnectionToJSON(
  inputOffice365MgmtConnection: InputOffice365MgmtConnection,
): string {
  return JSON.stringify(
    InputOffice365MgmtConnection$outboundSchema.parse(
      inputOffice365MgmtConnection,
    ),
  );
}

export function inputOffice365MgmtConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputOffice365MgmtConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputOffice365MgmtConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputOffice365MgmtConnection' from JSON`,
  );
}

/** @internal */
export const InputOffice365MgmtMode$inboundSchema: z.ZodType<
  InputOffice365MgmtMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputOffice365MgmtMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputOffice365MgmtMode$outboundSchema: z.ZodType<
  InputOffice365MgmtMode,
  z.ZodTypeDef,
  InputOffice365MgmtMode
> = z.union([
  z.nativeEnum(InputOffice365MgmtMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtMode$ {
  /** @deprecated use `InputOffice365MgmtMode$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtMode$inboundSchema;
  /** @deprecated use `InputOffice365MgmtMode$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtMode$outboundSchema;
}

/** @internal */
export const InputOffice365MgmtCompression$inboundSchema: z.ZodType<
  InputOffice365MgmtCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputOffice365MgmtCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputOffice365MgmtCompression$outboundSchema: z.ZodType<
  InputOffice365MgmtCompression,
  z.ZodTypeDef,
  InputOffice365MgmtCompression
> = z.union([
  z.nativeEnum(InputOffice365MgmtCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtCompression$ {
  /** @deprecated use `InputOffice365MgmtCompression$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtCompression$inboundSchema;
  /** @deprecated use `InputOffice365MgmtCompression$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtCompression$outboundSchema;
}

/** @internal */
export const InputOffice365MgmtPqControls$inboundSchema: z.ZodType<
  InputOffice365MgmtPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputOffice365MgmtPqControls$Outbound = {};

/** @internal */
export const InputOffice365MgmtPqControls$outboundSchema: z.ZodType<
  InputOffice365MgmtPqControls$Outbound,
  z.ZodTypeDef,
  InputOffice365MgmtPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtPqControls$ {
  /** @deprecated use `InputOffice365MgmtPqControls$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtPqControls$inboundSchema;
  /** @deprecated use `InputOffice365MgmtPqControls$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtPqControls$outboundSchema;
  /** @deprecated use `InputOffice365MgmtPqControls$Outbound` instead. */
  export type Outbound = InputOffice365MgmtPqControls$Outbound;
}

export function inputOffice365MgmtPqControlsToJSON(
  inputOffice365MgmtPqControls: InputOffice365MgmtPqControls,
): string {
  return JSON.stringify(
    InputOffice365MgmtPqControls$outboundSchema.parse(
      inputOffice365MgmtPqControls,
    ),
  );
}

export function inputOffice365MgmtPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputOffice365MgmtPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputOffice365MgmtPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputOffice365MgmtPqControls' from JSON`,
  );
}

/** @internal */
export const InputOffice365MgmtPq$inboundSchema: z.ZodType<
  InputOffice365MgmtPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputOffice365MgmtMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputOffice365MgmtCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputOffice365MgmtPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type InputOffice365MgmtPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputOffice365MgmtPqControls$Outbound | undefined;
};

/** @internal */
export const InputOffice365MgmtPq$outboundSchema: z.ZodType<
  InputOffice365MgmtPq$Outbound,
  z.ZodTypeDef,
  InputOffice365MgmtPq
> = z.object({
  mode: InputOffice365MgmtMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputOffice365MgmtCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputOffice365MgmtPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtPq$ {
  /** @deprecated use `InputOffice365MgmtPq$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtPq$inboundSchema;
  /** @deprecated use `InputOffice365MgmtPq$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtPq$outboundSchema;
  /** @deprecated use `InputOffice365MgmtPq$Outbound` instead. */
  export type Outbound = InputOffice365MgmtPq$Outbound;
}

export function inputOffice365MgmtPqToJSON(
  inputOffice365MgmtPq: InputOffice365MgmtPq,
): string {
  return JSON.stringify(
    InputOffice365MgmtPq$outboundSchema.parse(inputOffice365MgmtPq),
  );
}

export function inputOffice365MgmtPqFromJSON(
  jsonString: string,
): SafeParseResult<InputOffice365MgmtPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputOffice365MgmtPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputOffice365MgmtPq' from JSON`,
  );
}

/** @internal */
export const InputOffice365MgmtSubscriptionPlan$inboundSchema: z.ZodType<
  InputOffice365MgmtSubscriptionPlan,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputOffice365MgmtSubscriptionPlan),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputOffice365MgmtSubscriptionPlan$outboundSchema: z.ZodType<
  InputOffice365MgmtSubscriptionPlan,
  z.ZodTypeDef,
  InputOffice365MgmtSubscriptionPlan
> = z.union([
  z.nativeEnum(InputOffice365MgmtSubscriptionPlan),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtSubscriptionPlan$ {
  /** @deprecated use `InputOffice365MgmtSubscriptionPlan$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtSubscriptionPlan$inboundSchema;
  /** @deprecated use `InputOffice365MgmtSubscriptionPlan$outboundSchema` instead. */
  export const outboundSchema =
    InputOffice365MgmtSubscriptionPlan$outboundSchema;
}

/** @internal */
export const InputOffice365MgmtMetadatum$inboundSchema: z.ZodType<
  InputOffice365MgmtMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputOffice365MgmtMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputOffice365MgmtMetadatum$outboundSchema: z.ZodType<
  InputOffice365MgmtMetadatum$Outbound,
  z.ZodTypeDef,
  InputOffice365MgmtMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtMetadatum$ {
  /** @deprecated use `InputOffice365MgmtMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtMetadatum$inboundSchema;
  /** @deprecated use `InputOffice365MgmtMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtMetadatum$outboundSchema;
  /** @deprecated use `InputOffice365MgmtMetadatum$Outbound` instead. */
  export type Outbound = InputOffice365MgmtMetadatum$Outbound;
}

export function inputOffice365MgmtMetadatumToJSON(
  inputOffice365MgmtMetadatum: InputOffice365MgmtMetadatum,
): string {
  return JSON.stringify(
    InputOffice365MgmtMetadatum$outboundSchema.parse(
      inputOffice365MgmtMetadatum,
    ),
  );
}

export function inputOffice365MgmtMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputOffice365MgmtMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputOffice365MgmtMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputOffice365MgmtMetadatum' from JSON`,
  );
}

/** @internal */
export const InputOffice365MgmtLogLevel$inboundSchema: z.ZodType<
  InputOffice365MgmtLogLevel,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputOffice365MgmtLogLevel),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputOffice365MgmtLogLevel$outboundSchema: z.ZodType<
  InputOffice365MgmtLogLevel,
  z.ZodTypeDef,
  InputOffice365MgmtLogLevel
> = z.union([
  z.nativeEnum(InputOffice365MgmtLogLevel),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtLogLevel$ {
  /** @deprecated use `InputOffice365MgmtLogLevel$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtLogLevel$inboundSchema;
  /** @deprecated use `InputOffice365MgmtLogLevel$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtLogLevel$outboundSchema;
}

/** @internal */
export const InputOffice365MgmtContentConfig$inboundSchema: z.ZodType<
  InputOffice365MgmtContentConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  contentType: z.string().optional(),
  description: z.string().optional(),
  interval: z.number().optional(),
  logLevel: InputOffice365MgmtLogLevel$inboundSchema.optional(),
  enabled: z.boolean().optional(),
});

/** @internal */
export type InputOffice365MgmtContentConfig$Outbound = {
  contentType?: string | undefined;
  description?: string | undefined;
  interval?: number | undefined;
  logLevel?: string | undefined;
  enabled?: boolean | undefined;
};

/** @internal */
export const InputOffice365MgmtContentConfig$outboundSchema: z.ZodType<
  InputOffice365MgmtContentConfig$Outbound,
  z.ZodTypeDef,
  InputOffice365MgmtContentConfig
> = z.object({
  contentType: z.string().optional(),
  description: z.string().optional(),
  interval: z.number().optional(),
  logLevel: InputOffice365MgmtLogLevel$outboundSchema.optional(),
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtContentConfig$ {
  /** @deprecated use `InputOffice365MgmtContentConfig$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtContentConfig$inboundSchema;
  /** @deprecated use `InputOffice365MgmtContentConfig$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtContentConfig$outboundSchema;
  /** @deprecated use `InputOffice365MgmtContentConfig$Outbound` instead. */
  export type Outbound = InputOffice365MgmtContentConfig$Outbound;
}

export function inputOffice365MgmtContentConfigToJSON(
  inputOffice365MgmtContentConfig: InputOffice365MgmtContentConfig,
): string {
  return JSON.stringify(
    InputOffice365MgmtContentConfig$outboundSchema.parse(
      inputOffice365MgmtContentConfig,
    ),
  );
}

export function inputOffice365MgmtContentConfigFromJSON(
  jsonString: string,
): SafeParseResult<InputOffice365MgmtContentConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputOffice365MgmtContentConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputOffice365MgmtContentConfig' from JSON`,
  );
}

/** @internal */
export const InputOffice365MgmtRetryType$inboundSchema: z.ZodType<
  InputOffice365MgmtRetryType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputOffice365MgmtRetryType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputOffice365MgmtRetryType$outboundSchema: z.ZodType<
  InputOffice365MgmtRetryType,
  z.ZodTypeDef,
  InputOffice365MgmtRetryType
> = z.union([
  z.nativeEnum(InputOffice365MgmtRetryType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtRetryType$ {
  /** @deprecated use `InputOffice365MgmtRetryType$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtRetryType$inboundSchema;
  /** @deprecated use `InputOffice365MgmtRetryType$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtRetryType$outboundSchema;
}

/** @internal */
export const InputOffice365MgmtRetryRules$inboundSchema: z.ZodType<
  InputOffice365MgmtRetryRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputOffice365MgmtRetryType$inboundSchema.default("backoff"),
  interval: z.number().default(1000),
  limit: z.number().default(5),
  multiplier: z.number().default(2),
  codes: z.array(z.number()).optional(),
  enableHeader: z.boolean().default(true),
  retryConnectTimeout: z.boolean().default(false),
  retryConnectReset: z.boolean().default(false),
});

/** @internal */
export type InputOffice365MgmtRetryRules$Outbound = {
  type: string;
  interval: number;
  limit: number;
  multiplier: number;
  codes?: Array<number> | undefined;
  enableHeader: boolean;
  retryConnectTimeout: boolean;
  retryConnectReset: boolean;
};

/** @internal */
export const InputOffice365MgmtRetryRules$outboundSchema: z.ZodType<
  InputOffice365MgmtRetryRules$Outbound,
  z.ZodTypeDef,
  InputOffice365MgmtRetryRules
> = z.object({
  type: InputOffice365MgmtRetryType$outboundSchema.default("backoff"),
  interval: z.number().default(1000),
  limit: z.number().default(5),
  multiplier: z.number().default(2),
  codes: z.array(z.number()).optional(),
  enableHeader: z.boolean().default(true),
  retryConnectTimeout: z.boolean().default(false),
  retryConnectReset: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtRetryRules$ {
  /** @deprecated use `InputOffice365MgmtRetryRules$inboundSchema` instead. */
  export const inboundSchema = InputOffice365MgmtRetryRules$inboundSchema;
  /** @deprecated use `InputOffice365MgmtRetryRules$outboundSchema` instead. */
  export const outboundSchema = InputOffice365MgmtRetryRules$outboundSchema;
  /** @deprecated use `InputOffice365MgmtRetryRules$Outbound` instead. */
  export type Outbound = InputOffice365MgmtRetryRules$Outbound;
}

export function inputOffice365MgmtRetryRulesToJSON(
  inputOffice365MgmtRetryRules: InputOffice365MgmtRetryRules,
): string {
  return JSON.stringify(
    InputOffice365MgmtRetryRules$outboundSchema.parse(
      inputOffice365MgmtRetryRules,
    ),
  );
}

export function inputOffice365MgmtRetryRulesFromJSON(
  jsonString: string,
): SafeParseResult<InputOffice365MgmtRetryRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputOffice365MgmtRetryRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputOffice365MgmtRetryRules' from JSON`,
  );
}

/** @internal */
export const InputOffice365MgmtAuthenticationMethod$inboundSchema: z.ZodType<
  InputOffice365MgmtAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputOffice365MgmtAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputOffice365MgmtAuthenticationMethod$outboundSchema: z.ZodType<
  InputOffice365MgmtAuthenticationMethod,
  z.ZodTypeDef,
  InputOffice365MgmtAuthenticationMethod
> = z.union([
  z.nativeEnum(InputOffice365MgmtAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365MgmtAuthenticationMethod$ {
  /** @deprecated use `InputOffice365MgmtAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    InputOffice365MgmtAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputOffice365MgmtAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    InputOffice365MgmtAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputOffice365Mgmt$inboundSchema: z.ZodType<
  InputOffice365Mgmt,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputOffice365MgmtType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputOffice365MgmtConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputOffice365MgmtPq$inboundSchema).optional(),
  planType: InputOffice365MgmtSubscriptionPlan$inboundSchema.default(
    "enterprise_gcc",
  ),
  tenantId: z.string(),
  appId: z.string(),
  timeout: z.number().default(300),
  keepAliveTime: z.number().default(30),
  jobTimeout: z.string().default("0"),
  maxMissedKeepAlives: z.number().default(3),
  ttl: z.string().default("4h"),
  ignoreGroupJobsLimit: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputOffice365MgmtMetadatum$inboundSchema))
    .optional(),
  publisherIdentifier: z.string().optional(),
  contentConfig: z.array(
    z.lazy(() => InputOffice365MgmtContentConfig$inboundSchema),
  ).optional(),
  ingestionLag: z.number().default(0),
  retryRules: z.lazy(() => InputOffice365MgmtRetryRules$inboundSchema)
    .optional(),
  authType: InputOffice365MgmtAuthenticationMethod$inboundSchema.default(
    "manual",
  ),
  description: z.string().optional(),
  clientSecret: z.string().optional(),
  textSecret: z.string().optional(),
});

/** @internal */
export type InputOffice365Mgmt$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputOffice365MgmtConnection$Outbound> | undefined;
  pq?: InputOffice365MgmtPq$Outbound | undefined;
  planType: string;
  tenantId: string;
  appId: string;
  timeout: number;
  keepAliveTime: number;
  jobTimeout: string;
  maxMissedKeepAlives: number;
  ttl: string;
  ignoreGroupJobsLimit: boolean;
  metadata?: Array<InputOffice365MgmtMetadatum$Outbound> | undefined;
  publisherIdentifier?: string | undefined;
  contentConfig?: Array<InputOffice365MgmtContentConfig$Outbound> | undefined;
  ingestionLag: number;
  retryRules?: InputOffice365MgmtRetryRules$Outbound | undefined;
  authType: string;
  description?: string | undefined;
  clientSecret?: string | undefined;
  textSecret?: string | undefined;
};

/** @internal */
export const InputOffice365Mgmt$outboundSchema: z.ZodType<
  InputOffice365Mgmt$Outbound,
  z.ZodTypeDef,
  InputOffice365Mgmt
> = z.object({
  id: z.string().optional(),
  type: InputOffice365MgmtType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(
    z.lazy(() => InputOffice365MgmtConnection$outboundSchema),
  ).optional(),
  pq: z.lazy(() => InputOffice365MgmtPq$outboundSchema).optional(),
  planType: InputOffice365MgmtSubscriptionPlan$outboundSchema.default(
    "enterprise_gcc",
  ),
  tenantId: z.string(),
  appId: z.string(),
  timeout: z.number().default(300),
  keepAliveTime: z.number().default(30),
  jobTimeout: z.string().default("0"),
  maxMissedKeepAlives: z.number().default(3),
  ttl: z.string().default("4h"),
  ignoreGroupJobsLimit: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputOffice365MgmtMetadatum$outboundSchema))
    .optional(),
  publisherIdentifier: z.string().optional(),
  contentConfig: z.array(
    z.lazy(() => InputOffice365MgmtContentConfig$outboundSchema),
  ).optional(),
  ingestionLag: z.number().default(0),
  retryRules: z.lazy(() => InputOffice365MgmtRetryRules$outboundSchema)
    .optional(),
  authType: InputOffice365MgmtAuthenticationMethod$outboundSchema.default(
    "manual",
  ),
  description: z.string().optional(),
  clientSecret: z.string().optional(),
  textSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOffice365Mgmt$ {
  /** @deprecated use `InputOffice365Mgmt$inboundSchema` instead. */
  export const inboundSchema = InputOffice365Mgmt$inboundSchema;
  /** @deprecated use `InputOffice365Mgmt$outboundSchema` instead. */
  export const outboundSchema = InputOffice365Mgmt$outboundSchema;
  /** @deprecated use `InputOffice365Mgmt$Outbound` instead. */
  export type Outbound = InputOffice365Mgmt$Outbound;
}

export function inputOffice365MgmtToJSON(
  inputOffice365Mgmt: InputOffice365Mgmt,
): string {
  return JSON.stringify(
    InputOffice365Mgmt$outboundSchema.parse(inputOffice365Mgmt),
  );
}

export function inputOffice365MgmtFromJSON(
  jsonString: string,
): SafeParseResult<InputOffice365Mgmt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputOffice365Mgmt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputOffice365Mgmt' from JSON`,
  );
}
