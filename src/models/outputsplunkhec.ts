/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSplunkHecType = {
  SplunkHec: "splunk_hec",
} as const;
export type OutputSplunkHecType = ClosedEnum<typeof OutputSplunkHecType>;

export type OutputSplunkHecExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputSplunkHecFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputSplunkHecFailedRequestLoggingMode = ClosedEnum<
  typeof OutputSplunkHecFailedRequestLoggingMode
>;

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const OutputSplunkHecAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type OutputSplunkHecAuthenticationMethod = ClosedEnum<
  typeof OutputSplunkHecAuthenticationMethod
>;

export type OutputSplunkHecResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputSplunkHecTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSplunkHecBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSplunkHecBackpressureBehavior = ClosedEnum<
  typeof OutputSplunkHecBackpressureBehavior
>;

export type OutputSplunkHecUrl = {
  /**
   * URL to a Splunk HEC endpoint to send events to, e.g., http://localhost:8088/services/collector/event
   */
  url?: string | undefined;
  /**
   * Assign a weight (>0) to each endpoint to indicate its traffic-handling capability
   */
  weight?: number | undefined;
};

/**
 * Codec to use to compress the persisted data
 */
export const OutputSplunkHecCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputSplunkHecCompression = ClosedEnum<
  typeof OutputSplunkHecCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputSplunkHecQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputSplunkHecQueueFullBehavior = ClosedEnum<
  typeof OutputSplunkHecQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputSplunkHecMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputSplunkHecMode = ClosedEnum<typeof OutputSplunkHecMode>;

export type OutputSplunkHecPqControls = {};

export type OutputSplunkHec = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSplunkHecType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Enable for optimal performance. Even if you have one hostname, it can expand to multiple IPs. If disabled, consider enabling round-robin DNS.
   */
  loadBalanced?: boolean | undefined;
  /**
   * In the Splunk app, define which Splunk processing queue to send the events after HEC processing.
   */
  nextQueue?: string | undefined;
  /**
   * In the Splunk app, set the value of _TCP_ROUTING for events that do not have _ctrl._TCP_ROUTING set.
   */
  tcpRouting?: string | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputSplunkHecExtraHttpHeader> | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputSplunkHecFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Output metrics in multiple-metric format, supported in Splunk 8.0 and above to allow multiple metrics in a single event.
   */
  enableMultiMetrics?: boolean | undefined;
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: OutputSplunkHecAuthenticationMethod | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputSplunkHecResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?: OutputSplunkHecTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSplunkHecBackpressureBehavior | undefined;
  description?: string | undefined;
  /**
   * URL to a Splunk HEC endpoint to send events to, e.g., http://localhost:8088/services/collector/event
   */
  url?: string | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Exclude all IPs of the current host from the list of any resolved hostnames
   */
  excludeSelf?: boolean | undefined;
  urls?: Array<OutputSplunkHecUrl> | undefined;
  /**
   * The interval in which to re-resolve any hostnames and pick up destinations from A records
   */
  dnsResolvePeriodSec?: number | undefined;
  /**
   * How far back in time to keep traffic stats for load balancing purposes
   */
  loadBalanceStatsPeriodSec?: number | undefined;
  /**
   * Splunk HEC authentication token
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputSplunkHecCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputSplunkHecQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputSplunkHecMode | undefined;
  pqControls?: OutputSplunkHecPqControls | undefined;
};

/** @internal */
export const OutputSplunkHecType$inboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecType
> = z.nativeEnum(OutputSplunkHecType);

/** @internal */
export const OutputSplunkHecType$outboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecType
> = OutputSplunkHecType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecType$ {
  /** @deprecated use `OutputSplunkHecType$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkHecType$inboundSchema;
  /** @deprecated use `OutputSplunkHecType$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkHecType$outboundSchema;
}

/** @internal */
export const OutputSplunkHecExtraHttpHeader$inboundSchema: z.ZodType<
  OutputSplunkHecExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputSplunkHecExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputSplunkHecExtraHttpHeader$outboundSchema: z.ZodType<
  OutputSplunkHecExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputSplunkHecExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecExtraHttpHeader$ {
  /** @deprecated use `OutputSplunkHecExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkHecExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputSplunkHecExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkHecExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputSplunkHecExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputSplunkHecExtraHttpHeader$Outbound;
}

export function outputSplunkHecExtraHttpHeaderToJSON(
  outputSplunkHecExtraHttpHeader: OutputSplunkHecExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputSplunkHecExtraHttpHeader$outboundSchema.parse(
      outputSplunkHecExtraHttpHeader,
    ),
  );
}

export function outputSplunkHecExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkHecExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkHecExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkHecExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputSplunkHecFailedRequestLoggingMode$inboundSchema:
  z.ZodNativeEnum<typeof OutputSplunkHecFailedRequestLoggingMode> = z
    .nativeEnum(OutputSplunkHecFailedRequestLoggingMode);

/** @internal */
export const OutputSplunkHecFailedRequestLoggingMode$outboundSchema:
  z.ZodNativeEnum<typeof OutputSplunkHecFailedRequestLoggingMode> =
    OutputSplunkHecFailedRequestLoggingMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecFailedRequestLoggingMode$ {
  /** @deprecated use `OutputSplunkHecFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputSplunkHecFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputSplunkHecFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkHecFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputSplunkHecAuthenticationMethod$inboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecAuthenticationMethod
> = z.nativeEnum(OutputSplunkHecAuthenticationMethod);

/** @internal */
export const OutputSplunkHecAuthenticationMethod$outboundSchema:
  z.ZodNativeEnum<typeof OutputSplunkHecAuthenticationMethod> =
    OutputSplunkHecAuthenticationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecAuthenticationMethod$ {
  /** @deprecated use `OutputSplunkHecAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputSplunkHecAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputSplunkHecAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkHecAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputSplunkHecResponseRetrySetting$inboundSchema: z.ZodType<
  OutputSplunkHecResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputSplunkHecResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputSplunkHecResponseRetrySetting$outboundSchema: z.ZodType<
  OutputSplunkHecResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputSplunkHecResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecResponseRetrySetting$ {
  /** @deprecated use `OutputSplunkHecResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputSplunkHecResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputSplunkHecResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkHecResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputSplunkHecResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputSplunkHecResponseRetrySetting$Outbound;
}

export function outputSplunkHecResponseRetrySettingToJSON(
  outputSplunkHecResponseRetrySetting: OutputSplunkHecResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputSplunkHecResponseRetrySetting$outboundSchema.parse(
      outputSplunkHecResponseRetrySetting,
    ),
  );
}

export function outputSplunkHecResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkHecResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSplunkHecResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkHecResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputSplunkHecTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputSplunkHecTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputSplunkHecTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputSplunkHecTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputSplunkHecTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputSplunkHecTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecTimeoutRetrySettings$ {
  /** @deprecated use `OutputSplunkHecTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputSplunkHecTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputSplunkHecTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkHecTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputSplunkHecTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputSplunkHecTimeoutRetrySettings$Outbound;
}

export function outputSplunkHecTimeoutRetrySettingsToJSON(
  outputSplunkHecTimeoutRetrySettings: OutputSplunkHecTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputSplunkHecTimeoutRetrySettings$outboundSchema.parse(
      outputSplunkHecTimeoutRetrySettings,
    ),
  );
}

export function outputSplunkHecTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkHecTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSplunkHecTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkHecTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputSplunkHecBackpressureBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecBackpressureBehavior
> = z.nativeEnum(OutputSplunkHecBackpressureBehavior);

/** @internal */
export const OutputSplunkHecBackpressureBehavior$outboundSchema:
  z.ZodNativeEnum<typeof OutputSplunkHecBackpressureBehavior> =
    OutputSplunkHecBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecBackpressureBehavior$ {
  /** @deprecated use `OutputSplunkHecBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputSplunkHecBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSplunkHecBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkHecBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputSplunkHecUrl$inboundSchema: z.ZodType<
  OutputSplunkHecUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().default("http://localhost:8088/services/collector/event"),
  weight: z.number().default(1),
});

/** @internal */
export type OutputSplunkHecUrl$Outbound = {
  url: string;
  weight: number;
};

/** @internal */
export const OutputSplunkHecUrl$outboundSchema: z.ZodType<
  OutputSplunkHecUrl$Outbound,
  z.ZodTypeDef,
  OutputSplunkHecUrl
> = z.object({
  url: z.string().default("http://localhost:8088/services/collector/event"),
  weight: z.number().default(1),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecUrl$ {
  /** @deprecated use `OutputSplunkHecUrl$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkHecUrl$inboundSchema;
  /** @deprecated use `OutputSplunkHecUrl$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkHecUrl$outboundSchema;
  /** @deprecated use `OutputSplunkHecUrl$Outbound` instead. */
  export type Outbound = OutputSplunkHecUrl$Outbound;
}

export function outputSplunkHecUrlToJSON(
  outputSplunkHecUrl: OutputSplunkHecUrl,
): string {
  return JSON.stringify(
    OutputSplunkHecUrl$outboundSchema.parse(outputSplunkHecUrl),
  );
}

export function outputSplunkHecUrlFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkHecUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkHecUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkHecUrl' from JSON`,
  );
}

/** @internal */
export const OutputSplunkHecCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecCompression
> = z.nativeEnum(OutputSplunkHecCompression);

/** @internal */
export const OutputSplunkHecCompression$outboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecCompression
> = OutputSplunkHecCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecCompression$ {
  /** @deprecated use `OutputSplunkHecCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkHecCompression$inboundSchema;
  /** @deprecated use `OutputSplunkHecCompression$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkHecCompression$outboundSchema;
}

/** @internal */
export const OutputSplunkHecQueueFullBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecQueueFullBehavior
> = z.nativeEnum(OutputSplunkHecQueueFullBehavior);

/** @internal */
export const OutputSplunkHecQueueFullBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecQueueFullBehavior
> = OutputSplunkHecQueueFullBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecQueueFullBehavior$ {
  /** @deprecated use `OutputSplunkHecQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkHecQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputSplunkHecQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkHecQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputSplunkHecMode$inboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecMode
> = z.nativeEnum(OutputSplunkHecMode);

/** @internal */
export const OutputSplunkHecMode$outboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkHecMode
> = OutputSplunkHecMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecMode$ {
  /** @deprecated use `OutputSplunkHecMode$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkHecMode$inboundSchema;
  /** @deprecated use `OutputSplunkHecMode$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkHecMode$outboundSchema;
}

/** @internal */
export const OutputSplunkHecPqControls$inboundSchema: z.ZodType<
  OutputSplunkHecPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSplunkHecPqControls$Outbound = {};

/** @internal */
export const OutputSplunkHecPqControls$outboundSchema: z.ZodType<
  OutputSplunkHecPqControls$Outbound,
  z.ZodTypeDef,
  OutputSplunkHecPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHecPqControls$ {
  /** @deprecated use `OutputSplunkHecPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkHecPqControls$inboundSchema;
  /** @deprecated use `OutputSplunkHecPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkHecPqControls$outboundSchema;
  /** @deprecated use `OutputSplunkHecPqControls$Outbound` instead. */
  export type Outbound = OutputSplunkHecPqControls$Outbound;
}

export function outputSplunkHecPqControlsToJSON(
  outputSplunkHecPqControls: OutputSplunkHecPqControls,
): string {
  return JSON.stringify(
    OutputSplunkHecPqControls$outboundSchema.parse(outputSplunkHecPqControls),
  );
}

export function outputSplunkHecPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkHecPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkHecPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkHecPqControls' from JSON`,
  );
}

/** @internal */
export const OutputSplunkHec$inboundSchema: z.ZodType<
  OutputSplunkHec,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSplunkHecType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  loadBalanced: z.boolean().default(true),
  nextQueue: z.string().default("indexQueue"),
  tcpRouting: z.string().default("nowhere"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputSplunkHecExtraHttpHeader$inboundSchema),
  ).optional(),
  failedRequestLoggingMode:
    OutputSplunkHecFailedRequestLoggingMode$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  enableMultiMetrics: z.boolean().default(false),
  authType: OutputSplunkHecAuthenticationMethod$inboundSchema.default("manual"),
  responseRetrySettings: z.array(
    z.lazy(() => OutputSplunkHecResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputSplunkHecTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputSplunkHecBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  url: z.string().default("http://localhost:8088/services/collector/event"),
  useRoundRobinDns: z.boolean().default(false),
  excludeSelf: z.boolean().default(false),
  urls: z.array(z.lazy(() => OutputSplunkHecUrl$inboundSchema)).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSplunkHecCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputSplunkHecQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputSplunkHecMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSplunkHecPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputSplunkHec$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  loadBalanced: boolean;
  nextQueue: string;
  tcpRouting: string;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputSplunkHecExtraHttpHeader$Outbound> | undefined;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  enableMultiMetrics: boolean;
  authType: string;
  responseRetrySettings?:
    | Array<OutputSplunkHecResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputSplunkHecTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  description?: string | undefined;
  url: string;
  useRoundRobinDns: boolean;
  excludeSelf: boolean;
  urls?: Array<OutputSplunkHecUrl$Outbound> | undefined;
  dnsResolvePeriodSec: number;
  loadBalanceStatsPeriodSec: number;
  token?: string | undefined;
  textSecret?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputSplunkHecPqControls$Outbound | undefined;
};

/** @internal */
export const OutputSplunkHec$outboundSchema: z.ZodType<
  OutputSplunkHec$Outbound,
  z.ZodTypeDef,
  OutputSplunkHec
> = z.object({
  id: z.string().optional(),
  type: OutputSplunkHecType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  loadBalanced: z.boolean().default(true),
  nextQueue: z.string().default("indexQueue"),
  tcpRouting: z.string().default("nowhere"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputSplunkHecExtraHttpHeader$outboundSchema),
  ).optional(),
  failedRequestLoggingMode:
    OutputSplunkHecFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  enableMultiMetrics: z.boolean().default(false),
  authType: OutputSplunkHecAuthenticationMethod$outboundSchema.default(
    "manual",
  ),
  responseRetrySettings: z.array(
    z.lazy(() => OutputSplunkHecResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputSplunkHecTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputSplunkHecBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  url: z.string().default("http://localhost:8088/services/collector/event"),
  useRoundRobinDns: z.boolean().default(false),
  excludeSelf: z.boolean().default(false),
  urls: z.array(z.lazy(() => OutputSplunkHecUrl$outboundSchema)).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSplunkHecCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputSplunkHecQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputSplunkHecMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSplunkHecPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkHec$ {
  /** @deprecated use `OutputSplunkHec$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkHec$inboundSchema;
  /** @deprecated use `OutputSplunkHec$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkHec$outboundSchema;
  /** @deprecated use `OutputSplunkHec$Outbound` instead. */
  export type Outbound = OutputSplunkHec$Outbound;
}

export function outputSplunkHecToJSON(
  outputSplunkHec: OutputSplunkHec,
): string {
  return JSON.stringify(OutputSplunkHec$outboundSchema.parse(outputSplunkHec));
}

export function outputSplunkHecFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkHec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkHec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkHec' from JSON`,
  );
}
