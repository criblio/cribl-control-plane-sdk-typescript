/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSecurityLakeType = {
  SecurityLake: "security_lake",
} as const;
export type OutputSecurityLakeType = ClosedEnum<typeof OutputSecurityLakeType>;

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const OutputSecurityLakeAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type OutputSecurityLakeAuthenticationMethod = ClosedEnum<
  typeof OutputSecurityLakeAuthenticationMethod
>;

/**
 * Signature version to use for signing Amazon Security Lake requests
 */
export const OutputSecurityLakeSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing Amazon Security Lake requests
 */
export type OutputSecurityLakeSignatureVersion = ClosedEnum<
  typeof OutputSecurityLakeSignatureVersion
>;

/**
 * Object ACL to assign to uploaded objects
 */
export const OutputSecurityLakeObjectACL = {
  Private: "private",
  PublicRead: "public-read",
  PublicReadWrite: "public-read-write",
  AuthenticatedRead: "authenticated-read",
  AwsExecRead: "aws-exec-read",
  BucketOwnerRead: "bucket-owner-read",
  BucketOwnerFullControl: "bucket-owner-full-control",
} as const;
/**
 * Object ACL to assign to uploaded objects
 */
export type OutputSecurityLakeObjectACL = ClosedEnum<
  typeof OutputSecurityLakeObjectACL
>;

/**
 * Storage class to select for uploaded objects
 */
export const OutputSecurityLakeStorageClass = {
  Standard: "STANDARD",
  ReducedRedundancy: "REDUCED_REDUNDANCY",
  StandardIa: "STANDARD_IA",
  OnezoneIa: "ONEZONE_IA",
  IntelligentTiering: "INTELLIGENT_TIERING",
  Glacier: "GLACIER",
  GlacierIr: "GLACIER_IR",
  DeepArchive: "DEEP_ARCHIVE",
} as const;
/**
 * Storage class to select for uploaded objects
 */
export type OutputSecurityLakeStorageClass = ClosedEnum<
  typeof OutputSecurityLakeStorageClass
>;

export const OutputSecurityLakeServerSideEncryptionForUploadedObjects = {
  Aes256: "AES256",
  AwsKms: "aws:kms",
} as const;
export type OutputSecurityLakeServerSideEncryptionForUploadedObjects =
  ClosedEnum<typeof OutputSecurityLakeServerSideEncryptionForUploadedObjects>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSecurityLakeBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSecurityLakeBackpressureBehavior = ClosedEnum<
  typeof OutputSecurityLakeBackpressureBehavior
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputSecurityLakeDiskSpaceProtection = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputSecurityLakeDiskSpaceProtection = ClosedEnum<
  typeof OutputSecurityLakeDiskSpaceProtection
>;

/**
 * Determines which data types are supported and how they are represented
 */
export const OutputSecurityLakeParquetVersion = {
  Parquet10: "PARQUET_1_0",
  Parquet24: "PARQUET_2_4",
  Parquet26: "PARQUET_2_6",
} as const;
/**
 * Determines which data types are supported and how they are represented
 */
export type OutputSecurityLakeParquetVersion = ClosedEnum<
  typeof OutputSecurityLakeParquetVersion
>;

/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export const OutputSecurityLakeDataPageVersion = {
  DataPageV1: "DATA_PAGE_V1",
  DataPageV2: "DATA_PAGE_V2",
} as const;
/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export type OutputSecurityLakeDataPageVersion = ClosedEnum<
  typeof OutputSecurityLakeDataPageVersion
>;

export type OutputSecurityLakeKeyValueMetadatum = {
  key?: string | undefined;
  value: string;
};

export type OutputSecurityLake = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSecurityLakeType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Name of the destination S3 bucket. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at initialization time. Example referencing a Global Variable: `myBucket-${C.vars.myVar}`
   */
  bucket: string;
  /**
   * Region where the Amazon Security Lake is located.
   */
  region: string;
  awsSecretKey?: string | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: OutputSecurityLakeAuthenticationMethod | undefined;
  /**
   * Amazon Security Lake service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to Amazon Security Lake-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing Amazon Security Lake requests
   */
  signatureVersion?: OutputSecurityLakeSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access S3
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn: string;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Filesystem location in which to buffer files, before compressing and moving to final destination. Use performant and stable storage.
   */
  stagePath?: string | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Object ACL to assign to uploaded objects
   */
  objectACL?: OutputSecurityLakeObjectACL | undefined;
  /**
   * Storage class to select for uploaded objects
   */
  storageClass?: OutputSecurityLakeStorageClass | undefined;
  serverSideEncryption?:
    | OutputSecurityLakeServerSideEncryptionForUploadedObjects
    | undefined;
  /**
   * ID or ARN of the KMS customer-managed key to use for encryption
   */
  kmsKeyId?: string | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * JavaScript expression to define the output filename prefix (can be constant)
   */
  baseFileName?: string | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * If set, this line will be written to the beginning of each output file
   */
  headerLine?: string | undefined;
  /**
   * Buffer size used to write to a file
   */
  writeHighWaterMark?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSecurityLakeBackpressureBehavior | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?: OutputSecurityLakeDiskSpaceProtection | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of parts to upload in parallel per file. Minimum part size is 5MB.
   */
  maxConcurrentFileParts?: number | undefined;
  /**
   * Disable if you can access files within the bucket but not the bucket itself
   */
  verifyPermissions?: boolean | undefined;
  /**
   * Maximum number of files that can be waiting for upload before backpressure is applied
   */
  maxClosingFilesToBackpressure?: number | undefined;
  /**
   * ID of the AWS account whose data the Destination will write to Security Lake. This should have been configured when creating the Amazon Security Lake custom source.
   */
  accountId: string;
  /**
   * Name of the custom source configured in Amazon Security Lake
   */
  customSource: string;
  /**
   * Automatically calculate the schema based on the events of each Parquet file generated
   */
  automaticSchema?: boolean | undefined;
  /**
   * Determines which data types are supported and how they are represented
   */
  parquetVersion?: OutputSecurityLakeParquetVersion | undefined;
  /**
   * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
   */
  parquetDataPageVersion?: OutputSecurityLakeDataPageVersion | undefined;
  /**
   * The number of rows that every group will contain. The final group can contain a smaller number of rows.
   */
  parquetRowGroupLength?: number | undefined;
  /**
   * Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression.
   */
  parquetPageSize?: string | undefined;
  /**
   * Log up to 3 rows that @{product} skips due to data mismatch
   */
  shouldLogInvalidRows?: boolean | undefined;
  /**
   * The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: "key":"OCSF Event Class", "value":"9001"
   */
  keyValueMetadata?: Array<OutputSecurityLakeKeyValueMetadatum> | undefined;
  /**
   * Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics.
   */
  enableStatistics?: boolean | undefined;
  /**
   * One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping.
   */
  enableWritePageIndex?: boolean | undefined;
  /**
   * Parquet tools can use the checksum of a Parquet page to verify data integrity
   */
  enablePageChecksum?: boolean | undefined;
  description?: string | undefined;
  /**
   * This value can be a constant or a JavaScript expression (`${C.env.SOME_ACCESS_KEY}`)
   */
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  /**
   * How frequently, in seconds, to clean up empty directories
   */
  emptyDirCleanupSec?: number | undefined;
  /**
   * To add a new schema, navigate to Processing > Knowledge > Parquet Schemas
   */
  parquetSchema?: string | undefined;
  /**
   * Storage location for files that fail to reach their final destination after maximum retries are exceeded
   */
  deadletterPath?: string | undefined;
  /**
   * The maximum number of times a file will attempt to move to its final destination before being dead-lettered
   */
  maxRetryNum?: number | undefined;
};

/** @internal */
export const OutputSecurityLakeType$inboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeType
> = z.nativeEnum(OutputSecurityLakeType);

/** @internal */
export const OutputSecurityLakeType$outboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeType
> = OutputSecurityLakeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeType$ {
  /** @deprecated use `OutputSecurityLakeType$inboundSchema` instead. */
  export const inboundSchema = OutputSecurityLakeType$inboundSchema;
  /** @deprecated use `OutputSecurityLakeType$outboundSchema` instead. */
  export const outboundSchema = OutputSecurityLakeType$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeAuthenticationMethod$inboundSchema:
  z.ZodNativeEnum<typeof OutputSecurityLakeAuthenticationMethod> = z.nativeEnum(
    OutputSecurityLakeAuthenticationMethod,
  );

/** @internal */
export const OutputSecurityLakeAuthenticationMethod$outboundSchema:
  z.ZodNativeEnum<typeof OutputSecurityLakeAuthenticationMethod> =
    OutputSecurityLakeAuthenticationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeAuthenticationMethod$ {
  /** @deprecated use `OutputSecurityLakeAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputSecurityLakeAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputSecurityLakeAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputSecurityLakeAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeSignatureVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeSignatureVersion
> = z.nativeEnum(OutputSecurityLakeSignatureVersion);

/** @internal */
export const OutputSecurityLakeSignatureVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeSignatureVersion
> = OutputSecurityLakeSignatureVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeSignatureVersion$ {
  /** @deprecated use `OutputSecurityLakeSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSecurityLakeSignatureVersion$inboundSchema;
  /** @deprecated use `OutputSecurityLakeSignatureVersion$outboundSchema` instead. */
  export const outboundSchema =
    OutputSecurityLakeSignatureVersion$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeObjectACL$inboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeObjectACL
> = z.nativeEnum(OutputSecurityLakeObjectACL);

/** @internal */
export const OutputSecurityLakeObjectACL$outboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeObjectACL
> = OutputSecurityLakeObjectACL$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeObjectACL$ {
  /** @deprecated use `OutputSecurityLakeObjectACL$inboundSchema` instead. */
  export const inboundSchema = OutputSecurityLakeObjectACL$inboundSchema;
  /** @deprecated use `OutputSecurityLakeObjectACL$outboundSchema` instead. */
  export const outboundSchema = OutputSecurityLakeObjectACL$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeStorageClass$inboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeStorageClass
> = z.nativeEnum(OutputSecurityLakeStorageClass);

/** @internal */
export const OutputSecurityLakeStorageClass$outboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeStorageClass
> = OutputSecurityLakeStorageClass$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeStorageClass$ {
  /** @deprecated use `OutputSecurityLakeStorageClass$inboundSchema` instead. */
  export const inboundSchema = OutputSecurityLakeStorageClass$inboundSchema;
  /** @deprecated use `OutputSecurityLakeStorageClass$outboundSchema` instead. */
  export const outboundSchema = OutputSecurityLakeStorageClass$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeServerSideEncryptionForUploadedObjects$inboundSchema:
  z.ZodNativeEnum<
    typeof OutputSecurityLakeServerSideEncryptionForUploadedObjects
  > = z.nativeEnum(OutputSecurityLakeServerSideEncryptionForUploadedObjects);

/** @internal */
export const OutputSecurityLakeServerSideEncryptionForUploadedObjects$outboundSchema:
  z.ZodNativeEnum<
    typeof OutputSecurityLakeServerSideEncryptionForUploadedObjects
  > = OutputSecurityLakeServerSideEncryptionForUploadedObjects$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeServerSideEncryptionForUploadedObjects$ {
  /** @deprecated use `OutputSecurityLakeServerSideEncryptionForUploadedObjects$inboundSchema` instead. */
  export const inboundSchema =
    OutputSecurityLakeServerSideEncryptionForUploadedObjects$inboundSchema;
  /** @deprecated use `OutputSecurityLakeServerSideEncryptionForUploadedObjects$outboundSchema` instead. */
  export const outboundSchema =
    OutputSecurityLakeServerSideEncryptionForUploadedObjects$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeBackpressureBehavior$inboundSchema:
  z.ZodNativeEnum<typeof OutputSecurityLakeBackpressureBehavior> = z.nativeEnum(
    OutputSecurityLakeBackpressureBehavior,
  );

/** @internal */
export const OutputSecurityLakeBackpressureBehavior$outboundSchema:
  z.ZodNativeEnum<typeof OutputSecurityLakeBackpressureBehavior> =
    OutputSecurityLakeBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeBackpressureBehavior$ {
  /** @deprecated use `OutputSecurityLakeBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputSecurityLakeBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSecurityLakeBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputSecurityLakeBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeDiskSpaceProtection$inboundSchema:
  z.ZodNativeEnum<typeof OutputSecurityLakeDiskSpaceProtection> = z.nativeEnum(
    OutputSecurityLakeDiskSpaceProtection,
  );

/** @internal */
export const OutputSecurityLakeDiskSpaceProtection$outboundSchema:
  z.ZodNativeEnum<typeof OutputSecurityLakeDiskSpaceProtection> =
    OutputSecurityLakeDiskSpaceProtection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeDiskSpaceProtection$ {
  /** @deprecated use `OutputSecurityLakeDiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema =
    OutputSecurityLakeDiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputSecurityLakeDiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema =
    OutputSecurityLakeDiskSpaceProtection$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeParquetVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeParquetVersion
> = z.nativeEnum(OutputSecurityLakeParquetVersion);

/** @internal */
export const OutputSecurityLakeParquetVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeParquetVersion
> = OutputSecurityLakeParquetVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeParquetVersion$ {
  /** @deprecated use `OutputSecurityLakeParquetVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSecurityLakeParquetVersion$inboundSchema;
  /** @deprecated use `OutputSecurityLakeParquetVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSecurityLakeParquetVersion$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeDataPageVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeDataPageVersion
> = z.nativeEnum(OutputSecurityLakeDataPageVersion);

/** @internal */
export const OutputSecurityLakeDataPageVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputSecurityLakeDataPageVersion
> = OutputSecurityLakeDataPageVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeDataPageVersion$ {
  /** @deprecated use `OutputSecurityLakeDataPageVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSecurityLakeDataPageVersion$inboundSchema;
  /** @deprecated use `OutputSecurityLakeDataPageVersion$outboundSchema` instead. */
  export const outboundSchema =
    OutputSecurityLakeDataPageVersion$outboundSchema;
}

/** @internal */
export const OutputSecurityLakeKeyValueMetadatum$inboundSchema: z.ZodType<
  OutputSecurityLakeKeyValueMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputSecurityLakeKeyValueMetadatum$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const OutputSecurityLakeKeyValueMetadatum$outboundSchema: z.ZodType<
  OutputSecurityLakeKeyValueMetadatum$Outbound,
  z.ZodTypeDef,
  OutputSecurityLakeKeyValueMetadatum
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLakeKeyValueMetadatum$ {
  /** @deprecated use `OutputSecurityLakeKeyValueMetadatum$inboundSchema` instead. */
  export const inboundSchema =
    OutputSecurityLakeKeyValueMetadatum$inboundSchema;
  /** @deprecated use `OutputSecurityLakeKeyValueMetadatum$outboundSchema` instead. */
  export const outboundSchema =
    OutputSecurityLakeKeyValueMetadatum$outboundSchema;
  /** @deprecated use `OutputSecurityLakeKeyValueMetadatum$Outbound` instead. */
  export type Outbound = OutputSecurityLakeKeyValueMetadatum$Outbound;
}

export function outputSecurityLakeKeyValueMetadatumToJSON(
  outputSecurityLakeKeyValueMetadatum: OutputSecurityLakeKeyValueMetadatum,
): string {
  return JSON.stringify(
    OutputSecurityLakeKeyValueMetadatum$outboundSchema.parse(
      outputSecurityLakeKeyValueMetadatum,
    ),
  );
}

export function outputSecurityLakeKeyValueMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<OutputSecurityLakeKeyValueMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSecurityLakeKeyValueMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSecurityLakeKeyValueMetadatum' from JSON`,
  );
}

/** @internal */
export const OutputSecurityLake$inboundSchema: z.ZodType<
  OutputSecurityLake,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSecurityLakeType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string(),
  awsSecretKey: z.string().optional(),
  awsAuthenticationMethod: OutputSecurityLakeAuthenticationMethod$inboundSchema
    .default("auto"),
  endpoint: z.string().optional(),
  signatureVersion: OutputSecurityLakeSignatureVersion$inboundSchema.default(
    "v4",
  ),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  objectACL: OutputSecurityLakeObjectACL$inboundSchema.default("private"),
  storageClass: OutputSecurityLakeStorageClass$inboundSchema.optional(),
  serverSideEncryption:
    OutputSecurityLakeServerSideEncryptionForUploadedObjects$inboundSchema
      .optional(),
  kmsKeyId: z.string().optional(),
  removeEmptyDirs: z.boolean().default(true),
  baseFileName: z.string().default("`CriblOut`"),
  maxFileSizeMB: z.number().default(32),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputSecurityLakeBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputSecurityLakeDiskSpaceProtection$inboundSchema
    .default("block"),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxConcurrentFileParts: z.number().default(4),
  verifyPermissions: z.boolean().default(true),
  maxClosingFilesToBackpressure: z.number().default(100),
  accountId: z.string(),
  customSource: z.string(),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputSecurityLakeParquetVersion$inboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputSecurityLakeDataPageVersion$inboundSchema
    .default("DATA_PAGE_V2"),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputSecurityLakeKeyValueMetadatum$inboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  emptyDirCleanupSec: z.number().default(300),
  parquetSchema: z.string().optional(),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/** @internal */
export type OutputSecurityLake$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  bucket: string;
  region: string;
  awsSecretKey?: string | undefined;
  awsAuthenticationMethod: string;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn: string;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  stagePath: string;
  addIdToStagePath: boolean;
  objectACL: string;
  storageClass?: string | undefined;
  serverSideEncryption?: string | undefined;
  kmsKeyId?: string | undefined;
  removeEmptyDirs: boolean;
  baseFileName: string;
  maxFileSizeMB: number;
  maxOpenFiles: number;
  headerLine: string;
  writeHighWaterMark: number;
  onBackpressure: string;
  deadletterEnabled: boolean;
  onDiskFullBackpressure: string;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxConcurrentFileParts: number;
  verifyPermissions: boolean;
  maxClosingFilesToBackpressure: number;
  accountId: string;
  customSource: string;
  automaticSchema: boolean;
  parquetVersion: string;
  parquetDataPageVersion: string;
  parquetRowGroupLength: number;
  parquetPageSize: string;
  shouldLogInvalidRows?: boolean | undefined;
  keyValueMetadata?:
    | Array<OutputSecurityLakeKeyValueMetadatum$Outbound>
    | undefined;
  enableStatistics: boolean;
  enableWritePageIndex: boolean;
  enablePageChecksum: boolean;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  emptyDirCleanupSec: number;
  parquetSchema?: string | undefined;
  deadletterPath: string;
  maxRetryNum: number;
};

/** @internal */
export const OutputSecurityLake$outboundSchema: z.ZodType<
  OutputSecurityLake$Outbound,
  z.ZodTypeDef,
  OutputSecurityLake
> = z.object({
  id: z.string().optional(),
  type: OutputSecurityLakeType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string(),
  awsSecretKey: z.string().optional(),
  awsAuthenticationMethod: OutputSecurityLakeAuthenticationMethod$outboundSchema
    .default("auto"),
  endpoint: z.string().optional(),
  signatureVersion: OutputSecurityLakeSignatureVersion$outboundSchema.default(
    "v4",
  ),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  objectACL: OutputSecurityLakeObjectACL$outboundSchema.default("private"),
  storageClass: OutputSecurityLakeStorageClass$outboundSchema.optional(),
  serverSideEncryption:
    OutputSecurityLakeServerSideEncryptionForUploadedObjects$outboundSchema
      .optional(),
  kmsKeyId: z.string().optional(),
  removeEmptyDirs: z.boolean().default(true),
  baseFileName: z.string().default("`CriblOut`"),
  maxFileSizeMB: z.number().default(32),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputSecurityLakeBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputSecurityLakeDiskSpaceProtection$outboundSchema
    .default("block"),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxConcurrentFileParts: z.number().default(4),
  verifyPermissions: z.boolean().default(true),
  maxClosingFilesToBackpressure: z.number().default(100),
  accountId: z.string(),
  customSource: z.string(),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputSecurityLakeParquetVersion$outboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputSecurityLakeDataPageVersion$outboundSchema
    .default("DATA_PAGE_V2"),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputSecurityLakeKeyValueMetadatum$outboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  emptyDirCleanupSec: z.number().default(300),
  parquetSchema: z.string().optional(),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSecurityLake$ {
  /** @deprecated use `OutputSecurityLake$inboundSchema` instead. */
  export const inboundSchema = OutputSecurityLake$inboundSchema;
  /** @deprecated use `OutputSecurityLake$outboundSchema` instead. */
  export const outboundSchema = OutputSecurityLake$outboundSchema;
  /** @deprecated use `OutputSecurityLake$Outbound` instead. */
  export type Outbound = OutputSecurityLake$Outbound;
}

export function outputSecurityLakeToJSON(
  outputSecurityLake: OutputSecurityLake,
): string {
  return JSON.stringify(
    OutputSecurityLake$outboundSchema.parse(outputSecurityLake),
  );
}

export function outputSecurityLakeFromJSON(
  jsonString: string,
): SafeParseResult<OutputSecurityLake, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSecurityLake$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSecurityLake' from JSON`,
  );
}
