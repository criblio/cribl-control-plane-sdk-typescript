/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Objects = {
  discovered: number;
  scanned: number;
  skipped: number;
};

export type Tasks = {
  largeFileTaskCount: number;
  standardTaskCount: number;
};

export type Time = {
  queuedSec: number;
  runningSec: number;
  taskCompletionTotalSec: number;
  taskReceivingTotalSec: number;
};

export type SearchAuditMetrics = {
  bytesIn: number;
  bytesOut: number;
  eventsIn: number;
  eventsOut: number;
  objects: Objects;
  tasks?: Tasks | undefined;
  time: Time;
};

/** @internal */
export const Objects$inboundSchema: z.ZodType<Objects, z.ZodTypeDef, unknown> =
  z.object({
    discovered: z.number(),
    scanned: z.number(),
    skipped: z.number(),
  });

/** @internal */
export type Objects$Outbound = {
  discovered: number;
  scanned: number;
  skipped: number;
};

/** @internal */
export const Objects$outboundSchema: z.ZodType<
  Objects$Outbound,
  z.ZodTypeDef,
  Objects
> = z.object({
  discovered: z.number(),
  scanned: z.number(),
  skipped: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Objects$ {
  /** @deprecated use `Objects$inboundSchema` instead. */
  export const inboundSchema = Objects$inboundSchema;
  /** @deprecated use `Objects$outboundSchema` instead. */
  export const outboundSchema = Objects$outboundSchema;
  /** @deprecated use `Objects$Outbound` instead. */
  export type Outbound = Objects$Outbound;
}

export function objectsToJSON(objects: Objects): string {
  return JSON.stringify(Objects$outboundSchema.parse(objects));
}

export function objectsFromJSON(
  jsonString: string,
): SafeParseResult<Objects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Objects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Objects' from JSON`,
  );
}

/** @internal */
export const Tasks$inboundSchema: z.ZodType<Tasks, z.ZodTypeDef, unknown> = z
  .object({
    largeFileTaskCount: z.number(),
    standardTaskCount: z.number(),
  });

/** @internal */
export type Tasks$Outbound = {
  largeFileTaskCount: number;
  standardTaskCount: number;
};

/** @internal */
export const Tasks$outboundSchema: z.ZodType<
  Tasks$Outbound,
  z.ZodTypeDef,
  Tasks
> = z.object({
  largeFileTaskCount: z.number(),
  standardTaskCount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tasks$ {
  /** @deprecated use `Tasks$inboundSchema` instead. */
  export const inboundSchema = Tasks$inboundSchema;
  /** @deprecated use `Tasks$outboundSchema` instead. */
  export const outboundSchema = Tasks$outboundSchema;
  /** @deprecated use `Tasks$Outbound` instead. */
  export type Outbound = Tasks$Outbound;
}

export function tasksToJSON(tasks: Tasks): string {
  return JSON.stringify(Tasks$outboundSchema.parse(tasks));
}

export function tasksFromJSON(
  jsonString: string,
): SafeParseResult<Tasks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tasks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tasks' from JSON`,
  );
}

/** @internal */
export const Time$inboundSchema: z.ZodType<Time, z.ZodTypeDef, unknown> = z
  .object({
    queuedSec: z.number(),
    runningSec: z.number(),
    taskCompletionTotalSec: z.number(),
    taskReceivingTotalSec: z.number(),
  });

/** @internal */
export type Time$Outbound = {
  queuedSec: number;
  runningSec: number;
  taskCompletionTotalSec: number;
  taskReceivingTotalSec: number;
};

/** @internal */
export const Time$outboundSchema: z.ZodType<Time$Outbound, z.ZodTypeDef, Time> =
  z.object({
    queuedSec: z.number(),
    runningSec: z.number(),
    taskCompletionTotalSec: z.number(),
    taskReceivingTotalSec: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Time$ {
  /** @deprecated use `Time$inboundSchema` instead. */
  export const inboundSchema = Time$inboundSchema;
  /** @deprecated use `Time$outboundSchema` instead. */
  export const outboundSchema = Time$outboundSchema;
  /** @deprecated use `Time$Outbound` instead. */
  export type Outbound = Time$Outbound;
}

export function timeToJSON(time: Time): string {
  return JSON.stringify(Time$outboundSchema.parse(time));
}

export function timeFromJSON(
  jsonString: string,
): SafeParseResult<Time, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Time$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Time' from JSON`,
  );
}

/** @internal */
export const SearchAuditMetrics$inboundSchema: z.ZodType<
  SearchAuditMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytesIn: z.number(),
  bytesOut: z.number(),
  eventsIn: z.number(),
  eventsOut: z.number(),
  objects: z.lazy(() => Objects$inboundSchema),
  tasks: z.lazy(() => Tasks$inboundSchema).optional(),
  time: z.lazy(() => Time$inboundSchema),
});

/** @internal */
export type SearchAuditMetrics$Outbound = {
  bytesIn: number;
  bytesOut: number;
  eventsIn: number;
  eventsOut: number;
  objects: Objects$Outbound;
  tasks?: Tasks$Outbound | undefined;
  time: Time$Outbound;
};

/** @internal */
export const SearchAuditMetrics$outboundSchema: z.ZodType<
  SearchAuditMetrics$Outbound,
  z.ZodTypeDef,
  SearchAuditMetrics
> = z.object({
  bytesIn: z.number(),
  bytesOut: z.number(),
  eventsIn: z.number(),
  eventsOut: z.number(),
  objects: z.lazy(() => Objects$outboundSchema),
  tasks: z.lazy(() => Tasks$outboundSchema).optional(),
  time: z.lazy(() => Time$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAuditMetrics$ {
  /** @deprecated use `SearchAuditMetrics$inboundSchema` instead. */
  export const inboundSchema = SearchAuditMetrics$inboundSchema;
  /** @deprecated use `SearchAuditMetrics$outboundSchema` instead. */
  export const outboundSchema = SearchAuditMetrics$outboundSchema;
  /** @deprecated use `SearchAuditMetrics$Outbound` instead. */
  export type Outbound = SearchAuditMetrics$Outbound;
}

export function searchAuditMetricsToJSON(
  searchAuditMetrics: SearchAuditMetrics,
): string {
  return JSON.stringify(
    SearchAuditMetrics$outboundSchema.parse(searchAuditMetrics),
  );
}

export function searchAuditMetricsFromJSON(
  jsonString: string,
): SafeParseResult<SearchAuditMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAuditMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAuditMetrics' from JSON`,
  );
}
