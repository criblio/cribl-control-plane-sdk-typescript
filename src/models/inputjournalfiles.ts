/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputJournalFilesType = {
  JournalFiles: "journal_files",
} as const;
export type InputJournalFilesType = OpenEnum<typeof InputJournalFilesType>;

export type InputJournalFilesConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputJournalFilesMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputJournalFilesMode = OpenEnum<typeof InputJournalFilesMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputJournalFilesCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputJournalFilesCompression = OpenEnum<
  typeof InputJournalFilesCompression
>;

export type InputJournalFilesPqControls = {};

export type InputJournalFilesPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputJournalFilesMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputJournalFilesCompression | undefined;
  pqControls?: InputJournalFilesPqControls | undefined;
};

export type InputJournalFilesRule = {
  /**
   * JavaScript expression applied to Journal objects. Return 'true' to include it.
   */
  filter: string;
  /**
   * Optional description of this rule's purpose
   */
  description?: string | undefined;
};

export type InputJournalFilesMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputJournalFiles = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputJournalFilesType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputJournalFilesConnection> | undefined;
  pq?: InputJournalFilesPq | undefined;
  /**
   * Directory path to search for journals. Environment variables will be resolved, e.g. $CRIBL_EDGE_FS_ROOT/var/log/journal/$MACHINE_ID.
   */
  path: string;
  /**
   * Time, in seconds, between scanning for journals.
   */
  interval?: number | undefined;
  /**
   * The full path of discovered journals are matched against this wildcard list.
   */
  journals: Array<string>;
  /**
   * Add rules to decide which journal objects to allow. Events are generated if no rules are given or if all the rules' expressions evaluate to true.
   */
  rules?: Array<InputJournalFilesRule> | undefined;
  /**
   * Skip log messages that are not part of the current boot session.
   */
  currentBoot?: boolean | undefined;
  /**
   * The maximum log message age, in duration form (e.g,: 60s, 4h, 3d, 1w).  Default of no value will apply no max age filters.
   */
  maxAgeDur?: string | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputJournalFilesMetadatum> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputJournalFilesType$inboundSchema: z.ZodType<
  InputJournalFilesType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputJournalFilesType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputJournalFilesType$outboundSchema: z.ZodType<
  InputJournalFilesType,
  z.ZodTypeDef,
  InputJournalFilesType
> = z.union([
  z.nativeEnum(InputJournalFilesType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputJournalFilesType$ {
  /** @deprecated use `InputJournalFilesType$inboundSchema` instead. */
  export const inboundSchema = InputJournalFilesType$inboundSchema;
  /** @deprecated use `InputJournalFilesType$outboundSchema` instead. */
  export const outboundSchema = InputJournalFilesType$outboundSchema;
}

/** @internal */
export const InputJournalFilesConnection$inboundSchema: z.ZodType<
  InputJournalFilesConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputJournalFilesConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputJournalFilesConnection$outboundSchema: z.ZodType<
  InputJournalFilesConnection$Outbound,
  z.ZodTypeDef,
  InputJournalFilesConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputJournalFilesConnection$ {
  /** @deprecated use `InputJournalFilesConnection$inboundSchema` instead. */
  export const inboundSchema = InputJournalFilesConnection$inboundSchema;
  /** @deprecated use `InputJournalFilesConnection$outboundSchema` instead. */
  export const outboundSchema = InputJournalFilesConnection$outboundSchema;
  /** @deprecated use `InputJournalFilesConnection$Outbound` instead. */
  export type Outbound = InputJournalFilesConnection$Outbound;
}

export function inputJournalFilesConnectionToJSON(
  inputJournalFilesConnection: InputJournalFilesConnection,
): string {
  return JSON.stringify(
    InputJournalFilesConnection$outboundSchema.parse(
      inputJournalFilesConnection,
    ),
  );
}

export function inputJournalFilesConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputJournalFilesConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputJournalFilesConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputJournalFilesConnection' from JSON`,
  );
}

/** @internal */
export const InputJournalFilesMode$inboundSchema: z.ZodType<
  InputJournalFilesMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputJournalFilesMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputJournalFilesMode$outboundSchema: z.ZodType<
  InputJournalFilesMode,
  z.ZodTypeDef,
  InputJournalFilesMode
> = z.union([
  z.nativeEnum(InputJournalFilesMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputJournalFilesMode$ {
  /** @deprecated use `InputJournalFilesMode$inboundSchema` instead. */
  export const inboundSchema = InputJournalFilesMode$inboundSchema;
  /** @deprecated use `InputJournalFilesMode$outboundSchema` instead. */
  export const outboundSchema = InputJournalFilesMode$outboundSchema;
}

/** @internal */
export const InputJournalFilesCompression$inboundSchema: z.ZodType<
  InputJournalFilesCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputJournalFilesCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputJournalFilesCompression$outboundSchema: z.ZodType<
  InputJournalFilesCompression,
  z.ZodTypeDef,
  InputJournalFilesCompression
> = z.union([
  z.nativeEnum(InputJournalFilesCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputJournalFilesCompression$ {
  /** @deprecated use `InputJournalFilesCompression$inboundSchema` instead. */
  export const inboundSchema = InputJournalFilesCompression$inboundSchema;
  /** @deprecated use `InputJournalFilesCompression$outboundSchema` instead. */
  export const outboundSchema = InputJournalFilesCompression$outboundSchema;
}

/** @internal */
export const InputJournalFilesPqControls$inboundSchema: z.ZodType<
  InputJournalFilesPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputJournalFilesPqControls$Outbound = {};

/** @internal */
export const InputJournalFilesPqControls$outboundSchema: z.ZodType<
  InputJournalFilesPqControls$Outbound,
  z.ZodTypeDef,
  InputJournalFilesPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputJournalFilesPqControls$ {
  /** @deprecated use `InputJournalFilesPqControls$inboundSchema` instead. */
  export const inboundSchema = InputJournalFilesPqControls$inboundSchema;
  /** @deprecated use `InputJournalFilesPqControls$outboundSchema` instead. */
  export const outboundSchema = InputJournalFilesPqControls$outboundSchema;
  /** @deprecated use `InputJournalFilesPqControls$Outbound` instead. */
  export type Outbound = InputJournalFilesPqControls$Outbound;
}

export function inputJournalFilesPqControlsToJSON(
  inputJournalFilesPqControls: InputJournalFilesPqControls,
): string {
  return JSON.stringify(
    InputJournalFilesPqControls$outboundSchema.parse(
      inputJournalFilesPqControls,
    ),
  );
}

export function inputJournalFilesPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputJournalFilesPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputJournalFilesPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputJournalFilesPqControls' from JSON`,
  );
}

/** @internal */
export const InputJournalFilesPq$inboundSchema: z.ZodType<
  InputJournalFilesPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputJournalFilesMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputJournalFilesCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputJournalFilesPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type InputJournalFilesPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputJournalFilesPqControls$Outbound | undefined;
};

/** @internal */
export const InputJournalFilesPq$outboundSchema: z.ZodType<
  InputJournalFilesPq$Outbound,
  z.ZodTypeDef,
  InputJournalFilesPq
> = z.object({
  mode: InputJournalFilesMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputJournalFilesCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputJournalFilesPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputJournalFilesPq$ {
  /** @deprecated use `InputJournalFilesPq$inboundSchema` instead. */
  export const inboundSchema = InputJournalFilesPq$inboundSchema;
  /** @deprecated use `InputJournalFilesPq$outboundSchema` instead. */
  export const outboundSchema = InputJournalFilesPq$outboundSchema;
  /** @deprecated use `InputJournalFilesPq$Outbound` instead. */
  export type Outbound = InputJournalFilesPq$Outbound;
}

export function inputJournalFilesPqToJSON(
  inputJournalFilesPq: InputJournalFilesPq,
): string {
  return JSON.stringify(
    InputJournalFilesPq$outboundSchema.parse(inputJournalFilesPq),
  );
}

export function inputJournalFilesPqFromJSON(
  jsonString: string,
): SafeParseResult<InputJournalFilesPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputJournalFilesPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputJournalFilesPq' from JSON`,
  );
}

/** @internal */
export const InputJournalFilesRule$inboundSchema: z.ZodType<
  InputJournalFilesRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type InputJournalFilesRule$Outbound = {
  filter: string;
  description?: string | undefined;
};

/** @internal */
export const InputJournalFilesRule$outboundSchema: z.ZodType<
  InputJournalFilesRule$Outbound,
  z.ZodTypeDef,
  InputJournalFilesRule
> = z.object({
  filter: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputJournalFilesRule$ {
  /** @deprecated use `InputJournalFilesRule$inboundSchema` instead. */
  export const inboundSchema = InputJournalFilesRule$inboundSchema;
  /** @deprecated use `InputJournalFilesRule$outboundSchema` instead. */
  export const outboundSchema = InputJournalFilesRule$outboundSchema;
  /** @deprecated use `InputJournalFilesRule$Outbound` instead. */
  export type Outbound = InputJournalFilesRule$Outbound;
}

export function inputJournalFilesRuleToJSON(
  inputJournalFilesRule: InputJournalFilesRule,
): string {
  return JSON.stringify(
    InputJournalFilesRule$outboundSchema.parse(inputJournalFilesRule),
  );
}

export function inputJournalFilesRuleFromJSON(
  jsonString: string,
): SafeParseResult<InputJournalFilesRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputJournalFilesRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputJournalFilesRule' from JSON`,
  );
}

/** @internal */
export const InputJournalFilesMetadatum$inboundSchema: z.ZodType<
  InputJournalFilesMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputJournalFilesMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputJournalFilesMetadatum$outboundSchema: z.ZodType<
  InputJournalFilesMetadatum$Outbound,
  z.ZodTypeDef,
  InputJournalFilesMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputJournalFilesMetadatum$ {
  /** @deprecated use `InputJournalFilesMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputJournalFilesMetadatum$inboundSchema;
  /** @deprecated use `InputJournalFilesMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputJournalFilesMetadatum$outboundSchema;
  /** @deprecated use `InputJournalFilesMetadatum$Outbound` instead. */
  export type Outbound = InputJournalFilesMetadatum$Outbound;
}

export function inputJournalFilesMetadatumToJSON(
  inputJournalFilesMetadatum: InputJournalFilesMetadatum,
): string {
  return JSON.stringify(
    InputJournalFilesMetadatum$outboundSchema.parse(inputJournalFilesMetadatum),
  );
}

export function inputJournalFilesMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputJournalFilesMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputJournalFilesMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputJournalFilesMetadatum' from JSON`,
  );
}

/** @internal */
export const InputJournalFiles$inboundSchema: z.ZodType<
  InputJournalFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputJournalFilesType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputJournalFilesConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputJournalFilesPq$inboundSchema).optional(),
  path: z.string(),
  interval: z.number().default(10),
  journals: z.array(z.string()),
  rules: z.array(z.lazy(() => InputJournalFilesRule$inboundSchema)).optional(),
  currentBoot: z.boolean().default(false),
  maxAgeDur: z.string().optional(),
  metadata: z.array(z.lazy(() => InputJournalFilesMetadatum$inboundSchema))
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputJournalFiles$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputJournalFilesConnection$Outbound> | undefined;
  pq?: InputJournalFilesPq$Outbound | undefined;
  path: string;
  interval: number;
  journals: Array<string>;
  rules?: Array<InputJournalFilesRule$Outbound> | undefined;
  currentBoot: boolean;
  maxAgeDur?: string | undefined;
  metadata?: Array<InputJournalFilesMetadatum$Outbound> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputJournalFiles$outboundSchema: z.ZodType<
  InputJournalFiles$Outbound,
  z.ZodTypeDef,
  InputJournalFiles
> = z.object({
  id: z.string().optional(),
  type: InputJournalFilesType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputJournalFilesConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputJournalFilesPq$outboundSchema).optional(),
  path: z.string(),
  interval: z.number().default(10),
  journals: z.array(z.string()),
  rules: z.array(z.lazy(() => InputJournalFilesRule$outboundSchema)).optional(),
  currentBoot: z.boolean().default(false),
  maxAgeDur: z.string().optional(),
  metadata: z.array(z.lazy(() => InputJournalFilesMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputJournalFiles$ {
  /** @deprecated use `InputJournalFiles$inboundSchema` instead. */
  export const inboundSchema = InputJournalFiles$inboundSchema;
  /** @deprecated use `InputJournalFiles$outboundSchema` instead. */
  export const outboundSchema = InputJournalFiles$outboundSchema;
  /** @deprecated use `InputJournalFiles$Outbound` instead. */
  export type Outbound = InputJournalFiles$Outbound;
}

export function inputJournalFilesToJSON(
  inputJournalFiles: InputJournalFiles,
): string {
  return JSON.stringify(
    InputJournalFiles$outboundSchema.parse(inputJournalFiles),
  );
}

export function inputJournalFilesFromJSON(
  jsonString: string,
): SafeParseResult<InputJournalFiles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputJournalFiles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputJournalFiles' from JSON`,
  );
}
