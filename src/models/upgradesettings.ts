/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  UpgradePackageUrls,
  UpgradePackageUrls$inboundSchema,
  UpgradePackageUrls$Outbound,
  UpgradePackageUrls$outboundSchema,
} from "./upgradepackageurls.js";

export type UpgradeSettings = {
  automaticUpgradeCheckPeriod?: string | undefined;
  disableAutomaticUpgrade: boolean;
  enableLegacyEdgeUpgrade: boolean;
  packageUrls?: Array<UpgradePackageUrls> | undefined;
  upgradeSource: string;
};

/** @internal */
export const UpgradeSettings$inboundSchema: z.ZodType<
  UpgradeSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  automaticUpgradeCheckPeriod: z.string().optional(),
  disableAutomaticUpgrade: z.boolean(),
  enableLegacyEdgeUpgrade: z.boolean(),
  packageUrls: z.array(UpgradePackageUrls$inboundSchema).optional(),
  upgradeSource: z.string(),
});

/** @internal */
export type UpgradeSettings$Outbound = {
  automaticUpgradeCheckPeriod?: string | undefined;
  disableAutomaticUpgrade: boolean;
  enableLegacyEdgeUpgrade: boolean;
  packageUrls?: Array<UpgradePackageUrls$Outbound> | undefined;
  upgradeSource: string;
};

/** @internal */
export const UpgradeSettings$outboundSchema: z.ZodType<
  UpgradeSettings$Outbound,
  z.ZodTypeDef,
  UpgradeSettings
> = z.object({
  automaticUpgradeCheckPeriod: z.string().optional(),
  disableAutomaticUpgrade: z.boolean(),
  enableLegacyEdgeUpgrade: z.boolean(),
  packageUrls: z.array(UpgradePackageUrls$outboundSchema).optional(),
  upgradeSource: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpgradeSettings$ {
  /** @deprecated use `UpgradeSettings$inboundSchema` instead. */
  export const inboundSchema = UpgradeSettings$inboundSchema;
  /** @deprecated use `UpgradeSettings$outboundSchema` instead. */
  export const outboundSchema = UpgradeSettings$outboundSchema;
  /** @deprecated use `UpgradeSettings$Outbound` instead. */
  export type Outbound = UpgradeSettings$Outbound;
}

export function upgradeSettingsToJSON(
  upgradeSettings: UpgradeSettings,
): string {
  return JSON.stringify(UpgradeSettings$outboundSchema.parse(upgradeSettings));
}

export function upgradeSettingsFromJSON(
  jsonString: string,
): SafeParseResult<UpgradeSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpgradeSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpgradeSettings' from JSON`,
  );
}
