/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSnmpType = {
  Snmp: "snmp",
} as const;
export type OutputSnmpType = OpenEnum<typeof OutputSnmpType>;

export type OutputSnmpHost = {
  /**
   * Destination host
   */
  host: string;
  /**
   * Destination port, default is 162
   */
  port?: number | undefined;
};

export type OutputSnmp = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSnmpType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * One or more SNMP destinations to forward traps to
   */
  hosts: Array<OutputSnmpHost>;
  /**
   * How often to resolve the destination hostname to an IP address. Ignored if all destinations are IP addresses. A value of 0 means every trap sent will incur a DNS lookup.
   */
  dnsResolvePeriodSec?: number | undefined;
  description?: string | undefined;
};

/** @internal */
export const OutputSnmpType$inboundSchema: z.ZodType<
  OutputSnmpType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSnmpType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSnmpType$outboundSchema: z.ZodType<
  OutputSnmpType,
  z.ZodTypeDef,
  OutputSnmpType
> = z.union([
  z.nativeEnum(OutputSnmpType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnmpType$ {
  /** @deprecated use `OutputSnmpType$inboundSchema` instead. */
  export const inboundSchema = OutputSnmpType$inboundSchema;
  /** @deprecated use `OutputSnmpType$outboundSchema` instead. */
  export const outboundSchema = OutputSnmpType$outboundSchema;
}

/** @internal */
export const OutputSnmpHost$inboundSchema: z.ZodType<
  OutputSnmpHost,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  port: z.number().default(162),
});

/** @internal */
export type OutputSnmpHost$Outbound = {
  host: string;
  port: number;
};

/** @internal */
export const OutputSnmpHost$outboundSchema: z.ZodType<
  OutputSnmpHost$Outbound,
  z.ZodTypeDef,
  OutputSnmpHost
> = z.object({
  host: z.string(),
  port: z.number().default(162),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnmpHost$ {
  /** @deprecated use `OutputSnmpHost$inboundSchema` instead. */
  export const inboundSchema = OutputSnmpHost$inboundSchema;
  /** @deprecated use `OutputSnmpHost$outboundSchema` instead. */
  export const outboundSchema = OutputSnmpHost$outboundSchema;
  /** @deprecated use `OutputSnmpHost$Outbound` instead. */
  export type Outbound = OutputSnmpHost$Outbound;
}

export function outputSnmpHostToJSON(outputSnmpHost: OutputSnmpHost): string {
  return JSON.stringify(OutputSnmpHost$outboundSchema.parse(outputSnmpHost));
}

export function outputSnmpHostFromJSON(
  jsonString: string,
): SafeParseResult<OutputSnmpHost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSnmpHost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSnmpHost' from JSON`,
  );
}

/** @internal */
export const OutputSnmp$inboundSchema: z.ZodType<
  OutputSnmp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSnmpType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  hosts: z.array(z.lazy(() => OutputSnmpHost$inboundSchema)),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
});

/** @internal */
export type OutputSnmp$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  hosts: Array<OutputSnmpHost$Outbound>;
  dnsResolvePeriodSec: number;
  description?: string | undefined;
};

/** @internal */
export const OutputSnmp$outboundSchema: z.ZodType<
  OutputSnmp$Outbound,
  z.ZodTypeDef,
  OutputSnmp
> = z.object({
  id: z.string().optional(),
  type: OutputSnmpType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  hosts: z.array(z.lazy(() => OutputSnmpHost$outboundSchema)),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnmp$ {
  /** @deprecated use `OutputSnmp$inboundSchema` instead. */
  export const inboundSchema = OutputSnmp$inboundSchema;
  /** @deprecated use `OutputSnmp$outboundSchema` instead. */
  export const outboundSchema = OutputSnmp$outboundSchema;
  /** @deprecated use `OutputSnmp$Outbound` instead. */
  export type Outbound = OutputSnmp$Outbound;
}

export function outputSnmpToJSON(outputSnmp: OutputSnmp): string {
  return JSON.stringify(OutputSnmp$outboundSchema.parse(outputSnmp));
}

export function outputSnmpFromJSON(
  jsonString: string,
): SafeParseResult<OutputSnmp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSnmp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSnmp' from JSON`,
  );
}
