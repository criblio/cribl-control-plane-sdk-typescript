/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BranchInfo = {
  id: string;
};

/** @internal */
export const BranchInfo$inboundSchema: z.ZodType<
  BranchInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type BranchInfo$Outbound = {
  id: string;
};

/** @internal */
export const BranchInfo$outboundSchema: z.ZodType<
  BranchInfo$Outbound,
  z.ZodTypeDef,
  BranchInfo
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BranchInfo$ {
  /** @deprecated use `BranchInfo$inboundSchema` instead. */
  export const inboundSchema = BranchInfo$inboundSchema;
  /** @deprecated use `BranchInfo$outboundSchema` instead. */
  export const outboundSchema = BranchInfo$outboundSchema;
  /** @deprecated use `BranchInfo$Outbound` instead. */
  export type Outbound = BranchInfo$Outbound;
}

export function branchInfoToJSON(branchInfo: BranchInfo): string {
  return JSON.stringify(BranchInfo$outboundSchema.parse(branchInfo));
}

export function branchInfoFromJSON(
  jsonString: string,
): SafeParseResult<BranchInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BranchInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BranchInfo' from JSON`,
  );
}
