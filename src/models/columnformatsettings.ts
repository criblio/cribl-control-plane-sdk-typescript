/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ColumnFormatSettings = {
  palette: { [k: string]: any };
  precision: { [k: string]: any };
  prefix: { [k: string]: any };
  suffix: { [k: string]: any };
};

/** @internal */
export const ColumnFormatSettings$inboundSchema: z.ZodType<
  ColumnFormatSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  palette: z.record(z.any()),
  precision: z.record(z.any()),
  prefix: z.record(z.any()),
  suffix: z.record(z.any()),
});

/** @internal */
export type ColumnFormatSettings$Outbound = {
  palette: { [k: string]: any };
  precision: { [k: string]: any };
  prefix: { [k: string]: any };
  suffix: { [k: string]: any };
};

/** @internal */
export const ColumnFormatSettings$outboundSchema: z.ZodType<
  ColumnFormatSettings$Outbound,
  z.ZodTypeDef,
  ColumnFormatSettings
> = z.object({
  palette: z.record(z.any()),
  precision: z.record(z.any()),
  prefix: z.record(z.any()),
  suffix: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ColumnFormatSettings$ {
  /** @deprecated use `ColumnFormatSettings$inboundSchema` instead. */
  export const inboundSchema = ColumnFormatSettings$inboundSchema;
  /** @deprecated use `ColumnFormatSettings$outboundSchema` instead. */
  export const outboundSchema = ColumnFormatSettings$outboundSchema;
  /** @deprecated use `ColumnFormatSettings$Outbound` instead. */
  export type Outbound = ColumnFormatSettings$Outbound;
}

export function columnFormatSettingsToJSON(
  columnFormatSettings: ColumnFormatSettings,
): string {
  return JSON.stringify(
    ColumnFormatSettings$outboundSchema.parse(columnFormatSettings),
  );
}

export function columnFormatSettingsFromJSON(
  jsonString: string,
): SafeParseResult<ColumnFormatSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ColumnFormatSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ColumnFormatSettings' from JSON`,
  );
}
