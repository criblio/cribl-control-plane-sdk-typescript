/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MappingRulesetEvalMappingFunction,
  MappingRulesetEvalMappingFunction$inboundSchema,
  MappingRulesetEvalMappingFunction$Outbound,
  MappingRulesetEvalMappingFunction$outboundSchema,
} from "./mappingrulesetevalmappingfunction.js";
import {
  MappingRulesetGenericMappingFunction,
  MappingRulesetGenericMappingFunction$inboundSchema,
  MappingRulesetGenericMappingFunction$Outbound,
  MappingRulesetGenericMappingFunction$outboundSchema,
} from "./mappingrulesetgenericmappingfunction.js";

export type FunctionT =
  | MappingRulesetEvalMappingFunction
  | MappingRulesetGenericMappingFunction;

export type MappingRulesetConf = {
  /**
   * List of functions to pass data through
   */
  functions?:
    | Array<
      MappingRulesetEvalMappingFunction | MappingRulesetGenericMappingFunction
    >
    | undefined;
};

export type MappingRuleset = {
  id: string;
  conf?: MappingRulesetConf | undefined;
  active?: boolean | undefined;
};

/** @internal */
export const FunctionT$inboundSchema: z.ZodType<
  FunctionT,
  z.ZodTypeDef,
  unknown
> = z.union([
  MappingRulesetEvalMappingFunction$inboundSchema,
  MappingRulesetGenericMappingFunction$inboundSchema,
]);

/** @internal */
export type FunctionT$Outbound =
  | MappingRulesetEvalMappingFunction$Outbound
  | MappingRulesetGenericMappingFunction$Outbound;

/** @internal */
export const FunctionT$outboundSchema: z.ZodType<
  FunctionT$Outbound,
  z.ZodTypeDef,
  FunctionT
> = z.union([
  MappingRulesetEvalMappingFunction$outboundSchema,
  MappingRulesetGenericMappingFunction$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionT$ {
  /** @deprecated use `FunctionT$inboundSchema` instead. */
  export const inboundSchema = FunctionT$inboundSchema;
  /** @deprecated use `FunctionT$outboundSchema` instead. */
  export const outboundSchema = FunctionT$outboundSchema;
  /** @deprecated use `FunctionT$Outbound` instead. */
  export type Outbound = FunctionT$Outbound;
}

export function functionToJSON(functionT: FunctionT): string {
  return JSON.stringify(FunctionT$outboundSchema.parse(functionT));
}

export function functionFromJSON(
  jsonString: string,
): SafeParseResult<FunctionT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionT' from JSON`,
  );
}

/** @internal */
export const MappingRulesetConf$inboundSchema: z.ZodType<
  MappingRulesetConf,
  z.ZodTypeDef,
  unknown
> = z.object({
  functions: z.array(
    z.union([
      MappingRulesetEvalMappingFunction$inboundSchema,
      MappingRulesetGenericMappingFunction$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type MappingRulesetConf$Outbound = {
  functions?:
    | Array<
      | MappingRulesetEvalMappingFunction$Outbound
      | MappingRulesetGenericMappingFunction$Outbound
    >
    | undefined;
};

/** @internal */
export const MappingRulesetConf$outboundSchema: z.ZodType<
  MappingRulesetConf$Outbound,
  z.ZodTypeDef,
  MappingRulesetConf
> = z.object({
  functions: z.array(
    z.union([
      MappingRulesetEvalMappingFunction$outboundSchema,
      MappingRulesetGenericMappingFunction$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingRulesetConf$ {
  /** @deprecated use `MappingRulesetConf$inboundSchema` instead. */
  export const inboundSchema = MappingRulesetConf$inboundSchema;
  /** @deprecated use `MappingRulesetConf$outboundSchema` instead. */
  export const outboundSchema = MappingRulesetConf$outboundSchema;
  /** @deprecated use `MappingRulesetConf$Outbound` instead. */
  export type Outbound = MappingRulesetConf$Outbound;
}

export function mappingRulesetConfToJSON(
  mappingRulesetConf: MappingRulesetConf,
): string {
  return JSON.stringify(
    MappingRulesetConf$outboundSchema.parse(mappingRulesetConf),
  );
}

export function mappingRulesetConfFromJSON(
  jsonString: string,
): SafeParseResult<MappingRulesetConf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MappingRulesetConf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MappingRulesetConf' from JSON`,
  );
}

/** @internal */
export const MappingRuleset$inboundSchema: z.ZodType<
  MappingRuleset,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  conf: z.lazy(() => MappingRulesetConf$inboundSchema).optional(),
  active: z.boolean().optional(),
});

/** @internal */
export type MappingRuleset$Outbound = {
  id: string;
  conf?: MappingRulesetConf$Outbound | undefined;
  active?: boolean | undefined;
};

/** @internal */
export const MappingRuleset$outboundSchema: z.ZodType<
  MappingRuleset$Outbound,
  z.ZodTypeDef,
  MappingRuleset
> = z.object({
  id: z.string(),
  conf: z.lazy(() => MappingRulesetConf$outboundSchema).optional(),
  active: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingRuleset$ {
  /** @deprecated use `MappingRuleset$inboundSchema` instead. */
  export const inboundSchema = MappingRuleset$inboundSchema;
  /** @deprecated use `MappingRuleset$outboundSchema` instead. */
  export const outboundSchema = MappingRuleset$outboundSchema;
  /** @deprecated use `MappingRuleset$Outbound` instead. */
  export type Outbound = MappingRuleset$Outbound;
}

export function mappingRulesetToJSON(mappingRuleset: MappingRuleset): string {
  return JSON.stringify(MappingRuleset$outboundSchema.parse(mappingRuleset));
}

export function mappingRulesetFromJSON(
  jsonString: string,
): SafeParseResult<MappingRuleset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MappingRuleset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MappingRuleset' from JSON`,
  );
}
