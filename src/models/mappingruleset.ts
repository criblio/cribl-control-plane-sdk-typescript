/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Unique function identifier. Must always be 'eval'.
 */
export const Id = {
  Eval: "eval",
} as const;
/**
 * Unique function identifier. Must always be 'eval'.
 */
export type Id = OpenEnum<typeof Id>;

export type Add = {
  name: string;
  value: string;
};

export type FunctionConf = {
  /**
   * Fields to add in this eval function
   */
  add: Array<Add>;
};

export type FunctionT = {
  /**
   * Unique function identifier. Must always be 'eval'.
   */
  id: Id;
  /**
   * Filter expression controlling when this function runs
   */
  filter: string;
  /**
   * Optional function description
   */
  description?: string | undefined;
  /**
   * Indicates whether the function is disabled
   */
  disabled?: boolean | undefined;
  /**
   * Marks whether this function is final in the chain. Must always be true.
   */
  final: boolean;
  conf: FunctionConf;
};

export type MappingRulesetConf = {
  /**
   * List of functions to pass data through
   */
  functions?: Array<FunctionT> | undefined;
};

export type MappingRuleset = {
  id: string;
  conf?: MappingRulesetConf | undefined;
  active?: boolean | undefined;
};

/** @internal */
export const Id$inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Id),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Id$outboundSchema: z.ZodType<Id, z.ZodTypeDef, Id> = z.union([
  z.nativeEnum(Id),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
  /** @deprecated use `Id$inboundSchema` instead. */
  export const inboundSchema = Id$inboundSchema;
  /** @deprecated use `Id$outboundSchema` instead. */
  export const outboundSchema = Id$outboundSchema;
}

/** @internal */
export const Add$inboundSchema: z.ZodType<Add, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    value: z.string(),
  });

/** @internal */
export type Add$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const Add$outboundSchema: z.ZodType<Add$Outbound, z.ZodTypeDef, Add> = z
  .object({
    name: z.string(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Add$ {
  /** @deprecated use `Add$inboundSchema` instead. */
  export const inboundSchema = Add$inboundSchema;
  /** @deprecated use `Add$outboundSchema` instead. */
  export const outboundSchema = Add$outboundSchema;
  /** @deprecated use `Add$Outbound` instead. */
  export type Outbound = Add$Outbound;
}

export function addToJSON(add: Add): string {
  return JSON.stringify(Add$outboundSchema.parse(add));
}

export function addFromJSON(
  jsonString: string,
): SafeParseResult<Add, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Add$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Add' from JSON`,
  );
}

/** @internal */
export const FunctionConf$inboundSchema: z.ZodType<
  FunctionConf,
  z.ZodTypeDef,
  unknown
> = z.object({
  add: z.array(z.lazy(() => Add$inboundSchema)),
});

/** @internal */
export type FunctionConf$Outbound = {
  add: Array<Add$Outbound>;
};

/** @internal */
export const FunctionConf$outboundSchema: z.ZodType<
  FunctionConf$Outbound,
  z.ZodTypeDef,
  FunctionConf
> = z.object({
  add: z.array(z.lazy(() => Add$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionConf$ {
  /** @deprecated use `FunctionConf$inboundSchema` instead. */
  export const inboundSchema = FunctionConf$inboundSchema;
  /** @deprecated use `FunctionConf$outboundSchema` instead. */
  export const outboundSchema = FunctionConf$outboundSchema;
  /** @deprecated use `FunctionConf$Outbound` instead. */
  export type Outbound = FunctionConf$Outbound;
}

export function functionConfToJSON(functionConf: FunctionConf): string {
  return JSON.stringify(FunctionConf$outboundSchema.parse(functionConf));
}

export function functionConfFromJSON(
  jsonString: string,
): SafeParseResult<FunctionConf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionConf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionConf' from JSON`,
  );
}

/** @internal */
export const FunctionT$inboundSchema: z.ZodType<
  FunctionT,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: Id$inboundSchema,
  filter: z.string(),
  description: z.string().optional(),
  disabled: z.boolean().optional(),
  final: z.boolean(),
  conf: z.lazy(() => FunctionConf$inboundSchema),
});

/** @internal */
export type FunctionT$Outbound = {
  id: string;
  filter: string;
  description?: string | undefined;
  disabled?: boolean | undefined;
  final: boolean;
  conf: FunctionConf$Outbound;
};

/** @internal */
export const FunctionT$outboundSchema: z.ZodType<
  FunctionT$Outbound,
  z.ZodTypeDef,
  FunctionT
> = z.object({
  id: Id$outboundSchema,
  filter: z.string(),
  description: z.string().optional(),
  disabled: z.boolean().optional(),
  final: z.boolean(),
  conf: z.lazy(() => FunctionConf$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionT$ {
  /** @deprecated use `FunctionT$inboundSchema` instead. */
  export const inboundSchema = FunctionT$inboundSchema;
  /** @deprecated use `FunctionT$outboundSchema` instead. */
  export const outboundSchema = FunctionT$outboundSchema;
  /** @deprecated use `FunctionT$Outbound` instead. */
  export type Outbound = FunctionT$Outbound;
}

export function functionToJSON(functionT: FunctionT): string {
  return JSON.stringify(FunctionT$outboundSchema.parse(functionT));
}

export function functionFromJSON(
  jsonString: string,
): SafeParseResult<FunctionT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionT' from JSON`,
  );
}

/** @internal */
export const MappingRulesetConf$inboundSchema: z.ZodType<
  MappingRulesetConf,
  z.ZodTypeDef,
  unknown
> = z.object({
  functions: z.array(z.lazy(() => FunctionT$inboundSchema)).optional(),
});

/** @internal */
export type MappingRulesetConf$Outbound = {
  functions?: Array<FunctionT$Outbound> | undefined;
};

/** @internal */
export const MappingRulesetConf$outboundSchema: z.ZodType<
  MappingRulesetConf$Outbound,
  z.ZodTypeDef,
  MappingRulesetConf
> = z.object({
  functions: z.array(z.lazy(() => FunctionT$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingRulesetConf$ {
  /** @deprecated use `MappingRulesetConf$inboundSchema` instead. */
  export const inboundSchema = MappingRulesetConf$inboundSchema;
  /** @deprecated use `MappingRulesetConf$outboundSchema` instead. */
  export const outboundSchema = MappingRulesetConf$outboundSchema;
  /** @deprecated use `MappingRulesetConf$Outbound` instead. */
  export type Outbound = MappingRulesetConf$Outbound;
}

export function mappingRulesetConfToJSON(
  mappingRulesetConf: MappingRulesetConf,
): string {
  return JSON.stringify(
    MappingRulesetConf$outboundSchema.parse(mappingRulesetConf),
  );
}

export function mappingRulesetConfFromJSON(
  jsonString: string,
): SafeParseResult<MappingRulesetConf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MappingRulesetConf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MappingRulesetConf' from JSON`,
  );
}

/** @internal */
export const MappingRuleset$inboundSchema: z.ZodType<
  MappingRuleset,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  conf: z.lazy(() => MappingRulesetConf$inboundSchema).optional(),
  active: z.boolean().optional(),
});

/** @internal */
export type MappingRuleset$Outbound = {
  id: string;
  conf?: MappingRulesetConf$Outbound | undefined;
  active?: boolean | undefined;
};

/** @internal */
export const MappingRuleset$outboundSchema: z.ZodType<
  MappingRuleset$Outbound,
  z.ZodTypeDef,
  MappingRuleset
> = z.object({
  id: z.string(),
  conf: z.lazy(() => MappingRulesetConf$outboundSchema).optional(),
  active: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingRuleset$ {
  /** @deprecated use `MappingRuleset$inboundSchema` instead. */
  export const inboundSchema = MappingRuleset$inboundSchema;
  /** @deprecated use `MappingRuleset$outboundSchema` instead. */
  export const outboundSchema = MappingRuleset$outboundSchema;
  /** @deprecated use `MappingRuleset$Outbound` instead. */
  export type Outbound = MappingRuleset$Outbound;
}

export function mappingRulesetToJSON(mappingRuleset: MappingRuleset): string {
  return JSON.stringify(MappingRuleset$outboundSchema.parse(mappingRuleset));
}

export function mappingRulesetFromJSON(
  jsonString: string,
): SafeParseResult<MappingRuleset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MappingRuleset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MappingRuleset' from JSON`,
  );
}
