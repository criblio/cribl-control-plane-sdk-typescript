/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ConfigGroupLookupsLookup = {
  deployedVersion?: string | undefined;
  file: string;
  version?: string | undefined;
};

export type ConfigGroupLookups = {
  context: string;
  lookups: Array<ConfigGroupLookupsLookup>;
};

/** @internal */
export const ConfigGroupLookupsLookup$inboundSchema: z.ZodType<
  ConfigGroupLookupsLookup,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployedVersion: z.string().optional(),
  file: z.string(),
  version: z.string().optional(),
});

/** @internal */
export type ConfigGroupLookupsLookup$Outbound = {
  deployedVersion?: string | undefined;
  file: string;
  version?: string | undefined;
};

/** @internal */
export const ConfigGroupLookupsLookup$outboundSchema: z.ZodType<
  ConfigGroupLookupsLookup$Outbound,
  z.ZodTypeDef,
  ConfigGroupLookupsLookup
> = z.object({
  deployedVersion: z.string().optional(),
  file: z.string(),
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigGroupLookupsLookup$ {
  /** @deprecated use `ConfigGroupLookupsLookup$inboundSchema` instead. */
  export const inboundSchema = ConfigGroupLookupsLookup$inboundSchema;
  /** @deprecated use `ConfigGroupLookupsLookup$outboundSchema` instead. */
  export const outboundSchema = ConfigGroupLookupsLookup$outboundSchema;
  /** @deprecated use `ConfigGroupLookupsLookup$Outbound` instead. */
  export type Outbound = ConfigGroupLookupsLookup$Outbound;
}

export function configGroupLookupsLookupToJSON(
  configGroupLookupsLookup: ConfigGroupLookupsLookup,
): string {
  return JSON.stringify(
    ConfigGroupLookupsLookup$outboundSchema.parse(configGroupLookupsLookup),
  );
}

export function configGroupLookupsLookupFromJSON(
  jsonString: string,
): SafeParseResult<ConfigGroupLookupsLookup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigGroupLookupsLookup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigGroupLookupsLookup' from JSON`,
  );
}

/** @internal */
export const ConfigGroupLookups$inboundSchema: z.ZodType<
  ConfigGroupLookups,
  z.ZodTypeDef,
  unknown
> = z.object({
  context: z.string(),
  lookups: z.array(z.lazy(() => ConfigGroupLookupsLookup$inboundSchema)),
});

/** @internal */
export type ConfigGroupLookups$Outbound = {
  context: string;
  lookups: Array<ConfigGroupLookupsLookup$Outbound>;
};

/** @internal */
export const ConfigGroupLookups$outboundSchema: z.ZodType<
  ConfigGroupLookups$Outbound,
  z.ZodTypeDef,
  ConfigGroupLookups
> = z.object({
  context: z.string(),
  lookups: z.array(z.lazy(() => ConfigGroupLookupsLookup$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigGroupLookups$ {
  /** @deprecated use `ConfigGroupLookups$inboundSchema` instead. */
  export const inboundSchema = ConfigGroupLookups$inboundSchema;
  /** @deprecated use `ConfigGroupLookups$outboundSchema` instead. */
  export const outboundSchema = ConfigGroupLookups$outboundSchema;
  /** @deprecated use `ConfigGroupLookups$Outbound` instead. */
  export type Outbound = ConfigGroupLookups$Outbound;
}

export function configGroupLookupsToJSON(
  configGroupLookups: ConfigGroupLookups,
): string {
  return JSON.stringify(
    ConfigGroupLookups$outboundSchema.parse(configGroupLookups),
  );
}

export function configGroupLookupsFromJSON(
  jsonString: string,
): SafeParseResult<ConfigGroupLookups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigGroupLookups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigGroupLookups' from JSON`,
  );
}
