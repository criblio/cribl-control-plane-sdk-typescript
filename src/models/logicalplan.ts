/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LogicalPlanNodeType,
  LogicalPlanNodeType$inboundSchema,
  LogicalPlanNodeType$outboundSchema,
} from "./logicalplannodetype.js";

export type LogicalPlan = {
  isPreviewableOperation?: boolean | undefined;
  type: LogicalPlanNodeType;
};

/** @internal */
export const LogicalPlan$inboundSchema: z.ZodType<
  LogicalPlan,
  z.ZodTypeDef,
  unknown
> = z.object({
  isPreviewableOperation: z.boolean().optional(),
  type: LogicalPlanNodeType$inboundSchema,
});

/** @internal */
export type LogicalPlan$Outbound = {
  isPreviewableOperation?: boolean | undefined;
  type: string;
};

/** @internal */
export const LogicalPlan$outboundSchema: z.ZodType<
  LogicalPlan$Outbound,
  z.ZodTypeDef,
  LogicalPlan
> = z.object({
  isPreviewableOperation: z.boolean().optional(),
  type: LogicalPlanNodeType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogicalPlan$ {
  /** @deprecated use `LogicalPlan$inboundSchema` instead. */
  export const inboundSchema = LogicalPlan$inboundSchema;
  /** @deprecated use `LogicalPlan$outboundSchema` instead. */
  export const outboundSchema = LogicalPlan$outboundSchema;
  /** @deprecated use `LogicalPlan$Outbound` instead. */
  export type Outbound = LogicalPlan$Outbound;
}

export function logicalPlanToJSON(logicalPlan: LogicalPlan): string {
  return JSON.stringify(LogicalPlan$outboundSchema.parse(logicalPlan));
}

export function logicalPlanFromJSON(
  jsonString: string,
): SafeParseResult<LogicalPlan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogicalPlan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogicalPlan' from JSON`,
  );
}
