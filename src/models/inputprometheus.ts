/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputPrometheusType = {
  Prometheus: "prometheus",
} as const;
export type InputPrometheusType = OpenEnum<typeof InputPrometheusType>;

export type InputPrometheusConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputPrometheusMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputPrometheusMode = OpenEnum<typeof InputPrometheusMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputPrometheusCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputPrometheusCompression = OpenEnum<
  typeof InputPrometheusCompression
>;

export type InputPrometheusPqControls = {};

export type InputPrometheusPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputPrometheusMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputPrometheusCompression | undefined;
  pqControls?: InputPrometheusPqControls | undefined;
};

/**
 * Target discovery mechanism. Use static to manually enter a list of targets.
 */
export const InputPrometheusDiscoveryType = {
  Static: "static",
  Dns: "dns",
  Ec2: "ec2",
} as const;
/**
 * Target discovery mechanism. Use static to manually enter a list of targets.
 */
export type InputPrometheusDiscoveryType = OpenEnum<
  typeof InputPrometheusDiscoveryType
>;

/**
 * Collector runtime Log Level
 */
export const InputPrometheusLogLevel = {
  Error: "error",
  Warn: "warn",
  Info: "info",
  Debug: "debug",
} as const;
/**
 * Collector runtime Log Level
 */
export type InputPrometheusLogLevel = OpenEnum<typeof InputPrometheusLogLevel>;

export type InputPrometheusMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

/**
 * Enter credentials directly, or select a stored secret
 */
export const InputPrometheusAuthTypeAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Enter credentials directly, or select a stored secret
 */
export type InputPrometheusAuthTypeAuthenticationMethod = OpenEnum<
  typeof InputPrometheusAuthTypeAuthenticationMethod
>;

/**
 * DNS Record type to resolve
 */
export const InputPrometheusRecordType = {
  Srv: "SRV",
  A: "A",
  Aaaa: "AAAA",
} as const;
/**
 * DNS Record type to resolve
 */
export type InputPrometheusRecordType = OpenEnum<
  typeof InputPrometheusRecordType
>;

/**
 * Protocol to use when collecting metrics
 */
export const MetricsProtocol = {
  Http: "http",
  Https: "https",
} as const;
/**
 * Protocol to use when collecting metrics
 */
export type MetricsProtocol = OpenEnum<typeof MetricsProtocol>;

export type InputPrometheusSearchFilter = {
  /**
   * Search filter attribute name, see: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html for more information. Attributes can be manually entered if not present in the drop down list
   */
  name: string;
  /**
   * Search Filter Values, if empty only "running" EC2 instances will be returned
   */
  values: Array<string>;
};

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const InputPrometheusAwsAuthenticationMethodAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type InputPrometheusAwsAuthenticationMethodAuthenticationMethod =
  OpenEnum<typeof InputPrometheusAwsAuthenticationMethodAuthenticationMethod>;

/**
 * Signature version to use for signing EC2 requests
 */
export const InputPrometheusSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing EC2 requests
 */
export type InputPrometheusSignatureVersion = OpenEnum<
  typeof InputPrometheusSignatureVersion
>;

export type InputPrometheus = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputPrometheusType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputPrometheusConnection> | undefined;
  pq?: InputPrometheusPq | undefined;
  /**
   * Other dimensions to include in events
   */
  dimensionList?: Array<string> | undefined;
  /**
   * Target discovery mechanism. Use static to manually enter a list of targets.
   */
  discoveryType?: InputPrometheusDiscoveryType | undefined;
  /**
   * How often in minutes to scrape targets for metrics, 60 must be evenly divisible by the value or save will fail.
   */
  interval?: number | undefined;
  /**
   * Collector runtime Log Level
   */
  logLevel?: InputPrometheusLogLevel | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * How often workers should check in with the scheduler to keep job subscription alive
   */
  keepAliveTime?: number | undefined;
  /**
   * Maximum time the job is allowed to run (e.g., 30, 45s or 15m). Units are seconds, if not specified. Enter 0 for unlimited time.
   */
  jobTimeout?: string | undefined;
  /**
   * The number of Keep Alive Time periods before an inactive worker will have its job subscription revoked.
   */
  maxMissedKeepAlives?: number | undefined;
  /**
   * Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
   */
  ttl?: string | undefined;
  /**
   * When enabled, this job's artifacts are not counted toward the Worker Group's finished job artifacts limit. Artifacts will be removed only after the Collector's configured time to live.
   */
  ignoreGroupJobsLimit?: boolean | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputPrometheusMetadatum> | undefined;
  /**
   * Enter credentials directly, or select a stored secret
   */
  authType?: InputPrometheusAuthTypeAuthenticationMethod | undefined;
  description?: string | undefined;
  /**
   * List of Prometheus targets to pull metrics from. Values can be in URL or host[:port] format. For example: http://localhost:9090/metrics, localhost:9090, or localhost. In cases where just host[:port] is specified, the endpoint will resolve to 'http://host[:port]/metrics'.
   */
  targetList?: Array<string> | undefined;
  /**
   * List of DNS names to resolve
   */
  nameList?: Array<string> | undefined;
  /**
   * DNS Record type to resolve
   */
  recordType?: InputPrometheusRecordType | undefined;
  /**
   * Protocol to use when collecting metrics
   */
  scrapeProtocol?: MetricsProtocol | undefined;
  /**
   * Path to use when collecting metrics from discovered targets
   */
  scrapePath?: string | undefined;
  /**
   * Use public IP address for discovered targets. Set to false if the private IP address should be used.
   */
  usePublicIp?: boolean | undefined;
  /**
   * The port number in the metrics URL for discovered targets.
   */
  scrapePort?: number | undefined;
  /**
   * EC2 Instance Search Filter
   */
  searchFilter?: Array<InputPrometheusSearchFilter> | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?:
    | InputPrometheusAwsAuthenticationMethodAuthenticationMethod
    | undefined;
  awsSecretKey?: string | undefined;
  /**
   * Region where the EC2 is located
   */
  region?: string | undefined;
  /**
   * EC2 service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to EC2-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing EC2 requests
   */
  signatureVersion?: InputPrometheusSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Use Assume Role credentials to access EC2
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Username for Prometheus Basic authentication
   */
  username?: string | undefined;
  /**
   * Password for Prometheus Basic authentication
   */
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

/** @internal */
export const InputPrometheusType$inboundSchema: z.ZodType<
  InputPrometheusType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusType$outboundSchema: z.ZodType<
  InputPrometheusType,
  z.ZodTypeDef,
  InputPrometheusType
> = z.union([
  z.nativeEnum(InputPrometheusType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusType$ {
  /** @deprecated use `InputPrometheusType$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusType$inboundSchema;
  /** @deprecated use `InputPrometheusType$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusType$outboundSchema;
}

/** @internal */
export const InputPrometheusConnection$inboundSchema: z.ZodType<
  InputPrometheusConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputPrometheusConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputPrometheusConnection$outboundSchema: z.ZodType<
  InputPrometheusConnection$Outbound,
  z.ZodTypeDef,
  InputPrometheusConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusConnection$ {
  /** @deprecated use `InputPrometheusConnection$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusConnection$inboundSchema;
  /** @deprecated use `InputPrometheusConnection$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusConnection$outboundSchema;
  /** @deprecated use `InputPrometheusConnection$Outbound` instead. */
  export type Outbound = InputPrometheusConnection$Outbound;
}

export function inputPrometheusConnectionToJSON(
  inputPrometheusConnection: InputPrometheusConnection,
): string {
  return JSON.stringify(
    InputPrometheusConnection$outboundSchema.parse(inputPrometheusConnection),
  );
}

export function inputPrometheusConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusConnection' from JSON`,
  );
}

/** @internal */
export const InputPrometheusMode$inboundSchema: z.ZodType<
  InputPrometheusMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusMode$outboundSchema: z.ZodType<
  InputPrometheusMode,
  z.ZodTypeDef,
  InputPrometheusMode
> = z.union([
  z.nativeEnum(InputPrometheusMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusMode$ {
  /** @deprecated use `InputPrometheusMode$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusMode$inboundSchema;
  /** @deprecated use `InputPrometheusMode$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusMode$outboundSchema;
}

/** @internal */
export const InputPrometheusCompression$inboundSchema: z.ZodType<
  InputPrometheusCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusCompression$outboundSchema: z.ZodType<
  InputPrometheusCompression,
  z.ZodTypeDef,
  InputPrometheusCompression
> = z.union([
  z.nativeEnum(InputPrometheusCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusCompression$ {
  /** @deprecated use `InputPrometheusCompression$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusCompression$inboundSchema;
  /** @deprecated use `InputPrometheusCompression$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusCompression$outboundSchema;
}

/** @internal */
export const InputPrometheusPqControls$inboundSchema: z.ZodType<
  InputPrometheusPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputPrometheusPqControls$Outbound = {};

/** @internal */
export const InputPrometheusPqControls$outboundSchema: z.ZodType<
  InputPrometheusPqControls$Outbound,
  z.ZodTypeDef,
  InputPrometheusPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusPqControls$ {
  /** @deprecated use `InputPrometheusPqControls$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusPqControls$inboundSchema;
  /** @deprecated use `InputPrometheusPqControls$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusPqControls$outboundSchema;
  /** @deprecated use `InputPrometheusPqControls$Outbound` instead. */
  export type Outbound = InputPrometheusPqControls$Outbound;
}

export function inputPrometheusPqControlsToJSON(
  inputPrometheusPqControls: InputPrometheusPqControls,
): string {
  return JSON.stringify(
    InputPrometheusPqControls$outboundSchema.parse(inputPrometheusPqControls),
  );
}

export function inputPrometheusPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusPqControls' from JSON`,
  );
}

/** @internal */
export const InputPrometheusPq$inboundSchema: z.ZodType<
  InputPrometheusPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputPrometheusMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputPrometheusCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputPrometheusPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputPrometheusPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputPrometheusPqControls$Outbound | undefined;
};

/** @internal */
export const InputPrometheusPq$outboundSchema: z.ZodType<
  InputPrometheusPq$Outbound,
  z.ZodTypeDef,
  InputPrometheusPq
> = z.object({
  mode: InputPrometheusMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputPrometheusCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputPrometheusPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusPq$ {
  /** @deprecated use `InputPrometheusPq$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusPq$inboundSchema;
  /** @deprecated use `InputPrometheusPq$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusPq$outboundSchema;
  /** @deprecated use `InputPrometheusPq$Outbound` instead. */
  export type Outbound = InputPrometheusPq$Outbound;
}

export function inputPrometheusPqToJSON(
  inputPrometheusPq: InputPrometheusPq,
): string {
  return JSON.stringify(
    InputPrometheusPq$outboundSchema.parse(inputPrometheusPq),
  );
}

export function inputPrometheusPqFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusPq' from JSON`,
  );
}

/** @internal */
export const InputPrometheusDiscoveryType$inboundSchema: z.ZodType<
  InputPrometheusDiscoveryType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusDiscoveryType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusDiscoveryType$outboundSchema: z.ZodType<
  InputPrometheusDiscoveryType,
  z.ZodTypeDef,
  InputPrometheusDiscoveryType
> = z.union([
  z.nativeEnum(InputPrometheusDiscoveryType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusDiscoveryType$ {
  /** @deprecated use `InputPrometheusDiscoveryType$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusDiscoveryType$inboundSchema;
  /** @deprecated use `InputPrometheusDiscoveryType$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusDiscoveryType$outboundSchema;
}

/** @internal */
export const InputPrometheusLogLevel$inboundSchema: z.ZodType<
  InputPrometheusLogLevel,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusLogLevel),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusLogLevel$outboundSchema: z.ZodType<
  InputPrometheusLogLevel,
  z.ZodTypeDef,
  InputPrometheusLogLevel
> = z.union([
  z.nativeEnum(InputPrometheusLogLevel),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusLogLevel$ {
  /** @deprecated use `InputPrometheusLogLevel$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusLogLevel$inboundSchema;
  /** @deprecated use `InputPrometheusLogLevel$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusLogLevel$outboundSchema;
}

/** @internal */
export const InputPrometheusMetadatum$inboundSchema: z.ZodType<
  InputPrometheusMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputPrometheusMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputPrometheusMetadatum$outboundSchema: z.ZodType<
  InputPrometheusMetadatum$Outbound,
  z.ZodTypeDef,
  InputPrometheusMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusMetadatum$ {
  /** @deprecated use `InputPrometheusMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusMetadatum$inboundSchema;
  /** @deprecated use `InputPrometheusMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusMetadatum$outboundSchema;
  /** @deprecated use `InputPrometheusMetadatum$Outbound` instead. */
  export type Outbound = InputPrometheusMetadatum$Outbound;
}

export function inputPrometheusMetadatumToJSON(
  inputPrometheusMetadatum: InputPrometheusMetadatum,
): string {
  return JSON.stringify(
    InputPrometheusMetadatum$outboundSchema.parse(inputPrometheusMetadatum),
  );
}

export function inputPrometheusMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusMetadatum' from JSON`,
  );
}

/** @internal */
export const InputPrometheusAuthTypeAuthenticationMethod$inboundSchema:
  z.ZodType<
    InputPrometheusAuthTypeAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(InputPrometheusAuthTypeAuthenticationMethod),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const InputPrometheusAuthTypeAuthenticationMethod$outboundSchema:
  z.ZodType<
    InputPrometheusAuthTypeAuthenticationMethod,
    z.ZodTypeDef,
    InputPrometheusAuthTypeAuthenticationMethod
  > = z.union([
    z.nativeEnum(InputPrometheusAuthTypeAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusAuthTypeAuthenticationMethod$ {
  /** @deprecated use `InputPrometheusAuthTypeAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    InputPrometheusAuthTypeAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputPrometheusAuthTypeAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    InputPrometheusAuthTypeAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputPrometheusRecordType$inboundSchema: z.ZodType<
  InputPrometheusRecordType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusRecordType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusRecordType$outboundSchema: z.ZodType<
  InputPrometheusRecordType,
  z.ZodTypeDef,
  InputPrometheusRecordType
> = z.union([
  z.nativeEnum(InputPrometheusRecordType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRecordType$ {
  /** @deprecated use `InputPrometheusRecordType$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRecordType$inboundSchema;
  /** @deprecated use `InputPrometheusRecordType$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRecordType$outboundSchema;
}

/** @internal */
export const MetricsProtocol$inboundSchema: z.ZodType<
  MetricsProtocol,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(MetricsProtocol),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const MetricsProtocol$outboundSchema: z.ZodType<
  MetricsProtocol,
  z.ZodTypeDef,
  MetricsProtocol
> = z.union([
  z.nativeEnum(MetricsProtocol),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsProtocol$ {
  /** @deprecated use `MetricsProtocol$inboundSchema` instead. */
  export const inboundSchema = MetricsProtocol$inboundSchema;
  /** @deprecated use `MetricsProtocol$outboundSchema` instead. */
  export const outboundSchema = MetricsProtocol$outboundSchema;
}

/** @internal */
export const InputPrometheusSearchFilter$inboundSchema: z.ZodType<
  InputPrometheusSearchFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  Name: z.string(),
  Values: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "Name": "name",
    "Values": "values",
  });
});

/** @internal */
export type InputPrometheusSearchFilter$Outbound = {
  Name: string;
  Values: Array<string>;
};

/** @internal */
export const InputPrometheusSearchFilter$outboundSchema: z.ZodType<
  InputPrometheusSearchFilter$Outbound,
  z.ZodTypeDef,
  InputPrometheusSearchFilter
> = z.object({
  name: z.string(),
  values: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    name: "Name",
    values: "Values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusSearchFilter$ {
  /** @deprecated use `InputPrometheusSearchFilter$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusSearchFilter$inboundSchema;
  /** @deprecated use `InputPrometheusSearchFilter$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusSearchFilter$outboundSchema;
  /** @deprecated use `InputPrometheusSearchFilter$Outbound` instead. */
  export type Outbound = InputPrometheusSearchFilter$Outbound;
}

export function inputPrometheusSearchFilterToJSON(
  inputPrometheusSearchFilter: InputPrometheusSearchFilter,
): string {
  return JSON.stringify(
    InputPrometheusSearchFilter$outboundSchema.parse(
      inputPrometheusSearchFilter,
    ),
  );
}

export function inputPrometheusSearchFilterFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusSearchFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusSearchFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusSearchFilter' from JSON`,
  );
}

/** @internal */
export const InputPrometheusAwsAuthenticationMethodAuthenticationMethod$inboundSchema:
  z.ZodType<
    InputPrometheusAwsAuthenticationMethodAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(InputPrometheusAwsAuthenticationMethodAuthenticationMethod),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const InputPrometheusAwsAuthenticationMethodAuthenticationMethod$outboundSchema:
  z.ZodType<
    InputPrometheusAwsAuthenticationMethodAuthenticationMethod,
    z.ZodTypeDef,
    InputPrometheusAwsAuthenticationMethodAuthenticationMethod
  > = z.union([
    z.nativeEnum(InputPrometheusAwsAuthenticationMethodAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusAwsAuthenticationMethodAuthenticationMethod$ {
  /** @deprecated use `InputPrometheusAwsAuthenticationMethodAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    InputPrometheusAwsAuthenticationMethodAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputPrometheusAwsAuthenticationMethodAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    InputPrometheusAwsAuthenticationMethodAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputPrometheusSignatureVersion$inboundSchema: z.ZodType<
  InputPrometheusSignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusSignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusSignatureVersion$outboundSchema: z.ZodType<
  InputPrometheusSignatureVersion,
  z.ZodTypeDef,
  InputPrometheusSignatureVersion
> = z.union([
  z.nativeEnum(InputPrometheusSignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusSignatureVersion$ {
  /** @deprecated use `InputPrometheusSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusSignatureVersion$inboundSchema;
  /** @deprecated use `InputPrometheusSignatureVersion$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusSignatureVersion$outboundSchema;
}

/** @internal */
export const InputPrometheus$inboundSchema: z.ZodType<
  InputPrometheus,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputPrometheusType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputPrometheusConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputPrometheusPq$inboundSchema).optional(),
  dimensionList: z.array(z.string()).optional(),
  discoveryType: InputPrometheusDiscoveryType$inboundSchema.default("static"),
  interval: z.number().default(15),
  logLevel: InputPrometheusLogLevel$inboundSchema.default("info"),
  rejectUnauthorized: z.boolean().default(true),
  keepAliveTime: z.number().default(30),
  jobTimeout: z.string().default("0"),
  maxMissedKeepAlives: z.number().default(3),
  ttl: z.string().default("4h"),
  ignoreGroupJobsLimit: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputPrometheusMetadatum$inboundSchema))
    .optional(),
  authType: InputPrometheusAuthTypeAuthenticationMethod$inboundSchema.default(
    "manual",
  ),
  description: z.string().optional(),
  targetList: z.array(z.string()).optional(),
  nameList: z.array(z.string()).optional(),
  recordType: InputPrometheusRecordType$inboundSchema.default("SRV"),
  scrapeProtocol: MetricsProtocol$inboundSchema.default("http"),
  scrapePath: z.string().default("/metrics"),
  usePublicIp: z.boolean().default(true),
  scrapePort: z.number().default(9090),
  searchFilter: z.array(z.lazy(() => InputPrometheusSearchFilter$inboundSchema))
    .optional(),
  awsAuthenticationMethod:
    InputPrometheusAwsAuthenticationMethodAuthenticationMethod$inboundSchema
      .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputPrometheusSignatureVersion$inboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type InputPrometheus$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputPrometheusConnection$Outbound> | undefined;
  pq?: InputPrometheusPq$Outbound | undefined;
  dimensionList?: Array<string> | undefined;
  discoveryType: string;
  interval: number;
  logLevel: string;
  rejectUnauthorized: boolean;
  keepAliveTime: number;
  jobTimeout: string;
  maxMissedKeepAlives: number;
  ttl: string;
  ignoreGroupJobsLimit: boolean;
  metadata?: Array<InputPrometheusMetadatum$Outbound> | undefined;
  authType: string;
  description?: string | undefined;
  targetList?: Array<string> | undefined;
  nameList?: Array<string> | undefined;
  recordType: string;
  scrapeProtocol: string;
  scrapePath: string;
  usePublicIp: boolean;
  scrapePort: number;
  searchFilter?: Array<InputPrometheusSearchFilter$Outbound> | undefined;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region?: string | undefined;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const InputPrometheus$outboundSchema: z.ZodType<
  InputPrometheus$Outbound,
  z.ZodTypeDef,
  InputPrometheus
> = z.object({
  id: z.string().optional(),
  type: InputPrometheusType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputPrometheusConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputPrometheusPq$outboundSchema).optional(),
  dimensionList: z.array(z.string()).optional(),
  discoveryType: InputPrometheusDiscoveryType$outboundSchema.default("static"),
  interval: z.number().default(15),
  logLevel: InputPrometheusLogLevel$outboundSchema.default("info"),
  rejectUnauthorized: z.boolean().default(true),
  keepAliveTime: z.number().default(30),
  jobTimeout: z.string().default("0"),
  maxMissedKeepAlives: z.number().default(3),
  ttl: z.string().default("4h"),
  ignoreGroupJobsLimit: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputPrometheusMetadatum$outboundSchema))
    .optional(),
  authType: InputPrometheusAuthTypeAuthenticationMethod$outboundSchema.default(
    "manual",
  ),
  description: z.string().optional(),
  targetList: z.array(z.string()).optional(),
  nameList: z.array(z.string()).optional(),
  recordType: InputPrometheusRecordType$outboundSchema.default("SRV"),
  scrapeProtocol: MetricsProtocol$outboundSchema.default("http"),
  scrapePath: z.string().default("/metrics"),
  usePublicIp: z.boolean().default(true),
  scrapePort: z.number().default(9090),
  searchFilter: z.array(
    z.lazy(() => InputPrometheusSearchFilter$outboundSchema),
  ).optional(),
  awsAuthenticationMethod:
    InputPrometheusAwsAuthenticationMethodAuthenticationMethod$outboundSchema
      .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputPrometheusSignatureVersion$outboundSchema.default(
    "v4",
  ),
  reuseConnections: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheus$ {
  /** @deprecated use `InputPrometheus$inboundSchema` instead. */
  export const inboundSchema = InputPrometheus$inboundSchema;
  /** @deprecated use `InputPrometheus$outboundSchema` instead. */
  export const outboundSchema = InputPrometheus$outboundSchema;
  /** @deprecated use `InputPrometheus$Outbound` instead. */
  export type Outbound = InputPrometheus$Outbound;
}

export function inputPrometheusToJSON(
  inputPrometheus: InputPrometheus,
): string {
  return JSON.stringify(InputPrometheus$outboundSchema.parse(inputPrometheus));
}

export function inputPrometheusFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheus' from JSON`,
  );
}
