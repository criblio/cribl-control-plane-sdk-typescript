/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputHoneycombType = {
  Honeycomb: "honeycomb",
} as const;
export type OutputHoneycombType = ClosedEnum<typeof OutputHoneycombType>;

export type OutputHoneycombExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputHoneycombFailedRequestLoggingMode = {
  /**
   * Payload
   */
  Payload: "payload",
  /**
   * Payload + Headers
   */
  PayloadAndHeaders: "payloadAndHeaders",
  /**
   * None
   */
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputHoneycombFailedRequestLoggingMode = OpenEnum<
  typeof OutputHoneycombFailedRequestLoggingMode
>;

export type OutputHoneycombResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputHoneycombTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputHoneycombBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputHoneycombBackpressureBehavior = OpenEnum<
  typeof OutputHoneycombBackpressureBehavior
>;

/**
 * Enter API key directly, or select a stored secret
 */
export const OutputHoneycombAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Enter API key directly, or select a stored secret
 */
export type OutputHoneycombAuthenticationMethod = OpenEnum<
  typeof OutputHoneycombAuthenticationMethod
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputHoneycombCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputHoneycombCompression = OpenEnum<
  typeof OutputHoneycombCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputHoneycombQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputHoneycombQueueFullBehavior = OpenEnum<
  typeof OutputHoneycombQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputHoneycombMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Backpressure: "backpressure",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputHoneycombMode = OpenEnum<typeof OutputHoneycombMode>;

export type OutputHoneycombPqControls = {};

export type OutputHoneycomb = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputHoneycombType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Name of the dataset to send events to â€“ e.g., observability
   */
  dataset: string;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputHoneycombExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputHoneycombFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputHoneycombResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?: OutputHoneycombTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputHoneycombBackpressureBehavior | undefined;
  /**
   * Enter API key directly, or select a stored secret
   */
  authType?: OutputHoneycombAuthenticationMethod | undefined;
  description?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputHoneycombCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputHoneycombQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputHoneycombMode | undefined;
  pqControls?: OutputHoneycombPqControls | undefined;
  /**
   * Team API key where the dataset belongs
   */
  team?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
};

/** @internal */
export const OutputHoneycombType$inboundSchema: z.ZodNativeEnum<
  typeof OutputHoneycombType
> = z.nativeEnum(OutputHoneycombType);

/** @internal */
export const OutputHoneycombType$outboundSchema: z.ZodNativeEnum<
  typeof OutputHoneycombType
> = OutputHoneycombType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombType$ {
  /** @deprecated use `OutputHoneycombType$inboundSchema` instead. */
  export const inboundSchema = OutputHoneycombType$inboundSchema;
  /** @deprecated use `OutputHoneycombType$outboundSchema` instead. */
  export const outboundSchema = OutputHoneycombType$outboundSchema;
}

/** @internal */
export const OutputHoneycombExtraHttpHeader$inboundSchema: z.ZodType<
  OutputHoneycombExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputHoneycombExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputHoneycombExtraHttpHeader$outboundSchema: z.ZodType<
  OutputHoneycombExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputHoneycombExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombExtraHttpHeader$ {
  /** @deprecated use `OutputHoneycombExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputHoneycombExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputHoneycombExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputHoneycombExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputHoneycombExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputHoneycombExtraHttpHeader$Outbound;
}

export function outputHoneycombExtraHttpHeaderToJSON(
  outputHoneycombExtraHttpHeader: OutputHoneycombExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputHoneycombExtraHttpHeader$outboundSchema.parse(
      outputHoneycombExtraHttpHeader,
    ),
  );
}

export function outputHoneycombExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputHoneycombExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputHoneycombExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHoneycombExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputHoneycombFailedRequestLoggingMode$inboundSchema: z.ZodType<
  OutputHoneycombFailedRequestLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputHoneycombFailedRequestLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputHoneycombFailedRequestLoggingMode$outboundSchema: z.ZodType<
  OutputHoneycombFailedRequestLoggingMode,
  z.ZodTypeDef,
  OutputHoneycombFailedRequestLoggingMode
> = z.union([
  z.nativeEnum(OutputHoneycombFailedRequestLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombFailedRequestLoggingMode$ {
  /** @deprecated use `OutputHoneycombFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputHoneycombFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputHoneycombFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputHoneycombFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputHoneycombResponseRetrySetting$inboundSchema: z.ZodType<
  OutputHoneycombResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputHoneycombResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputHoneycombResponseRetrySetting$outboundSchema: z.ZodType<
  OutputHoneycombResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputHoneycombResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombResponseRetrySetting$ {
  /** @deprecated use `OutputHoneycombResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputHoneycombResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputHoneycombResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputHoneycombResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputHoneycombResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputHoneycombResponseRetrySetting$Outbound;
}

export function outputHoneycombResponseRetrySettingToJSON(
  outputHoneycombResponseRetrySetting: OutputHoneycombResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputHoneycombResponseRetrySetting$outboundSchema.parse(
      outputHoneycombResponseRetrySetting,
    ),
  );
}

export function outputHoneycombResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputHoneycombResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputHoneycombResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHoneycombResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputHoneycombTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputHoneycombTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputHoneycombTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputHoneycombTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputHoneycombTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputHoneycombTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombTimeoutRetrySettings$ {
  /** @deprecated use `OutputHoneycombTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputHoneycombTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputHoneycombTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputHoneycombTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputHoneycombTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputHoneycombTimeoutRetrySettings$Outbound;
}

export function outputHoneycombTimeoutRetrySettingsToJSON(
  outputHoneycombTimeoutRetrySettings: OutputHoneycombTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputHoneycombTimeoutRetrySettings$outboundSchema.parse(
      outputHoneycombTimeoutRetrySettings,
    ),
  );
}

export function outputHoneycombTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputHoneycombTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputHoneycombTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHoneycombTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputHoneycombBackpressureBehavior$inboundSchema: z.ZodType<
  OutputHoneycombBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputHoneycombBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputHoneycombBackpressureBehavior$outboundSchema: z.ZodType<
  OutputHoneycombBackpressureBehavior,
  z.ZodTypeDef,
  OutputHoneycombBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputHoneycombBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombBackpressureBehavior$ {
  /** @deprecated use `OutputHoneycombBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputHoneycombBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputHoneycombBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputHoneycombBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputHoneycombAuthenticationMethod$inboundSchema: z.ZodType<
  OutputHoneycombAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputHoneycombAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputHoneycombAuthenticationMethod$outboundSchema: z.ZodType<
  OutputHoneycombAuthenticationMethod,
  z.ZodTypeDef,
  OutputHoneycombAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputHoneycombAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombAuthenticationMethod$ {
  /** @deprecated use `OutputHoneycombAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputHoneycombAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputHoneycombAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputHoneycombAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputHoneycombCompression$inboundSchema: z.ZodType<
  OutputHoneycombCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputHoneycombCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputHoneycombCompression$outboundSchema: z.ZodType<
  OutputHoneycombCompression,
  z.ZodTypeDef,
  OutputHoneycombCompression
> = z.union([
  z.nativeEnum(OutputHoneycombCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombCompression$ {
  /** @deprecated use `OutputHoneycombCompression$inboundSchema` instead. */
  export const inboundSchema = OutputHoneycombCompression$inboundSchema;
  /** @deprecated use `OutputHoneycombCompression$outboundSchema` instead. */
  export const outboundSchema = OutputHoneycombCompression$outboundSchema;
}

/** @internal */
export const OutputHoneycombQueueFullBehavior$inboundSchema: z.ZodType<
  OutputHoneycombQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputHoneycombQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputHoneycombQueueFullBehavior$outboundSchema: z.ZodType<
  OutputHoneycombQueueFullBehavior,
  z.ZodTypeDef,
  OutputHoneycombQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputHoneycombQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombQueueFullBehavior$ {
  /** @deprecated use `OutputHoneycombQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputHoneycombQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputHoneycombQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputHoneycombQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputHoneycombMode$inboundSchema: z.ZodType<
  OutputHoneycombMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputHoneycombMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputHoneycombMode$outboundSchema: z.ZodType<
  OutputHoneycombMode,
  z.ZodTypeDef,
  OutputHoneycombMode
> = z.union([
  z.nativeEnum(OutputHoneycombMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombMode$ {
  /** @deprecated use `OutputHoneycombMode$inboundSchema` instead. */
  export const inboundSchema = OutputHoneycombMode$inboundSchema;
  /** @deprecated use `OutputHoneycombMode$outboundSchema` instead. */
  export const outboundSchema = OutputHoneycombMode$outboundSchema;
}

/** @internal */
export const OutputHoneycombPqControls$inboundSchema: z.ZodType<
  OutputHoneycombPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputHoneycombPqControls$Outbound = {};

/** @internal */
export const OutputHoneycombPqControls$outboundSchema: z.ZodType<
  OutputHoneycombPqControls$Outbound,
  z.ZodTypeDef,
  OutputHoneycombPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycombPqControls$ {
  /** @deprecated use `OutputHoneycombPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputHoneycombPqControls$inboundSchema;
  /** @deprecated use `OutputHoneycombPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputHoneycombPqControls$outboundSchema;
  /** @deprecated use `OutputHoneycombPqControls$Outbound` instead. */
  export type Outbound = OutputHoneycombPqControls$Outbound;
}

export function outputHoneycombPqControlsToJSON(
  outputHoneycombPqControls: OutputHoneycombPqControls,
): string {
  return JSON.stringify(
    OutputHoneycombPqControls$outboundSchema.parse(outputHoneycombPqControls),
  );
}

export function outputHoneycombPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputHoneycombPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputHoneycombPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHoneycombPqControls' from JSON`,
  );
}

/** @internal */
export const OutputHoneycomb$inboundSchema: z.ZodType<
  OutputHoneycomb,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputHoneycombType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  dataset: z.string(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputHoneycombExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputHoneycombFailedRequestLoggingMode$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputHoneycombResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputHoneycombTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputHoneycombBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  authType: OutputHoneycombAuthenticationMethod$inboundSchema.default("manual"),
  description: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputHoneycombCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputHoneycombQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputHoneycombMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputHoneycombPqControls$inboundSchema).optional(),
  team: z.string().optional(),
  textSecret: z.string().optional(),
});

/** @internal */
export type OutputHoneycomb$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  dataset: string;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputHoneycombExtraHttpHeader$Outbound> | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputHoneycombResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputHoneycombTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  authType: string;
  description?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputHoneycombPqControls$Outbound | undefined;
  team?: string | undefined;
  textSecret?: string | undefined;
};

/** @internal */
export const OutputHoneycomb$outboundSchema: z.ZodType<
  OutputHoneycomb$Outbound,
  z.ZodTypeDef,
  OutputHoneycomb
> = z.object({
  id: z.string().optional(),
  type: OutputHoneycombType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  dataset: z.string(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputHoneycombExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputHoneycombFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputHoneycombResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputHoneycombTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputHoneycombBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  authType: OutputHoneycombAuthenticationMethod$outboundSchema.default(
    "manual",
  ),
  description: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputHoneycombCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputHoneycombQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputHoneycombMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputHoneycombPqControls$outboundSchema).optional(),
  team: z.string().optional(),
  textSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHoneycomb$ {
  /** @deprecated use `OutputHoneycomb$inboundSchema` instead. */
  export const inboundSchema = OutputHoneycomb$inboundSchema;
  /** @deprecated use `OutputHoneycomb$outboundSchema` instead. */
  export const outboundSchema = OutputHoneycomb$outboundSchema;
  /** @deprecated use `OutputHoneycomb$Outbound` instead. */
  export type Outbound = OutputHoneycomb$Outbound;
}

export function outputHoneycombToJSON(
  outputHoneycomb: OutputHoneycomb,
): string {
  return JSON.stringify(OutputHoneycomb$outboundSchema.parse(outputHoneycomb));
}

export function outputHoneycombFromJSON(
  jsonString: string,
): SafeParseResult<OutputHoneycomb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputHoneycomb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHoneycomb' from JSON`,
  );
}
