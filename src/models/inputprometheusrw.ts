/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputPrometheusRwType = {
  PrometheusRw: "prometheus_rw",
} as const;
export type InputPrometheusRwType = ClosedEnum<typeof InputPrometheusRwType>;

export type InputPrometheusRwConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputPrometheusRwMode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputPrometheusRwMode = OpenEnum<typeof InputPrometheusRwMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputPrometheusRwCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputPrometheusRwCompression = OpenEnum<
  typeof InputPrometheusRwCompression
>;

export type InputPrometheusRwPqControls = {};

export type InputPrometheusRwPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputPrometheusRwMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputPrometheusRwCompression | undefined;
  pqControls?: InputPrometheusRwPqControls | undefined;
};

export const InputPrometheusRwMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputPrometheusRwMinimumTLSVersion = OpenEnum<
  typeof InputPrometheusRwMinimumTLSVersion
>;

export const InputPrometheusRwMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputPrometheusRwMaximumTLSVersion = OpenEnum<
  typeof InputPrometheusRwMaximumTLSVersion
>;

export type InputPrometheusRwTLSSettingsServerSide = {
  disabled?: boolean | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: InputPrometheusRwMinimumTLSVersion | undefined;
  maxVersion?: InputPrometheusRwMaximumTLSVersion | undefined;
};

/**
 * Remote Write authentication type
 */
export const InputPrometheusRwAuthenticationType = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
/**
 * Remote Write authentication type
 */
export type InputPrometheusRwAuthenticationType = OpenEnum<
  typeof InputPrometheusRwAuthenticationType
>;

export type InputPrometheusRwMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputPrometheusRwOauthParam = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type InputPrometheusRwOauthHeader = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type InputPrometheusRw = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputPrometheusRwType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputPrometheusRwConnection> | undefined;
  pq?: InputPrometheusRwPq | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  tls?: InputPrometheusRwTLSSettingsServerSide | undefined;
  /**
   * Maximum number of active requests allowed per Worker Process. Set to 0 for unlimited. Caution: Increasing the limit above the default value, or setting it to unlimited, may degrade performance and reduce throughput.
   */
  maxActiveReq?: number | undefined;
  /**
   * Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
   */
  maxRequestsPerSocket?: number | undefined;
  /**
   * Extract the client IP and port from PROXY protocol v1/v2. When enabled, the X-Forwarded-For header is ignored. Disable to use the X-Forwarded-For header for client IP extraction.
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Add request headers to events, in the __headers field
   */
  captureHeaders?: boolean | undefined;
  /**
   * How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
   */
  activityLogSampleRate?: number | undefined;
  /**
   * How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
   */
  requestTimeout?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
   */
  socketTimeout?: number | undefined;
  /**
   * After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 second, maximum 600 seconds (10 minutes).
   */
  keepAliveTimeout?: number | undefined;
  /**
   * Expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
   */
  enableHealthCheck?: boolean | undefined;
  /**
   * Messages from matched IP addresses will be processed, unless also matched by the denylist
   */
  ipAllowlistRegex?: string | undefined;
  /**
   * Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
   */
  ipDenylistRegex?: string | undefined;
  /**
   * Absolute path on which to listen for Prometheus requests. Defaults to /write, which will expand as: http://<your‑upstream‑URL>:<your‑port>/write.
   */
  prometheusAPI?: string | undefined;
  /**
   * Remote Write authentication type
   */
  authType?: InputPrometheusRwAuthenticationType | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputPrometheusRwMetadatum> | undefined;
  description?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<InputPrometheusRwOauthParam> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<InputPrometheusRwOauthHeader> | undefined;
};

/** @internal */
export const InputPrometheusRwType$inboundSchema: z.ZodNativeEnum<
  typeof InputPrometheusRwType
> = z.nativeEnum(InputPrometheusRwType);

/** @internal */
export const InputPrometheusRwType$outboundSchema: z.ZodNativeEnum<
  typeof InputPrometheusRwType
> = InputPrometheusRwType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwType$ {
  /** @deprecated use `InputPrometheusRwType$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwType$inboundSchema;
  /** @deprecated use `InputPrometheusRwType$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRwType$outboundSchema;
}

/** @internal */
export const InputPrometheusRwConnection$inboundSchema: z.ZodType<
  InputPrometheusRwConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputPrometheusRwConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputPrometheusRwConnection$outboundSchema: z.ZodType<
  InputPrometheusRwConnection$Outbound,
  z.ZodTypeDef,
  InputPrometheusRwConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwConnection$ {
  /** @deprecated use `InputPrometheusRwConnection$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwConnection$inboundSchema;
  /** @deprecated use `InputPrometheusRwConnection$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRwConnection$outboundSchema;
  /** @deprecated use `InputPrometheusRwConnection$Outbound` instead. */
  export type Outbound = InputPrometheusRwConnection$Outbound;
}

export function inputPrometheusRwConnectionToJSON(
  inputPrometheusRwConnection: InputPrometheusRwConnection,
): string {
  return JSON.stringify(
    InputPrometheusRwConnection$outboundSchema.parse(
      inputPrometheusRwConnection,
    ),
  );
}

export function inputPrometheusRwConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusRwConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusRwConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusRwConnection' from JSON`,
  );
}

/** @internal */
export const InputPrometheusRwMode$inboundSchema: z.ZodType<
  InputPrometheusRwMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusRwMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusRwMode$outboundSchema: z.ZodType<
  InputPrometheusRwMode,
  z.ZodTypeDef,
  InputPrometheusRwMode
> = z.union([
  z.nativeEnum(InputPrometheusRwMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwMode$ {
  /** @deprecated use `InputPrometheusRwMode$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwMode$inboundSchema;
  /** @deprecated use `InputPrometheusRwMode$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRwMode$outboundSchema;
}

/** @internal */
export const InputPrometheusRwCompression$inboundSchema: z.ZodType<
  InputPrometheusRwCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusRwCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusRwCompression$outboundSchema: z.ZodType<
  InputPrometheusRwCompression,
  z.ZodTypeDef,
  InputPrometheusRwCompression
> = z.union([
  z.nativeEnum(InputPrometheusRwCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwCompression$ {
  /** @deprecated use `InputPrometheusRwCompression$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwCompression$inboundSchema;
  /** @deprecated use `InputPrometheusRwCompression$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRwCompression$outboundSchema;
}

/** @internal */
export const InputPrometheusRwPqControls$inboundSchema: z.ZodType<
  InputPrometheusRwPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputPrometheusRwPqControls$Outbound = {};

/** @internal */
export const InputPrometheusRwPqControls$outboundSchema: z.ZodType<
  InputPrometheusRwPqControls$Outbound,
  z.ZodTypeDef,
  InputPrometheusRwPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwPqControls$ {
  /** @deprecated use `InputPrometheusRwPqControls$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwPqControls$inboundSchema;
  /** @deprecated use `InputPrometheusRwPqControls$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRwPqControls$outboundSchema;
  /** @deprecated use `InputPrometheusRwPqControls$Outbound` instead. */
  export type Outbound = InputPrometheusRwPqControls$Outbound;
}

export function inputPrometheusRwPqControlsToJSON(
  inputPrometheusRwPqControls: InputPrometheusRwPqControls,
): string {
  return JSON.stringify(
    InputPrometheusRwPqControls$outboundSchema.parse(
      inputPrometheusRwPqControls,
    ),
  );
}

export function inputPrometheusRwPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusRwPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusRwPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusRwPqControls' from JSON`,
  );
}

/** @internal */
export const InputPrometheusRwPq$inboundSchema: z.ZodType<
  InputPrometheusRwPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputPrometheusRwMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputPrometheusRwCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputPrometheusRwPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type InputPrometheusRwPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputPrometheusRwPqControls$Outbound | undefined;
};

/** @internal */
export const InputPrometheusRwPq$outboundSchema: z.ZodType<
  InputPrometheusRwPq$Outbound,
  z.ZodTypeDef,
  InputPrometheusRwPq
> = z.object({
  mode: InputPrometheusRwMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputPrometheusRwCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputPrometheusRwPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwPq$ {
  /** @deprecated use `InputPrometheusRwPq$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwPq$inboundSchema;
  /** @deprecated use `InputPrometheusRwPq$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRwPq$outboundSchema;
  /** @deprecated use `InputPrometheusRwPq$Outbound` instead. */
  export type Outbound = InputPrometheusRwPq$Outbound;
}

export function inputPrometheusRwPqToJSON(
  inputPrometheusRwPq: InputPrometheusRwPq,
): string {
  return JSON.stringify(
    InputPrometheusRwPq$outboundSchema.parse(inputPrometheusRwPq),
  );
}

export function inputPrometheusRwPqFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusRwPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusRwPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusRwPq' from JSON`,
  );
}

/** @internal */
export const InputPrometheusRwMinimumTLSVersion$inboundSchema: z.ZodType<
  InputPrometheusRwMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusRwMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusRwMinimumTLSVersion$outboundSchema: z.ZodType<
  InputPrometheusRwMinimumTLSVersion,
  z.ZodTypeDef,
  InputPrometheusRwMinimumTLSVersion
> = z.union([
  z.nativeEnum(InputPrometheusRwMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwMinimumTLSVersion$ {
  /** @deprecated use `InputPrometheusRwMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputPrometheusRwMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputPrometheusRwMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputPrometheusRwMaximumTLSVersion$inboundSchema: z.ZodType<
  InputPrometheusRwMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusRwMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusRwMaximumTLSVersion$outboundSchema: z.ZodType<
  InputPrometheusRwMaximumTLSVersion,
  z.ZodTypeDef,
  InputPrometheusRwMaximumTLSVersion
> = z.union([
  z.nativeEnum(InputPrometheusRwMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwMaximumTLSVersion$ {
  /** @deprecated use `InputPrometheusRwMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputPrometheusRwMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputPrometheusRwMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputPrometheusRwTLSSettingsServerSide$inboundSchema: z.ZodType<
  InputPrometheusRwTLSSettingsServerSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputPrometheusRwMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputPrometheusRwMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputPrometheusRwTLSSettingsServerSide$Outbound = {
  disabled: boolean;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  requestCert: boolean;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputPrometheusRwTLSSettingsServerSide$outboundSchema: z.ZodType<
  InputPrometheusRwTLSSettingsServerSide$Outbound,
  z.ZodTypeDef,
  InputPrometheusRwTLSSettingsServerSide
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputPrometheusRwMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputPrometheusRwMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwTLSSettingsServerSide$ {
  /** @deprecated use `InputPrometheusRwTLSSettingsServerSide$inboundSchema` instead. */
  export const inboundSchema =
    InputPrometheusRwTLSSettingsServerSide$inboundSchema;
  /** @deprecated use `InputPrometheusRwTLSSettingsServerSide$outboundSchema` instead. */
  export const outboundSchema =
    InputPrometheusRwTLSSettingsServerSide$outboundSchema;
  /** @deprecated use `InputPrometheusRwTLSSettingsServerSide$Outbound` instead. */
  export type Outbound = InputPrometheusRwTLSSettingsServerSide$Outbound;
}

export function inputPrometheusRwTLSSettingsServerSideToJSON(
  inputPrometheusRwTLSSettingsServerSide:
    InputPrometheusRwTLSSettingsServerSide,
): string {
  return JSON.stringify(
    InputPrometheusRwTLSSettingsServerSide$outboundSchema.parse(
      inputPrometheusRwTLSSettingsServerSide,
    ),
  );
}

export function inputPrometheusRwTLSSettingsServerSideFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusRwTLSSettingsServerSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InputPrometheusRwTLSSettingsServerSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusRwTLSSettingsServerSide' from JSON`,
  );
}

/** @internal */
export const InputPrometheusRwAuthenticationType$inboundSchema: z.ZodType<
  InputPrometheusRwAuthenticationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputPrometheusRwAuthenticationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputPrometheusRwAuthenticationType$outboundSchema: z.ZodType<
  InputPrometheusRwAuthenticationType,
  z.ZodTypeDef,
  InputPrometheusRwAuthenticationType
> = z.union([
  z.nativeEnum(InputPrometheusRwAuthenticationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwAuthenticationType$ {
  /** @deprecated use `InputPrometheusRwAuthenticationType$inboundSchema` instead. */
  export const inboundSchema =
    InputPrometheusRwAuthenticationType$inboundSchema;
  /** @deprecated use `InputPrometheusRwAuthenticationType$outboundSchema` instead. */
  export const outboundSchema =
    InputPrometheusRwAuthenticationType$outboundSchema;
}

/** @internal */
export const InputPrometheusRwMetadatum$inboundSchema: z.ZodType<
  InputPrometheusRwMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputPrometheusRwMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputPrometheusRwMetadatum$outboundSchema: z.ZodType<
  InputPrometheusRwMetadatum$Outbound,
  z.ZodTypeDef,
  InputPrometheusRwMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwMetadatum$ {
  /** @deprecated use `InputPrometheusRwMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwMetadatum$inboundSchema;
  /** @deprecated use `InputPrometheusRwMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRwMetadatum$outboundSchema;
  /** @deprecated use `InputPrometheusRwMetadatum$Outbound` instead. */
  export type Outbound = InputPrometheusRwMetadatum$Outbound;
}

export function inputPrometheusRwMetadatumToJSON(
  inputPrometheusRwMetadatum: InputPrometheusRwMetadatum,
): string {
  return JSON.stringify(
    InputPrometheusRwMetadatum$outboundSchema.parse(inputPrometheusRwMetadatum),
  );
}

export function inputPrometheusRwMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusRwMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusRwMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusRwMetadatum' from JSON`,
  );
}

/** @internal */
export const InputPrometheusRwOauthParam$inboundSchema: z.ZodType<
  InputPrometheusRwOauthParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputPrometheusRwOauthParam$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputPrometheusRwOauthParam$outboundSchema: z.ZodType<
  InputPrometheusRwOauthParam$Outbound,
  z.ZodTypeDef,
  InputPrometheusRwOauthParam
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwOauthParam$ {
  /** @deprecated use `InputPrometheusRwOauthParam$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwOauthParam$inboundSchema;
  /** @deprecated use `InputPrometheusRwOauthParam$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRwOauthParam$outboundSchema;
  /** @deprecated use `InputPrometheusRwOauthParam$Outbound` instead. */
  export type Outbound = InputPrometheusRwOauthParam$Outbound;
}

export function inputPrometheusRwOauthParamToJSON(
  inputPrometheusRwOauthParam: InputPrometheusRwOauthParam,
): string {
  return JSON.stringify(
    InputPrometheusRwOauthParam$outboundSchema.parse(
      inputPrometheusRwOauthParam,
    ),
  );
}

export function inputPrometheusRwOauthParamFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusRwOauthParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusRwOauthParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusRwOauthParam' from JSON`,
  );
}

/** @internal */
export const InputPrometheusRwOauthHeader$inboundSchema: z.ZodType<
  InputPrometheusRwOauthHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputPrometheusRwOauthHeader$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputPrometheusRwOauthHeader$outboundSchema: z.ZodType<
  InputPrometheusRwOauthHeader$Outbound,
  z.ZodTypeDef,
  InputPrometheusRwOauthHeader
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRwOauthHeader$ {
  /** @deprecated use `InputPrometheusRwOauthHeader$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRwOauthHeader$inboundSchema;
  /** @deprecated use `InputPrometheusRwOauthHeader$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRwOauthHeader$outboundSchema;
  /** @deprecated use `InputPrometheusRwOauthHeader$Outbound` instead. */
  export type Outbound = InputPrometheusRwOauthHeader$Outbound;
}

export function inputPrometheusRwOauthHeaderToJSON(
  inputPrometheusRwOauthHeader: InputPrometheusRwOauthHeader,
): string {
  return JSON.stringify(
    InputPrometheusRwOauthHeader$outboundSchema.parse(
      inputPrometheusRwOauthHeader,
    ),
  );
}

export function inputPrometheusRwOauthHeaderFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusRwOauthHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusRwOauthHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusRwOauthHeader' from JSON`,
  );
}

/** @internal */
export const InputPrometheusRw$inboundSchema: z.ZodType<
  InputPrometheusRw,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputPrometheusRwType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputPrometheusRwConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputPrometheusRwPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputPrometheusRwTLSSettingsServerSide$inboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  prometheusAPI: z.string().default("/write"),
  authType: InputPrometheusRwAuthenticationType$inboundSchema.default("none"),
  metadata: z.array(z.lazy(() => InputPrometheusRwMetadatum$inboundSchema))
    .optional(),
  description: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => InputPrometheusRwOauthParam$inboundSchema))
    .optional(),
  oauthHeaders: z.array(
    z.lazy(() => InputPrometheusRwOauthHeader$inboundSchema),
  ).optional(),
});

/** @internal */
export type InputPrometheusRw$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputPrometheusRwConnection$Outbound> | undefined;
  pq?: InputPrometheusRwPq$Outbound | undefined;
  host: string;
  port: number;
  tls?: InputPrometheusRwTLSSettingsServerSide$Outbound | undefined;
  maxActiveReq: number;
  maxRequestsPerSocket: number;
  enableProxyHeader: boolean;
  captureHeaders: boolean;
  activityLogSampleRate: number;
  requestTimeout: number;
  socketTimeout: number;
  keepAliveTimeout: number;
  enableHealthCheck: boolean;
  ipAllowlistRegex: string;
  ipDenylistRegex: string;
  prometheusAPI: string;
  authType: string;
  metadata?: Array<InputPrometheusRwMetadatum$Outbound> | undefined;
  description?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<InputPrometheusRwOauthParam$Outbound> | undefined;
  oauthHeaders?: Array<InputPrometheusRwOauthHeader$Outbound> | undefined;
};

/** @internal */
export const InputPrometheusRw$outboundSchema: z.ZodType<
  InputPrometheusRw$Outbound,
  z.ZodTypeDef,
  InputPrometheusRw
> = z.object({
  id: z.string().optional(),
  type: InputPrometheusRwType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputPrometheusRwConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputPrometheusRwPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputPrometheusRwTLSSettingsServerSide$outboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  prometheusAPI: z.string().default("/write"),
  authType: InputPrometheusRwAuthenticationType$outboundSchema.default("none"),
  metadata: z.array(z.lazy(() => InputPrometheusRwMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => InputPrometheusRwOauthParam$outboundSchema))
    .optional(),
  oauthHeaders: z.array(
    z.lazy(() => InputPrometheusRwOauthHeader$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputPrometheusRw$ {
  /** @deprecated use `InputPrometheusRw$inboundSchema` instead. */
  export const inboundSchema = InputPrometheusRw$inboundSchema;
  /** @deprecated use `InputPrometheusRw$outboundSchema` instead. */
  export const outboundSchema = InputPrometheusRw$outboundSchema;
  /** @deprecated use `InputPrometheusRw$Outbound` instead. */
  export type Outbound = InputPrometheusRw$Outbound;
}

export function inputPrometheusRwToJSON(
  inputPrometheusRw: InputPrometheusRw,
): string {
  return JSON.stringify(
    InputPrometheusRw$outboundSchema.parse(inputPrometheusRw),
  );
}

export function inputPrometheusRwFromJSON(
  jsonString: string,
): SafeParseResult<InputPrometheusRw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputPrometheusRw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputPrometheusRw' from JSON`,
  );
}
