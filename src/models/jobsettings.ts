/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type JobSettings = {
  concurrentJobLimit: number;
  concurrentScheduledJobLimit: number;
  concurrentSystemJobLimit: number;
  concurrentSystemTaskLimit: number;
  concurrentTaskLimit: number;
  disableTasks?: boolean | undefined;
  finishedJobArtifactsLimit: number;
  finishedTaskArtifactsLimit: number;
  jobArtifactsReaperPeriod: string;
  jobTimeout: string;
  maxTaskPerc: number;
  schedulingPolicy: string;
  taskHeartbeatPeriod: number;
  taskManifestFlushPeriodMs: number;
  taskManifestMaxBufferSize: number;
  taskManifestReadBufferSize: string;
  taskPollTimeoutMs: number;
};

/** @internal */
export const JobSettings$inboundSchema: z.ZodType<
  JobSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  concurrentJobLimit: z.number(),
  concurrentScheduledJobLimit: z.number(),
  concurrentSystemJobLimit: z.number(),
  concurrentSystemTaskLimit: z.number(),
  concurrentTaskLimit: z.number(),
  disableTasks: z.boolean().optional(),
  finishedJobArtifactsLimit: z.number(),
  finishedTaskArtifactsLimit: z.number(),
  jobArtifactsReaperPeriod: z.string(),
  jobTimeout: z.string(),
  maxTaskPerc: z.number(),
  schedulingPolicy: z.string(),
  taskHeartbeatPeriod: z.number(),
  taskManifestFlushPeriodMs: z.number(),
  taskManifestMaxBufferSize: z.number(),
  taskManifestReadBufferSize: z.string(),
  taskPollTimeoutMs: z.number(),
});

/** @internal */
export type JobSettings$Outbound = {
  concurrentJobLimit: number;
  concurrentScheduledJobLimit: number;
  concurrentSystemJobLimit: number;
  concurrentSystemTaskLimit: number;
  concurrentTaskLimit: number;
  disableTasks?: boolean | undefined;
  finishedJobArtifactsLimit: number;
  finishedTaskArtifactsLimit: number;
  jobArtifactsReaperPeriod: string;
  jobTimeout: string;
  maxTaskPerc: number;
  schedulingPolicy: string;
  taskHeartbeatPeriod: number;
  taskManifestFlushPeriodMs: number;
  taskManifestMaxBufferSize: number;
  taskManifestReadBufferSize: string;
  taskPollTimeoutMs: number;
};

/** @internal */
export const JobSettings$outboundSchema: z.ZodType<
  JobSettings$Outbound,
  z.ZodTypeDef,
  JobSettings
> = z.object({
  concurrentJobLimit: z.number(),
  concurrentScheduledJobLimit: z.number(),
  concurrentSystemJobLimit: z.number(),
  concurrentSystemTaskLimit: z.number(),
  concurrentTaskLimit: z.number(),
  disableTasks: z.boolean().optional(),
  finishedJobArtifactsLimit: z.number(),
  finishedTaskArtifactsLimit: z.number(),
  jobArtifactsReaperPeriod: z.string(),
  jobTimeout: z.string(),
  maxTaskPerc: z.number(),
  schedulingPolicy: z.string(),
  taskHeartbeatPeriod: z.number(),
  taskManifestFlushPeriodMs: z.number(),
  taskManifestMaxBufferSize: z.number(),
  taskManifestReadBufferSize: z.string(),
  taskPollTimeoutMs: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobSettings$ {
  /** @deprecated use `JobSettings$inboundSchema` instead. */
  export const inboundSchema = JobSettings$inboundSchema;
  /** @deprecated use `JobSettings$outboundSchema` instead. */
  export const outboundSchema = JobSettings$outboundSchema;
  /** @deprecated use `JobSettings$Outbound` instead. */
  export type Outbound = JobSettings$Outbound;
}

export function jobSettingsToJSON(jobSettings: JobSettings): string {
  return JSON.stringify(JobSettings$outboundSchema.parse(jobSettings));
}

export function jobSettingsFromJSON(
  jsonString: string,
): SafeParseResult<JobSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobSettings' from JSON`,
  );
}
