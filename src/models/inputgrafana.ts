/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputGrafanaType2 = {
  Grafana: "grafana",
} as const;
export type InputGrafanaType2 = ClosedEnum<typeof InputGrafanaType2>;

export type InputGrafanaConnection2 = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputGrafanaMode2 = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputGrafanaMode2 = OpenEnum<typeof InputGrafanaMode2>;

/**
 * Codec to use to compress the persisted data
 */
export const InputGrafanaCompression2 = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputGrafanaCompression2 = OpenEnum<
  typeof InputGrafanaCompression2
>;

export type InputGrafanaPqControls2 = {};

export type InputGrafanaPq2 = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputGrafanaMode2 | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputGrafanaCompression2 | undefined;
  pqControls?: InputGrafanaPqControls2 | undefined;
};

export const InputGrafanaMinimumTLSVersion2 = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputGrafanaMinimumTLSVersion2 = OpenEnum<
  typeof InputGrafanaMinimumTLSVersion2
>;

export const InputGrafanaMaximumTLSVersion2 = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputGrafanaMaximumTLSVersion2 = OpenEnum<
  typeof InputGrafanaMaximumTLSVersion2
>;

export type InputGrafanaTLSSettingsServerSide2 = {
  disabled?: boolean | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: InputGrafanaMinimumTLSVersion2 | undefined;
  maxVersion?: InputGrafanaMaximumTLSVersion2 | undefined;
};

/**
 * Remote Write authentication type
 */
export const InputGrafanaPrometheusAuthAuthenticationType2 = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
/**
 * Remote Write authentication type
 */
export type InputGrafanaPrometheusAuthAuthenticationType2 = OpenEnum<
  typeof InputGrafanaPrometheusAuthAuthenticationType2
>;

export type PrometheusAuthOauthParam2 = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type PrometheusAuthOauthHeader2 = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type InputGrafanaPrometheusAuth2 = {
  /**
   * Remote Write authentication type
   */
  authType?: InputGrafanaPrometheusAuthAuthenticationType2 | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<PrometheusAuthOauthParam2> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<PrometheusAuthOauthHeader2> | undefined;
};

/**
 * Loki logs authentication type
 */
export const InputGrafanaLokiAuthAuthenticationType2 = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
/**
 * Loki logs authentication type
 */
export type InputGrafanaLokiAuthAuthenticationType2 = OpenEnum<
  typeof InputGrafanaLokiAuthAuthenticationType2
>;

export type LokiAuthOauthParam2 = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type LokiAuthOauthHeader2 = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type InputGrafanaLokiAuth2 = {
  /**
   * Loki logs authentication type
   */
  authType?: InputGrafanaLokiAuthAuthenticationType2 | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<LokiAuthOauthParam2> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<LokiAuthOauthHeader2> | undefined;
};

export type InputGrafanaMetadatum2 = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputGrafanaGrafana2 = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputGrafanaType2;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputGrafanaConnection2> | undefined;
  pq?: InputGrafanaPq2 | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  tls?: InputGrafanaTLSSettingsServerSide2 | undefined;
  /**
   * Maximum number of active requests allowed per Worker Process. Set to 0 for unlimited. Caution: Increasing the limit above the default value, or setting it to unlimited, may degrade performance and reduce throughput.
   */
  maxActiveReq?: number | undefined;
  /**
   * Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
   */
  maxRequestsPerSocket?: number | undefined;
  /**
   * Extract the client IP and port from PROXY protocol v1/v2. When enabled, the X-Forwarded-For header is ignored. Disable to use the X-Forwarded-For header for client IP extraction.
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Add request headers to events, in the __headers field
   */
  captureHeaders?: boolean | undefined;
  /**
   * How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
   */
  activityLogSampleRate?: number | undefined;
  /**
   * How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
   */
  requestTimeout?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
   */
  socketTimeout?: number | undefined;
  /**
   * Maximum time to wait for additional data, after the last response was sent, before closing a socket connection. This can be very useful when Grafana Agent remote write's request frequency is high so, reusing connections, would help mitigating the cost of creating a new connection per request. Note that Grafana Agent's embedded Prometheus would attempt to keep connections open for up to 5 minutes.
   */
  keepAliveTimeout?: number | undefined;
  /**
   * Expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
   */
  enableHealthCheck?: boolean | undefined;
  /**
   * Messages from matched IP addresses will be processed, unless also matched by the denylist
   */
  ipAllowlistRegex?: string | undefined;
  /**
   * Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
   */
  ipDenylistRegex?: string | undefined;
  /**
   * Absolute path on which to listen for Grafana Agent's Remote Write requests. Defaults to /api/prom/push, which will expand as: 'http://<your‑upstream‑URL>:<your‑port>/api/prom/push'. Either this field or 'Logs API endpoint' must be configured.
   */
  prometheusAPI?: string | undefined;
  /**
   * Absolute path on which to listen for Loki logs requests. Defaults to /loki/api/v1/push, which will (in this example) expand as: 'http://<your‑upstream‑URL>:<your‑port>/loki/api/v1/push'. Either this field or 'Remote Write API endpoint' must be configured.
   */
  lokiAPI?: string | undefined;
  prometheusAuth?: InputGrafanaPrometheusAuth2 | undefined;
  lokiAuth?: InputGrafanaLokiAuth2 | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputGrafanaMetadatum2> | undefined;
  description?: string | undefined;
};

export const InputGrafanaType1 = {
  Grafana: "grafana",
} as const;
export type InputGrafanaType1 = ClosedEnum<typeof InputGrafanaType1>;

export type InputGrafanaConnection1 = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputGrafanaMode1 = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputGrafanaMode1 = OpenEnum<typeof InputGrafanaMode1>;

/**
 * Codec to use to compress the persisted data
 */
export const InputGrafanaCompression1 = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputGrafanaCompression1 = OpenEnum<
  typeof InputGrafanaCompression1
>;

export type InputGrafanaPqControls1 = {};

export type InputGrafanaPq1 = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputGrafanaMode1 | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputGrafanaCompression1 | undefined;
  pqControls?: InputGrafanaPqControls1 | undefined;
};

export const InputGrafanaMinimumTLSVersion1 = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputGrafanaMinimumTLSVersion1 = OpenEnum<
  typeof InputGrafanaMinimumTLSVersion1
>;

export const InputGrafanaMaximumTLSVersion1 = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputGrafanaMaximumTLSVersion1 = OpenEnum<
  typeof InputGrafanaMaximumTLSVersion1
>;

export type InputGrafanaTLSSettingsServerSide1 = {
  disabled?: boolean | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: InputGrafanaMinimumTLSVersion1 | undefined;
  maxVersion?: InputGrafanaMaximumTLSVersion1 | undefined;
};

/**
 * Remote Write authentication type
 */
export const InputGrafanaPrometheusAuthAuthenticationType1 = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
/**
 * Remote Write authentication type
 */
export type InputGrafanaPrometheusAuthAuthenticationType1 = OpenEnum<
  typeof InputGrafanaPrometheusAuthAuthenticationType1
>;

export type PrometheusAuthOauthParam1 = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type PrometheusAuthOauthHeader1 = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type InputGrafanaPrometheusAuth1 = {
  /**
   * Remote Write authentication type
   */
  authType?: InputGrafanaPrometheusAuthAuthenticationType1 | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<PrometheusAuthOauthParam1> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<PrometheusAuthOauthHeader1> | undefined;
};

/**
 * Loki logs authentication type
 */
export const InputGrafanaLokiAuthAuthenticationType1 = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
/**
 * Loki logs authentication type
 */
export type InputGrafanaLokiAuthAuthenticationType1 = OpenEnum<
  typeof InputGrafanaLokiAuthAuthenticationType1
>;

export type LokiAuthOauthParam1 = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type LokiAuthOauthHeader1 = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type InputGrafanaLokiAuth1 = {
  /**
   * Loki logs authentication type
   */
  authType?: InputGrafanaLokiAuthAuthenticationType1 | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<LokiAuthOauthParam1> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<LokiAuthOauthHeader1> | undefined;
};

export type InputGrafanaMetadatum1 = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputGrafanaGrafana1 = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputGrafanaType1;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputGrafanaConnection1> | undefined;
  pq?: InputGrafanaPq1 | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  tls?: InputGrafanaTLSSettingsServerSide1 | undefined;
  /**
   * Maximum number of active requests allowed per Worker Process. Set to 0 for unlimited. Caution: Increasing the limit above the default value, or setting it to unlimited, may degrade performance and reduce throughput.
   */
  maxActiveReq?: number | undefined;
  /**
   * Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
   */
  maxRequestsPerSocket?: number | undefined;
  /**
   * Extract the client IP and port from PROXY protocol v1/v2. When enabled, the X-Forwarded-For header is ignored. Disable to use the X-Forwarded-For header for client IP extraction.
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Add request headers to events, in the __headers field
   */
  captureHeaders?: boolean | undefined;
  /**
   * How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
   */
  activityLogSampleRate?: number | undefined;
  /**
   * How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
   */
  requestTimeout?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
   */
  socketTimeout?: number | undefined;
  /**
   * Maximum time to wait for additional data, after the last response was sent, before closing a socket connection. This can be very useful when Grafana Agent remote write's request frequency is high so, reusing connections, would help mitigating the cost of creating a new connection per request. Note that Grafana Agent's embedded Prometheus would attempt to keep connections open for up to 5 minutes.
   */
  keepAliveTimeout?: number | undefined;
  /**
   * Expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
   */
  enableHealthCheck?: boolean | undefined;
  /**
   * Messages from matched IP addresses will be processed, unless also matched by the denylist
   */
  ipAllowlistRegex?: string | undefined;
  /**
   * Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
   */
  ipDenylistRegex?: string | undefined;
  /**
   * Absolute path on which to listen for Grafana Agent's Remote Write requests. Defaults to /api/prom/push, which will expand as: 'http://<your‑upstream‑URL>:<your‑port>/api/prom/push'. Either this field or 'Logs API endpoint' must be configured.
   */
  prometheusAPI?: string | undefined;
  /**
   * Absolute path on which to listen for Loki logs requests. Defaults to /loki/api/v1/push, which will (in this example) expand as: 'http://<your‑upstream‑URL>:<your‑port>/loki/api/v1/push'. Either this field or 'Remote Write API endpoint' must be configured.
   */
  lokiAPI?: string | undefined;
  prometheusAuth?: InputGrafanaPrometheusAuth1 | undefined;
  lokiAuth?: InputGrafanaLokiAuth1 | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputGrafanaMetadatum1> | undefined;
  description?: string | undefined;
};

export type InputGrafana = InputGrafanaGrafana1 | InputGrafanaGrafana2;

/** @internal */
export const InputGrafanaType2$inboundSchema: z.ZodNativeEnum<
  typeof InputGrafanaType2
> = z.nativeEnum(InputGrafanaType2);

/** @internal */
export const InputGrafanaType2$outboundSchema: z.ZodNativeEnum<
  typeof InputGrafanaType2
> = InputGrafanaType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaType2$ {
  /** @deprecated use `InputGrafanaType2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaType2$inboundSchema;
  /** @deprecated use `InputGrafanaType2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaType2$outboundSchema;
}

/** @internal */
export const InputGrafanaConnection2$inboundSchema: z.ZodType<
  InputGrafanaConnection2,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputGrafanaConnection2$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputGrafanaConnection2$outboundSchema: z.ZodType<
  InputGrafanaConnection2$Outbound,
  z.ZodTypeDef,
  InputGrafanaConnection2
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaConnection2$ {
  /** @deprecated use `InputGrafanaConnection2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaConnection2$inboundSchema;
  /** @deprecated use `InputGrafanaConnection2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaConnection2$outboundSchema;
  /** @deprecated use `InputGrafanaConnection2$Outbound` instead. */
  export type Outbound = InputGrafanaConnection2$Outbound;
}

export function inputGrafanaConnection2ToJSON(
  inputGrafanaConnection2: InputGrafanaConnection2,
): string {
  return JSON.stringify(
    InputGrafanaConnection2$outboundSchema.parse(inputGrafanaConnection2),
  );
}

export function inputGrafanaConnection2FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaConnection2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaConnection2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaConnection2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaMode2$inboundSchema: z.ZodType<
  InputGrafanaMode2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaMode2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaMode2$outboundSchema: z.ZodType<
  InputGrafanaMode2,
  z.ZodTypeDef,
  InputGrafanaMode2
> = z.union([
  z.nativeEnum(InputGrafanaMode2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaMode2$ {
  /** @deprecated use `InputGrafanaMode2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaMode2$inboundSchema;
  /** @deprecated use `InputGrafanaMode2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaMode2$outboundSchema;
}

/** @internal */
export const InputGrafanaCompression2$inboundSchema: z.ZodType<
  InputGrafanaCompression2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaCompression2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaCompression2$outboundSchema: z.ZodType<
  InputGrafanaCompression2,
  z.ZodTypeDef,
  InputGrafanaCompression2
> = z.union([
  z.nativeEnum(InputGrafanaCompression2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaCompression2$ {
  /** @deprecated use `InputGrafanaCompression2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaCompression2$inboundSchema;
  /** @deprecated use `InputGrafanaCompression2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaCompression2$outboundSchema;
}

/** @internal */
export const InputGrafanaPqControls2$inboundSchema: z.ZodType<
  InputGrafanaPqControls2,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputGrafanaPqControls2$Outbound = {};

/** @internal */
export const InputGrafanaPqControls2$outboundSchema: z.ZodType<
  InputGrafanaPqControls2$Outbound,
  z.ZodTypeDef,
  InputGrafanaPqControls2
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaPqControls2$ {
  /** @deprecated use `InputGrafanaPqControls2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaPqControls2$inboundSchema;
  /** @deprecated use `InputGrafanaPqControls2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaPqControls2$outboundSchema;
  /** @deprecated use `InputGrafanaPqControls2$Outbound` instead. */
  export type Outbound = InputGrafanaPqControls2$Outbound;
}

export function inputGrafanaPqControls2ToJSON(
  inputGrafanaPqControls2: InputGrafanaPqControls2,
): string {
  return JSON.stringify(
    InputGrafanaPqControls2$outboundSchema.parse(inputGrafanaPqControls2),
  );
}

export function inputGrafanaPqControls2FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaPqControls2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaPqControls2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaPqControls2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaPq2$inboundSchema: z.ZodType<
  InputGrafanaPq2,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputGrafanaMode2$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputGrafanaCompression2$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputGrafanaPqControls2$inboundSchema).optional(),
});

/** @internal */
export type InputGrafanaPq2$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputGrafanaPqControls2$Outbound | undefined;
};

/** @internal */
export const InputGrafanaPq2$outboundSchema: z.ZodType<
  InputGrafanaPq2$Outbound,
  z.ZodTypeDef,
  InputGrafanaPq2
> = z.object({
  mode: InputGrafanaMode2$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputGrafanaCompression2$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputGrafanaPqControls2$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaPq2$ {
  /** @deprecated use `InputGrafanaPq2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaPq2$inboundSchema;
  /** @deprecated use `InputGrafanaPq2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaPq2$outboundSchema;
  /** @deprecated use `InputGrafanaPq2$Outbound` instead. */
  export type Outbound = InputGrafanaPq2$Outbound;
}

export function inputGrafanaPq2ToJSON(
  inputGrafanaPq2: InputGrafanaPq2,
): string {
  return JSON.stringify(InputGrafanaPq2$outboundSchema.parse(inputGrafanaPq2));
}

export function inputGrafanaPq2FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaPq2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaPq2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaPq2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaMinimumTLSVersion2$inboundSchema: z.ZodType<
  InputGrafanaMinimumTLSVersion2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaMinimumTLSVersion2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaMinimumTLSVersion2$outboundSchema: z.ZodType<
  InputGrafanaMinimumTLSVersion2,
  z.ZodTypeDef,
  InputGrafanaMinimumTLSVersion2
> = z.union([
  z.nativeEnum(InputGrafanaMinimumTLSVersion2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaMinimumTLSVersion2$ {
  /** @deprecated use `InputGrafanaMinimumTLSVersion2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaMinimumTLSVersion2$inboundSchema;
  /** @deprecated use `InputGrafanaMinimumTLSVersion2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaMinimumTLSVersion2$outboundSchema;
}

/** @internal */
export const InputGrafanaMaximumTLSVersion2$inboundSchema: z.ZodType<
  InputGrafanaMaximumTLSVersion2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaMaximumTLSVersion2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaMaximumTLSVersion2$outboundSchema: z.ZodType<
  InputGrafanaMaximumTLSVersion2,
  z.ZodTypeDef,
  InputGrafanaMaximumTLSVersion2
> = z.union([
  z.nativeEnum(InputGrafanaMaximumTLSVersion2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaMaximumTLSVersion2$ {
  /** @deprecated use `InputGrafanaMaximumTLSVersion2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaMaximumTLSVersion2$inboundSchema;
  /** @deprecated use `InputGrafanaMaximumTLSVersion2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaMaximumTLSVersion2$outboundSchema;
}

/** @internal */
export const InputGrafanaTLSSettingsServerSide2$inboundSchema: z.ZodType<
  InputGrafanaTLSSettingsServerSide2,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputGrafanaMinimumTLSVersion2$inboundSchema.optional(),
  maxVersion: InputGrafanaMaximumTLSVersion2$inboundSchema.optional(),
});

/** @internal */
export type InputGrafanaTLSSettingsServerSide2$Outbound = {
  disabled: boolean;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  requestCert: boolean;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputGrafanaTLSSettingsServerSide2$outboundSchema: z.ZodType<
  InputGrafanaTLSSettingsServerSide2$Outbound,
  z.ZodTypeDef,
  InputGrafanaTLSSettingsServerSide2
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputGrafanaMinimumTLSVersion2$outboundSchema.optional(),
  maxVersion: InputGrafanaMaximumTLSVersion2$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaTLSSettingsServerSide2$ {
  /** @deprecated use `InputGrafanaTLSSettingsServerSide2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaTLSSettingsServerSide2$inboundSchema;
  /** @deprecated use `InputGrafanaTLSSettingsServerSide2$outboundSchema` instead. */
  export const outboundSchema =
    InputGrafanaTLSSettingsServerSide2$outboundSchema;
  /** @deprecated use `InputGrafanaTLSSettingsServerSide2$Outbound` instead. */
  export type Outbound = InputGrafanaTLSSettingsServerSide2$Outbound;
}

export function inputGrafanaTLSSettingsServerSide2ToJSON(
  inputGrafanaTLSSettingsServerSide2: InputGrafanaTLSSettingsServerSide2,
): string {
  return JSON.stringify(
    InputGrafanaTLSSettingsServerSide2$outboundSchema.parse(
      inputGrafanaTLSSettingsServerSide2,
    ),
  );
}

export function inputGrafanaTLSSettingsServerSide2FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaTLSSettingsServerSide2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InputGrafanaTLSSettingsServerSide2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaTLSSettingsServerSide2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaPrometheusAuthAuthenticationType2$inboundSchema:
  z.ZodType<
    InputGrafanaPrometheusAuthAuthenticationType2,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(InputGrafanaPrometheusAuthAuthenticationType2),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const InputGrafanaPrometheusAuthAuthenticationType2$outboundSchema:
  z.ZodType<
    InputGrafanaPrometheusAuthAuthenticationType2,
    z.ZodTypeDef,
    InputGrafanaPrometheusAuthAuthenticationType2
  > = z.union([
    z.nativeEnum(InputGrafanaPrometheusAuthAuthenticationType2),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaPrometheusAuthAuthenticationType2$ {
  /** @deprecated use `InputGrafanaPrometheusAuthAuthenticationType2$inboundSchema` instead. */
  export const inboundSchema =
    InputGrafanaPrometheusAuthAuthenticationType2$inboundSchema;
  /** @deprecated use `InputGrafanaPrometheusAuthAuthenticationType2$outboundSchema` instead. */
  export const outboundSchema =
    InputGrafanaPrometheusAuthAuthenticationType2$outboundSchema;
}

/** @internal */
export const PrometheusAuthOauthParam2$inboundSchema: z.ZodType<
  PrometheusAuthOauthParam2,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type PrometheusAuthOauthParam2$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const PrometheusAuthOauthParam2$outboundSchema: z.ZodType<
  PrometheusAuthOauthParam2$Outbound,
  z.ZodTypeDef,
  PrometheusAuthOauthParam2
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrometheusAuthOauthParam2$ {
  /** @deprecated use `PrometheusAuthOauthParam2$inboundSchema` instead. */
  export const inboundSchema = PrometheusAuthOauthParam2$inboundSchema;
  /** @deprecated use `PrometheusAuthOauthParam2$outboundSchema` instead. */
  export const outboundSchema = PrometheusAuthOauthParam2$outboundSchema;
  /** @deprecated use `PrometheusAuthOauthParam2$Outbound` instead. */
  export type Outbound = PrometheusAuthOauthParam2$Outbound;
}

export function prometheusAuthOauthParam2ToJSON(
  prometheusAuthOauthParam2: PrometheusAuthOauthParam2,
): string {
  return JSON.stringify(
    PrometheusAuthOauthParam2$outboundSchema.parse(prometheusAuthOauthParam2),
  );
}

export function prometheusAuthOauthParam2FromJSON(
  jsonString: string,
): SafeParseResult<PrometheusAuthOauthParam2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrometheusAuthOauthParam2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrometheusAuthOauthParam2' from JSON`,
  );
}

/** @internal */
export const PrometheusAuthOauthHeader2$inboundSchema: z.ZodType<
  PrometheusAuthOauthHeader2,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type PrometheusAuthOauthHeader2$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const PrometheusAuthOauthHeader2$outboundSchema: z.ZodType<
  PrometheusAuthOauthHeader2$Outbound,
  z.ZodTypeDef,
  PrometheusAuthOauthHeader2
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrometheusAuthOauthHeader2$ {
  /** @deprecated use `PrometheusAuthOauthHeader2$inboundSchema` instead. */
  export const inboundSchema = PrometheusAuthOauthHeader2$inboundSchema;
  /** @deprecated use `PrometheusAuthOauthHeader2$outboundSchema` instead. */
  export const outboundSchema = PrometheusAuthOauthHeader2$outboundSchema;
  /** @deprecated use `PrometheusAuthOauthHeader2$Outbound` instead. */
  export type Outbound = PrometheusAuthOauthHeader2$Outbound;
}

export function prometheusAuthOauthHeader2ToJSON(
  prometheusAuthOauthHeader2: PrometheusAuthOauthHeader2,
): string {
  return JSON.stringify(
    PrometheusAuthOauthHeader2$outboundSchema.parse(prometheusAuthOauthHeader2),
  );
}

export function prometheusAuthOauthHeader2FromJSON(
  jsonString: string,
): SafeParseResult<PrometheusAuthOauthHeader2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrometheusAuthOauthHeader2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrometheusAuthOauthHeader2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaPrometheusAuth2$inboundSchema: z.ZodType<
  InputGrafanaPrometheusAuth2,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: InputGrafanaPrometheusAuthAuthenticationType2$inboundSchema.default(
    "none",
  ),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => PrometheusAuthOauthParam2$inboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => PrometheusAuthOauthHeader2$inboundSchema))
    .optional(),
});

/** @internal */
export type InputGrafanaPrometheusAuth2$Outbound = {
  authType: string;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<PrometheusAuthOauthParam2$Outbound> | undefined;
  oauthHeaders?: Array<PrometheusAuthOauthHeader2$Outbound> | undefined;
};

/** @internal */
export const InputGrafanaPrometheusAuth2$outboundSchema: z.ZodType<
  InputGrafanaPrometheusAuth2$Outbound,
  z.ZodTypeDef,
  InputGrafanaPrometheusAuth2
> = z.object({
  authType: InputGrafanaPrometheusAuthAuthenticationType2$outboundSchema
    .default("none"),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => PrometheusAuthOauthParam2$outboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => PrometheusAuthOauthHeader2$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaPrometheusAuth2$ {
  /** @deprecated use `InputGrafanaPrometheusAuth2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaPrometheusAuth2$inboundSchema;
  /** @deprecated use `InputGrafanaPrometheusAuth2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaPrometheusAuth2$outboundSchema;
  /** @deprecated use `InputGrafanaPrometheusAuth2$Outbound` instead. */
  export type Outbound = InputGrafanaPrometheusAuth2$Outbound;
}

export function inputGrafanaPrometheusAuth2ToJSON(
  inputGrafanaPrometheusAuth2: InputGrafanaPrometheusAuth2,
): string {
  return JSON.stringify(
    InputGrafanaPrometheusAuth2$outboundSchema.parse(
      inputGrafanaPrometheusAuth2,
    ),
  );
}

export function inputGrafanaPrometheusAuth2FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaPrometheusAuth2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaPrometheusAuth2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaPrometheusAuth2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaLokiAuthAuthenticationType2$inboundSchema: z.ZodType<
  InputGrafanaLokiAuthAuthenticationType2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaLokiAuthAuthenticationType2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaLokiAuthAuthenticationType2$outboundSchema: z.ZodType<
  InputGrafanaLokiAuthAuthenticationType2,
  z.ZodTypeDef,
  InputGrafanaLokiAuthAuthenticationType2
> = z.union([
  z.nativeEnum(InputGrafanaLokiAuthAuthenticationType2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaLokiAuthAuthenticationType2$ {
  /** @deprecated use `InputGrafanaLokiAuthAuthenticationType2$inboundSchema` instead. */
  export const inboundSchema =
    InputGrafanaLokiAuthAuthenticationType2$inboundSchema;
  /** @deprecated use `InputGrafanaLokiAuthAuthenticationType2$outboundSchema` instead. */
  export const outboundSchema =
    InputGrafanaLokiAuthAuthenticationType2$outboundSchema;
}

/** @internal */
export const LokiAuthOauthParam2$inboundSchema: z.ZodType<
  LokiAuthOauthParam2,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type LokiAuthOauthParam2$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const LokiAuthOauthParam2$outboundSchema: z.ZodType<
  LokiAuthOauthParam2$Outbound,
  z.ZodTypeDef,
  LokiAuthOauthParam2
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LokiAuthOauthParam2$ {
  /** @deprecated use `LokiAuthOauthParam2$inboundSchema` instead. */
  export const inboundSchema = LokiAuthOauthParam2$inboundSchema;
  /** @deprecated use `LokiAuthOauthParam2$outboundSchema` instead. */
  export const outboundSchema = LokiAuthOauthParam2$outboundSchema;
  /** @deprecated use `LokiAuthOauthParam2$Outbound` instead. */
  export type Outbound = LokiAuthOauthParam2$Outbound;
}

export function lokiAuthOauthParam2ToJSON(
  lokiAuthOauthParam2: LokiAuthOauthParam2,
): string {
  return JSON.stringify(
    LokiAuthOauthParam2$outboundSchema.parse(lokiAuthOauthParam2),
  );
}

export function lokiAuthOauthParam2FromJSON(
  jsonString: string,
): SafeParseResult<LokiAuthOauthParam2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LokiAuthOauthParam2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LokiAuthOauthParam2' from JSON`,
  );
}

/** @internal */
export const LokiAuthOauthHeader2$inboundSchema: z.ZodType<
  LokiAuthOauthHeader2,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type LokiAuthOauthHeader2$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const LokiAuthOauthHeader2$outboundSchema: z.ZodType<
  LokiAuthOauthHeader2$Outbound,
  z.ZodTypeDef,
  LokiAuthOauthHeader2
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LokiAuthOauthHeader2$ {
  /** @deprecated use `LokiAuthOauthHeader2$inboundSchema` instead. */
  export const inboundSchema = LokiAuthOauthHeader2$inboundSchema;
  /** @deprecated use `LokiAuthOauthHeader2$outboundSchema` instead. */
  export const outboundSchema = LokiAuthOauthHeader2$outboundSchema;
  /** @deprecated use `LokiAuthOauthHeader2$Outbound` instead. */
  export type Outbound = LokiAuthOauthHeader2$Outbound;
}

export function lokiAuthOauthHeader2ToJSON(
  lokiAuthOauthHeader2: LokiAuthOauthHeader2,
): string {
  return JSON.stringify(
    LokiAuthOauthHeader2$outboundSchema.parse(lokiAuthOauthHeader2),
  );
}

export function lokiAuthOauthHeader2FromJSON(
  jsonString: string,
): SafeParseResult<LokiAuthOauthHeader2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LokiAuthOauthHeader2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LokiAuthOauthHeader2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaLokiAuth2$inboundSchema: z.ZodType<
  InputGrafanaLokiAuth2,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: InputGrafanaLokiAuthAuthenticationType2$inboundSchema.default(
    "none",
  ),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => LokiAuthOauthParam2$inboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => LokiAuthOauthHeader2$inboundSchema))
    .optional(),
});

/** @internal */
export type InputGrafanaLokiAuth2$Outbound = {
  authType: string;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<LokiAuthOauthParam2$Outbound> | undefined;
  oauthHeaders?: Array<LokiAuthOauthHeader2$Outbound> | undefined;
};

/** @internal */
export const InputGrafanaLokiAuth2$outboundSchema: z.ZodType<
  InputGrafanaLokiAuth2$Outbound,
  z.ZodTypeDef,
  InputGrafanaLokiAuth2
> = z.object({
  authType: InputGrafanaLokiAuthAuthenticationType2$outboundSchema.default(
    "none",
  ),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => LokiAuthOauthParam2$outboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => LokiAuthOauthHeader2$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaLokiAuth2$ {
  /** @deprecated use `InputGrafanaLokiAuth2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaLokiAuth2$inboundSchema;
  /** @deprecated use `InputGrafanaLokiAuth2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaLokiAuth2$outboundSchema;
  /** @deprecated use `InputGrafanaLokiAuth2$Outbound` instead. */
  export type Outbound = InputGrafanaLokiAuth2$Outbound;
}

export function inputGrafanaLokiAuth2ToJSON(
  inputGrafanaLokiAuth2: InputGrafanaLokiAuth2,
): string {
  return JSON.stringify(
    InputGrafanaLokiAuth2$outboundSchema.parse(inputGrafanaLokiAuth2),
  );
}

export function inputGrafanaLokiAuth2FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaLokiAuth2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaLokiAuth2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaLokiAuth2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaMetadatum2$inboundSchema: z.ZodType<
  InputGrafanaMetadatum2,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputGrafanaMetadatum2$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputGrafanaMetadatum2$outboundSchema: z.ZodType<
  InputGrafanaMetadatum2$Outbound,
  z.ZodTypeDef,
  InputGrafanaMetadatum2
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaMetadatum2$ {
  /** @deprecated use `InputGrafanaMetadatum2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaMetadatum2$inboundSchema;
  /** @deprecated use `InputGrafanaMetadatum2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaMetadatum2$outboundSchema;
  /** @deprecated use `InputGrafanaMetadatum2$Outbound` instead. */
  export type Outbound = InputGrafanaMetadatum2$Outbound;
}

export function inputGrafanaMetadatum2ToJSON(
  inputGrafanaMetadatum2: InputGrafanaMetadatum2,
): string {
  return JSON.stringify(
    InputGrafanaMetadatum2$outboundSchema.parse(inputGrafanaMetadatum2),
  );
}

export function inputGrafanaMetadatum2FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaMetadatum2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaMetadatum2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaMetadatum2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaGrafana2$inboundSchema: z.ZodType<
  InputGrafanaGrafana2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputGrafanaType2$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputGrafanaConnection2$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputGrafanaPq2$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputGrafanaTLSSettingsServerSide2$inboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  prometheusAPI: z.string().default("/api/prom/push"),
  lokiAPI: z.string().default("/loki/api/v1/push"),
  prometheusAuth: z.lazy(() => InputGrafanaPrometheusAuth2$inboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => InputGrafanaLokiAuth2$inboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputGrafanaMetadatum2$inboundSchema))
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputGrafanaGrafana2$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputGrafanaConnection2$Outbound> | undefined;
  pq?: InputGrafanaPq2$Outbound | undefined;
  host: string;
  port: number;
  tls?: InputGrafanaTLSSettingsServerSide2$Outbound | undefined;
  maxActiveReq: number;
  maxRequestsPerSocket: number;
  enableProxyHeader: boolean;
  captureHeaders: boolean;
  activityLogSampleRate: number;
  requestTimeout: number;
  socketTimeout: number;
  keepAliveTimeout: number;
  enableHealthCheck: boolean;
  ipAllowlistRegex: string;
  ipDenylistRegex: string;
  prometheusAPI: string;
  lokiAPI: string;
  prometheusAuth?: InputGrafanaPrometheusAuth2$Outbound | undefined;
  lokiAuth?: InputGrafanaLokiAuth2$Outbound | undefined;
  metadata?: Array<InputGrafanaMetadatum2$Outbound> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputGrafanaGrafana2$outboundSchema: z.ZodType<
  InputGrafanaGrafana2$Outbound,
  z.ZodTypeDef,
  InputGrafanaGrafana2
> = z.object({
  id: z.string().optional(),
  type: InputGrafanaType2$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputGrafanaConnection2$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputGrafanaPq2$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputGrafanaTLSSettingsServerSide2$outboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  prometheusAPI: z.string().default("/api/prom/push"),
  lokiAPI: z.string().default("/loki/api/v1/push"),
  prometheusAuth: z.lazy(() => InputGrafanaPrometheusAuth2$outboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => InputGrafanaLokiAuth2$outboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputGrafanaMetadatum2$outboundSchema))
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaGrafana2$ {
  /** @deprecated use `InputGrafanaGrafana2$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaGrafana2$inboundSchema;
  /** @deprecated use `InputGrafanaGrafana2$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaGrafana2$outboundSchema;
  /** @deprecated use `InputGrafanaGrafana2$Outbound` instead. */
  export type Outbound = InputGrafanaGrafana2$Outbound;
}

export function inputGrafanaGrafana2ToJSON(
  inputGrafanaGrafana2: InputGrafanaGrafana2,
): string {
  return JSON.stringify(
    InputGrafanaGrafana2$outboundSchema.parse(inputGrafanaGrafana2),
  );
}

export function inputGrafanaGrafana2FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaGrafana2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaGrafana2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaGrafana2' from JSON`,
  );
}

/** @internal */
export const InputGrafanaType1$inboundSchema: z.ZodNativeEnum<
  typeof InputGrafanaType1
> = z.nativeEnum(InputGrafanaType1);

/** @internal */
export const InputGrafanaType1$outboundSchema: z.ZodNativeEnum<
  typeof InputGrafanaType1
> = InputGrafanaType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaType1$ {
  /** @deprecated use `InputGrafanaType1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaType1$inboundSchema;
  /** @deprecated use `InputGrafanaType1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaType1$outboundSchema;
}

/** @internal */
export const InputGrafanaConnection1$inboundSchema: z.ZodType<
  InputGrafanaConnection1,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputGrafanaConnection1$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputGrafanaConnection1$outboundSchema: z.ZodType<
  InputGrafanaConnection1$Outbound,
  z.ZodTypeDef,
  InputGrafanaConnection1
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaConnection1$ {
  /** @deprecated use `InputGrafanaConnection1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaConnection1$inboundSchema;
  /** @deprecated use `InputGrafanaConnection1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaConnection1$outboundSchema;
  /** @deprecated use `InputGrafanaConnection1$Outbound` instead. */
  export type Outbound = InputGrafanaConnection1$Outbound;
}

export function inputGrafanaConnection1ToJSON(
  inputGrafanaConnection1: InputGrafanaConnection1,
): string {
  return JSON.stringify(
    InputGrafanaConnection1$outboundSchema.parse(inputGrafanaConnection1),
  );
}

export function inputGrafanaConnection1FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaConnection1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaConnection1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaConnection1' from JSON`,
  );
}

/** @internal */
export const InputGrafanaMode1$inboundSchema: z.ZodType<
  InputGrafanaMode1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaMode1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaMode1$outboundSchema: z.ZodType<
  InputGrafanaMode1,
  z.ZodTypeDef,
  InputGrafanaMode1
> = z.union([
  z.nativeEnum(InputGrafanaMode1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaMode1$ {
  /** @deprecated use `InputGrafanaMode1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaMode1$inboundSchema;
  /** @deprecated use `InputGrafanaMode1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaMode1$outboundSchema;
}

/** @internal */
export const InputGrafanaCompression1$inboundSchema: z.ZodType<
  InputGrafanaCompression1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaCompression1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaCompression1$outboundSchema: z.ZodType<
  InputGrafanaCompression1,
  z.ZodTypeDef,
  InputGrafanaCompression1
> = z.union([
  z.nativeEnum(InputGrafanaCompression1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaCompression1$ {
  /** @deprecated use `InputGrafanaCompression1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaCompression1$inboundSchema;
  /** @deprecated use `InputGrafanaCompression1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaCompression1$outboundSchema;
}

/** @internal */
export const InputGrafanaPqControls1$inboundSchema: z.ZodType<
  InputGrafanaPqControls1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputGrafanaPqControls1$Outbound = {};

/** @internal */
export const InputGrafanaPqControls1$outboundSchema: z.ZodType<
  InputGrafanaPqControls1$Outbound,
  z.ZodTypeDef,
  InputGrafanaPqControls1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaPqControls1$ {
  /** @deprecated use `InputGrafanaPqControls1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaPqControls1$inboundSchema;
  /** @deprecated use `InputGrafanaPqControls1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaPqControls1$outboundSchema;
  /** @deprecated use `InputGrafanaPqControls1$Outbound` instead. */
  export type Outbound = InputGrafanaPqControls1$Outbound;
}

export function inputGrafanaPqControls1ToJSON(
  inputGrafanaPqControls1: InputGrafanaPqControls1,
): string {
  return JSON.stringify(
    InputGrafanaPqControls1$outboundSchema.parse(inputGrafanaPqControls1),
  );
}

export function inputGrafanaPqControls1FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaPqControls1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaPqControls1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaPqControls1' from JSON`,
  );
}

/** @internal */
export const InputGrafanaPq1$inboundSchema: z.ZodType<
  InputGrafanaPq1,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputGrafanaMode1$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputGrafanaCompression1$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputGrafanaPqControls1$inboundSchema).optional(),
});

/** @internal */
export type InputGrafanaPq1$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputGrafanaPqControls1$Outbound | undefined;
};

/** @internal */
export const InputGrafanaPq1$outboundSchema: z.ZodType<
  InputGrafanaPq1$Outbound,
  z.ZodTypeDef,
  InputGrafanaPq1
> = z.object({
  mode: InputGrafanaMode1$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputGrafanaCompression1$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputGrafanaPqControls1$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaPq1$ {
  /** @deprecated use `InputGrafanaPq1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaPq1$inboundSchema;
  /** @deprecated use `InputGrafanaPq1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaPq1$outboundSchema;
  /** @deprecated use `InputGrafanaPq1$Outbound` instead. */
  export type Outbound = InputGrafanaPq1$Outbound;
}

export function inputGrafanaPq1ToJSON(
  inputGrafanaPq1: InputGrafanaPq1,
): string {
  return JSON.stringify(InputGrafanaPq1$outboundSchema.parse(inputGrafanaPq1));
}

export function inputGrafanaPq1FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaPq1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaPq1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaPq1' from JSON`,
  );
}

/** @internal */
export const InputGrafanaMinimumTLSVersion1$inboundSchema: z.ZodType<
  InputGrafanaMinimumTLSVersion1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaMinimumTLSVersion1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaMinimumTLSVersion1$outboundSchema: z.ZodType<
  InputGrafanaMinimumTLSVersion1,
  z.ZodTypeDef,
  InputGrafanaMinimumTLSVersion1
> = z.union([
  z.nativeEnum(InputGrafanaMinimumTLSVersion1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaMinimumTLSVersion1$ {
  /** @deprecated use `InputGrafanaMinimumTLSVersion1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaMinimumTLSVersion1$inboundSchema;
  /** @deprecated use `InputGrafanaMinimumTLSVersion1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaMinimumTLSVersion1$outboundSchema;
}

/** @internal */
export const InputGrafanaMaximumTLSVersion1$inboundSchema: z.ZodType<
  InputGrafanaMaximumTLSVersion1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaMaximumTLSVersion1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaMaximumTLSVersion1$outboundSchema: z.ZodType<
  InputGrafanaMaximumTLSVersion1,
  z.ZodTypeDef,
  InputGrafanaMaximumTLSVersion1
> = z.union([
  z.nativeEnum(InputGrafanaMaximumTLSVersion1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaMaximumTLSVersion1$ {
  /** @deprecated use `InputGrafanaMaximumTLSVersion1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaMaximumTLSVersion1$inboundSchema;
  /** @deprecated use `InputGrafanaMaximumTLSVersion1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaMaximumTLSVersion1$outboundSchema;
}

/** @internal */
export const InputGrafanaTLSSettingsServerSide1$inboundSchema: z.ZodType<
  InputGrafanaTLSSettingsServerSide1,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputGrafanaMinimumTLSVersion1$inboundSchema.optional(),
  maxVersion: InputGrafanaMaximumTLSVersion1$inboundSchema.optional(),
});

/** @internal */
export type InputGrafanaTLSSettingsServerSide1$Outbound = {
  disabled: boolean;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  requestCert: boolean;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputGrafanaTLSSettingsServerSide1$outboundSchema: z.ZodType<
  InputGrafanaTLSSettingsServerSide1$Outbound,
  z.ZodTypeDef,
  InputGrafanaTLSSettingsServerSide1
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputGrafanaMinimumTLSVersion1$outboundSchema.optional(),
  maxVersion: InputGrafanaMaximumTLSVersion1$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaTLSSettingsServerSide1$ {
  /** @deprecated use `InputGrafanaTLSSettingsServerSide1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaTLSSettingsServerSide1$inboundSchema;
  /** @deprecated use `InputGrafanaTLSSettingsServerSide1$outboundSchema` instead. */
  export const outboundSchema =
    InputGrafanaTLSSettingsServerSide1$outboundSchema;
  /** @deprecated use `InputGrafanaTLSSettingsServerSide1$Outbound` instead. */
  export type Outbound = InputGrafanaTLSSettingsServerSide1$Outbound;
}

export function inputGrafanaTLSSettingsServerSide1ToJSON(
  inputGrafanaTLSSettingsServerSide1: InputGrafanaTLSSettingsServerSide1,
): string {
  return JSON.stringify(
    InputGrafanaTLSSettingsServerSide1$outboundSchema.parse(
      inputGrafanaTLSSettingsServerSide1,
    ),
  );
}

export function inputGrafanaTLSSettingsServerSide1FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaTLSSettingsServerSide1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InputGrafanaTLSSettingsServerSide1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaTLSSettingsServerSide1' from JSON`,
  );
}

/** @internal */
export const InputGrafanaPrometheusAuthAuthenticationType1$inboundSchema:
  z.ZodType<
    InputGrafanaPrometheusAuthAuthenticationType1,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(InputGrafanaPrometheusAuthAuthenticationType1),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const InputGrafanaPrometheusAuthAuthenticationType1$outboundSchema:
  z.ZodType<
    InputGrafanaPrometheusAuthAuthenticationType1,
    z.ZodTypeDef,
    InputGrafanaPrometheusAuthAuthenticationType1
  > = z.union([
    z.nativeEnum(InputGrafanaPrometheusAuthAuthenticationType1),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaPrometheusAuthAuthenticationType1$ {
  /** @deprecated use `InputGrafanaPrometheusAuthAuthenticationType1$inboundSchema` instead. */
  export const inboundSchema =
    InputGrafanaPrometheusAuthAuthenticationType1$inboundSchema;
  /** @deprecated use `InputGrafanaPrometheusAuthAuthenticationType1$outboundSchema` instead. */
  export const outboundSchema =
    InputGrafanaPrometheusAuthAuthenticationType1$outboundSchema;
}

/** @internal */
export const PrometheusAuthOauthParam1$inboundSchema: z.ZodType<
  PrometheusAuthOauthParam1,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type PrometheusAuthOauthParam1$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const PrometheusAuthOauthParam1$outboundSchema: z.ZodType<
  PrometheusAuthOauthParam1$Outbound,
  z.ZodTypeDef,
  PrometheusAuthOauthParam1
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrometheusAuthOauthParam1$ {
  /** @deprecated use `PrometheusAuthOauthParam1$inboundSchema` instead. */
  export const inboundSchema = PrometheusAuthOauthParam1$inboundSchema;
  /** @deprecated use `PrometheusAuthOauthParam1$outboundSchema` instead. */
  export const outboundSchema = PrometheusAuthOauthParam1$outboundSchema;
  /** @deprecated use `PrometheusAuthOauthParam1$Outbound` instead. */
  export type Outbound = PrometheusAuthOauthParam1$Outbound;
}

export function prometheusAuthOauthParam1ToJSON(
  prometheusAuthOauthParam1: PrometheusAuthOauthParam1,
): string {
  return JSON.stringify(
    PrometheusAuthOauthParam1$outboundSchema.parse(prometheusAuthOauthParam1),
  );
}

export function prometheusAuthOauthParam1FromJSON(
  jsonString: string,
): SafeParseResult<PrometheusAuthOauthParam1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrometheusAuthOauthParam1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrometheusAuthOauthParam1' from JSON`,
  );
}

/** @internal */
export const PrometheusAuthOauthHeader1$inboundSchema: z.ZodType<
  PrometheusAuthOauthHeader1,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type PrometheusAuthOauthHeader1$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const PrometheusAuthOauthHeader1$outboundSchema: z.ZodType<
  PrometheusAuthOauthHeader1$Outbound,
  z.ZodTypeDef,
  PrometheusAuthOauthHeader1
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrometheusAuthOauthHeader1$ {
  /** @deprecated use `PrometheusAuthOauthHeader1$inboundSchema` instead. */
  export const inboundSchema = PrometheusAuthOauthHeader1$inboundSchema;
  /** @deprecated use `PrometheusAuthOauthHeader1$outboundSchema` instead. */
  export const outboundSchema = PrometheusAuthOauthHeader1$outboundSchema;
  /** @deprecated use `PrometheusAuthOauthHeader1$Outbound` instead. */
  export type Outbound = PrometheusAuthOauthHeader1$Outbound;
}

export function prometheusAuthOauthHeader1ToJSON(
  prometheusAuthOauthHeader1: PrometheusAuthOauthHeader1,
): string {
  return JSON.stringify(
    PrometheusAuthOauthHeader1$outboundSchema.parse(prometheusAuthOauthHeader1),
  );
}

export function prometheusAuthOauthHeader1FromJSON(
  jsonString: string,
): SafeParseResult<PrometheusAuthOauthHeader1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrometheusAuthOauthHeader1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrometheusAuthOauthHeader1' from JSON`,
  );
}

/** @internal */
export const InputGrafanaPrometheusAuth1$inboundSchema: z.ZodType<
  InputGrafanaPrometheusAuth1,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: InputGrafanaPrometheusAuthAuthenticationType1$inboundSchema.default(
    "none",
  ),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => PrometheusAuthOauthParam1$inboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => PrometheusAuthOauthHeader1$inboundSchema))
    .optional(),
});

/** @internal */
export type InputGrafanaPrometheusAuth1$Outbound = {
  authType: string;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<PrometheusAuthOauthParam1$Outbound> | undefined;
  oauthHeaders?: Array<PrometheusAuthOauthHeader1$Outbound> | undefined;
};

/** @internal */
export const InputGrafanaPrometheusAuth1$outboundSchema: z.ZodType<
  InputGrafanaPrometheusAuth1$Outbound,
  z.ZodTypeDef,
  InputGrafanaPrometheusAuth1
> = z.object({
  authType: InputGrafanaPrometheusAuthAuthenticationType1$outboundSchema
    .default("none"),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => PrometheusAuthOauthParam1$outboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => PrometheusAuthOauthHeader1$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaPrometheusAuth1$ {
  /** @deprecated use `InputGrafanaPrometheusAuth1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaPrometheusAuth1$inboundSchema;
  /** @deprecated use `InputGrafanaPrometheusAuth1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaPrometheusAuth1$outboundSchema;
  /** @deprecated use `InputGrafanaPrometheusAuth1$Outbound` instead. */
  export type Outbound = InputGrafanaPrometheusAuth1$Outbound;
}

export function inputGrafanaPrometheusAuth1ToJSON(
  inputGrafanaPrometheusAuth1: InputGrafanaPrometheusAuth1,
): string {
  return JSON.stringify(
    InputGrafanaPrometheusAuth1$outboundSchema.parse(
      inputGrafanaPrometheusAuth1,
    ),
  );
}

export function inputGrafanaPrometheusAuth1FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaPrometheusAuth1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaPrometheusAuth1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaPrometheusAuth1' from JSON`,
  );
}

/** @internal */
export const InputGrafanaLokiAuthAuthenticationType1$inboundSchema: z.ZodType<
  InputGrafanaLokiAuthAuthenticationType1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGrafanaLokiAuthAuthenticationType1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGrafanaLokiAuthAuthenticationType1$outboundSchema: z.ZodType<
  InputGrafanaLokiAuthAuthenticationType1,
  z.ZodTypeDef,
  InputGrafanaLokiAuthAuthenticationType1
> = z.union([
  z.nativeEnum(InputGrafanaLokiAuthAuthenticationType1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaLokiAuthAuthenticationType1$ {
  /** @deprecated use `InputGrafanaLokiAuthAuthenticationType1$inboundSchema` instead. */
  export const inboundSchema =
    InputGrafanaLokiAuthAuthenticationType1$inboundSchema;
  /** @deprecated use `InputGrafanaLokiAuthAuthenticationType1$outboundSchema` instead. */
  export const outboundSchema =
    InputGrafanaLokiAuthAuthenticationType1$outboundSchema;
}

/** @internal */
export const LokiAuthOauthParam1$inboundSchema: z.ZodType<
  LokiAuthOauthParam1,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type LokiAuthOauthParam1$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const LokiAuthOauthParam1$outboundSchema: z.ZodType<
  LokiAuthOauthParam1$Outbound,
  z.ZodTypeDef,
  LokiAuthOauthParam1
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LokiAuthOauthParam1$ {
  /** @deprecated use `LokiAuthOauthParam1$inboundSchema` instead. */
  export const inboundSchema = LokiAuthOauthParam1$inboundSchema;
  /** @deprecated use `LokiAuthOauthParam1$outboundSchema` instead. */
  export const outboundSchema = LokiAuthOauthParam1$outboundSchema;
  /** @deprecated use `LokiAuthOauthParam1$Outbound` instead. */
  export type Outbound = LokiAuthOauthParam1$Outbound;
}

export function lokiAuthOauthParam1ToJSON(
  lokiAuthOauthParam1: LokiAuthOauthParam1,
): string {
  return JSON.stringify(
    LokiAuthOauthParam1$outboundSchema.parse(lokiAuthOauthParam1),
  );
}

export function lokiAuthOauthParam1FromJSON(
  jsonString: string,
): SafeParseResult<LokiAuthOauthParam1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LokiAuthOauthParam1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LokiAuthOauthParam1' from JSON`,
  );
}

/** @internal */
export const LokiAuthOauthHeader1$inboundSchema: z.ZodType<
  LokiAuthOauthHeader1,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type LokiAuthOauthHeader1$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const LokiAuthOauthHeader1$outboundSchema: z.ZodType<
  LokiAuthOauthHeader1$Outbound,
  z.ZodTypeDef,
  LokiAuthOauthHeader1
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LokiAuthOauthHeader1$ {
  /** @deprecated use `LokiAuthOauthHeader1$inboundSchema` instead. */
  export const inboundSchema = LokiAuthOauthHeader1$inboundSchema;
  /** @deprecated use `LokiAuthOauthHeader1$outboundSchema` instead. */
  export const outboundSchema = LokiAuthOauthHeader1$outboundSchema;
  /** @deprecated use `LokiAuthOauthHeader1$Outbound` instead. */
  export type Outbound = LokiAuthOauthHeader1$Outbound;
}

export function lokiAuthOauthHeader1ToJSON(
  lokiAuthOauthHeader1: LokiAuthOauthHeader1,
): string {
  return JSON.stringify(
    LokiAuthOauthHeader1$outboundSchema.parse(lokiAuthOauthHeader1),
  );
}

export function lokiAuthOauthHeader1FromJSON(
  jsonString: string,
): SafeParseResult<LokiAuthOauthHeader1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LokiAuthOauthHeader1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LokiAuthOauthHeader1' from JSON`,
  );
}

/** @internal */
export const InputGrafanaLokiAuth1$inboundSchema: z.ZodType<
  InputGrafanaLokiAuth1,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: InputGrafanaLokiAuthAuthenticationType1$inboundSchema.default(
    "none",
  ),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => LokiAuthOauthParam1$inboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => LokiAuthOauthHeader1$inboundSchema))
    .optional(),
});

/** @internal */
export type InputGrafanaLokiAuth1$Outbound = {
  authType: string;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<LokiAuthOauthParam1$Outbound> | undefined;
  oauthHeaders?: Array<LokiAuthOauthHeader1$Outbound> | undefined;
};

/** @internal */
export const InputGrafanaLokiAuth1$outboundSchema: z.ZodType<
  InputGrafanaLokiAuth1$Outbound,
  z.ZodTypeDef,
  InputGrafanaLokiAuth1
> = z.object({
  authType: InputGrafanaLokiAuthAuthenticationType1$outboundSchema.default(
    "none",
  ),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => LokiAuthOauthParam1$outboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => LokiAuthOauthHeader1$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaLokiAuth1$ {
  /** @deprecated use `InputGrafanaLokiAuth1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaLokiAuth1$inboundSchema;
  /** @deprecated use `InputGrafanaLokiAuth1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaLokiAuth1$outboundSchema;
  /** @deprecated use `InputGrafanaLokiAuth1$Outbound` instead. */
  export type Outbound = InputGrafanaLokiAuth1$Outbound;
}

export function inputGrafanaLokiAuth1ToJSON(
  inputGrafanaLokiAuth1: InputGrafanaLokiAuth1,
): string {
  return JSON.stringify(
    InputGrafanaLokiAuth1$outboundSchema.parse(inputGrafanaLokiAuth1),
  );
}

export function inputGrafanaLokiAuth1FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaLokiAuth1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaLokiAuth1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaLokiAuth1' from JSON`,
  );
}

/** @internal */
export const InputGrafanaMetadatum1$inboundSchema: z.ZodType<
  InputGrafanaMetadatum1,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputGrafanaMetadatum1$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputGrafanaMetadatum1$outboundSchema: z.ZodType<
  InputGrafanaMetadatum1$Outbound,
  z.ZodTypeDef,
  InputGrafanaMetadatum1
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaMetadatum1$ {
  /** @deprecated use `InputGrafanaMetadatum1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaMetadatum1$inboundSchema;
  /** @deprecated use `InputGrafanaMetadatum1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaMetadatum1$outboundSchema;
  /** @deprecated use `InputGrafanaMetadatum1$Outbound` instead. */
  export type Outbound = InputGrafanaMetadatum1$Outbound;
}

export function inputGrafanaMetadatum1ToJSON(
  inputGrafanaMetadatum1: InputGrafanaMetadatum1,
): string {
  return JSON.stringify(
    InputGrafanaMetadatum1$outboundSchema.parse(inputGrafanaMetadatum1),
  );
}

export function inputGrafanaMetadatum1FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaMetadatum1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaMetadatum1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaMetadatum1' from JSON`,
  );
}

/** @internal */
export const InputGrafanaGrafana1$inboundSchema: z.ZodType<
  InputGrafanaGrafana1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputGrafanaType1$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputGrafanaConnection1$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputGrafanaPq1$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputGrafanaTLSSettingsServerSide1$inboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  prometheusAPI: z.string().default("/api/prom/push"),
  lokiAPI: z.string().default("/loki/api/v1/push"),
  prometheusAuth: z.lazy(() => InputGrafanaPrometheusAuth1$inboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => InputGrafanaLokiAuth1$inboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputGrafanaMetadatum1$inboundSchema))
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputGrafanaGrafana1$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputGrafanaConnection1$Outbound> | undefined;
  pq?: InputGrafanaPq1$Outbound | undefined;
  host: string;
  port: number;
  tls?: InputGrafanaTLSSettingsServerSide1$Outbound | undefined;
  maxActiveReq: number;
  maxRequestsPerSocket: number;
  enableProxyHeader: boolean;
  captureHeaders: boolean;
  activityLogSampleRate: number;
  requestTimeout: number;
  socketTimeout: number;
  keepAliveTimeout: number;
  enableHealthCheck: boolean;
  ipAllowlistRegex: string;
  ipDenylistRegex: string;
  prometheusAPI: string;
  lokiAPI: string;
  prometheusAuth?: InputGrafanaPrometheusAuth1$Outbound | undefined;
  lokiAuth?: InputGrafanaLokiAuth1$Outbound | undefined;
  metadata?: Array<InputGrafanaMetadatum1$Outbound> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputGrafanaGrafana1$outboundSchema: z.ZodType<
  InputGrafanaGrafana1$Outbound,
  z.ZodTypeDef,
  InputGrafanaGrafana1
> = z.object({
  id: z.string().optional(),
  type: InputGrafanaType1$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputGrafanaConnection1$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputGrafanaPq1$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputGrafanaTLSSettingsServerSide1$outboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  prometheusAPI: z.string().default("/api/prom/push"),
  lokiAPI: z.string().default("/loki/api/v1/push"),
  prometheusAuth: z.lazy(() => InputGrafanaPrometheusAuth1$outboundSchema)
    .optional(),
  lokiAuth: z.lazy(() => InputGrafanaLokiAuth1$outboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputGrafanaMetadatum1$outboundSchema))
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafanaGrafana1$ {
  /** @deprecated use `InputGrafanaGrafana1$inboundSchema` instead. */
  export const inboundSchema = InputGrafanaGrafana1$inboundSchema;
  /** @deprecated use `InputGrafanaGrafana1$outboundSchema` instead. */
  export const outboundSchema = InputGrafanaGrafana1$outboundSchema;
  /** @deprecated use `InputGrafanaGrafana1$Outbound` instead. */
  export type Outbound = InputGrafanaGrafana1$Outbound;
}

export function inputGrafanaGrafana1ToJSON(
  inputGrafanaGrafana1: InputGrafanaGrafana1,
): string {
  return JSON.stringify(
    InputGrafanaGrafana1$outboundSchema.parse(inputGrafanaGrafana1),
  );
}

export function inputGrafanaGrafana1FromJSON(
  jsonString: string,
): SafeParseResult<InputGrafanaGrafana1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafanaGrafana1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafanaGrafana1' from JSON`,
  );
}

/** @internal */
export const InputGrafana$inboundSchema: z.ZodType<
  InputGrafana,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InputGrafanaGrafana1$inboundSchema),
  z.lazy(() => InputGrafanaGrafana2$inboundSchema),
]);

/** @internal */
export type InputGrafana$Outbound =
  | InputGrafanaGrafana1$Outbound
  | InputGrafanaGrafana2$Outbound;

/** @internal */
export const InputGrafana$outboundSchema: z.ZodType<
  InputGrafana$Outbound,
  z.ZodTypeDef,
  InputGrafana
> = z.union([
  z.lazy(() => InputGrafanaGrafana1$outboundSchema),
  z.lazy(() => InputGrafanaGrafana2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGrafana$ {
  /** @deprecated use `InputGrafana$inboundSchema` instead. */
  export const inboundSchema = InputGrafana$inboundSchema;
  /** @deprecated use `InputGrafana$outboundSchema` instead. */
  export const outboundSchema = InputGrafana$outboundSchema;
  /** @deprecated use `InputGrafana$Outbound` instead. */
  export type Outbound = InputGrafana$Outbound;
}

export function inputGrafanaToJSON(inputGrafana: InputGrafana): string {
  return JSON.stringify(InputGrafana$outboundSchema.parse(inputGrafana));
}

export function inputGrafanaFromJSON(
  jsonString: string,
): SafeParseResult<InputGrafana, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGrafana$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGrafana' from JSON`,
  );
}
