/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSplunkLbType = {
  SplunkLb: "splunk_lb",
} as const;
export type OutputSplunkLbType = ClosedEnum<typeof OutputSplunkLbType>;

/**
 * How to serialize nested fields into index-time fields
 */
export const OutputSplunkLbNestedFieldSerialization = {
  Json: "json",
  None: "none",
} as const;
/**
 * How to serialize nested fields into index-time fields
 */
export type OutputSplunkLbNestedFieldSerialization = OpenEnum<
  typeof OutputSplunkLbNestedFieldSerialization
>;

export const OutputSplunkLbMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputSplunkLbMinimumTLSVersion = OpenEnum<
  typeof OutputSplunkLbMinimumTLSVersion
>;

export const OutputSplunkLbMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputSplunkLbMaximumTLSVersion = OpenEnum<
  typeof OutputSplunkLbMaximumTLSVersion
>;

export type OutputSplunkLbTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Reject certificates that are not authorized by a CA in the CA certificate path, or by another
   *
   * @remarks
   *                     trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: OutputSplunkLbMinimumTLSVersion | undefined;
  maxVersion?: OutputSplunkLbMaximumTLSVersion | undefined;
};

/**
 * The highest S2S protocol version to advertise during handshake
 */
export const OutputSplunkLbMaxS2SVersion = {
  V3: "v3",
  V4: "v4",
} as const;
/**
 * The highest S2S protocol version to advertise during handshake
 */
export type OutputSplunkLbMaxS2SVersion = OpenEnum<
  typeof OutputSplunkLbMaxS2SVersion
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSplunkLbBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSplunkLbBackpressureBehavior = OpenEnum<
  typeof OutputSplunkLbBackpressureBehavior
>;

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const OutputSplunkLbAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type OutputSplunkLbAuthenticationMethod = OpenEnum<
  typeof OutputSplunkLbAuthenticationMethod
>;

/**
 * Controls whether the sender should send compressed data to the server. Select 'Disabled' to reject compressed connections or 'Always' to ignore server's configuration and send compressed data.
 */
export const OutputSplunkLbCompressCompression = {
  Disabled: "disabled",
  Auto: "auto",
  Always: "always",
} as const;
/**
 * Controls whether the sender should send compressed data to the server. Select 'Disabled' to reject compressed connections or 'Always' to ignore server's configuration and send compressed data.
 */
export type OutputSplunkLbCompressCompression = OpenEnum<
  typeof OutputSplunkLbCompressCompression
>;

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const IndexerDiscoveryConfigsAuthTokenAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type IndexerDiscoveryConfigsAuthTokenAuthenticationMethod = OpenEnum<
  typeof IndexerDiscoveryConfigsAuthTokenAuthenticationMethod
>;

export type OutputSplunkLbAuthToken = {
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: IndexerDiscoveryConfigsAuthTokenAuthenticationMethod | undefined;
};

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const IndexerDiscoveryConfigsAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type IndexerDiscoveryConfigsAuthenticationMethod = OpenEnum<
  typeof IndexerDiscoveryConfigsAuthenticationMethod
>;

/**
 * List of configurations to set up indexer discovery in Splunk Indexer clustering environment.
 */
export type IndexerDiscoveryConfigs = {
  /**
   * Clustering site of the indexers from where indexers need to be discovered. In case of single site cluster, it defaults to 'default' site.
   */
  site?: string | undefined;
  /**
   * Full URI of Splunk cluster manager (scheme://host:port). Example: https://managerAddress:8089
   */
  masterUri: string;
  /**
   * Time interval, in seconds, between two consecutive indexer list fetches from cluster manager
   */
  refreshIntervalSec?: number | undefined;
  /**
   * During indexer discovery, reject cluster manager certificates that are not authorized by the system's CA. Disable to allow untrusted (for example, self-signed) certificates.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Tokens required to authenticate to cluster manager for indexer discovery
   */
  authTokens?: Array<OutputSplunkLbAuthToken> | undefined;
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: IndexerDiscoveryConfigsAuthenticationMethod | undefined;
  /**
   * Shared secret to be provided by any client (in authToken header field). If empty, unauthorized access is permitted.
   */
  authToken?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
};

/**
 * Whether to inherit TLS configs from group setting or disable TLS
 */
export const OutputSplunkLbTLS = {
  Inherit: "inherit",
  Off: "off",
} as const;
/**
 * Whether to inherit TLS configs from group setting or disable TLS
 */
export type OutputSplunkLbTLS = OpenEnum<typeof OutputSplunkLbTLS>;

export type OutputSplunkLbHost = {
  /**
   * The hostname of the receiver
   */
  host: string;
  /**
   * The port to connect to on the provided host
   */
  port?: number | undefined;
  /**
   * Whether to inherit TLS configs from group setting or disable TLS
   */
  tls?: OutputSplunkLbTLS | undefined;
  /**
   * Servername to use if establishing a TLS connection. If not specified, defaults to connection host (if not an IP); otherwise, uses the global TLS settings.
   */
  servername?: string | undefined;
  /**
   * Assign a weight (>0) to each endpoint to indicate its traffic-handling capability
   */
  weight?: number | undefined;
};

/**
 * Codec to use to compress the persisted data
 */
export const OutputSplunkLbPqCompressCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputSplunkLbPqCompressCompression = OpenEnum<
  typeof OutputSplunkLbPqCompressCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputSplunkLbQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputSplunkLbQueueFullBehavior = OpenEnum<
  typeof OutputSplunkLbQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputSplunkLbMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputSplunkLbMode = OpenEnum<typeof OutputSplunkLbMode>;

export type OutputSplunkLbPqControls = {};

export type OutputSplunkLb = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSplunkLbType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The interval in which to re-resolve any hostnames and pick up destinations from A records
   */
  dnsResolvePeriodSec?: number | undefined;
  /**
   * How far back in time to keep traffic stats for load balancing purposes
   */
  loadBalanceStatsPeriodSec?: number | undefined;
  /**
   * Maximum number of concurrent connections (per Worker Process). A random set of IPs will be picked on every DNS resolution period. Use 0 for unlimited.
   */
  maxConcurrentSenders?: number | undefined;
  /**
   * How to serialize nested fields into index-time fields
   */
  nestedFields?: OutputSplunkLbNestedFieldSerialization | undefined;
  /**
   * Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
   */
  throttleRatePerSec?: string | undefined;
  /**
   * Amount of time (milliseconds) to wait for the connection to establish before retrying
   */
  connectionTimeout?: number | undefined;
  /**
   * Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
   */
  writeTimeout?: number | undefined;
  tls?: OutputSplunkLbTLSSettingsClientSide | undefined;
  /**
   * Output metrics in multiple-metric format in a single event. Supported in Splunk 8.0 and above.
   */
  enableMultiMetrics?: boolean | undefined;
  /**
   * Check if indexer is shutting down and stop sending data. This helps minimize data loss during shutdown.
   */
  enableACK?: boolean | undefined;
  /**
   * Use to troubleshoot issues with sending data
   */
  logFailedRequests?: boolean | undefined;
  /**
   * The highest S2S protocol version to advertise during handshake
   */
  maxS2Sversion?: OutputSplunkLbMaxS2SVersion | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSplunkLbBackpressureBehavior | undefined;
  /**
   * Automatically discover indexers in indexer clustering environment.
   */
  indexerDiscovery?: boolean | undefined;
  /**
   * How long (in milliseconds) each LB endpoint can report blocked before the Destination reports unhealthy, blocking the sender. (Grace period for fluctuations.) Use 0 to disable; max 1 minute.
   */
  senderUnhealthyTimeAllowance?: number | undefined;
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: OutputSplunkLbAuthenticationMethod | undefined;
  description?: string | undefined;
  /**
   * Maximum number of times healthcheck can fail before we close connection. If set to 0 (disabled), and the connection to Splunk is forcibly closed, some data loss might occur.
   */
  maxFailedHealthChecks?: number | undefined;
  /**
   * Controls whether the sender should send compressed data to the server. Select 'Disabled' to reject compressed connections or 'Always' to ignore server's configuration and send compressed data.
   */
  compress?: OutputSplunkLbCompressCompression | undefined;
  /**
   * List of configurations to set up indexer discovery in Splunk Indexer clustering environment.
   */
  indexerDiscoveryConfigs?: IndexerDiscoveryConfigs | undefined;
  /**
   * Exclude all IPs of the current host from the list of any resolved hostnames
   */
  excludeSelf?: boolean | undefined;
  /**
   * Set of Splunk indexers to load-balance data to.
   */
  hosts: Array<OutputSplunkLbHost>;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputSplunkLbPqCompressCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputSplunkLbQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputSplunkLbMode | undefined;
  pqControls?: OutputSplunkLbPqControls | undefined;
  /**
   * Shared secret token to use when establishing a connection to a Splunk indexer.
   */
  authToken?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
};

/** @internal */
export const OutputSplunkLbType$inboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkLbType
> = z.nativeEnum(OutputSplunkLbType);

/** @internal */
export const OutputSplunkLbType$outboundSchema: z.ZodNativeEnum<
  typeof OutputSplunkLbType
> = OutputSplunkLbType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbType$ {
  /** @deprecated use `OutputSplunkLbType$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbType$inboundSchema;
  /** @deprecated use `OutputSplunkLbType$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbType$outboundSchema;
}

/** @internal */
export const OutputSplunkLbNestedFieldSerialization$inboundSchema: z.ZodType<
  OutputSplunkLbNestedFieldSerialization,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbNestedFieldSerialization),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbNestedFieldSerialization$outboundSchema: z.ZodType<
  OutputSplunkLbNestedFieldSerialization,
  z.ZodTypeDef,
  OutputSplunkLbNestedFieldSerialization
> = z.union([
  z.nativeEnum(OutputSplunkLbNestedFieldSerialization),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbNestedFieldSerialization$ {
  /** @deprecated use `OutputSplunkLbNestedFieldSerialization$inboundSchema` instead. */
  export const inboundSchema =
    OutputSplunkLbNestedFieldSerialization$inboundSchema;
  /** @deprecated use `OutputSplunkLbNestedFieldSerialization$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkLbNestedFieldSerialization$outboundSchema;
}

/** @internal */
export const OutputSplunkLbMinimumTLSVersion$inboundSchema: z.ZodType<
  OutputSplunkLbMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbMinimumTLSVersion$outboundSchema: z.ZodType<
  OutputSplunkLbMinimumTLSVersion,
  z.ZodTypeDef,
  OutputSplunkLbMinimumTLSVersion
> = z.union([
  z.nativeEnum(OutputSplunkLbMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbMinimumTLSVersion$ {
  /** @deprecated use `OutputSplunkLbMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbMinimumTLSVersion$inboundSchema;
  /** @deprecated use `OutputSplunkLbMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputSplunkLbMaximumTLSVersion$inboundSchema: z.ZodType<
  OutputSplunkLbMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbMaximumTLSVersion$outboundSchema: z.ZodType<
  OutputSplunkLbMaximumTLSVersion,
  z.ZodTypeDef,
  OutputSplunkLbMaximumTLSVersion
> = z.union([
  z.nativeEnum(OutputSplunkLbMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbMaximumTLSVersion$ {
  /** @deprecated use `OutputSplunkLbMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbMaximumTLSVersion$inboundSchema;
  /** @deprecated use `OutputSplunkLbMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputSplunkLbTLSSettingsClientSide$inboundSchema: z.ZodType<
  OutputSplunkLbTLSSettingsClientSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputSplunkLbMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: OutputSplunkLbMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type OutputSplunkLbTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const OutputSplunkLbTLSSettingsClientSide$outboundSchema: z.ZodType<
  OutputSplunkLbTLSSettingsClientSide$Outbound,
  z.ZodTypeDef,
  OutputSplunkLbTLSSettingsClientSide
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputSplunkLbMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: OutputSplunkLbMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbTLSSettingsClientSide$ {
  /** @deprecated use `OutputSplunkLbTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema =
    OutputSplunkLbTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `OutputSplunkLbTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkLbTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `OutputSplunkLbTLSSettingsClientSide$Outbound` instead. */
  export type Outbound = OutputSplunkLbTLSSettingsClientSide$Outbound;
}

export function outputSplunkLbTLSSettingsClientSideToJSON(
  outputSplunkLbTLSSettingsClientSide: OutputSplunkLbTLSSettingsClientSide,
): string {
  return JSON.stringify(
    OutputSplunkLbTLSSettingsClientSide$outboundSchema.parse(
      outputSplunkLbTLSSettingsClientSide,
    ),
  );
}

export function outputSplunkLbTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkLbTLSSettingsClientSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSplunkLbTLSSettingsClientSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkLbTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const OutputSplunkLbMaxS2SVersion$inboundSchema: z.ZodType<
  OutputSplunkLbMaxS2SVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbMaxS2SVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbMaxS2SVersion$outboundSchema: z.ZodType<
  OutputSplunkLbMaxS2SVersion,
  z.ZodTypeDef,
  OutputSplunkLbMaxS2SVersion
> = z.union([
  z.nativeEnum(OutputSplunkLbMaxS2SVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbMaxS2SVersion$ {
  /** @deprecated use `OutputSplunkLbMaxS2SVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbMaxS2SVersion$inboundSchema;
  /** @deprecated use `OutputSplunkLbMaxS2SVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbMaxS2SVersion$outboundSchema;
}

/** @internal */
export const OutputSplunkLbBackpressureBehavior$inboundSchema: z.ZodType<
  OutputSplunkLbBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbBackpressureBehavior$outboundSchema: z.ZodType<
  OutputSplunkLbBackpressureBehavior,
  z.ZodTypeDef,
  OutputSplunkLbBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputSplunkLbBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbBackpressureBehavior$ {
  /** @deprecated use `OutputSplunkLbBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSplunkLbBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkLbBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputSplunkLbAuthenticationMethod$inboundSchema: z.ZodType<
  OutputSplunkLbAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbAuthenticationMethod$outboundSchema: z.ZodType<
  OutputSplunkLbAuthenticationMethod,
  z.ZodTypeDef,
  OutputSplunkLbAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputSplunkLbAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbAuthenticationMethod$ {
  /** @deprecated use `OutputSplunkLbAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputSplunkLbAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkLbAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputSplunkLbCompressCompression$inboundSchema: z.ZodType<
  OutputSplunkLbCompressCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbCompressCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbCompressCompression$outboundSchema: z.ZodType<
  OutputSplunkLbCompressCompression,
  z.ZodTypeDef,
  OutputSplunkLbCompressCompression
> = z.union([
  z.nativeEnum(OutputSplunkLbCompressCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbCompressCompression$ {
  /** @deprecated use `OutputSplunkLbCompressCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbCompressCompression$inboundSchema;
  /** @deprecated use `OutputSplunkLbCompressCompression$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkLbCompressCompression$outboundSchema;
}

/** @internal */
export const IndexerDiscoveryConfigsAuthTokenAuthenticationMethod$inboundSchema:
  z.ZodType<
    IndexerDiscoveryConfigsAuthTokenAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(IndexerDiscoveryConfigsAuthTokenAuthenticationMethod),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const IndexerDiscoveryConfigsAuthTokenAuthenticationMethod$outboundSchema:
  z.ZodType<
    IndexerDiscoveryConfigsAuthTokenAuthenticationMethod,
    z.ZodTypeDef,
    IndexerDiscoveryConfigsAuthTokenAuthenticationMethod
  > = z.union([
    z.nativeEnum(IndexerDiscoveryConfigsAuthTokenAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexerDiscoveryConfigsAuthTokenAuthenticationMethod$ {
  /** @deprecated use `IndexerDiscoveryConfigsAuthTokenAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    IndexerDiscoveryConfigsAuthTokenAuthenticationMethod$inboundSchema;
  /** @deprecated use `IndexerDiscoveryConfigsAuthTokenAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    IndexerDiscoveryConfigsAuthTokenAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputSplunkLbAuthToken$inboundSchema: z.ZodType<
  OutputSplunkLbAuthToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: IndexerDiscoveryConfigsAuthTokenAuthenticationMethod$inboundSchema
    .default("manual"),
});

/** @internal */
export type OutputSplunkLbAuthToken$Outbound = {
  authType: string;
};

/** @internal */
export const OutputSplunkLbAuthToken$outboundSchema: z.ZodType<
  OutputSplunkLbAuthToken$Outbound,
  z.ZodTypeDef,
  OutputSplunkLbAuthToken
> = z.object({
  authType: IndexerDiscoveryConfigsAuthTokenAuthenticationMethod$outboundSchema
    .default("manual"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbAuthToken$ {
  /** @deprecated use `OutputSplunkLbAuthToken$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbAuthToken$inboundSchema;
  /** @deprecated use `OutputSplunkLbAuthToken$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbAuthToken$outboundSchema;
  /** @deprecated use `OutputSplunkLbAuthToken$Outbound` instead. */
  export type Outbound = OutputSplunkLbAuthToken$Outbound;
}

export function outputSplunkLbAuthTokenToJSON(
  outputSplunkLbAuthToken: OutputSplunkLbAuthToken,
): string {
  return JSON.stringify(
    OutputSplunkLbAuthToken$outboundSchema.parse(outputSplunkLbAuthToken),
  );
}

export function outputSplunkLbAuthTokenFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkLbAuthToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkLbAuthToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkLbAuthToken' from JSON`,
  );
}

/** @internal */
export const IndexerDiscoveryConfigsAuthenticationMethod$inboundSchema:
  z.ZodType<
    IndexerDiscoveryConfigsAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(IndexerDiscoveryConfigsAuthenticationMethod),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const IndexerDiscoveryConfigsAuthenticationMethod$outboundSchema:
  z.ZodType<
    IndexerDiscoveryConfigsAuthenticationMethod,
    z.ZodTypeDef,
    IndexerDiscoveryConfigsAuthenticationMethod
  > = z.union([
    z.nativeEnum(IndexerDiscoveryConfigsAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexerDiscoveryConfigsAuthenticationMethod$ {
  /** @deprecated use `IndexerDiscoveryConfigsAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    IndexerDiscoveryConfigsAuthenticationMethod$inboundSchema;
  /** @deprecated use `IndexerDiscoveryConfigsAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    IndexerDiscoveryConfigsAuthenticationMethod$outboundSchema;
}

/** @internal */
export const IndexerDiscoveryConfigs$inboundSchema: z.ZodType<
  IndexerDiscoveryConfigs,
  z.ZodTypeDef,
  unknown
> = z.object({
  site: z.string().default("default"),
  masterUri: z.string(),
  refreshIntervalSec: z.number().default(300),
  rejectUnauthorized: z.boolean().default(false),
  authTokens: z.array(z.lazy(() => OutputSplunkLbAuthToken$inboundSchema))
    .optional(),
  authType: IndexerDiscoveryConfigsAuthenticationMethod$inboundSchema.default(
    "manual",
  ),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/** @internal */
export type IndexerDiscoveryConfigs$Outbound = {
  site: string;
  masterUri: string;
  refreshIntervalSec: number;
  rejectUnauthorized: boolean;
  authTokens?: Array<OutputSplunkLbAuthToken$Outbound> | undefined;
  authType: string;
  authToken: string;
  textSecret?: string | undefined;
};

/** @internal */
export const IndexerDiscoveryConfigs$outboundSchema: z.ZodType<
  IndexerDiscoveryConfigs$Outbound,
  z.ZodTypeDef,
  IndexerDiscoveryConfigs
> = z.object({
  site: z.string().default("default"),
  masterUri: z.string(),
  refreshIntervalSec: z.number().default(300),
  rejectUnauthorized: z.boolean().default(false),
  authTokens: z.array(z.lazy(() => OutputSplunkLbAuthToken$outboundSchema))
    .optional(),
  authType: IndexerDiscoveryConfigsAuthenticationMethod$outboundSchema.default(
    "manual",
  ),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexerDiscoveryConfigs$ {
  /** @deprecated use `IndexerDiscoveryConfigs$inboundSchema` instead. */
  export const inboundSchema = IndexerDiscoveryConfigs$inboundSchema;
  /** @deprecated use `IndexerDiscoveryConfigs$outboundSchema` instead. */
  export const outboundSchema = IndexerDiscoveryConfigs$outboundSchema;
  /** @deprecated use `IndexerDiscoveryConfigs$Outbound` instead. */
  export type Outbound = IndexerDiscoveryConfigs$Outbound;
}

export function indexerDiscoveryConfigsToJSON(
  indexerDiscoveryConfigs: IndexerDiscoveryConfigs,
): string {
  return JSON.stringify(
    IndexerDiscoveryConfigs$outboundSchema.parse(indexerDiscoveryConfigs),
  );
}

export function indexerDiscoveryConfigsFromJSON(
  jsonString: string,
): SafeParseResult<IndexerDiscoveryConfigs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndexerDiscoveryConfigs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndexerDiscoveryConfigs' from JSON`,
  );
}

/** @internal */
export const OutputSplunkLbTLS$inboundSchema: z.ZodType<
  OutputSplunkLbTLS,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbTLS),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbTLS$outboundSchema: z.ZodType<
  OutputSplunkLbTLS,
  z.ZodTypeDef,
  OutputSplunkLbTLS
> = z.union([
  z.nativeEnum(OutputSplunkLbTLS),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbTLS$ {
  /** @deprecated use `OutputSplunkLbTLS$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbTLS$inboundSchema;
  /** @deprecated use `OutputSplunkLbTLS$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbTLS$outboundSchema;
}

/** @internal */
export const OutputSplunkLbHost$inboundSchema: z.ZodType<
  OutputSplunkLbHost,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  port: z.number().default(9997),
  tls: OutputSplunkLbTLS$inboundSchema.default("inherit"),
  servername: z.string().optional(),
  weight: z.number().default(1),
});

/** @internal */
export type OutputSplunkLbHost$Outbound = {
  host: string;
  port: number;
  tls: string;
  servername?: string | undefined;
  weight: number;
};

/** @internal */
export const OutputSplunkLbHost$outboundSchema: z.ZodType<
  OutputSplunkLbHost$Outbound,
  z.ZodTypeDef,
  OutputSplunkLbHost
> = z.object({
  host: z.string(),
  port: z.number().default(9997),
  tls: OutputSplunkLbTLS$outboundSchema.default("inherit"),
  servername: z.string().optional(),
  weight: z.number().default(1),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbHost$ {
  /** @deprecated use `OutputSplunkLbHost$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbHost$inboundSchema;
  /** @deprecated use `OutputSplunkLbHost$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbHost$outboundSchema;
  /** @deprecated use `OutputSplunkLbHost$Outbound` instead. */
  export type Outbound = OutputSplunkLbHost$Outbound;
}

export function outputSplunkLbHostToJSON(
  outputSplunkLbHost: OutputSplunkLbHost,
): string {
  return JSON.stringify(
    OutputSplunkLbHost$outboundSchema.parse(outputSplunkLbHost),
  );
}

export function outputSplunkLbHostFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkLbHost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkLbHost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkLbHost' from JSON`,
  );
}

/** @internal */
export const OutputSplunkLbPqCompressCompression$inboundSchema: z.ZodType<
  OutputSplunkLbPqCompressCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbPqCompressCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbPqCompressCompression$outboundSchema: z.ZodType<
  OutputSplunkLbPqCompressCompression,
  z.ZodTypeDef,
  OutputSplunkLbPqCompressCompression
> = z.union([
  z.nativeEnum(OutputSplunkLbPqCompressCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbPqCompressCompression$ {
  /** @deprecated use `OutputSplunkLbPqCompressCompression$inboundSchema` instead. */
  export const inboundSchema =
    OutputSplunkLbPqCompressCompression$inboundSchema;
  /** @deprecated use `OutputSplunkLbPqCompressCompression$outboundSchema` instead. */
  export const outboundSchema =
    OutputSplunkLbPqCompressCompression$outboundSchema;
}

/** @internal */
export const OutputSplunkLbQueueFullBehavior$inboundSchema: z.ZodType<
  OutputSplunkLbQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbQueueFullBehavior$outboundSchema: z.ZodType<
  OutputSplunkLbQueueFullBehavior,
  z.ZodTypeDef,
  OutputSplunkLbQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputSplunkLbQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbQueueFullBehavior$ {
  /** @deprecated use `OutputSplunkLbQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputSplunkLbQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputSplunkLbMode$inboundSchema: z.ZodType<
  OutputSplunkLbMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSplunkLbMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSplunkLbMode$outboundSchema: z.ZodType<
  OutputSplunkLbMode,
  z.ZodTypeDef,
  OutputSplunkLbMode
> = z.union([
  z.nativeEnum(OutputSplunkLbMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbMode$ {
  /** @deprecated use `OutputSplunkLbMode$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbMode$inboundSchema;
  /** @deprecated use `OutputSplunkLbMode$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbMode$outboundSchema;
}

/** @internal */
export const OutputSplunkLbPqControls$inboundSchema: z.ZodType<
  OutputSplunkLbPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSplunkLbPqControls$Outbound = {};

/** @internal */
export const OutputSplunkLbPqControls$outboundSchema: z.ZodType<
  OutputSplunkLbPqControls$Outbound,
  z.ZodTypeDef,
  OutputSplunkLbPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLbPqControls$ {
  /** @deprecated use `OutputSplunkLbPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLbPqControls$inboundSchema;
  /** @deprecated use `OutputSplunkLbPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLbPqControls$outboundSchema;
  /** @deprecated use `OutputSplunkLbPqControls$Outbound` instead. */
  export type Outbound = OutputSplunkLbPqControls$Outbound;
}

export function outputSplunkLbPqControlsToJSON(
  outputSplunkLbPqControls: OutputSplunkLbPqControls,
): string {
  return JSON.stringify(
    OutputSplunkLbPqControls$outboundSchema.parse(outputSplunkLbPqControls),
  );
}

export function outputSplunkLbPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkLbPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkLbPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkLbPqControls' from JSON`,
  );
}

/** @internal */
export const OutputSplunkLb$inboundSchema: z.ZodType<
  OutputSplunkLb,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSplunkLbType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
  maxConcurrentSenders: z.number().default(0),
  nestedFields: OutputSplunkLbNestedFieldSerialization$inboundSchema.default(
    "none",
  ),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  tls: z.lazy(() => OutputSplunkLbTLSSettingsClientSide$inboundSchema)
    .optional(),
  enableMultiMetrics: z.boolean().default(false),
  enableACK: z.boolean().default(true),
  logFailedRequests: z.boolean().default(false),
  maxS2Sversion: OutputSplunkLbMaxS2SVersion$inboundSchema.default("v3"),
  onBackpressure: OutputSplunkLbBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  indexerDiscovery: z.boolean().default(false),
  senderUnhealthyTimeAllowance: z.number().default(100),
  authType: OutputSplunkLbAuthenticationMethod$inboundSchema.default("manual"),
  description: z.string().optional(),
  maxFailedHealthChecks: z.number().default(1),
  compress: OutputSplunkLbCompressCompression$inboundSchema.default("disabled"),
  indexerDiscoveryConfigs: z.lazy(() => IndexerDiscoveryConfigs$inboundSchema)
    .optional(),
  excludeSelf: z.boolean().default(false),
  hosts: z.array(z.lazy(() => OutputSplunkLbHost$inboundSchema)),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSplunkLbPqCompressCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputSplunkLbQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputSplunkLbMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSplunkLbPqControls$inboundSchema).optional(),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/** @internal */
export type OutputSplunkLb$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  dnsResolvePeriodSec: number;
  loadBalanceStatsPeriodSec: number;
  maxConcurrentSenders: number;
  nestedFields: string;
  throttleRatePerSec: string;
  connectionTimeout: number;
  writeTimeout: number;
  tls?: OutputSplunkLbTLSSettingsClientSide$Outbound | undefined;
  enableMultiMetrics: boolean;
  enableACK: boolean;
  logFailedRequests: boolean;
  maxS2Sversion: string;
  onBackpressure: string;
  indexerDiscovery: boolean;
  senderUnhealthyTimeAllowance: number;
  authType: string;
  description?: string | undefined;
  maxFailedHealthChecks: number;
  compress: string;
  indexerDiscoveryConfigs?: IndexerDiscoveryConfigs$Outbound | undefined;
  excludeSelf: boolean;
  hosts: Array<OutputSplunkLbHost$Outbound>;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputSplunkLbPqControls$Outbound | undefined;
  authToken: string;
  textSecret?: string | undefined;
};

/** @internal */
export const OutputSplunkLb$outboundSchema: z.ZodType<
  OutputSplunkLb$Outbound,
  z.ZodTypeDef,
  OutputSplunkLb
> = z.object({
  id: z.string().optional(),
  type: OutputSplunkLbType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  dnsResolvePeriodSec: z.number().default(600),
  loadBalanceStatsPeriodSec: z.number().default(300),
  maxConcurrentSenders: z.number().default(0),
  nestedFields: OutputSplunkLbNestedFieldSerialization$outboundSchema.default(
    "none",
  ),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  tls: z.lazy(() => OutputSplunkLbTLSSettingsClientSide$outboundSchema)
    .optional(),
  enableMultiMetrics: z.boolean().default(false),
  enableACK: z.boolean().default(true),
  logFailedRequests: z.boolean().default(false),
  maxS2Sversion: OutputSplunkLbMaxS2SVersion$outboundSchema.default("v3"),
  onBackpressure: OutputSplunkLbBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  indexerDiscovery: z.boolean().default(false),
  senderUnhealthyTimeAllowance: z.number().default(100),
  authType: OutputSplunkLbAuthenticationMethod$outboundSchema.default("manual"),
  description: z.string().optional(),
  maxFailedHealthChecks: z.number().default(1),
  compress: OutputSplunkLbCompressCompression$outboundSchema.default(
    "disabled",
  ),
  indexerDiscoveryConfigs: z.lazy(() => IndexerDiscoveryConfigs$outboundSchema)
    .optional(),
  excludeSelf: z.boolean().default(false),
  hosts: z.array(z.lazy(() => OutputSplunkLbHost$outboundSchema)),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSplunkLbPqCompressCompression$outboundSchema.default(
    "none",
  ),
  pqOnBackpressure: OutputSplunkLbQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputSplunkLbMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSplunkLbPqControls$outboundSchema).optional(),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSplunkLb$ {
  /** @deprecated use `OutputSplunkLb$inboundSchema` instead. */
  export const inboundSchema = OutputSplunkLb$inboundSchema;
  /** @deprecated use `OutputSplunkLb$outboundSchema` instead. */
  export const outboundSchema = OutputSplunkLb$outboundSchema;
  /** @deprecated use `OutputSplunkLb$Outbound` instead. */
  export type Outbound = OutputSplunkLb$Outbound;
}

export function outputSplunkLbToJSON(outputSplunkLb: OutputSplunkLb): string {
  return JSON.stringify(OutputSplunkLb$outboundSchema.parse(outputSplunkLb));
}

export function outputSplunkLbFromJSON(
  jsonString: string,
): SafeParseResult<OutputSplunkLb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSplunkLb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSplunkLb' from JSON`,
  );
}
