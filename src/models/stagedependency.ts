/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  StageDependencyType,
  StageDependencyType$inboundSchema,
  StageDependencyType$outboundSchema,
} from "./stagedependencytype.js";

export type StageDependency = {
  dependentFields?: Array<string> | undefined;
  id: string;
  type: StageDependencyType;
};

/** @internal */
export const StageDependency$inboundSchema: z.ZodType<
  StageDependency,
  z.ZodTypeDef,
  unknown
> = z.object({
  dependentFields: z.array(z.string()).optional(),
  id: z.string(),
  type: StageDependencyType$inboundSchema,
});

/** @internal */
export type StageDependency$Outbound = {
  dependentFields?: Array<string> | undefined;
  id: string;
  type: string;
};

/** @internal */
export const StageDependency$outboundSchema: z.ZodType<
  StageDependency$Outbound,
  z.ZodTypeDef,
  StageDependency
> = z.object({
  dependentFields: z.array(z.string()).optional(),
  id: z.string(),
  type: StageDependencyType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StageDependency$ {
  /** @deprecated use `StageDependency$inboundSchema` instead. */
  export const inboundSchema = StageDependency$inboundSchema;
  /** @deprecated use `StageDependency$outboundSchema` instead. */
  export const outboundSchema = StageDependency$outboundSchema;
  /** @deprecated use `StageDependency$Outbound` instead. */
  export type Outbound = StageDependency$Outbound;
}

export function stageDependencyToJSON(
  stageDependency: StageDependency,
): string {
  return JSON.stringify(StageDependency$outboundSchema.parse(stageDependency));
}

export function stageDependencyFromJSON(
  jsonString: string,
): SafeParseResult<StageDependency, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StageDependency$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StageDependency' from JSON`,
  );
}
