/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputHumioHecType = {
  HumioHec: "humio_hec",
} as const;
export type OutputHumioHecType = ClosedEnum<typeof OutputHumioHecType>;

export type OutputHumioHecExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputHumioHecFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputHumioHecFailedRequestLoggingMode = ClosedEnum<
  typeof OutputHumioHecFailedRequestLoggingMode
>;

/**
 * When set to JSON, the event is automatically formatted with required fields before sending. When set to Raw, only the event's `_raw` value is sent.
 */
export const OutputHumioHecRequestFormat = {
  Json: "JSON",
  Raw: "raw",
} as const;
/**
 * When set to JSON, the event is automatically formatted with required fields before sending. When set to Raw, only the event's `_raw` value is sent.
 */
export type OutputHumioHecRequestFormat = ClosedEnum<
  typeof OutputHumioHecRequestFormat
>;

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const OutputHumioHecAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type OutputHumioHecAuthenticationMethod = ClosedEnum<
  typeof OutputHumioHecAuthenticationMethod
>;

export type OutputHumioHecResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputHumioHecTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputHumioHecBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputHumioHecBackpressureBehavior = ClosedEnum<
  typeof OutputHumioHecBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputHumioHecCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputHumioHecCompression = ClosedEnum<
  typeof OutputHumioHecCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputHumioHecQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputHumioHecQueueFullBehavior = ClosedEnum<
  typeof OutputHumioHecQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputHumioHecMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputHumioHecMode = ClosedEnum<typeof OutputHumioHecMode>;

export type OutputHumioHecPqControls = {};

export type OutputHumioHec = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputHumioHecType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * URL to a CrowdStrike Falcon LogScale endpoint to send events to. Examples: https://cloud.us.humio.com/api/v1/ingest/hec for JSON and https://cloud.us.humio.com/api/v1/ingest/hec/raw for raw
   */
  url?: string | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputHumioHecExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?: OutputHumioHecFailedRequestLoggingMode | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * When set to JSON, the event is automatically formatted with required fields before sending. When set to Raw, only the event's `_raw` value is sent.
   */
  format?: OutputHumioHecRequestFormat | undefined;
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: OutputHumioHecAuthenticationMethod | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?: Array<OutputHumioHecResponseRetrySetting> | undefined;
  timeoutRetrySettings?: OutputHumioHecTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputHumioHecBackpressureBehavior | undefined;
  description?: string | undefined;
  /**
   * CrowdStrike Falcon LogScale authentication token
   */
  token?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputHumioHecCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputHumioHecQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputHumioHecMode | undefined;
  pqControls?: OutputHumioHecPqControls | undefined;
};

/** @internal */
export const OutputHumioHecType$inboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecType
> = z.nativeEnum(OutputHumioHecType);

/** @internal */
export const OutputHumioHecType$outboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecType
> = OutputHumioHecType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecType$ {
  /** @deprecated use `OutputHumioHecType$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecType$inboundSchema;
  /** @deprecated use `OutputHumioHecType$outboundSchema` instead. */
  export const outboundSchema = OutputHumioHecType$outboundSchema;
}

/** @internal */
export const OutputHumioHecExtraHttpHeader$inboundSchema: z.ZodType<
  OutputHumioHecExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputHumioHecExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputHumioHecExtraHttpHeader$outboundSchema: z.ZodType<
  OutputHumioHecExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputHumioHecExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecExtraHttpHeader$ {
  /** @deprecated use `OutputHumioHecExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputHumioHecExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputHumioHecExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputHumioHecExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputHumioHecExtraHttpHeader$Outbound;
}

export function outputHumioHecExtraHttpHeaderToJSON(
  outputHumioHecExtraHttpHeader: OutputHumioHecExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputHumioHecExtraHttpHeader$outboundSchema.parse(
      outputHumioHecExtraHttpHeader,
    ),
  );
}

export function outputHumioHecExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputHumioHecExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputHumioHecExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHumioHecExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputHumioHecFailedRequestLoggingMode$inboundSchema:
  z.ZodNativeEnum<typeof OutputHumioHecFailedRequestLoggingMode> = z.nativeEnum(
    OutputHumioHecFailedRequestLoggingMode,
  );

/** @internal */
export const OutputHumioHecFailedRequestLoggingMode$outboundSchema:
  z.ZodNativeEnum<typeof OutputHumioHecFailedRequestLoggingMode> =
    OutputHumioHecFailedRequestLoggingMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecFailedRequestLoggingMode$ {
  /** @deprecated use `OutputHumioHecFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputHumioHecFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputHumioHecFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputHumioHecFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputHumioHecRequestFormat$inboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecRequestFormat
> = z.nativeEnum(OutputHumioHecRequestFormat);

/** @internal */
export const OutputHumioHecRequestFormat$outboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecRequestFormat
> = OutputHumioHecRequestFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecRequestFormat$ {
  /** @deprecated use `OutputHumioHecRequestFormat$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecRequestFormat$inboundSchema;
  /** @deprecated use `OutputHumioHecRequestFormat$outboundSchema` instead. */
  export const outboundSchema = OutputHumioHecRequestFormat$outboundSchema;
}

/** @internal */
export const OutputHumioHecAuthenticationMethod$inboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecAuthenticationMethod
> = z.nativeEnum(OutputHumioHecAuthenticationMethod);

/** @internal */
export const OutputHumioHecAuthenticationMethod$outboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecAuthenticationMethod
> = OutputHumioHecAuthenticationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecAuthenticationMethod$ {
  /** @deprecated use `OutputHumioHecAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputHumioHecAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputHumioHecAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputHumioHecResponseRetrySetting$inboundSchema: z.ZodType<
  OutputHumioHecResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputHumioHecResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputHumioHecResponseRetrySetting$outboundSchema: z.ZodType<
  OutputHumioHecResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputHumioHecResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecResponseRetrySetting$ {
  /** @deprecated use `OutputHumioHecResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputHumioHecResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputHumioHecResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputHumioHecResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputHumioHecResponseRetrySetting$Outbound;
}

export function outputHumioHecResponseRetrySettingToJSON(
  outputHumioHecResponseRetrySetting: OutputHumioHecResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputHumioHecResponseRetrySetting$outboundSchema.parse(
      outputHumioHecResponseRetrySetting,
    ),
  );
}

export function outputHumioHecResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputHumioHecResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputHumioHecResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHumioHecResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputHumioHecTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputHumioHecTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputHumioHecTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputHumioHecTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputHumioHecTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputHumioHecTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecTimeoutRetrySettings$ {
  /** @deprecated use `OutputHumioHecTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputHumioHecTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputHumioHecTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputHumioHecTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputHumioHecTimeoutRetrySettings$Outbound;
}

export function outputHumioHecTimeoutRetrySettingsToJSON(
  outputHumioHecTimeoutRetrySettings: OutputHumioHecTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputHumioHecTimeoutRetrySettings$outboundSchema.parse(
      outputHumioHecTimeoutRetrySettings,
    ),
  );
}

export function outputHumioHecTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputHumioHecTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputHumioHecTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHumioHecTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputHumioHecBackpressureBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecBackpressureBehavior
> = z.nativeEnum(OutputHumioHecBackpressureBehavior);

/** @internal */
export const OutputHumioHecBackpressureBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecBackpressureBehavior
> = OutputHumioHecBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecBackpressureBehavior$ {
  /** @deprecated use `OutputHumioHecBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputHumioHecBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputHumioHecBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputHumioHecCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecCompression
> = z.nativeEnum(OutputHumioHecCompression);

/** @internal */
export const OutputHumioHecCompression$outboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecCompression
> = OutputHumioHecCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecCompression$ {
  /** @deprecated use `OutputHumioHecCompression$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecCompression$inboundSchema;
  /** @deprecated use `OutputHumioHecCompression$outboundSchema` instead. */
  export const outboundSchema = OutputHumioHecCompression$outboundSchema;
}

/** @internal */
export const OutputHumioHecQueueFullBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecQueueFullBehavior
> = z.nativeEnum(OutputHumioHecQueueFullBehavior);

/** @internal */
export const OutputHumioHecQueueFullBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecQueueFullBehavior
> = OutputHumioHecQueueFullBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecQueueFullBehavior$ {
  /** @deprecated use `OutputHumioHecQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputHumioHecQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputHumioHecQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputHumioHecMode$inboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecMode
> = z.nativeEnum(OutputHumioHecMode);

/** @internal */
export const OutputHumioHecMode$outboundSchema: z.ZodNativeEnum<
  typeof OutputHumioHecMode
> = OutputHumioHecMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecMode$ {
  /** @deprecated use `OutputHumioHecMode$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecMode$inboundSchema;
  /** @deprecated use `OutputHumioHecMode$outboundSchema` instead. */
  export const outboundSchema = OutputHumioHecMode$outboundSchema;
}

/** @internal */
export const OutputHumioHecPqControls$inboundSchema: z.ZodType<
  OutputHumioHecPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputHumioHecPqControls$Outbound = {};

/** @internal */
export const OutputHumioHecPqControls$outboundSchema: z.ZodType<
  OutputHumioHecPqControls$Outbound,
  z.ZodTypeDef,
  OutputHumioHecPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHecPqControls$ {
  /** @deprecated use `OutputHumioHecPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHecPqControls$inboundSchema;
  /** @deprecated use `OutputHumioHecPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputHumioHecPqControls$outboundSchema;
  /** @deprecated use `OutputHumioHecPqControls$Outbound` instead. */
  export type Outbound = OutputHumioHecPqControls$Outbound;
}

export function outputHumioHecPqControlsToJSON(
  outputHumioHecPqControls: OutputHumioHecPqControls,
): string {
  return JSON.stringify(
    OutputHumioHecPqControls$outboundSchema.parse(outputHumioHecPqControls),
  );
}

export function outputHumioHecPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputHumioHecPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputHumioHecPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHumioHecPqControls' from JSON`,
  );
}

/** @internal */
export const OutputHumioHec$inboundSchema: z.ZodType<
  OutputHumioHec,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputHumioHecType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string().default("https://cloud.us.humio.com/api/v1/ingest/hec"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputHumioHecExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(true),
  failedRequestLoggingMode: OutputHumioHecFailedRequestLoggingMode$inboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  format: OutputHumioHecRequestFormat$inboundSchema.default("JSON"),
  authType: OutputHumioHecAuthenticationMethod$inboundSchema.default("manual"),
  responseRetrySettings: z.array(
    z.lazy(() => OutputHumioHecResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputHumioHecTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputHumioHecBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputHumioHecCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputHumioHecQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputHumioHecMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputHumioHecPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputHumioHec$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  url: string;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputHumioHecExtraHttpHeader$Outbound> | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  format: string;
  authType: string;
  responseRetrySettings?:
    | Array<OutputHumioHecResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputHumioHecTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  description?: string | undefined;
  token?: string | undefined;
  textSecret?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputHumioHecPqControls$Outbound | undefined;
};

/** @internal */
export const OutputHumioHec$outboundSchema: z.ZodType<
  OutputHumioHec$Outbound,
  z.ZodTypeDef,
  OutputHumioHec
> = z.object({
  id: z.string().optional(),
  type: OutputHumioHecType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string().default("https://cloud.us.humio.com/api/v1/ingest/hec"),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputHumioHecExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(true),
  failedRequestLoggingMode:
    OutputHumioHecFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  format: OutputHumioHecRequestFormat$outboundSchema.default("JSON"),
  authType: OutputHumioHecAuthenticationMethod$outboundSchema.default("manual"),
  responseRetrySettings: z.array(
    z.lazy(() => OutputHumioHecResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputHumioHecTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputHumioHecBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  token: z.string().optional(),
  textSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputHumioHecCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputHumioHecQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputHumioHecMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputHumioHecPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputHumioHec$ {
  /** @deprecated use `OutputHumioHec$inboundSchema` instead. */
  export const inboundSchema = OutputHumioHec$inboundSchema;
  /** @deprecated use `OutputHumioHec$outboundSchema` instead. */
  export const outboundSchema = OutputHumioHec$outboundSchema;
  /** @deprecated use `OutputHumioHec$Outbound` instead. */
  export type Outbound = OutputHumioHec$Outbound;
}

export function outputHumioHecToJSON(outputHumioHec: OutputHumioHec): string {
  return JSON.stringify(OutputHumioHec$outboundSchema.parse(outputHumioHec));
}

export function outputHumioHecFromJSON(
  jsonString: string,
): SafeParseResult<OutputHumioHec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputHumioHec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputHumioHec' from JSON`,
  );
}
