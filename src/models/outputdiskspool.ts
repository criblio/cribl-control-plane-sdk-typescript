/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputDiskSpoolType = {
  DiskSpool: "disk_spool",
} as const;
export type OutputDiskSpoolType = ClosedEnum<typeof OutputDiskSpoolType>;

/**
 * Data compression format. Default is gzip.
 */
export const OutputDiskSpoolCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Data compression format. Default is gzip.
 */
export type OutputDiskSpoolCompression = OpenEnum<
  typeof OutputDiskSpoolCompression
>;

export type OutputDiskSpool = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputDiskSpoolType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Time period for grouping spooled events. Default is 10m.
   */
  timeWindow?: string | undefined;
  /**
   * Maximum disk space that can be consumed before older buckets are deleted. Examples: 420MB, 4GB. Default is 1GB.
   */
  maxDataSize?: string | undefined;
  /**
   * Maximum amount of time to retain data before older buckets are deleted. Examples: 2h, 4d. Default is 24h.
   */
  maxDataTime?: string | undefined;
  /**
   * Data compression format. Default is gzip.
   */
  compress?: OutputDiskSpoolCompression | undefined;
  /**
   * JavaScript expression defining how files are partitioned and organized within the time-buckets. If blank, the event's __partition property is used and otherwise, events go directly into the time-bucket directory.
   */
  partitionExpr?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const OutputDiskSpoolType$inboundSchema: z.ZodNativeEnum<
  typeof OutputDiskSpoolType
> = z.nativeEnum(OutputDiskSpoolType);

/** @internal */
export const OutputDiskSpoolType$outboundSchema: z.ZodNativeEnum<
  typeof OutputDiskSpoolType
> = OutputDiskSpoolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDiskSpoolType$ {
  /** @deprecated use `OutputDiskSpoolType$inboundSchema` instead. */
  export const inboundSchema = OutputDiskSpoolType$inboundSchema;
  /** @deprecated use `OutputDiskSpoolType$outboundSchema` instead. */
  export const outboundSchema = OutputDiskSpoolType$outboundSchema;
}

/** @internal */
export const OutputDiskSpoolCompression$inboundSchema: z.ZodType<
  OutputDiskSpoolCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDiskSpoolCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDiskSpoolCompression$outboundSchema: z.ZodType<
  OutputDiskSpoolCompression,
  z.ZodTypeDef,
  OutputDiskSpoolCompression
> = z.union([
  z.nativeEnum(OutputDiskSpoolCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDiskSpoolCompression$ {
  /** @deprecated use `OutputDiskSpoolCompression$inboundSchema` instead. */
  export const inboundSchema = OutputDiskSpoolCompression$inboundSchema;
  /** @deprecated use `OutputDiskSpoolCompression$outboundSchema` instead. */
  export const outboundSchema = OutputDiskSpoolCompression$outboundSchema;
}

/** @internal */
export const OutputDiskSpool$inboundSchema: z.ZodType<
  OutputDiskSpool,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputDiskSpoolType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: OutputDiskSpoolCompression$inboundSchema.default("gzip"),
  partitionExpr: z.string().optional(),
  description: z.string().optional(),
});

/** @internal */
export type OutputDiskSpool$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  timeWindow: string;
  maxDataSize: string;
  maxDataTime: string;
  compress: string;
  partitionExpr?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const OutputDiskSpool$outboundSchema: z.ZodType<
  OutputDiskSpool$Outbound,
  z.ZodTypeDef,
  OutputDiskSpool
> = z.object({
  id: z.string().optional(),
  type: OutputDiskSpoolType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: OutputDiskSpoolCompression$outboundSchema.default("gzip"),
  partitionExpr: z.string().optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDiskSpool$ {
  /** @deprecated use `OutputDiskSpool$inboundSchema` instead. */
  export const inboundSchema = OutputDiskSpool$inboundSchema;
  /** @deprecated use `OutputDiskSpool$outboundSchema` instead. */
  export const outboundSchema = OutputDiskSpool$outboundSchema;
  /** @deprecated use `OutputDiskSpool$Outbound` instead. */
  export type Outbound = OutputDiskSpool$Outbound;
}

export function outputDiskSpoolToJSON(
  outputDiskSpool: OutputDiskSpool,
): string {
  return JSON.stringify(OutputDiskSpool$outboundSchema.parse(outputDiskSpool));
}

export function outputDiskSpoolFromJSON(
  jsonString: string,
): SafeParseResult<OutputDiskSpool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputDiskSpool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputDiskSpool' from JSON`,
  );
}
