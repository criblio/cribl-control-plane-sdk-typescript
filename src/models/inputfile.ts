/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputFileType = {
  File: "file",
} as const;
export type InputFileType = ClosedEnum<typeof InputFileType>;

export type InputFileConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputFilePqMode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputFilePqMode = OpenEnum<typeof InputFilePqMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputFileCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputFileCompression = OpenEnum<typeof InputFileCompression>;

export type InputFilePqControls = {};

export type InputFilePq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputFilePqMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputFileCompression | undefined;
  pqControls?: InputFilePqControls | undefined;
};

/**
 * Choose how to discover files to monitor
 */
export const InputFileMode = {
  /**
   * Auto
   */
  Auto: "auto",
  /**
   * Manual
   */
  Manual: "manual",
} as const;
/**
 * Choose how to discover files to monitor
 */
export type InputFileMode = OpenEnum<typeof InputFileMode>;

export type InputFileMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputFile = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputFileType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputFileConnection> | undefined;
  pq?: InputFilePq | undefined;
  /**
   * Choose how to discover files to monitor
   */
  mode?: InputFileMode | undefined;
  /**
   * Time, in seconds, between scanning for files
   */
  interval?: number | undefined;
  /**
   * The full path of discovered files are matched against this wildcard list
   */
  filenames?: Array<string> | undefined;
  /**
   * Read only new entries at the end of all files discovered at next startup. @{product} will then read newly discovered files from the head. Disable this to resume reading all files from head.
   */
  tailOnly?: boolean | undefined;
  /**
   * Time, in seconds, before an idle file is closed
   */
  idleTimeout?: number | undefined;
  /**
   * The maximum age of files to monitor. Format examples: 60s, 4h, 3d, 1w. Age is relative to file modification time. Leave empty to apply no age filters.
   */
  maxAgeDur?: string | undefined;
  /**
   * Skip files with modification times earlier than the maximum age duration
   */
  checkFileModTime?: boolean | undefined;
  /**
   * Forces files containing binary data to be streamed as text
   */
  forceText?: boolean | undefined;
  /**
   * Length of file header bytes to use in hash for unique file identification
   */
  hashLen?: number | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputFileMetadatum> | undefined;
  /**
   * A list of event-breaking rulesets that will be applied, in order, to the input data stream
   */
  breakerRulesets?: Array<string> | undefined;
  /**
   * How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
   */
  staleChannelFlushMs?: number | undefined;
  description?: string | undefined;
  /**
   * Directory path to search for files. Environment variables will be resolved, e.g. $CRIBL_HOME/log/.
   */
  path?: string | undefined;
  /**
   * Set how many subdirectories deep to search. Use 0 to search only files in the given path, 1 to also look in its immediate subdirectories, etc. Leave it empty for unlimited depth.
   */
  depth?: number | undefined;
  suppressMissingPathErrors?: boolean | undefined;
  /**
   * Delete files after they have been collected
   */
  deleteFiles?: boolean | undefined;
  /**
   * Stream binary files as Base64-encoded chunks.
   */
  includeUnidentifiableBinary?: boolean | undefined;
};

/** @internal */
export const InputFileType$inboundSchema: z.ZodNativeEnum<
  typeof InputFileType
> = z.nativeEnum(InputFileType);

/** @internal */
export const InputFileType$outboundSchema: z.ZodNativeEnum<
  typeof InputFileType
> = InputFileType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFileType$ {
  /** @deprecated use `InputFileType$inboundSchema` instead. */
  export const inboundSchema = InputFileType$inboundSchema;
  /** @deprecated use `InputFileType$outboundSchema` instead. */
  export const outboundSchema = InputFileType$outboundSchema;
}

/** @internal */
export const InputFileConnection$inboundSchema: z.ZodType<
  InputFileConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputFileConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputFileConnection$outboundSchema: z.ZodType<
  InputFileConnection$Outbound,
  z.ZodTypeDef,
  InputFileConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFileConnection$ {
  /** @deprecated use `InputFileConnection$inboundSchema` instead. */
  export const inboundSchema = InputFileConnection$inboundSchema;
  /** @deprecated use `InputFileConnection$outboundSchema` instead. */
  export const outboundSchema = InputFileConnection$outboundSchema;
  /** @deprecated use `InputFileConnection$Outbound` instead. */
  export type Outbound = InputFileConnection$Outbound;
}

export function inputFileConnectionToJSON(
  inputFileConnection: InputFileConnection,
): string {
  return JSON.stringify(
    InputFileConnection$outboundSchema.parse(inputFileConnection),
  );
}

export function inputFileConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputFileConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputFileConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputFileConnection' from JSON`,
  );
}

/** @internal */
export const InputFilePqMode$inboundSchema: z.ZodType<
  InputFilePqMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputFilePqMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputFilePqMode$outboundSchema: z.ZodType<
  InputFilePqMode,
  z.ZodTypeDef,
  InputFilePqMode
> = z.union([
  z.nativeEnum(InputFilePqMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFilePqMode$ {
  /** @deprecated use `InputFilePqMode$inboundSchema` instead. */
  export const inboundSchema = InputFilePqMode$inboundSchema;
  /** @deprecated use `InputFilePqMode$outboundSchema` instead. */
  export const outboundSchema = InputFilePqMode$outboundSchema;
}

/** @internal */
export const InputFileCompression$inboundSchema: z.ZodType<
  InputFileCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputFileCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputFileCompression$outboundSchema: z.ZodType<
  InputFileCompression,
  z.ZodTypeDef,
  InputFileCompression
> = z.union([
  z.nativeEnum(InputFileCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFileCompression$ {
  /** @deprecated use `InputFileCompression$inboundSchema` instead. */
  export const inboundSchema = InputFileCompression$inboundSchema;
  /** @deprecated use `InputFileCompression$outboundSchema` instead. */
  export const outboundSchema = InputFileCompression$outboundSchema;
}

/** @internal */
export const InputFilePqControls$inboundSchema: z.ZodType<
  InputFilePqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputFilePqControls$Outbound = {};

/** @internal */
export const InputFilePqControls$outboundSchema: z.ZodType<
  InputFilePqControls$Outbound,
  z.ZodTypeDef,
  InputFilePqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFilePqControls$ {
  /** @deprecated use `InputFilePqControls$inboundSchema` instead. */
  export const inboundSchema = InputFilePqControls$inboundSchema;
  /** @deprecated use `InputFilePqControls$outboundSchema` instead. */
  export const outboundSchema = InputFilePqControls$outboundSchema;
  /** @deprecated use `InputFilePqControls$Outbound` instead. */
  export type Outbound = InputFilePqControls$Outbound;
}

export function inputFilePqControlsToJSON(
  inputFilePqControls: InputFilePqControls,
): string {
  return JSON.stringify(
    InputFilePqControls$outboundSchema.parse(inputFilePqControls),
  );
}

export function inputFilePqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputFilePqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputFilePqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputFilePqControls' from JSON`,
  );
}

/** @internal */
export const InputFilePq$inboundSchema: z.ZodType<
  InputFilePq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputFilePqMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputFileCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputFilePqControls$inboundSchema).optional(),
});

/** @internal */
export type InputFilePq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputFilePqControls$Outbound | undefined;
};

/** @internal */
export const InputFilePq$outboundSchema: z.ZodType<
  InputFilePq$Outbound,
  z.ZodTypeDef,
  InputFilePq
> = z.object({
  mode: InputFilePqMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputFileCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputFilePqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFilePq$ {
  /** @deprecated use `InputFilePq$inboundSchema` instead. */
  export const inboundSchema = InputFilePq$inboundSchema;
  /** @deprecated use `InputFilePq$outboundSchema` instead. */
  export const outboundSchema = InputFilePq$outboundSchema;
  /** @deprecated use `InputFilePq$Outbound` instead. */
  export type Outbound = InputFilePq$Outbound;
}

export function inputFilePqToJSON(inputFilePq: InputFilePq): string {
  return JSON.stringify(InputFilePq$outboundSchema.parse(inputFilePq));
}

export function inputFilePqFromJSON(
  jsonString: string,
): SafeParseResult<InputFilePq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputFilePq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputFilePq' from JSON`,
  );
}

/** @internal */
export const InputFileMode$inboundSchema: z.ZodType<
  InputFileMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputFileMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputFileMode$outboundSchema: z.ZodType<
  InputFileMode,
  z.ZodTypeDef,
  InputFileMode
> = z.union([
  z.nativeEnum(InputFileMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFileMode$ {
  /** @deprecated use `InputFileMode$inboundSchema` instead. */
  export const inboundSchema = InputFileMode$inboundSchema;
  /** @deprecated use `InputFileMode$outboundSchema` instead. */
  export const outboundSchema = InputFileMode$outboundSchema;
}

/** @internal */
export const InputFileMetadatum$inboundSchema: z.ZodType<
  InputFileMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputFileMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputFileMetadatum$outboundSchema: z.ZodType<
  InputFileMetadatum$Outbound,
  z.ZodTypeDef,
  InputFileMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFileMetadatum$ {
  /** @deprecated use `InputFileMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputFileMetadatum$inboundSchema;
  /** @deprecated use `InputFileMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputFileMetadatum$outboundSchema;
  /** @deprecated use `InputFileMetadatum$Outbound` instead. */
  export type Outbound = InputFileMetadatum$Outbound;
}

export function inputFileMetadatumToJSON(
  inputFileMetadatum: InputFileMetadatum,
): string {
  return JSON.stringify(
    InputFileMetadatum$outboundSchema.parse(inputFileMetadatum),
  );
}

export function inputFileMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputFileMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputFileMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputFileMetadatum' from JSON`,
  );
}

/** @internal */
export const InputFile$inboundSchema: z.ZodType<
  InputFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputFileType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputFileConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputFilePq$inboundSchema).optional(),
  mode: InputFileMode$inboundSchema.default("auto"),
  interval: z.number().default(10),
  filenames: z.array(z.string()).optional(),
  tailOnly: z.boolean().default(false),
  idleTimeout: z.number().default(300),
  maxAgeDur: z.string().optional(),
  checkFileModTime: z.boolean().default(false),
  forceText: z.boolean().default(false),
  hashLen: z.number().default(256),
  metadata: z.array(z.lazy(() => InputFileMetadatum$inboundSchema)).optional(),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  description: z.string().optional(),
  path: z.string().optional(),
  depth: z.number().optional(),
  suppressMissingPathErrors: z.boolean().default(false),
  deleteFiles: z.boolean().default(false),
  includeUnidentifiableBinary: z.boolean().default(false),
});

/** @internal */
export type InputFile$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputFileConnection$Outbound> | undefined;
  pq?: InputFilePq$Outbound | undefined;
  mode: string;
  interval: number;
  filenames?: Array<string> | undefined;
  tailOnly: boolean;
  idleTimeout: number;
  maxAgeDur?: string | undefined;
  checkFileModTime: boolean;
  forceText: boolean;
  hashLen: number;
  metadata?: Array<InputFileMetadatum$Outbound> | undefined;
  breakerRulesets?: Array<string> | undefined;
  staleChannelFlushMs: number;
  description?: string | undefined;
  path?: string | undefined;
  depth?: number | undefined;
  suppressMissingPathErrors: boolean;
  deleteFiles: boolean;
  includeUnidentifiableBinary: boolean;
};

/** @internal */
export const InputFile$outboundSchema: z.ZodType<
  InputFile$Outbound,
  z.ZodTypeDef,
  InputFile
> = z.object({
  id: z.string().optional(),
  type: InputFileType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputFileConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputFilePq$outboundSchema).optional(),
  mode: InputFileMode$outboundSchema.default("auto"),
  interval: z.number().default(10),
  filenames: z.array(z.string()).optional(),
  tailOnly: z.boolean().default(false),
  idleTimeout: z.number().default(300),
  maxAgeDur: z.string().optional(),
  checkFileModTime: z.boolean().default(false),
  forceText: z.boolean().default(false),
  hashLen: z.number().default(256),
  metadata: z.array(z.lazy(() => InputFileMetadatum$outboundSchema)).optional(),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  description: z.string().optional(),
  path: z.string().optional(),
  depth: z.number().optional(),
  suppressMissingPathErrors: z.boolean().default(false),
  deleteFiles: z.boolean().default(false),
  includeUnidentifiableBinary: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFile$ {
  /** @deprecated use `InputFile$inboundSchema` instead. */
  export const inboundSchema = InputFile$inboundSchema;
  /** @deprecated use `InputFile$outboundSchema` instead. */
  export const outboundSchema = InputFile$outboundSchema;
  /** @deprecated use `InputFile$Outbound` instead. */
  export type Outbound = InputFile$Outbound;
}

export function inputFileToJSON(inputFile: InputFile): string {
  return JSON.stringify(InputFile$outboundSchema.parse(inputFile));
}

export function inputFileFromJSON(
  jsonString: string,
): SafeParseResult<InputFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputFile' from JSON`,
  );
}
