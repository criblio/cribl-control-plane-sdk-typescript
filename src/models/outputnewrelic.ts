/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputNewrelicType = {
  Newrelic: "newrelic",
} as const;
export type OutputNewrelicType = ClosedEnum<typeof OutputNewrelicType>;

/**
 * Which New Relic region endpoint to use.
 */
export const OutputNewrelicRegion = {
  Us: "US",
  Eu: "EU",
  Custom: "Custom",
} as const;
/**
 * Which New Relic region endpoint to use.
 */
export type OutputNewrelicRegion = OpenEnum<typeof OutputNewrelicRegion>;

export const FieldName = {
  Service: "service",
  Hostname: "hostname",
  Timestamp: "timestamp",
  AuditId: "auditId",
} as const;
export type FieldName = OpenEnum<typeof FieldName>;

export type OutputNewrelicMetadatum = {
  name: FieldName;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type OutputNewrelicExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputNewrelicFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputNewrelicFailedRequestLoggingMode = OpenEnum<
  typeof OutputNewrelicFailedRequestLoggingMode
>;

export type OutputNewrelicResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputNewrelicTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputNewrelicBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputNewrelicBackpressureBehavior = OpenEnum<
  typeof OutputNewrelicBackpressureBehavior
>;

/**
 * Enter API key directly, or select a stored secret
 */
export const OutputNewrelicAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Enter API key directly, or select a stored secret
 */
export type OutputNewrelicAuthenticationMethod = OpenEnum<
  typeof OutputNewrelicAuthenticationMethod
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputNewrelicCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputNewrelicCompression = OpenEnum<
  typeof OutputNewrelicCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputNewrelicQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputNewrelicQueueFullBehavior = OpenEnum<
  typeof OutputNewrelicQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputNewrelicMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputNewrelicMode = OpenEnum<typeof OutputNewrelicMode>;

export type OutputNewrelicPqControls = {};

export type OutputNewrelic = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputNewrelicType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Which New Relic region endpoint to use.
   */
  region?: OutputNewrelicRegion | undefined;
  /**
   * Name of the logtype to send with events, e.g.: observability, access_log. The event's 'sourcetype' field (if set) will override this value.
   */
  logType?: string | undefined;
  /**
   * Name of field to send as log message value. If not present, event will be serialized and sent as JSON.
   */
  messageField?: string | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<OutputNewrelicMetadatum> | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputNewrelicExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?: OutputNewrelicFailedRequestLoggingMode | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?: Array<OutputNewrelicResponseRetrySetting> | undefined;
  timeoutRetrySettings?: OutputNewrelicTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputNewrelicBackpressureBehavior | undefined;
  /**
   * Enter API key directly, or select a stored secret
   */
  authType?: OutputNewrelicAuthenticationMethod | undefined;
  /**
   * Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced.
   */
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  customUrl?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputNewrelicCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputNewrelicQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputNewrelicMode | undefined;
  pqControls?: OutputNewrelicPqControls | undefined;
  /**
   * New Relic API key. Can be overridden using __newRelic_apiKey field.
   */
  apiKey?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
};

/** @internal */
export const OutputNewrelicType$inboundSchema: z.ZodNativeEnum<
  typeof OutputNewrelicType
> = z.nativeEnum(OutputNewrelicType);

/** @internal */
export const OutputNewrelicType$outboundSchema: z.ZodNativeEnum<
  typeof OutputNewrelicType
> = OutputNewrelicType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicType$ {
  /** @deprecated use `OutputNewrelicType$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicType$inboundSchema;
  /** @deprecated use `OutputNewrelicType$outboundSchema` instead. */
  export const outboundSchema = OutputNewrelicType$outboundSchema;
}

/** @internal */
export const OutputNewrelicRegion$inboundSchema: z.ZodType<
  OutputNewrelicRegion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputNewrelicRegion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputNewrelicRegion$outboundSchema: z.ZodType<
  OutputNewrelicRegion,
  z.ZodTypeDef,
  OutputNewrelicRegion
> = z.union([
  z.nativeEnum(OutputNewrelicRegion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicRegion$ {
  /** @deprecated use `OutputNewrelicRegion$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicRegion$inboundSchema;
  /** @deprecated use `OutputNewrelicRegion$outboundSchema` instead. */
  export const outboundSchema = OutputNewrelicRegion$outboundSchema;
}

/** @internal */
export const FieldName$inboundSchema: z.ZodType<
  FieldName,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(FieldName),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const FieldName$outboundSchema: z.ZodType<
  FieldName,
  z.ZodTypeDef,
  FieldName
> = z.union([
  z.nativeEnum(FieldName),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldName$ {
  /** @deprecated use `FieldName$inboundSchema` instead. */
  export const inboundSchema = FieldName$inboundSchema;
  /** @deprecated use `FieldName$outboundSchema` instead. */
  export const outboundSchema = FieldName$outboundSchema;
}

/** @internal */
export const OutputNewrelicMetadatum$inboundSchema: z.ZodType<
  OutputNewrelicMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: FieldName$inboundSchema,
  value: z.string(),
});

/** @internal */
export type OutputNewrelicMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputNewrelicMetadatum$outboundSchema: z.ZodType<
  OutputNewrelicMetadatum$Outbound,
  z.ZodTypeDef,
  OutputNewrelicMetadatum
> = z.object({
  name: FieldName$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicMetadatum$ {
  /** @deprecated use `OutputNewrelicMetadatum$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicMetadatum$inboundSchema;
  /** @deprecated use `OutputNewrelicMetadatum$outboundSchema` instead. */
  export const outboundSchema = OutputNewrelicMetadatum$outboundSchema;
  /** @deprecated use `OutputNewrelicMetadatum$Outbound` instead. */
  export type Outbound = OutputNewrelicMetadatum$Outbound;
}

export function outputNewrelicMetadatumToJSON(
  outputNewrelicMetadatum: OutputNewrelicMetadatum,
): string {
  return JSON.stringify(
    OutputNewrelicMetadatum$outboundSchema.parse(outputNewrelicMetadatum),
  );
}

export function outputNewrelicMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<OutputNewrelicMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputNewrelicMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputNewrelicMetadatum' from JSON`,
  );
}

/** @internal */
export const OutputNewrelicExtraHttpHeader$inboundSchema: z.ZodType<
  OutputNewrelicExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputNewrelicExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputNewrelicExtraHttpHeader$outboundSchema: z.ZodType<
  OutputNewrelicExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputNewrelicExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicExtraHttpHeader$ {
  /** @deprecated use `OutputNewrelicExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputNewrelicExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputNewrelicExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputNewrelicExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputNewrelicExtraHttpHeader$Outbound;
}

export function outputNewrelicExtraHttpHeaderToJSON(
  outputNewrelicExtraHttpHeader: OutputNewrelicExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputNewrelicExtraHttpHeader$outboundSchema.parse(
      outputNewrelicExtraHttpHeader,
    ),
  );
}

export function outputNewrelicExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputNewrelicExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputNewrelicExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputNewrelicExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputNewrelicFailedRequestLoggingMode$inboundSchema: z.ZodType<
  OutputNewrelicFailedRequestLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputNewrelicFailedRequestLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputNewrelicFailedRequestLoggingMode$outboundSchema: z.ZodType<
  OutputNewrelicFailedRequestLoggingMode,
  z.ZodTypeDef,
  OutputNewrelicFailedRequestLoggingMode
> = z.union([
  z.nativeEnum(OutputNewrelicFailedRequestLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicFailedRequestLoggingMode$ {
  /** @deprecated use `OutputNewrelicFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputNewrelicFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputNewrelicFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputNewrelicFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputNewrelicResponseRetrySetting$inboundSchema: z.ZodType<
  OutputNewrelicResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputNewrelicResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputNewrelicResponseRetrySetting$outboundSchema: z.ZodType<
  OutputNewrelicResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputNewrelicResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicResponseRetrySetting$ {
  /** @deprecated use `OutputNewrelicResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputNewrelicResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputNewrelicResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputNewrelicResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputNewrelicResponseRetrySetting$Outbound;
}

export function outputNewrelicResponseRetrySettingToJSON(
  outputNewrelicResponseRetrySetting: OutputNewrelicResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputNewrelicResponseRetrySetting$outboundSchema.parse(
      outputNewrelicResponseRetrySetting,
    ),
  );
}

export function outputNewrelicResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputNewrelicResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputNewrelicResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputNewrelicResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputNewrelicTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputNewrelicTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputNewrelicTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputNewrelicTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputNewrelicTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputNewrelicTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicTimeoutRetrySettings$ {
  /** @deprecated use `OutputNewrelicTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputNewrelicTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputNewrelicTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputNewrelicTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputNewrelicTimeoutRetrySettings$Outbound;
}

export function outputNewrelicTimeoutRetrySettingsToJSON(
  outputNewrelicTimeoutRetrySettings: OutputNewrelicTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputNewrelicTimeoutRetrySettings$outboundSchema.parse(
      outputNewrelicTimeoutRetrySettings,
    ),
  );
}

export function outputNewrelicTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputNewrelicTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputNewrelicTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputNewrelicTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputNewrelicBackpressureBehavior$inboundSchema: z.ZodType<
  OutputNewrelicBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputNewrelicBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputNewrelicBackpressureBehavior$outboundSchema: z.ZodType<
  OutputNewrelicBackpressureBehavior,
  z.ZodTypeDef,
  OutputNewrelicBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputNewrelicBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicBackpressureBehavior$ {
  /** @deprecated use `OutputNewrelicBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputNewrelicBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputNewrelicBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputNewrelicAuthenticationMethod$inboundSchema: z.ZodType<
  OutputNewrelicAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputNewrelicAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputNewrelicAuthenticationMethod$outboundSchema: z.ZodType<
  OutputNewrelicAuthenticationMethod,
  z.ZodTypeDef,
  OutputNewrelicAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputNewrelicAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicAuthenticationMethod$ {
  /** @deprecated use `OutputNewrelicAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputNewrelicAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputNewrelicAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputNewrelicCompression$inboundSchema: z.ZodType<
  OutputNewrelicCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputNewrelicCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputNewrelicCompression$outboundSchema: z.ZodType<
  OutputNewrelicCompression,
  z.ZodTypeDef,
  OutputNewrelicCompression
> = z.union([
  z.nativeEnum(OutputNewrelicCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicCompression$ {
  /** @deprecated use `OutputNewrelicCompression$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicCompression$inboundSchema;
  /** @deprecated use `OutputNewrelicCompression$outboundSchema` instead. */
  export const outboundSchema = OutputNewrelicCompression$outboundSchema;
}

/** @internal */
export const OutputNewrelicQueueFullBehavior$inboundSchema: z.ZodType<
  OutputNewrelicQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputNewrelicQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputNewrelicQueueFullBehavior$outboundSchema: z.ZodType<
  OutputNewrelicQueueFullBehavior,
  z.ZodTypeDef,
  OutputNewrelicQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputNewrelicQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicQueueFullBehavior$ {
  /** @deprecated use `OutputNewrelicQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputNewrelicQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputNewrelicQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputNewrelicMode$inboundSchema: z.ZodType<
  OutputNewrelicMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputNewrelicMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputNewrelicMode$outboundSchema: z.ZodType<
  OutputNewrelicMode,
  z.ZodTypeDef,
  OutputNewrelicMode
> = z.union([
  z.nativeEnum(OutputNewrelicMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicMode$ {
  /** @deprecated use `OutputNewrelicMode$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicMode$inboundSchema;
  /** @deprecated use `OutputNewrelicMode$outboundSchema` instead. */
  export const outboundSchema = OutputNewrelicMode$outboundSchema;
}

/** @internal */
export const OutputNewrelicPqControls$inboundSchema: z.ZodType<
  OutputNewrelicPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputNewrelicPqControls$Outbound = {};

/** @internal */
export const OutputNewrelicPqControls$outboundSchema: z.ZodType<
  OutputNewrelicPqControls$Outbound,
  z.ZodTypeDef,
  OutputNewrelicPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelicPqControls$ {
  /** @deprecated use `OutputNewrelicPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelicPqControls$inboundSchema;
  /** @deprecated use `OutputNewrelicPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputNewrelicPqControls$outboundSchema;
  /** @deprecated use `OutputNewrelicPqControls$Outbound` instead. */
  export type Outbound = OutputNewrelicPqControls$Outbound;
}

export function outputNewrelicPqControlsToJSON(
  outputNewrelicPqControls: OutputNewrelicPqControls,
): string {
  return JSON.stringify(
    OutputNewrelicPqControls$outboundSchema.parse(outputNewrelicPqControls),
  );
}

export function outputNewrelicPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputNewrelicPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputNewrelicPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputNewrelicPqControls' from JSON`,
  );
}

/** @internal */
export const OutputNewrelic$inboundSchema: z.ZodType<
  OutputNewrelic,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputNewrelicType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  region: OutputNewrelicRegion$inboundSchema.default("US"),
  logType: z.string().default(""),
  messageField: z.string().default(""),
  metadata: z.array(z.lazy(() => OutputNewrelicMetadatum$inboundSchema))
    .optional(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(1024),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputNewrelicExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode: OutputNewrelicFailedRequestLoggingMode$inboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputNewrelicResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputNewrelicTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputNewrelicBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  authType: OutputNewrelicAuthenticationMethod$inboundSchema.default("manual"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  customUrl: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputNewrelicCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputNewrelicQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputNewrelicMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputNewrelicPqControls$inboundSchema).optional(),
  apiKey: z.string().optional(),
  textSecret: z.string().optional(),
});

/** @internal */
export type OutputNewrelic$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  region: string;
  logType: string;
  messageField: string;
  metadata?: Array<OutputNewrelicMetadatum$Outbound> | undefined;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputNewrelicExtraHttpHeader$Outbound> | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputNewrelicResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputNewrelicTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  authType: string;
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  customUrl?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputNewrelicPqControls$Outbound | undefined;
  apiKey?: string | undefined;
  textSecret?: string | undefined;
};

/** @internal */
export const OutputNewrelic$outboundSchema: z.ZodType<
  OutputNewrelic$Outbound,
  z.ZodTypeDef,
  OutputNewrelic
> = z.object({
  id: z.string().optional(),
  type: OutputNewrelicType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  region: OutputNewrelicRegion$outboundSchema.default("US"),
  logType: z.string().default(""),
  messageField: z.string().default(""),
  metadata: z.array(z.lazy(() => OutputNewrelicMetadatum$outboundSchema))
    .optional(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(1024),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputNewrelicExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputNewrelicFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputNewrelicResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputNewrelicTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputNewrelicBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  authType: OutputNewrelicAuthenticationMethod$outboundSchema.default("manual"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  customUrl: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputNewrelicCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputNewrelicQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputNewrelicMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputNewrelicPqControls$outboundSchema).optional(),
  apiKey: z.string().optional(),
  textSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNewrelic$ {
  /** @deprecated use `OutputNewrelic$inboundSchema` instead. */
  export const inboundSchema = OutputNewrelic$inboundSchema;
  /** @deprecated use `OutputNewrelic$outboundSchema` instead. */
  export const outboundSchema = OutputNewrelic$outboundSchema;
  /** @deprecated use `OutputNewrelic$Outbound` instead. */
  export type Outbound = OutputNewrelic$Outbound;
}

export function outputNewrelicToJSON(outputNewrelic: OutputNewrelic): string {
  return JSON.stringify(OutputNewrelic$outboundSchema.parse(outputNewrelic));
}

export function outputNewrelicFromJSON(
  jsonString: string,
): SafeParseResult<OutputNewrelic, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputNewrelic$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputNewrelic' from JSON`,
  );
}
