/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SearchParameterType,
  SearchParameterType$inboundSchema,
  SearchParameterType$outboundSchema,
} from "./searchparametertype.js";
import {
  SearchParameterValue,
  SearchParameterValue$inboundSchema,
  SearchParameterValue$Outbound,
  SearchParameterValue$outboundSchema,
} from "./searchparametervalue.js";

export type SearchParameter = {
  defaultValue?: SearchParameterValue | undefined;
  name: string;
  type: SearchParameterType;
};

/** @internal */
export const SearchParameter$inboundSchema: z.ZodType<
  SearchParameter,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultValue: SearchParameterValue$inboundSchema.optional(),
  name: z.string(),
  type: SearchParameterType$inboundSchema,
});

/** @internal */
export type SearchParameter$Outbound = {
  defaultValue?: SearchParameterValue$Outbound | undefined;
  name: string;
  type: string;
};

/** @internal */
export const SearchParameter$outboundSchema: z.ZodType<
  SearchParameter$Outbound,
  z.ZodTypeDef,
  SearchParameter
> = z.object({
  defaultValue: SearchParameterValue$outboundSchema.optional(),
  name: z.string(),
  type: SearchParameterType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchParameter$ {
  /** @deprecated use `SearchParameter$inboundSchema` instead. */
  export const inboundSchema = SearchParameter$inboundSchema;
  /** @deprecated use `SearchParameter$outboundSchema` instead. */
  export const outboundSchema = SearchParameter$outboundSchema;
  /** @deprecated use `SearchParameter$Outbound` instead. */
  export type Outbound = SearchParameter$Outbound;
}

export function searchParameterToJSON(
  searchParameter: SearchParameter,
): string {
  return JSON.stringify(SearchParameter$outboundSchema.parse(searchParameter));
}

export function searchParameterFromJSON(
  jsonString: string,
): SafeParseResult<SearchParameter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchParameter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchParameter' from JSON`,
  );
}
