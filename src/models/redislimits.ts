/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RedisConnectionLimits,
  RedisConnectionLimits$inboundSchema,
  RedisConnectionLimits$Outbound,
  RedisConnectionLimits$outboundSchema,
} from "./redisconnectionlimits.js";

export type RedisLimits = {
  connections: RedisConnectionLimits;
};

/** @internal */
export const RedisLimits$inboundSchema: z.ZodType<
  RedisLimits,
  z.ZodTypeDef,
  unknown
> = z.object({
  connections: RedisConnectionLimits$inboundSchema,
});

/** @internal */
export type RedisLimits$Outbound = {
  connections: RedisConnectionLimits$Outbound;
};

/** @internal */
export const RedisLimits$outboundSchema: z.ZodType<
  RedisLimits$Outbound,
  z.ZodTypeDef,
  RedisLimits
> = z.object({
  connections: RedisConnectionLimits$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedisLimits$ {
  /** @deprecated use `RedisLimits$inboundSchema` instead. */
  export const inboundSchema = RedisLimits$inboundSchema;
  /** @deprecated use `RedisLimits$outboundSchema` instead. */
  export const outboundSchema = RedisLimits$outboundSchema;
  /** @deprecated use `RedisLimits$Outbound` instead. */
  export type Outbound = RedisLimits$Outbound;
}

export function redisLimitsToJSON(redisLimits: RedisLimits): string {
  return JSON.stringify(RedisLimits$outboundSchema.parse(redisLimits));
}

export function redisLimitsFromJSON(
  jsonString: string,
): SafeParseResult<RedisLimits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedisLimits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedisLimits' from JSON`,
  );
}
