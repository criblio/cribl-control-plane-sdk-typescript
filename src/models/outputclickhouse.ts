/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputClickHouseType = {
  ClickHouse: "click_house",
} as const;
export type OutputClickHouseType = ClosedEnum<typeof OutputClickHouseType>;

export const OutputClickHouseAuthenticationType = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  SslUserCertificate: "sslUserCertificate",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
export type OutputClickHouseAuthenticationType = ClosedEnum<
  typeof OutputClickHouseAuthenticationType
>;

/**
 * Data format to use when sending data to ClickHouse. Defaults to JSON Compact.
 */
export const OutputClickHouseFormat = {
  JsonCompactEachRowWithNames: "json-compact-each-row-with-names",
  JsonEachRow: "json-each-row",
} as const;
/**
 * Data format to use when sending data to ClickHouse. Defaults to JSON Compact.
 */
export type OutputClickHouseFormat = ClosedEnum<typeof OutputClickHouseFormat>;

/**
 * How event fields are mapped to ClickHouse columns.
 */
export const MappingType = {
  Automatic: "automatic",
  Custom: "custom",
} as const;
/**
 * How event fields are mapped to ClickHouse columns.
 */
export type MappingType = ClosedEnum<typeof MappingType>;

export const OutputClickHouseMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputClickHouseMinimumTLSVersion = ClosedEnum<
  typeof OutputClickHouseMinimumTLSVersion
>;

export const OutputClickHouseMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type OutputClickHouseMaximumTLSVersion = ClosedEnum<
  typeof OutputClickHouseMaximumTLSVersion
>;

export type OutputClickHouseTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: OutputClickHouseMinimumTLSVersion | undefined;
  maxVersion?: OutputClickHouseMaximumTLSVersion | undefined;
};

export type OutputClickHouseExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputClickHouseFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputClickHouseFailedRequestLoggingMode = ClosedEnum<
  typeof OutputClickHouseFailedRequestLoggingMode
>;

export type OutputClickHouseResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputClickHouseTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputClickHouseBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputClickHouseBackpressureBehavior = ClosedEnum<
  typeof OutputClickHouseBackpressureBehavior
>;

export type OutputClickHouseOauthParam = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type OutputClickHouseOauthHeader = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type ColumnMapping = {
  /**
   * Name of the column in ClickHouse that will store field value
   */
  columnName: string;
  /**
   * Type of the column in the ClickHouse database
   */
  columnType?: string | undefined;
  /**
   * JavaScript expression to compute value to be inserted into ClickHouse table
   */
  columnValueExpression: string;
};

/**
 * Codec to use to compress the persisted data
 */
export const OutputClickHouseCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputClickHouseCompression = ClosedEnum<
  typeof OutputClickHouseCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputClickHouseQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputClickHouseQueueFullBehavior = ClosedEnum<
  typeof OutputClickHouseQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputClickHouseMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputClickHouseMode = ClosedEnum<typeof OutputClickHouseMode>;

export type OutputClickHousePqControls = {};

export type OutputClickHouse = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputClickHouseType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * URL of the ClickHouse instance. Example: http://localhost:8123/
   */
  url: string;
  authType?: OutputClickHouseAuthenticationType | undefined;
  database: string;
  /**
   * Name of the ClickHouse table where data will be inserted. Name can contain letters (A-Z, a-z), numbers (0-9), and the character "_", and must start with either a letter or the character "_".
   */
  tableName: string;
  /**
   * Data format to use when sending data to ClickHouse. Defaults to JSON Compact.
   */
  format?: OutputClickHouseFormat | undefined;
  /**
   * How event fields are mapped to ClickHouse columns.
   */
  mappingType?: MappingType | undefined;
  /**
   * Collect data into batches for later processing. Disable to write to a ClickHouse table immediately.
   */
  asyncInserts?: boolean | undefined;
  tls?: OutputClickHouseTLSSettingsClientSide | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputClickHouseExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputClickHouseFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputClickHouseResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?: OutputClickHouseTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * Log the most recent event that fails to match the table schema
   */
  dumpFormatErrorsToDisk?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputClickHouseBackpressureBehavior | undefined;
  description?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<OutputClickHouseOauthParam> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<OutputClickHouseOauthHeader> | undefined;
  /**
   * Username for certificate authentication
   */
  sqlUsername?: string | undefined;
  /**
   * Cribl will wait for confirmation that data has been fully inserted into the ClickHouse database before proceeding. Disabling this option can increase throughput, but Cribl won’t be able to verify data has been completely inserted.
   */
  waitForAsyncInserts?: boolean | undefined;
  /**
   * Fields to exclude from sending to ClickHouse
   */
  excludeMappingFields?: Array<string> | undefined;
  /**
   * Retrieves the table schema from ClickHouse and populates the Column Mapping table
   */
  describeTable?: string | undefined;
  columnMappings?: Array<ColumnMapping> | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputClickHouseCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputClickHouseQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputClickHouseMode | undefined;
  pqControls?: OutputClickHousePqControls | undefined;
};

/** @internal */
export const OutputClickHouseType$inboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseType
> = z.nativeEnum(OutputClickHouseType);

/** @internal */
export const OutputClickHouseType$outboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseType
> = OutputClickHouseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseType$ {
  /** @deprecated use `OutputClickHouseType$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseType$inboundSchema;
  /** @deprecated use `OutputClickHouseType$outboundSchema` instead. */
  export const outboundSchema = OutputClickHouseType$outboundSchema;
}

/** @internal */
export const OutputClickHouseAuthenticationType$inboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseAuthenticationType
> = z.nativeEnum(OutputClickHouseAuthenticationType);

/** @internal */
export const OutputClickHouseAuthenticationType$outboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseAuthenticationType
> = OutputClickHouseAuthenticationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseAuthenticationType$ {
  /** @deprecated use `OutputClickHouseAuthenticationType$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseAuthenticationType$inboundSchema;
  /** @deprecated use `OutputClickHouseAuthenticationType$outboundSchema` instead. */
  export const outboundSchema =
    OutputClickHouseAuthenticationType$outboundSchema;
}

/** @internal */
export const OutputClickHouseFormat$inboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseFormat
> = z.nativeEnum(OutputClickHouseFormat);

/** @internal */
export const OutputClickHouseFormat$outboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseFormat
> = OutputClickHouseFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseFormat$ {
  /** @deprecated use `OutputClickHouseFormat$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseFormat$inboundSchema;
  /** @deprecated use `OutputClickHouseFormat$outboundSchema` instead. */
  export const outboundSchema = OutputClickHouseFormat$outboundSchema;
}

/** @internal */
export const MappingType$inboundSchema: z.ZodNativeEnum<typeof MappingType> = z
  .nativeEnum(MappingType);

/** @internal */
export const MappingType$outboundSchema: z.ZodNativeEnum<typeof MappingType> =
  MappingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingType$ {
  /** @deprecated use `MappingType$inboundSchema` instead. */
  export const inboundSchema = MappingType$inboundSchema;
  /** @deprecated use `MappingType$outboundSchema` instead. */
  export const outboundSchema = MappingType$outboundSchema;
}

/** @internal */
export const OutputClickHouseMinimumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseMinimumTLSVersion
> = z.nativeEnum(OutputClickHouseMinimumTLSVersion);

/** @internal */
export const OutputClickHouseMinimumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseMinimumTLSVersion
> = OutputClickHouseMinimumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseMinimumTLSVersion$ {
  /** @deprecated use `OutputClickHouseMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseMinimumTLSVersion$inboundSchema;
  /** @deprecated use `OutputClickHouseMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    OutputClickHouseMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputClickHouseMaximumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseMaximumTLSVersion
> = z.nativeEnum(OutputClickHouseMaximumTLSVersion);

/** @internal */
export const OutputClickHouseMaximumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseMaximumTLSVersion
> = OutputClickHouseMaximumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseMaximumTLSVersion$ {
  /** @deprecated use `OutputClickHouseMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseMaximumTLSVersion$inboundSchema;
  /** @deprecated use `OutputClickHouseMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    OutputClickHouseMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const OutputClickHouseTLSSettingsClientSide$inboundSchema: z.ZodType<
  OutputClickHouseTLSSettingsClientSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputClickHouseMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: OutputClickHouseMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type OutputClickHouseTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const OutputClickHouseTLSSettingsClientSide$outboundSchema: z.ZodType<
  OutputClickHouseTLSSettingsClientSide$Outbound,
  z.ZodTypeDef,
  OutputClickHouseTLSSettingsClientSide
> = z.object({
  disabled: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: OutputClickHouseMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: OutputClickHouseMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseTLSSettingsClientSide$ {
  /** @deprecated use `OutputClickHouseTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema =
    OutputClickHouseTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `OutputClickHouseTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema =
    OutputClickHouseTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `OutputClickHouseTLSSettingsClientSide$Outbound` instead. */
  export type Outbound = OutputClickHouseTLSSettingsClientSide$Outbound;
}

export function outputClickHouseTLSSettingsClientSideToJSON(
  outputClickHouseTLSSettingsClientSide: OutputClickHouseTLSSettingsClientSide,
): string {
  return JSON.stringify(
    OutputClickHouseTLSSettingsClientSide$outboundSchema.parse(
      outputClickHouseTLSSettingsClientSide,
    ),
  );
}

export function outputClickHouseTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<OutputClickHouseTLSSettingsClientSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputClickHouseTLSSettingsClientSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputClickHouseTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const OutputClickHouseExtraHttpHeader$inboundSchema: z.ZodType<
  OutputClickHouseExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputClickHouseExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputClickHouseExtraHttpHeader$outboundSchema: z.ZodType<
  OutputClickHouseExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputClickHouseExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseExtraHttpHeader$ {
  /** @deprecated use `OutputClickHouseExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputClickHouseExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputClickHouseExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputClickHouseExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputClickHouseExtraHttpHeader$Outbound;
}

export function outputClickHouseExtraHttpHeaderToJSON(
  outputClickHouseExtraHttpHeader: OutputClickHouseExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputClickHouseExtraHttpHeader$outboundSchema.parse(
      outputClickHouseExtraHttpHeader,
    ),
  );
}

export function outputClickHouseExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputClickHouseExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputClickHouseExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputClickHouseExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputClickHouseFailedRequestLoggingMode$inboundSchema:
  z.ZodNativeEnum<typeof OutputClickHouseFailedRequestLoggingMode> = z
    .nativeEnum(OutputClickHouseFailedRequestLoggingMode);

/** @internal */
export const OutputClickHouseFailedRequestLoggingMode$outboundSchema:
  z.ZodNativeEnum<typeof OutputClickHouseFailedRequestLoggingMode> =
    OutputClickHouseFailedRequestLoggingMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseFailedRequestLoggingMode$ {
  /** @deprecated use `OutputClickHouseFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputClickHouseFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputClickHouseFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputClickHouseFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputClickHouseResponseRetrySetting$inboundSchema: z.ZodType<
  OutputClickHouseResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputClickHouseResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputClickHouseResponseRetrySetting$outboundSchema: z.ZodType<
  OutputClickHouseResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputClickHouseResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseResponseRetrySetting$ {
  /** @deprecated use `OutputClickHouseResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputClickHouseResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputClickHouseResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputClickHouseResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputClickHouseResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputClickHouseResponseRetrySetting$Outbound;
}

export function outputClickHouseResponseRetrySettingToJSON(
  outputClickHouseResponseRetrySetting: OutputClickHouseResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputClickHouseResponseRetrySetting$outboundSchema.parse(
      outputClickHouseResponseRetrySetting,
    ),
  );
}

export function outputClickHouseResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputClickHouseResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputClickHouseResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputClickHouseResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputClickHouseTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputClickHouseTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputClickHouseTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputClickHouseTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputClickHouseTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputClickHouseTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseTimeoutRetrySettings$ {
  /** @deprecated use `OutputClickHouseTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputClickHouseTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputClickHouseTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputClickHouseTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputClickHouseTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputClickHouseTimeoutRetrySettings$Outbound;
}

export function outputClickHouseTimeoutRetrySettingsToJSON(
  outputClickHouseTimeoutRetrySettings: OutputClickHouseTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputClickHouseTimeoutRetrySettings$outboundSchema.parse(
      outputClickHouseTimeoutRetrySettings,
    ),
  );
}

export function outputClickHouseTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputClickHouseTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputClickHouseTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputClickHouseTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputClickHouseBackpressureBehavior$inboundSchema:
  z.ZodNativeEnum<typeof OutputClickHouseBackpressureBehavior> = z.nativeEnum(
    OutputClickHouseBackpressureBehavior,
  );

/** @internal */
export const OutputClickHouseBackpressureBehavior$outboundSchema:
  z.ZodNativeEnum<typeof OutputClickHouseBackpressureBehavior> =
    OutputClickHouseBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseBackpressureBehavior$ {
  /** @deprecated use `OutputClickHouseBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputClickHouseBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputClickHouseBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputClickHouseBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputClickHouseOauthParam$inboundSchema: z.ZodType<
  OutputClickHouseOauthParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type OutputClickHouseOauthParam$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputClickHouseOauthParam$outboundSchema: z.ZodType<
  OutputClickHouseOauthParam$Outbound,
  z.ZodTypeDef,
  OutputClickHouseOauthParam
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseOauthParam$ {
  /** @deprecated use `OutputClickHouseOauthParam$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseOauthParam$inboundSchema;
  /** @deprecated use `OutputClickHouseOauthParam$outboundSchema` instead. */
  export const outboundSchema = OutputClickHouseOauthParam$outboundSchema;
  /** @deprecated use `OutputClickHouseOauthParam$Outbound` instead. */
  export type Outbound = OutputClickHouseOauthParam$Outbound;
}

export function outputClickHouseOauthParamToJSON(
  outputClickHouseOauthParam: OutputClickHouseOauthParam,
): string {
  return JSON.stringify(
    OutputClickHouseOauthParam$outboundSchema.parse(outputClickHouseOauthParam),
  );
}

export function outputClickHouseOauthParamFromJSON(
  jsonString: string,
): SafeParseResult<OutputClickHouseOauthParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputClickHouseOauthParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputClickHouseOauthParam' from JSON`,
  );
}

/** @internal */
export const OutputClickHouseOauthHeader$inboundSchema: z.ZodType<
  OutputClickHouseOauthHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type OutputClickHouseOauthHeader$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputClickHouseOauthHeader$outboundSchema: z.ZodType<
  OutputClickHouseOauthHeader$Outbound,
  z.ZodTypeDef,
  OutputClickHouseOauthHeader
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseOauthHeader$ {
  /** @deprecated use `OutputClickHouseOauthHeader$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseOauthHeader$inboundSchema;
  /** @deprecated use `OutputClickHouseOauthHeader$outboundSchema` instead. */
  export const outboundSchema = OutputClickHouseOauthHeader$outboundSchema;
  /** @deprecated use `OutputClickHouseOauthHeader$Outbound` instead. */
  export type Outbound = OutputClickHouseOauthHeader$Outbound;
}

export function outputClickHouseOauthHeaderToJSON(
  outputClickHouseOauthHeader: OutputClickHouseOauthHeader,
): string {
  return JSON.stringify(
    OutputClickHouseOauthHeader$outboundSchema.parse(
      outputClickHouseOauthHeader,
    ),
  );
}

export function outputClickHouseOauthHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputClickHouseOauthHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputClickHouseOauthHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputClickHouseOauthHeader' from JSON`,
  );
}

/** @internal */
export const ColumnMapping$inboundSchema: z.ZodType<
  ColumnMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  columnName: z.string(),
  columnType: z.string().optional(),
  columnValueExpression: z.string(),
});

/** @internal */
export type ColumnMapping$Outbound = {
  columnName: string;
  columnType?: string | undefined;
  columnValueExpression: string;
};

/** @internal */
export const ColumnMapping$outboundSchema: z.ZodType<
  ColumnMapping$Outbound,
  z.ZodTypeDef,
  ColumnMapping
> = z.object({
  columnName: z.string(),
  columnType: z.string().optional(),
  columnValueExpression: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ColumnMapping$ {
  /** @deprecated use `ColumnMapping$inboundSchema` instead. */
  export const inboundSchema = ColumnMapping$inboundSchema;
  /** @deprecated use `ColumnMapping$outboundSchema` instead. */
  export const outboundSchema = ColumnMapping$outboundSchema;
  /** @deprecated use `ColumnMapping$Outbound` instead. */
  export type Outbound = ColumnMapping$Outbound;
}

export function columnMappingToJSON(columnMapping: ColumnMapping): string {
  return JSON.stringify(ColumnMapping$outboundSchema.parse(columnMapping));
}

export function columnMappingFromJSON(
  jsonString: string,
): SafeParseResult<ColumnMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ColumnMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ColumnMapping' from JSON`,
  );
}

/** @internal */
export const OutputClickHouseCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseCompression
> = z.nativeEnum(OutputClickHouseCompression);

/** @internal */
export const OutputClickHouseCompression$outboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseCompression
> = OutputClickHouseCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseCompression$ {
  /** @deprecated use `OutputClickHouseCompression$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseCompression$inboundSchema;
  /** @deprecated use `OutputClickHouseCompression$outboundSchema` instead. */
  export const outboundSchema = OutputClickHouseCompression$outboundSchema;
}

/** @internal */
export const OutputClickHouseQueueFullBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseQueueFullBehavior
> = z.nativeEnum(OutputClickHouseQueueFullBehavior);

/** @internal */
export const OutputClickHouseQueueFullBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseQueueFullBehavior
> = OutputClickHouseQueueFullBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseQueueFullBehavior$ {
  /** @deprecated use `OutputClickHouseQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputClickHouseQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputClickHouseQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputClickHouseMode$inboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseMode
> = z.nativeEnum(OutputClickHouseMode);

/** @internal */
export const OutputClickHouseMode$outboundSchema: z.ZodNativeEnum<
  typeof OutputClickHouseMode
> = OutputClickHouseMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouseMode$ {
  /** @deprecated use `OutputClickHouseMode$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouseMode$inboundSchema;
  /** @deprecated use `OutputClickHouseMode$outboundSchema` instead. */
  export const outboundSchema = OutputClickHouseMode$outboundSchema;
}

/** @internal */
export const OutputClickHousePqControls$inboundSchema: z.ZodType<
  OutputClickHousePqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputClickHousePqControls$Outbound = {};

/** @internal */
export const OutputClickHousePqControls$outboundSchema: z.ZodType<
  OutputClickHousePqControls$Outbound,
  z.ZodTypeDef,
  OutputClickHousePqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHousePqControls$ {
  /** @deprecated use `OutputClickHousePqControls$inboundSchema` instead. */
  export const inboundSchema = OutputClickHousePqControls$inboundSchema;
  /** @deprecated use `OutputClickHousePqControls$outboundSchema` instead. */
  export const outboundSchema = OutputClickHousePqControls$outboundSchema;
  /** @deprecated use `OutputClickHousePqControls$Outbound` instead. */
  export type Outbound = OutputClickHousePqControls$Outbound;
}

export function outputClickHousePqControlsToJSON(
  outputClickHousePqControls: OutputClickHousePqControls,
): string {
  return JSON.stringify(
    OutputClickHousePqControls$outboundSchema.parse(outputClickHousePqControls),
  );
}

export function outputClickHousePqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputClickHousePqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputClickHousePqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputClickHousePqControls' from JSON`,
  );
}

/** @internal */
export const OutputClickHouse$inboundSchema: z.ZodType<
  OutputClickHouse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputClickHouseType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  authType: OutputClickHouseAuthenticationType$inboundSchema.default("none"),
  database: z.string(),
  tableName: z.string(),
  format: OutputClickHouseFormat$inboundSchema.default(
    "json-compact-each-row-with-names",
  ),
  mappingType: MappingType$inboundSchema.default("automatic"),
  asyncInserts: z.boolean().default(false),
  tls: z.lazy(() => OutputClickHouseTLSSettingsClientSide$inboundSchema)
    .optional(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputClickHouseExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputClickHouseFailedRequestLoggingMode$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputClickHouseResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputClickHouseTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  dumpFormatErrorsToDisk: z.boolean().default(false),
  onBackpressure: OutputClickHouseBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => OutputClickHouseOauthParam$inboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => OutputClickHouseOauthHeader$inboundSchema))
    .optional(),
  sqlUsername: z.string().optional(),
  waitForAsyncInserts: z.boolean().default(true),
  excludeMappingFields: z.array(z.string()).optional(),
  describeTable: z.string().optional(),
  columnMappings: z.array(z.lazy(() => ColumnMapping$inboundSchema)).optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputClickHouseCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputClickHouseQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputClickHouseMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputClickHousePqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputClickHouse$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  url: string;
  authType: string;
  database: string;
  tableName: string;
  format: string;
  mappingType: string;
  asyncInserts: boolean;
  tls?: OutputClickHouseTLSSettingsClientSide$Outbound | undefined;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?:
    | Array<OutputClickHouseExtraHttpHeader$Outbound>
    | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputClickHouseResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputClickHouseTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  dumpFormatErrorsToDisk: boolean;
  onBackpressure: string;
  description?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<OutputClickHouseOauthParam$Outbound> | undefined;
  oauthHeaders?: Array<OutputClickHouseOauthHeader$Outbound> | undefined;
  sqlUsername?: string | undefined;
  waitForAsyncInserts: boolean;
  excludeMappingFields?: Array<string> | undefined;
  describeTable?: string | undefined;
  columnMappings?: Array<ColumnMapping$Outbound> | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputClickHousePqControls$Outbound | undefined;
};

/** @internal */
export const OutputClickHouse$outboundSchema: z.ZodType<
  OutputClickHouse$Outbound,
  z.ZodTypeDef,
  OutputClickHouse
> = z.object({
  id: z.string().optional(),
  type: OutputClickHouseType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  authType: OutputClickHouseAuthenticationType$outboundSchema.default("none"),
  database: z.string(),
  tableName: z.string(),
  format: OutputClickHouseFormat$outboundSchema.default(
    "json-compact-each-row-with-names",
  ),
  mappingType: MappingType$outboundSchema.default("automatic"),
  asyncInserts: z.boolean().default(false),
  tls: z.lazy(() => OutputClickHouseTLSSettingsClientSide$outboundSchema)
    .optional(),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputClickHouseExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputClickHouseFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputClickHouseResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputClickHouseTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  dumpFormatErrorsToDisk: z.boolean().default(false),
  onBackpressure: OutputClickHouseBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => OutputClickHouseOauthParam$outboundSchema))
    .optional(),
  oauthHeaders: z.array(
    z.lazy(() => OutputClickHouseOauthHeader$outboundSchema),
  ).optional(),
  sqlUsername: z.string().optional(),
  waitForAsyncInserts: z.boolean().default(true),
  excludeMappingFields: z.array(z.string()).optional(),
  describeTable: z.string().optional(),
  columnMappings: z.array(z.lazy(() => ColumnMapping$outboundSchema))
    .optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputClickHouseCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputClickHouseQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputClickHouseMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputClickHousePqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputClickHouse$ {
  /** @deprecated use `OutputClickHouse$inboundSchema` instead. */
  export const inboundSchema = OutputClickHouse$inboundSchema;
  /** @deprecated use `OutputClickHouse$outboundSchema` instead. */
  export const outboundSchema = OutputClickHouse$outboundSchema;
  /** @deprecated use `OutputClickHouse$Outbound` instead. */
  export type Outbound = OutputClickHouse$Outbound;
}

export function outputClickHouseToJSON(
  outputClickHouse: OutputClickHouse,
): string {
  return JSON.stringify(
    OutputClickHouse$outboundSchema.parse(outputClickHouse),
  );
}

export function outputClickHouseFromJSON(
  jsonString: string,
): SafeParseResult<OutputClickHouse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputClickHouse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputClickHouse' from JSON`,
  );
}
