/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputEdgePrometheusType = {
  EdgePrometheus: "edge_prometheus",
} as const;
export type InputEdgePrometheusType = ClosedEnum<
  typeof InputEdgePrometheusType
>;

export type InputEdgePrometheusConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputEdgePrometheusMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputEdgePrometheusMode = OpenEnum<typeof InputEdgePrometheusMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputEdgePrometheusPqCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputEdgePrometheusPqCompression = OpenEnum<
  typeof InputEdgePrometheusPqCompression
>;

export type InputEdgePrometheusPqControls = {};

export type InputEdgePrometheusPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputEdgePrometheusMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputEdgePrometheusPqCompression | undefined;
  pqControls?: InputEdgePrometheusPqControls | undefined;
};

/**
 * Target discovery mechanism. Use static to manually enter a list of targets.
 */
export const InputEdgePrometheusDiscoveryType = {
  Static: "static",
  Dns: "dns",
  Ec2: "ec2",
  K8sNode: "k8s-node",
  K8sPods: "k8s-pods",
} as const;
/**
 * Target discovery mechanism. Use static to manually enter a list of targets.
 */
export type InputEdgePrometheusDiscoveryType = OpenEnum<
  typeof InputEdgePrometheusDiscoveryType
>;

/**
 * Data compression format. Default is gzip.
 */
export const InputEdgePrometheusPersistenceCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Data compression format. Default is gzip.
 */
export type InputEdgePrometheusPersistenceCompression = OpenEnum<
  typeof InputEdgePrometheusPersistenceCompression
>;

export type InputEdgePrometheusDiskSpooling = {
  /**
   * Spool events on disk for Cribl Edge and Search. Default is disabled.
   */
  enable?: boolean | undefined;
  /**
   * Time period for grouping spooled events. Default is 10m.
   */
  timeWindow?: string | undefined;
  /**
   * Maximum disk space that can be consumed before older buckets are deleted. Examples: 420MB, 4GB. Default is 1GB.
   */
  maxDataSize?: string | undefined;
  /**
   * Maximum amount of time to retain data before older buckets are deleted. Examples: 2h, 4d. Default is 24h.
   */
  maxDataTime?: string | undefined;
  /**
   * Data compression format. Default is gzip.
   */
  compress?: InputEdgePrometheusPersistenceCompression | undefined;
};

export type InputEdgePrometheusMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

/**
 * Enter credentials directly, or select a stored secret
 */
export const InputEdgePrometheusAuthTypeAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
  Kubernetes: "kubernetes",
} as const;
/**
 * Enter credentials directly, or select a stored secret
 */
export type InputEdgePrometheusAuthTypeAuthenticationMethod = OpenEnum<
  typeof InputEdgePrometheusAuthTypeAuthenticationMethod
>;

/**
 * Protocol to use when collecting metrics
 */
export const TargetProtocol = {
  Http: "http",
  Https: "https",
} as const;
/**
 * Protocol to use when collecting metrics
 */
export type TargetProtocol = OpenEnum<typeof TargetProtocol>;

export type Target = {
  /**
   * Protocol to use when collecting metrics
   */
  protocol?: TargetProtocol | undefined;
  /**
   * Name of host from which to pull metrics.
   */
  host: string;
  /**
   * The port number in the metrics URL for discovered targets.
   */
  port?: number | undefined;
  /**
   * Path to use when collecting metrics from discovered targets
   */
  path?: string | undefined;
};

/**
 * DNS Record type to resolve
 */
export const InputEdgePrometheusRecordType = {
  Srv: "SRV",
  A: "A",
  Aaaa: "AAAA",
} as const;
/**
 * DNS Record type to resolve
 */
export type InputEdgePrometheusRecordType = OpenEnum<
  typeof InputEdgePrometheusRecordType
>;

/**
 * Protocol to use when collecting metrics
 */
export const ScrapeProtocolProtocol = {
  Http: "http",
  Https: "https",
} as const;
/**
 * Protocol to use when collecting metrics
 */
export type ScrapeProtocolProtocol = OpenEnum<typeof ScrapeProtocolProtocol>;

export type InputEdgePrometheusSearchFilter = {
  /**
   * Search filter attribute name, see: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html for more information. Attributes can be manually entered if not present in the drop down list
   */
  name: string;
  /**
   * Search Filter Values, if empty only "running" EC2 instances will be returned
   */
  values: Array<string>;
};

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod =
  OpenEnum<
    typeof InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod
  >;

/**
 * Signature version to use for signing EC2 requests
 */
export const InputEdgePrometheusSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing EC2 requests
 */
export type InputEdgePrometheusSignatureVersion = OpenEnum<
  typeof InputEdgePrometheusSignatureVersion
>;

export type PodFilter = {
  /**
   * JavaScript expression applied to pods objects. Return 'true' to include it.
   */
  filter: string;
  /**
   * Optional description of this rule's purpose
   */
  description?: string | undefined;
};

export type InputEdgePrometheus = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputEdgePrometheusType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputEdgePrometheusConnection> | undefined;
  pq?: InputEdgePrometheusPq | undefined;
  /**
   * Other dimensions to include in events
   */
  dimensionList?: Array<string> | undefined;
  /**
   * Target discovery mechanism. Use static to manually enter a list of targets.
   */
  discoveryType?: InputEdgePrometheusDiscoveryType | undefined;
  /**
   * How often in seconds to scrape targets for metrics.
   */
  interval?: number | undefined;
  /**
   * Timeout, in milliseconds, before aborting HTTP connection attempts; 1-60000 or 0 to disable
   */
  timeout?: number | undefined;
  persistence?: InputEdgePrometheusDiskSpooling | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputEdgePrometheusMetadatum> | undefined;
  /**
   * Enter credentials directly, or select a stored secret
   */
  authType?: InputEdgePrometheusAuthTypeAuthenticationMethod | undefined;
  description?: string | undefined;
  targets?: Array<Target> | undefined;
  /**
   * List of DNS names to resolve
   */
  nameList?: Array<string> | undefined;
  /**
   * DNS Record type to resolve
   */
  recordType?: InputEdgePrometheusRecordType | undefined;
  /**
   * Protocol to use when collecting metrics
   */
  scrapeProtocol?: ScrapeProtocolProtocol | undefined;
  /**
   * Path to use when collecting metrics from discovered targets
   */
  scrapePath?: string | undefined;
  /**
   * Use public IP address for discovered targets. Set to false if the private IP address should be used.
   */
  usePublicIp?: boolean | undefined;
  /**
   * The port number in the metrics URL for discovered targets.
   */
  scrapePort?: number | undefined;
  /**
   * EC2 Instance Search Filter
   */
  searchFilter?: Array<InputEdgePrometheusSearchFilter> | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?:
    | InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod
    | undefined;
  awsSecretKey?: string | undefined;
  /**
   * Region where the EC2 is located
   */
  region?: string | undefined;
  /**
   * EC2 service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to EC2-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing EC2 requests
   */
  signatureVersion?: InputEdgePrometheusSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access EC2
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Protocol to use when collecting metrics
   */
  scrapeProtocolExpr?: string | undefined;
  /**
   * The port number in the metrics URL for discovered targets.
   */
  scrapePortExpr?: string | undefined;
  /**
   * Path to use when collecting metrics from discovered targets
   */
  scrapePathExpr?: string | undefined;
  /**
   *   Add rules to decide which pods to discover for metrics.
   *
   * @remarks
   *   Pods are searched if no rules are given or of all the rules'
   *   expressions evaluate to true.
   */
  podFilter?: Array<PodFilter> | undefined;
  /**
   * Username for Prometheus Basic authentication
   */
  username?: string | undefined;
  /**
   * Password for Prometheus Basic authentication
   */
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

/** @internal */
export const InputEdgePrometheusType$inboundSchema: z.ZodNativeEnum<
  typeof InputEdgePrometheusType
> = z.nativeEnum(InputEdgePrometheusType);

/** @internal */
export const InputEdgePrometheusType$outboundSchema: z.ZodNativeEnum<
  typeof InputEdgePrometheusType
> = InputEdgePrometheusType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusType$ {
  /** @deprecated use `InputEdgePrometheusType$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusType$inboundSchema;
  /** @deprecated use `InputEdgePrometheusType$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusType$outboundSchema;
}

/** @internal */
export const InputEdgePrometheusConnection$inboundSchema: z.ZodType<
  InputEdgePrometheusConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputEdgePrometheusConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputEdgePrometheusConnection$outboundSchema: z.ZodType<
  InputEdgePrometheusConnection$Outbound,
  z.ZodTypeDef,
  InputEdgePrometheusConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusConnection$ {
  /** @deprecated use `InputEdgePrometheusConnection$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusConnection$inboundSchema;
  /** @deprecated use `InputEdgePrometheusConnection$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusConnection$outboundSchema;
  /** @deprecated use `InputEdgePrometheusConnection$Outbound` instead. */
  export type Outbound = InputEdgePrometheusConnection$Outbound;
}

export function inputEdgePrometheusConnectionToJSON(
  inputEdgePrometheusConnection: InputEdgePrometheusConnection,
): string {
  return JSON.stringify(
    InputEdgePrometheusConnection$outboundSchema.parse(
      inputEdgePrometheusConnection,
    ),
  );
}

export function inputEdgePrometheusConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputEdgePrometheusConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputEdgePrometheusConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputEdgePrometheusConnection' from JSON`,
  );
}

/** @internal */
export const InputEdgePrometheusMode$inboundSchema: z.ZodType<
  InputEdgePrometheusMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputEdgePrometheusMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputEdgePrometheusMode$outboundSchema: z.ZodType<
  InputEdgePrometheusMode,
  z.ZodTypeDef,
  InputEdgePrometheusMode
> = z.union([
  z.nativeEnum(InputEdgePrometheusMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusMode$ {
  /** @deprecated use `InputEdgePrometheusMode$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusMode$inboundSchema;
  /** @deprecated use `InputEdgePrometheusMode$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusMode$outboundSchema;
}

/** @internal */
export const InputEdgePrometheusPqCompression$inboundSchema: z.ZodType<
  InputEdgePrometheusPqCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputEdgePrometheusPqCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputEdgePrometheusPqCompression$outboundSchema: z.ZodType<
  InputEdgePrometheusPqCompression,
  z.ZodTypeDef,
  InputEdgePrometheusPqCompression
> = z.union([
  z.nativeEnum(InputEdgePrometheusPqCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusPqCompression$ {
  /** @deprecated use `InputEdgePrometheusPqCompression$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusPqCompression$inboundSchema;
  /** @deprecated use `InputEdgePrometheusPqCompression$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusPqCompression$outboundSchema;
}

/** @internal */
export const InputEdgePrometheusPqControls$inboundSchema: z.ZodType<
  InputEdgePrometheusPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputEdgePrometheusPqControls$Outbound = {};

/** @internal */
export const InputEdgePrometheusPqControls$outboundSchema: z.ZodType<
  InputEdgePrometheusPqControls$Outbound,
  z.ZodTypeDef,
  InputEdgePrometheusPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusPqControls$ {
  /** @deprecated use `InputEdgePrometheusPqControls$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusPqControls$inboundSchema;
  /** @deprecated use `InputEdgePrometheusPqControls$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusPqControls$outboundSchema;
  /** @deprecated use `InputEdgePrometheusPqControls$Outbound` instead. */
  export type Outbound = InputEdgePrometheusPqControls$Outbound;
}

export function inputEdgePrometheusPqControlsToJSON(
  inputEdgePrometheusPqControls: InputEdgePrometheusPqControls,
): string {
  return JSON.stringify(
    InputEdgePrometheusPqControls$outboundSchema.parse(
      inputEdgePrometheusPqControls,
    ),
  );
}

export function inputEdgePrometheusPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputEdgePrometheusPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputEdgePrometheusPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputEdgePrometheusPqControls' from JSON`,
  );
}

/** @internal */
export const InputEdgePrometheusPq$inboundSchema: z.ZodType<
  InputEdgePrometheusPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputEdgePrometheusMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputEdgePrometheusPqCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputEdgePrometheusPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type InputEdgePrometheusPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputEdgePrometheusPqControls$Outbound | undefined;
};

/** @internal */
export const InputEdgePrometheusPq$outboundSchema: z.ZodType<
  InputEdgePrometheusPq$Outbound,
  z.ZodTypeDef,
  InputEdgePrometheusPq
> = z.object({
  mode: InputEdgePrometheusMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputEdgePrometheusPqCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputEdgePrometheusPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusPq$ {
  /** @deprecated use `InputEdgePrometheusPq$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusPq$inboundSchema;
  /** @deprecated use `InputEdgePrometheusPq$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusPq$outboundSchema;
  /** @deprecated use `InputEdgePrometheusPq$Outbound` instead. */
  export type Outbound = InputEdgePrometheusPq$Outbound;
}

export function inputEdgePrometheusPqToJSON(
  inputEdgePrometheusPq: InputEdgePrometheusPq,
): string {
  return JSON.stringify(
    InputEdgePrometheusPq$outboundSchema.parse(inputEdgePrometheusPq),
  );
}

export function inputEdgePrometheusPqFromJSON(
  jsonString: string,
): SafeParseResult<InputEdgePrometheusPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputEdgePrometheusPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputEdgePrometheusPq' from JSON`,
  );
}

/** @internal */
export const InputEdgePrometheusDiscoveryType$inboundSchema: z.ZodType<
  InputEdgePrometheusDiscoveryType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputEdgePrometheusDiscoveryType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputEdgePrometheusDiscoveryType$outboundSchema: z.ZodType<
  InputEdgePrometheusDiscoveryType,
  z.ZodTypeDef,
  InputEdgePrometheusDiscoveryType
> = z.union([
  z.nativeEnum(InputEdgePrometheusDiscoveryType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusDiscoveryType$ {
  /** @deprecated use `InputEdgePrometheusDiscoveryType$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusDiscoveryType$inboundSchema;
  /** @deprecated use `InputEdgePrometheusDiscoveryType$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusDiscoveryType$outboundSchema;
}

/** @internal */
export const InputEdgePrometheusPersistenceCompression$inboundSchema: z.ZodType<
  InputEdgePrometheusPersistenceCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputEdgePrometheusPersistenceCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputEdgePrometheusPersistenceCompression$outboundSchema:
  z.ZodType<
    InputEdgePrometheusPersistenceCompression,
    z.ZodTypeDef,
    InputEdgePrometheusPersistenceCompression
  > = z.union([
    z.nativeEnum(InputEdgePrometheusPersistenceCompression),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusPersistenceCompression$ {
  /** @deprecated use `InputEdgePrometheusPersistenceCompression$inboundSchema` instead. */
  export const inboundSchema =
    InputEdgePrometheusPersistenceCompression$inboundSchema;
  /** @deprecated use `InputEdgePrometheusPersistenceCompression$outboundSchema` instead. */
  export const outboundSchema =
    InputEdgePrometheusPersistenceCompression$outboundSchema;
}

/** @internal */
export const InputEdgePrometheusDiskSpooling$inboundSchema: z.ZodType<
  InputEdgePrometheusDiskSpooling,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputEdgePrometheusPersistenceCompression$inboundSchema.default(
    "gzip",
  ),
});

/** @internal */
export type InputEdgePrometheusDiskSpooling$Outbound = {
  enable: boolean;
  timeWindow: string;
  maxDataSize: string;
  maxDataTime: string;
  compress: string;
};

/** @internal */
export const InputEdgePrometheusDiskSpooling$outboundSchema: z.ZodType<
  InputEdgePrometheusDiskSpooling$Outbound,
  z.ZodTypeDef,
  InputEdgePrometheusDiskSpooling
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputEdgePrometheusPersistenceCompression$outboundSchema.default(
    "gzip",
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusDiskSpooling$ {
  /** @deprecated use `InputEdgePrometheusDiskSpooling$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusDiskSpooling$inboundSchema;
  /** @deprecated use `InputEdgePrometheusDiskSpooling$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusDiskSpooling$outboundSchema;
  /** @deprecated use `InputEdgePrometheusDiskSpooling$Outbound` instead. */
  export type Outbound = InputEdgePrometheusDiskSpooling$Outbound;
}

export function inputEdgePrometheusDiskSpoolingToJSON(
  inputEdgePrometheusDiskSpooling: InputEdgePrometheusDiskSpooling,
): string {
  return JSON.stringify(
    InputEdgePrometheusDiskSpooling$outboundSchema.parse(
      inputEdgePrometheusDiskSpooling,
    ),
  );
}

export function inputEdgePrometheusDiskSpoolingFromJSON(
  jsonString: string,
): SafeParseResult<InputEdgePrometheusDiskSpooling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputEdgePrometheusDiskSpooling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputEdgePrometheusDiskSpooling' from JSON`,
  );
}

/** @internal */
export const InputEdgePrometheusMetadatum$inboundSchema: z.ZodType<
  InputEdgePrometheusMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputEdgePrometheusMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputEdgePrometheusMetadatum$outboundSchema: z.ZodType<
  InputEdgePrometheusMetadatum$Outbound,
  z.ZodTypeDef,
  InputEdgePrometheusMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusMetadatum$ {
  /** @deprecated use `InputEdgePrometheusMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusMetadatum$inboundSchema;
  /** @deprecated use `InputEdgePrometheusMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusMetadatum$outboundSchema;
  /** @deprecated use `InputEdgePrometheusMetadatum$Outbound` instead. */
  export type Outbound = InputEdgePrometheusMetadatum$Outbound;
}

export function inputEdgePrometheusMetadatumToJSON(
  inputEdgePrometheusMetadatum: InputEdgePrometheusMetadatum,
): string {
  return JSON.stringify(
    InputEdgePrometheusMetadatum$outboundSchema.parse(
      inputEdgePrometheusMetadatum,
    ),
  );
}

export function inputEdgePrometheusMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputEdgePrometheusMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputEdgePrometheusMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputEdgePrometheusMetadatum' from JSON`,
  );
}

/** @internal */
export const InputEdgePrometheusAuthTypeAuthenticationMethod$inboundSchema:
  z.ZodType<
    InputEdgePrometheusAuthTypeAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(InputEdgePrometheusAuthTypeAuthenticationMethod),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const InputEdgePrometheusAuthTypeAuthenticationMethod$outboundSchema:
  z.ZodType<
    InputEdgePrometheusAuthTypeAuthenticationMethod,
    z.ZodTypeDef,
    InputEdgePrometheusAuthTypeAuthenticationMethod
  > = z.union([
    z.nativeEnum(InputEdgePrometheusAuthTypeAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusAuthTypeAuthenticationMethod$ {
  /** @deprecated use `InputEdgePrometheusAuthTypeAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    InputEdgePrometheusAuthTypeAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputEdgePrometheusAuthTypeAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    InputEdgePrometheusAuthTypeAuthenticationMethod$outboundSchema;
}

/** @internal */
export const TargetProtocol$inboundSchema: z.ZodType<
  TargetProtocol,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TargetProtocol),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TargetProtocol$outboundSchema: z.ZodType<
  TargetProtocol,
  z.ZodTypeDef,
  TargetProtocol
> = z.union([
  z.nativeEnum(TargetProtocol),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetProtocol$ {
  /** @deprecated use `TargetProtocol$inboundSchema` instead. */
  export const inboundSchema = TargetProtocol$inboundSchema;
  /** @deprecated use `TargetProtocol$outboundSchema` instead. */
  export const outboundSchema = TargetProtocol$outboundSchema;
}

/** @internal */
export const Target$inboundSchema: z.ZodType<Target, z.ZodTypeDef, unknown> = z
  .object({
    protocol: TargetProtocol$inboundSchema.default("http"),
    host: z.string(),
    port: z.number().default(9090),
    path: z.string().default("/metrics"),
  });

/** @internal */
export type Target$Outbound = {
  protocol: string;
  host: string;
  port: number;
  path: string;
};

/** @internal */
export const Target$outboundSchema: z.ZodType<
  Target$Outbound,
  z.ZodTypeDef,
  Target
> = z.object({
  protocol: TargetProtocol$outboundSchema.default("http"),
  host: z.string(),
  port: z.number().default(9090),
  path: z.string().default("/metrics"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Target$ {
  /** @deprecated use `Target$inboundSchema` instead. */
  export const inboundSchema = Target$inboundSchema;
  /** @deprecated use `Target$outboundSchema` instead. */
  export const outboundSchema = Target$outboundSchema;
  /** @deprecated use `Target$Outbound` instead. */
  export type Outbound = Target$Outbound;
}

export function targetToJSON(target: Target): string {
  return JSON.stringify(Target$outboundSchema.parse(target));
}

export function targetFromJSON(
  jsonString: string,
): SafeParseResult<Target, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Target$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Target' from JSON`,
  );
}

/** @internal */
export const InputEdgePrometheusRecordType$inboundSchema: z.ZodType<
  InputEdgePrometheusRecordType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputEdgePrometheusRecordType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputEdgePrometheusRecordType$outboundSchema: z.ZodType<
  InputEdgePrometheusRecordType,
  z.ZodTypeDef,
  InputEdgePrometheusRecordType
> = z.union([
  z.nativeEnum(InputEdgePrometheusRecordType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusRecordType$ {
  /** @deprecated use `InputEdgePrometheusRecordType$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusRecordType$inboundSchema;
  /** @deprecated use `InputEdgePrometheusRecordType$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusRecordType$outboundSchema;
}

/** @internal */
export const ScrapeProtocolProtocol$inboundSchema: z.ZodType<
  ScrapeProtocolProtocol,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ScrapeProtocolProtocol),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ScrapeProtocolProtocol$outboundSchema: z.ZodType<
  ScrapeProtocolProtocol,
  z.ZodTypeDef,
  ScrapeProtocolProtocol
> = z.union([
  z.nativeEnum(ScrapeProtocolProtocol),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScrapeProtocolProtocol$ {
  /** @deprecated use `ScrapeProtocolProtocol$inboundSchema` instead. */
  export const inboundSchema = ScrapeProtocolProtocol$inboundSchema;
  /** @deprecated use `ScrapeProtocolProtocol$outboundSchema` instead. */
  export const outboundSchema = ScrapeProtocolProtocol$outboundSchema;
}

/** @internal */
export const InputEdgePrometheusSearchFilter$inboundSchema: z.ZodType<
  InputEdgePrometheusSearchFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  Name: z.string(),
  Values: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "Name": "name",
    "Values": "values",
  });
});

/** @internal */
export type InputEdgePrometheusSearchFilter$Outbound = {
  Name: string;
  Values: Array<string>;
};

/** @internal */
export const InputEdgePrometheusSearchFilter$outboundSchema: z.ZodType<
  InputEdgePrometheusSearchFilter$Outbound,
  z.ZodTypeDef,
  InputEdgePrometheusSearchFilter
> = z.object({
  name: z.string(),
  values: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    name: "Name",
    values: "Values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusSearchFilter$ {
  /** @deprecated use `InputEdgePrometheusSearchFilter$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheusSearchFilter$inboundSchema;
  /** @deprecated use `InputEdgePrometheusSearchFilter$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheusSearchFilter$outboundSchema;
  /** @deprecated use `InputEdgePrometheusSearchFilter$Outbound` instead. */
  export type Outbound = InputEdgePrometheusSearchFilter$Outbound;
}

export function inputEdgePrometheusSearchFilterToJSON(
  inputEdgePrometheusSearchFilter: InputEdgePrometheusSearchFilter,
): string {
  return JSON.stringify(
    InputEdgePrometheusSearchFilter$outboundSchema.parse(
      inputEdgePrometheusSearchFilter,
    ),
  );
}

export function inputEdgePrometheusSearchFilterFromJSON(
  jsonString: string,
): SafeParseResult<InputEdgePrometheusSearchFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputEdgePrometheusSearchFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputEdgePrometheusSearchFilter' from JSON`,
  );
}

/** @internal */
export const InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod$inboundSchema:
  z.ZodType<
    InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod$outboundSchema:
  z.ZodType<
    InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod,
    z.ZodTypeDef,
    InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod
  > = z.union([
    z.nativeEnum(
      InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod$ {
  /** @deprecated use `InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputEdgePrometheusSignatureVersion$inboundSchema: z.ZodType<
  InputEdgePrometheusSignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputEdgePrometheusSignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputEdgePrometheusSignatureVersion$outboundSchema: z.ZodType<
  InputEdgePrometheusSignatureVersion,
  z.ZodTypeDef,
  InputEdgePrometheusSignatureVersion
> = z.union([
  z.nativeEnum(InputEdgePrometheusSignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheusSignatureVersion$ {
  /** @deprecated use `InputEdgePrometheusSignatureVersion$inboundSchema` instead. */
  export const inboundSchema =
    InputEdgePrometheusSignatureVersion$inboundSchema;
  /** @deprecated use `InputEdgePrometheusSignatureVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputEdgePrometheusSignatureVersion$outboundSchema;
}

/** @internal */
export const PodFilter$inboundSchema: z.ZodType<
  PodFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type PodFilter$Outbound = {
  filter: string;
  description?: string | undefined;
};

/** @internal */
export const PodFilter$outboundSchema: z.ZodType<
  PodFilter$Outbound,
  z.ZodTypeDef,
  PodFilter
> = z.object({
  filter: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PodFilter$ {
  /** @deprecated use `PodFilter$inboundSchema` instead. */
  export const inboundSchema = PodFilter$inboundSchema;
  /** @deprecated use `PodFilter$outboundSchema` instead. */
  export const outboundSchema = PodFilter$outboundSchema;
  /** @deprecated use `PodFilter$Outbound` instead. */
  export type Outbound = PodFilter$Outbound;
}

export function podFilterToJSON(podFilter: PodFilter): string {
  return JSON.stringify(PodFilter$outboundSchema.parse(podFilter));
}

export function podFilterFromJSON(
  jsonString: string,
): SafeParseResult<PodFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PodFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PodFilter' from JSON`,
  );
}

/** @internal */
export const InputEdgePrometheus$inboundSchema: z.ZodType<
  InputEdgePrometheus,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputEdgePrometheusType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(
    z.lazy(() => InputEdgePrometheusConnection$inboundSchema),
  ).optional(),
  pq: z.lazy(() => InputEdgePrometheusPq$inboundSchema).optional(),
  dimensionList: z.array(z.string()).optional(),
  discoveryType: InputEdgePrometheusDiscoveryType$inboundSchema.default(
    "static",
  ),
  interval: z.number().default(15),
  timeout: z.number().default(5000),
  persistence: z.lazy(() => InputEdgePrometheusDiskSpooling$inboundSchema)
    .optional(),
  metadata: z.array(z.lazy(() => InputEdgePrometheusMetadatum$inboundSchema))
    .optional(),
  authType: InputEdgePrometheusAuthTypeAuthenticationMethod$inboundSchema
    .default("manual"),
  description: z.string().optional(),
  targets: z.array(z.lazy(() => Target$inboundSchema)).optional(),
  nameList: z.array(z.string()).optional(),
  recordType: InputEdgePrometheusRecordType$inboundSchema.default("SRV"),
  scrapeProtocol: ScrapeProtocolProtocol$inboundSchema.default("http"),
  scrapePath: z.string().default("/metrics"),
  usePublicIp: z.boolean().default(true),
  scrapePort: z.number().default(9090),
  searchFilter: z.array(
    z.lazy(() => InputEdgePrometheusSearchFilter$inboundSchema),
  ).optional(),
  awsAuthenticationMethod:
    InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod$inboundSchema
      .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputEdgePrometheusSignatureVersion$inboundSchema.default(
    "v4",
  ),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  scrapeProtocolExpr: z.string().default(
    "metadata.annotations['prometheus.io/scheme'] || 'http'",
  ),
  scrapePortExpr: z.string().default(
    "metadata.annotations['prometheus.io/port'] || 9090",
  ),
  scrapePathExpr: z.string().default(
    "metadata.annotations['prometheus.io/path'] || '/metrics'",
  ),
  podFilter: z.array(z.lazy(() => PodFilter$inboundSchema)).optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type InputEdgePrometheus$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputEdgePrometheusConnection$Outbound> | undefined;
  pq?: InputEdgePrometheusPq$Outbound | undefined;
  dimensionList?: Array<string> | undefined;
  discoveryType: string;
  interval: number;
  timeout: number;
  persistence?: InputEdgePrometheusDiskSpooling$Outbound | undefined;
  metadata?: Array<InputEdgePrometheusMetadatum$Outbound> | undefined;
  authType: string;
  description?: string | undefined;
  targets?: Array<Target$Outbound> | undefined;
  nameList?: Array<string> | undefined;
  recordType: string;
  scrapeProtocol: string;
  scrapePath: string;
  usePublicIp: boolean;
  scrapePort: number;
  searchFilter?: Array<InputEdgePrometheusSearchFilter$Outbound> | undefined;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region?: string | undefined;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  scrapeProtocolExpr: string;
  scrapePortExpr: string;
  scrapePathExpr: string;
  podFilter?: Array<PodFilter$Outbound> | undefined;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const InputEdgePrometheus$outboundSchema: z.ZodType<
  InputEdgePrometheus$Outbound,
  z.ZodTypeDef,
  InputEdgePrometheus
> = z.object({
  id: z.string().optional(),
  type: InputEdgePrometheusType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(
    z.lazy(() => InputEdgePrometheusConnection$outboundSchema),
  ).optional(),
  pq: z.lazy(() => InputEdgePrometheusPq$outboundSchema).optional(),
  dimensionList: z.array(z.string()).optional(),
  discoveryType: InputEdgePrometheusDiscoveryType$outboundSchema.default(
    "static",
  ),
  interval: z.number().default(15),
  timeout: z.number().default(5000),
  persistence: z.lazy(() => InputEdgePrometheusDiskSpooling$outboundSchema)
    .optional(),
  metadata: z.array(z.lazy(() => InputEdgePrometheusMetadatum$outboundSchema))
    .optional(),
  authType: InputEdgePrometheusAuthTypeAuthenticationMethod$outboundSchema
    .default("manual"),
  description: z.string().optional(),
  targets: z.array(z.lazy(() => Target$outboundSchema)).optional(),
  nameList: z.array(z.string()).optional(),
  recordType: InputEdgePrometheusRecordType$outboundSchema.default("SRV"),
  scrapeProtocol: ScrapeProtocolProtocol$outboundSchema.default("http"),
  scrapePath: z.string().default("/metrics"),
  usePublicIp: z.boolean().default(true),
  scrapePort: z.number().default(9090),
  searchFilter: z.array(
    z.lazy(() => InputEdgePrometheusSearchFilter$outboundSchema),
  ).optional(),
  awsAuthenticationMethod:
    InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod$outboundSchema
      .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputEdgePrometheusSignatureVersion$outboundSchema.default(
    "v4",
  ),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  scrapeProtocolExpr: z.string().default(
    "metadata.annotations['prometheus.io/scheme'] || 'http'",
  ),
  scrapePortExpr: z.string().default(
    "metadata.annotations['prometheus.io/port'] || 9090",
  ),
  scrapePathExpr: z.string().default(
    "metadata.annotations['prometheus.io/path'] || '/metrics'",
  ),
  podFilter: z.array(z.lazy(() => PodFilter$outboundSchema)).optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputEdgePrometheus$ {
  /** @deprecated use `InputEdgePrometheus$inboundSchema` instead. */
  export const inboundSchema = InputEdgePrometheus$inboundSchema;
  /** @deprecated use `InputEdgePrometheus$outboundSchema` instead. */
  export const outboundSchema = InputEdgePrometheus$outboundSchema;
  /** @deprecated use `InputEdgePrometheus$Outbound` instead. */
  export type Outbound = InputEdgePrometheus$Outbound;
}

export function inputEdgePrometheusToJSON(
  inputEdgePrometheus: InputEdgePrometheus,
): string {
  return JSON.stringify(
    InputEdgePrometheus$outboundSchema.parse(inputEdgePrometheus),
  );
}

export function inputEdgePrometheusFromJSON(
  jsonString: string,
): SafeParseResult<InputEdgePrometheus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputEdgePrometheus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputEdgePrometheus' from JSON`,
  );
}
