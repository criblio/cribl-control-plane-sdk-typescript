/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MarkdownElementConfig = {
  markdown: string;
};

/** @internal */
export const MarkdownElementConfig$inboundSchema: z.ZodType<
  MarkdownElementConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  markdown: z.string(),
});

/** @internal */
export type MarkdownElementConfig$Outbound = {
  markdown: string;
};

/** @internal */
export const MarkdownElementConfig$outboundSchema: z.ZodType<
  MarkdownElementConfig$Outbound,
  z.ZodTypeDef,
  MarkdownElementConfig
> = z.object({
  markdown: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkdownElementConfig$ {
  /** @deprecated use `MarkdownElementConfig$inboundSchema` instead. */
  export const inboundSchema = MarkdownElementConfig$inboundSchema;
  /** @deprecated use `MarkdownElementConfig$outboundSchema` instead. */
  export const outboundSchema = MarkdownElementConfig$outboundSchema;
  /** @deprecated use `MarkdownElementConfig$Outbound` instead. */
  export type Outbound = MarkdownElementConfig$Outbound;
}

export function markdownElementConfigToJSON(
  markdownElementConfig: MarkdownElementConfig,
): string {
  return JSON.stringify(
    MarkdownElementConfig$outboundSchema.parse(markdownElementConfig),
  );
}

export function markdownElementConfigFromJSON(
  jsonString: string,
): SafeParseResult<MarkdownElementConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MarkdownElementConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarkdownElementConfig' from JSON`,
  );
}
