/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputSystemStateType = {
  SystemState: "system_state",
} as const;
export type InputSystemStateType = OpenEnum<typeof InputSystemStateType>;

export type InputSystemStateConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputSystemStateMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputSystemStateMode = OpenEnum<typeof InputSystemStateMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputSystemStateCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputSystemStateCompression = OpenEnum<
  typeof InputSystemStateCompression
>;

export type InputSystemStatePqControls = {};

export type InputSystemStatePq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputSystemStateMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputSystemStateCompression | undefined;
  pqControls?: InputSystemStatePqControls | undefined;
};

export type InputSystemStateMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

/**
 * Creates events based on entries collected from the hosts file
 */
export type HostsFile = {
  enable?: boolean | undefined;
};

/**
 * Creates events for each of the host’s network interfaces
 */
export type Interfaces = {
  enable?: boolean | undefined;
};

/**
 * Creates events for physical disks, partitions, and file systems
 */
export type DisksAndFileSystems = {
  enable?: boolean | undefined;
};

/**
 * Creates events based on the host system’s current state
 */
export type HostInfo = {
  enable?: boolean | undefined;
};

/**
 * Creates events based on entries collected from the host’s network routes
 */
export type InputSystemStateRoutes = {
  enable?: boolean | undefined;
};

/**
 * Creates events for DNS resolvers and search entries
 */
export type Dns = {
  enable?: boolean | undefined;
};

/**
 * Creates events for local users and groups
 */
export type UsersAndGroups = {
  enable?: boolean | undefined;
};

/**
 * Creates events for Firewall rules entries
 */
export type Firewall = {
  enable?: boolean | undefined;
};

/**
 * Creates events from the list of services
 */
export type Services = {
  enable?: boolean | undefined;
};

/**
 * Creates events from list of listening ports
 */
export type ListeningPorts = {
  enable?: boolean | undefined;
};

/**
 * Creates events from list of logged-in users
 */
export type LoggedInUsers = {
  enable?: boolean | undefined;
};

export type Collectors = {
  /**
   * Creates events based on entries collected from the hosts file
   */
  hostsfile?: HostsFile | undefined;
  /**
   * Creates events for each of the host’s network interfaces
   */
  interfaces?: Interfaces | undefined;
  /**
   * Creates events for physical disks, partitions, and file systems
   */
  disk?: DisksAndFileSystems | undefined;
  /**
   * Creates events based on the host system’s current state
   */
  metadata?: HostInfo | undefined;
  /**
   * Creates events based on entries collected from the host’s network routes
   */
  routes?: InputSystemStateRoutes | undefined;
  /**
   * Creates events for DNS resolvers and search entries
   */
  dns?: Dns | undefined;
  /**
   * Creates events for local users and groups
   */
  user?: UsersAndGroups | undefined;
  /**
   * Creates events for Firewall rules entries
   */
  firewall?: Firewall | undefined;
  /**
   * Creates events from the list of services
   */
  services?: Services | undefined;
  /**
   * Creates events from list of listening ports
   */
  ports?: ListeningPorts | undefined;
  /**
   * Creates events from list of logged-in users
   */
  loginUsers?: LoggedInUsers | undefined;
};

export const InputSystemStateDataCompressionFormat = {
  None: "none",
  Gzip: "gzip",
} as const;
export type InputSystemStateDataCompressionFormat = OpenEnum<
  typeof InputSystemStateDataCompressionFormat
>;

export type InputSystemStatePersistence = {
  /**
   * Spool metrics to disk for Cribl Edge and Search
   */
  enable?: boolean | undefined;
  /**
   * Time span for each file bucket
   */
  timeWindow?: string | undefined;
  /**
   * Maximum disk space allowed to be consumed (examples: 420MB, 4GB). When limit is reached, older data will be deleted.
   */
  maxDataSize?: string | undefined;
  /**
   * Maximum amount of time to retain data (examples: 2h, 4d). When limit is reached, older data will be deleted.
   */
  maxDataTime?: string | undefined;
  compress?: InputSystemStateDataCompressionFormat | undefined;
  /**
   * Path to use to write metrics. Defaults to $CRIBL_HOME/state/system_state
   */
  destPath?: string | undefined;
};

export type InputSystemState = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputSystemStateType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputSystemStateConnection> | undefined;
  pq?: InputSystemStatePq | undefined;
  /**
   * Time, in seconds, between consecutive state collections. Default is 300 seconds (5 minutes).
   */
  interval?: number | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputSystemStateMetadatum> | undefined;
  collectors?: Collectors | undefined;
  persistence?: InputSystemStatePersistence | undefined;
  /**
   * Enable to use built-in tools (PowerShell) to collect events instead of native API (default) [Learn more](https://docs.cribl.io/edge/sources-system-state/#advanced-tab)
   */
  disableNativeModule?: boolean | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputSystemStateType$inboundSchema: z.ZodType<
  InputSystemStateType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemStateType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemStateType$outboundSchema: z.ZodType<
  InputSystemStateType,
  z.ZodTypeDef,
  InputSystemStateType
> = z.union([
  z.nativeEnum(InputSystemStateType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStateType$ {
  /** @deprecated use `InputSystemStateType$inboundSchema` instead. */
  export const inboundSchema = InputSystemStateType$inboundSchema;
  /** @deprecated use `InputSystemStateType$outboundSchema` instead. */
  export const outboundSchema = InputSystemStateType$outboundSchema;
}

/** @internal */
export const InputSystemStateConnection$inboundSchema: z.ZodType<
  InputSystemStateConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputSystemStateConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputSystemStateConnection$outboundSchema: z.ZodType<
  InputSystemStateConnection$Outbound,
  z.ZodTypeDef,
  InputSystemStateConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStateConnection$ {
  /** @deprecated use `InputSystemStateConnection$inboundSchema` instead. */
  export const inboundSchema = InputSystemStateConnection$inboundSchema;
  /** @deprecated use `InputSystemStateConnection$outboundSchema` instead. */
  export const outboundSchema = InputSystemStateConnection$outboundSchema;
  /** @deprecated use `InputSystemStateConnection$Outbound` instead. */
  export type Outbound = InputSystemStateConnection$Outbound;
}

export function inputSystemStateConnectionToJSON(
  inputSystemStateConnection: InputSystemStateConnection,
): string {
  return JSON.stringify(
    InputSystemStateConnection$outboundSchema.parse(inputSystemStateConnection),
  );
}

export function inputSystemStateConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemStateConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemStateConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemStateConnection' from JSON`,
  );
}

/** @internal */
export const InputSystemStateMode$inboundSchema: z.ZodType<
  InputSystemStateMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemStateMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemStateMode$outboundSchema: z.ZodType<
  InputSystemStateMode,
  z.ZodTypeDef,
  InputSystemStateMode
> = z.union([
  z.nativeEnum(InputSystemStateMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStateMode$ {
  /** @deprecated use `InputSystemStateMode$inboundSchema` instead. */
  export const inboundSchema = InputSystemStateMode$inboundSchema;
  /** @deprecated use `InputSystemStateMode$outboundSchema` instead. */
  export const outboundSchema = InputSystemStateMode$outboundSchema;
}

/** @internal */
export const InputSystemStateCompression$inboundSchema: z.ZodType<
  InputSystemStateCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemStateCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemStateCompression$outboundSchema: z.ZodType<
  InputSystemStateCompression,
  z.ZodTypeDef,
  InputSystemStateCompression
> = z.union([
  z.nativeEnum(InputSystemStateCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStateCompression$ {
  /** @deprecated use `InputSystemStateCompression$inboundSchema` instead. */
  export const inboundSchema = InputSystemStateCompression$inboundSchema;
  /** @deprecated use `InputSystemStateCompression$outboundSchema` instead. */
  export const outboundSchema = InputSystemStateCompression$outboundSchema;
}

/** @internal */
export const InputSystemStatePqControls$inboundSchema: z.ZodType<
  InputSystemStatePqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputSystemStatePqControls$Outbound = {};

/** @internal */
export const InputSystemStatePqControls$outboundSchema: z.ZodType<
  InputSystemStatePqControls$Outbound,
  z.ZodTypeDef,
  InputSystemStatePqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStatePqControls$ {
  /** @deprecated use `InputSystemStatePqControls$inboundSchema` instead. */
  export const inboundSchema = InputSystemStatePqControls$inboundSchema;
  /** @deprecated use `InputSystemStatePqControls$outboundSchema` instead. */
  export const outboundSchema = InputSystemStatePqControls$outboundSchema;
  /** @deprecated use `InputSystemStatePqControls$Outbound` instead. */
  export type Outbound = InputSystemStatePqControls$Outbound;
}

export function inputSystemStatePqControlsToJSON(
  inputSystemStatePqControls: InputSystemStatePqControls,
): string {
  return JSON.stringify(
    InputSystemStatePqControls$outboundSchema.parse(inputSystemStatePqControls),
  );
}

export function inputSystemStatePqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemStatePqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemStatePqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemStatePqControls' from JSON`,
  );
}

/** @internal */
export const InputSystemStatePq$inboundSchema: z.ZodType<
  InputSystemStatePq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSystemStateMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSystemStateCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputSystemStatePqControls$inboundSchema).optional(),
});

/** @internal */
export type InputSystemStatePq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputSystemStatePqControls$Outbound | undefined;
};

/** @internal */
export const InputSystemStatePq$outboundSchema: z.ZodType<
  InputSystemStatePq$Outbound,
  z.ZodTypeDef,
  InputSystemStatePq
> = z.object({
  mode: InputSystemStateMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSystemStateCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputSystemStatePqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStatePq$ {
  /** @deprecated use `InputSystemStatePq$inboundSchema` instead. */
  export const inboundSchema = InputSystemStatePq$inboundSchema;
  /** @deprecated use `InputSystemStatePq$outboundSchema` instead. */
  export const outboundSchema = InputSystemStatePq$outboundSchema;
  /** @deprecated use `InputSystemStatePq$Outbound` instead. */
  export type Outbound = InputSystemStatePq$Outbound;
}

export function inputSystemStatePqToJSON(
  inputSystemStatePq: InputSystemStatePq,
): string {
  return JSON.stringify(
    InputSystemStatePq$outboundSchema.parse(inputSystemStatePq),
  );
}

export function inputSystemStatePqFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemStatePq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemStatePq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemStatePq' from JSON`,
  );
}

/** @internal */
export const InputSystemStateMetadatum$inboundSchema: z.ZodType<
  InputSystemStateMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputSystemStateMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputSystemStateMetadatum$outboundSchema: z.ZodType<
  InputSystemStateMetadatum$Outbound,
  z.ZodTypeDef,
  InputSystemStateMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStateMetadatum$ {
  /** @deprecated use `InputSystemStateMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputSystemStateMetadatum$inboundSchema;
  /** @deprecated use `InputSystemStateMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputSystemStateMetadatum$outboundSchema;
  /** @deprecated use `InputSystemStateMetadatum$Outbound` instead. */
  export type Outbound = InputSystemStateMetadatum$Outbound;
}

export function inputSystemStateMetadatumToJSON(
  inputSystemStateMetadatum: InputSystemStateMetadatum,
): string {
  return JSON.stringify(
    InputSystemStateMetadatum$outboundSchema.parse(inputSystemStateMetadatum),
  );
}

export function inputSystemStateMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemStateMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemStateMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemStateMetadatum' from JSON`,
  );
}

/** @internal */
export const HostsFile$inboundSchema: z.ZodType<
  HostsFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type HostsFile$Outbound = {
  enable: boolean;
};

/** @internal */
export const HostsFile$outboundSchema: z.ZodType<
  HostsFile$Outbound,
  z.ZodTypeDef,
  HostsFile
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HostsFile$ {
  /** @deprecated use `HostsFile$inboundSchema` instead. */
  export const inboundSchema = HostsFile$inboundSchema;
  /** @deprecated use `HostsFile$outboundSchema` instead. */
  export const outboundSchema = HostsFile$outboundSchema;
  /** @deprecated use `HostsFile$Outbound` instead. */
  export type Outbound = HostsFile$Outbound;
}

export function hostsFileToJSON(hostsFile: HostsFile): string {
  return JSON.stringify(HostsFile$outboundSchema.parse(hostsFile));
}

export function hostsFileFromJSON(
  jsonString: string,
): SafeParseResult<HostsFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HostsFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HostsFile' from JSON`,
  );
}

/** @internal */
export const Interfaces$inboundSchema: z.ZodType<
  Interfaces,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type Interfaces$Outbound = {
  enable: boolean;
};

/** @internal */
export const Interfaces$outboundSchema: z.ZodType<
  Interfaces$Outbound,
  z.ZodTypeDef,
  Interfaces
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Interfaces$ {
  /** @deprecated use `Interfaces$inboundSchema` instead. */
  export const inboundSchema = Interfaces$inboundSchema;
  /** @deprecated use `Interfaces$outboundSchema` instead. */
  export const outboundSchema = Interfaces$outboundSchema;
  /** @deprecated use `Interfaces$Outbound` instead. */
  export type Outbound = Interfaces$Outbound;
}

export function interfacesToJSON(interfaces: Interfaces): string {
  return JSON.stringify(Interfaces$outboundSchema.parse(interfaces));
}

export function interfacesFromJSON(
  jsonString: string,
): SafeParseResult<Interfaces, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Interfaces$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Interfaces' from JSON`,
  );
}

/** @internal */
export const DisksAndFileSystems$inboundSchema: z.ZodType<
  DisksAndFileSystems,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type DisksAndFileSystems$Outbound = {
  enable: boolean;
};

/** @internal */
export const DisksAndFileSystems$outboundSchema: z.ZodType<
  DisksAndFileSystems$Outbound,
  z.ZodTypeDef,
  DisksAndFileSystems
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisksAndFileSystems$ {
  /** @deprecated use `DisksAndFileSystems$inboundSchema` instead. */
  export const inboundSchema = DisksAndFileSystems$inboundSchema;
  /** @deprecated use `DisksAndFileSystems$outboundSchema` instead. */
  export const outboundSchema = DisksAndFileSystems$outboundSchema;
  /** @deprecated use `DisksAndFileSystems$Outbound` instead. */
  export type Outbound = DisksAndFileSystems$Outbound;
}

export function disksAndFileSystemsToJSON(
  disksAndFileSystems: DisksAndFileSystems,
): string {
  return JSON.stringify(
    DisksAndFileSystems$outboundSchema.parse(disksAndFileSystems),
  );
}

export function disksAndFileSystemsFromJSON(
  jsonString: string,
): SafeParseResult<DisksAndFileSystems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisksAndFileSystems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisksAndFileSystems' from JSON`,
  );
}

/** @internal */
export const HostInfo$inboundSchema: z.ZodType<
  HostInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type HostInfo$Outbound = {
  enable: boolean;
};

/** @internal */
export const HostInfo$outboundSchema: z.ZodType<
  HostInfo$Outbound,
  z.ZodTypeDef,
  HostInfo
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HostInfo$ {
  /** @deprecated use `HostInfo$inboundSchema` instead. */
  export const inboundSchema = HostInfo$inboundSchema;
  /** @deprecated use `HostInfo$outboundSchema` instead. */
  export const outboundSchema = HostInfo$outboundSchema;
  /** @deprecated use `HostInfo$Outbound` instead. */
  export type Outbound = HostInfo$Outbound;
}

export function hostInfoToJSON(hostInfo: HostInfo): string {
  return JSON.stringify(HostInfo$outboundSchema.parse(hostInfo));
}

export function hostInfoFromJSON(
  jsonString: string,
): SafeParseResult<HostInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HostInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HostInfo' from JSON`,
  );
}

/** @internal */
export const InputSystemStateRoutes$inboundSchema: z.ZodType<
  InputSystemStateRoutes,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type InputSystemStateRoutes$Outbound = {
  enable: boolean;
};

/** @internal */
export const InputSystemStateRoutes$outboundSchema: z.ZodType<
  InputSystemStateRoutes$Outbound,
  z.ZodTypeDef,
  InputSystemStateRoutes
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStateRoutes$ {
  /** @deprecated use `InputSystemStateRoutes$inboundSchema` instead. */
  export const inboundSchema = InputSystemStateRoutes$inboundSchema;
  /** @deprecated use `InputSystemStateRoutes$outboundSchema` instead. */
  export const outboundSchema = InputSystemStateRoutes$outboundSchema;
  /** @deprecated use `InputSystemStateRoutes$Outbound` instead. */
  export type Outbound = InputSystemStateRoutes$Outbound;
}

export function inputSystemStateRoutesToJSON(
  inputSystemStateRoutes: InputSystemStateRoutes,
): string {
  return JSON.stringify(
    InputSystemStateRoutes$outboundSchema.parse(inputSystemStateRoutes),
  );
}

export function inputSystemStateRoutesFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemStateRoutes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemStateRoutes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemStateRoutes' from JSON`,
  );
}

/** @internal */
export const Dns$inboundSchema: z.ZodType<Dns, z.ZodTypeDef, unknown> = z
  .object({
    enable: z.boolean().default(true),
  });

/** @internal */
export type Dns$Outbound = {
  enable: boolean;
};

/** @internal */
export const Dns$outboundSchema: z.ZodType<Dns$Outbound, z.ZodTypeDef, Dns> = z
  .object({
    enable: z.boolean().default(true),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dns$ {
  /** @deprecated use `Dns$inboundSchema` instead. */
  export const inboundSchema = Dns$inboundSchema;
  /** @deprecated use `Dns$outboundSchema` instead. */
  export const outboundSchema = Dns$outboundSchema;
  /** @deprecated use `Dns$Outbound` instead. */
  export type Outbound = Dns$Outbound;
}

export function dnsToJSON(dns: Dns): string {
  return JSON.stringify(Dns$outboundSchema.parse(dns));
}

export function dnsFromJSON(
  jsonString: string,
): SafeParseResult<Dns, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Dns$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Dns' from JSON`,
  );
}

/** @internal */
export const UsersAndGroups$inboundSchema: z.ZodType<
  UsersAndGroups,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type UsersAndGroups$Outbound = {
  enable: boolean;
};

/** @internal */
export const UsersAndGroups$outboundSchema: z.ZodType<
  UsersAndGroups$Outbound,
  z.ZodTypeDef,
  UsersAndGroups
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAndGroups$ {
  /** @deprecated use `UsersAndGroups$inboundSchema` instead. */
  export const inboundSchema = UsersAndGroups$inboundSchema;
  /** @deprecated use `UsersAndGroups$outboundSchema` instead. */
  export const outboundSchema = UsersAndGroups$outboundSchema;
  /** @deprecated use `UsersAndGroups$Outbound` instead. */
  export type Outbound = UsersAndGroups$Outbound;
}

export function usersAndGroupsToJSON(usersAndGroups: UsersAndGroups): string {
  return JSON.stringify(UsersAndGroups$outboundSchema.parse(usersAndGroups));
}

export function usersAndGroupsFromJSON(
  jsonString: string,
): SafeParseResult<UsersAndGroups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAndGroups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAndGroups' from JSON`,
  );
}

/** @internal */
export const Firewall$inboundSchema: z.ZodType<
  Firewall,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type Firewall$Outbound = {
  enable: boolean;
};

/** @internal */
export const Firewall$outboundSchema: z.ZodType<
  Firewall$Outbound,
  z.ZodTypeDef,
  Firewall
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Firewall$ {
  /** @deprecated use `Firewall$inboundSchema` instead. */
  export const inboundSchema = Firewall$inboundSchema;
  /** @deprecated use `Firewall$outboundSchema` instead. */
  export const outboundSchema = Firewall$outboundSchema;
  /** @deprecated use `Firewall$Outbound` instead. */
  export type Outbound = Firewall$Outbound;
}

export function firewallToJSON(firewall: Firewall): string {
  return JSON.stringify(Firewall$outboundSchema.parse(firewall));
}

export function firewallFromJSON(
  jsonString: string,
): SafeParseResult<Firewall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Firewall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Firewall' from JSON`,
  );
}

/** @internal */
export const Services$inboundSchema: z.ZodType<
  Services,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type Services$Outbound = {
  enable: boolean;
};

/** @internal */
export const Services$outboundSchema: z.ZodType<
  Services$Outbound,
  z.ZodTypeDef,
  Services
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Services$ {
  /** @deprecated use `Services$inboundSchema` instead. */
  export const inboundSchema = Services$inboundSchema;
  /** @deprecated use `Services$outboundSchema` instead. */
  export const outboundSchema = Services$outboundSchema;
  /** @deprecated use `Services$Outbound` instead. */
  export type Outbound = Services$Outbound;
}

export function servicesToJSON(services: Services): string {
  return JSON.stringify(Services$outboundSchema.parse(services));
}

export function servicesFromJSON(
  jsonString: string,
): SafeParseResult<Services, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Services$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Services' from JSON`,
  );
}

/** @internal */
export const ListeningPorts$inboundSchema: z.ZodType<
  ListeningPorts,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type ListeningPorts$Outbound = {
  enable: boolean;
};

/** @internal */
export const ListeningPorts$outboundSchema: z.ZodType<
  ListeningPorts$Outbound,
  z.ZodTypeDef,
  ListeningPorts
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListeningPorts$ {
  /** @deprecated use `ListeningPorts$inboundSchema` instead. */
  export const inboundSchema = ListeningPorts$inboundSchema;
  /** @deprecated use `ListeningPorts$outboundSchema` instead. */
  export const outboundSchema = ListeningPorts$outboundSchema;
  /** @deprecated use `ListeningPorts$Outbound` instead. */
  export type Outbound = ListeningPorts$Outbound;
}

export function listeningPortsToJSON(listeningPorts: ListeningPorts): string {
  return JSON.stringify(ListeningPorts$outboundSchema.parse(listeningPorts));
}

export function listeningPortsFromJSON(
  jsonString: string,
): SafeParseResult<ListeningPorts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListeningPorts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListeningPorts' from JSON`,
  );
}

/** @internal */
export const LoggedInUsers$inboundSchema: z.ZodType<
  LoggedInUsers,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(true),
});

/** @internal */
export type LoggedInUsers$Outbound = {
  enable: boolean;
};

/** @internal */
export const LoggedInUsers$outboundSchema: z.ZodType<
  LoggedInUsers$Outbound,
  z.ZodTypeDef,
  LoggedInUsers
> = z.object({
  enable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LoggedInUsers$ {
  /** @deprecated use `LoggedInUsers$inboundSchema` instead. */
  export const inboundSchema = LoggedInUsers$inboundSchema;
  /** @deprecated use `LoggedInUsers$outboundSchema` instead. */
  export const outboundSchema = LoggedInUsers$outboundSchema;
  /** @deprecated use `LoggedInUsers$Outbound` instead. */
  export type Outbound = LoggedInUsers$Outbound;
}

export function loggedInUsersToJSON(loggedInUsers: LoggedInUsers): string {
  return JSON.stringify(LoggedInUsers$outboundSchema.parse(loggedInUsers));
}

export function loggedInUsersFromJSON(
  jsonString: string,
): SafeParseResult<LoggedInUsers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LoggedInUsers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LoggedInUsers' from JSON`,
  );
}

/** @internal */
export const Collectors$inboundSchema: z.ZodType<
  Collectors,
  z.ZodTypeDef,
  unknown
> = z.object({
  hostsfile: z.lazy(() => HostsFile$inboundSchema).optional(),
  interfaces: z.lazy(() => Interfaces$inboundSchema).optional(),
  disk: z.lazy(() => DisksAndFileSystems$inboundSchema).optional(),
  metadata: z.lazy(() => HostInfo$inboundSchema).optional(),
  routes: z.lazy(() => InputSystemStateRoutes$inboundSchema).optional(),
  dns: z.lazy(() => Dns$inboundSchema).optional(),
  user: z.lazy(() => UsersAndGroups$inboundSchema).optional(),
  firewall: z.lazy(() => Firewall$inboundSchema).optional(),
  services: z.lazy(() => Services$inboundSchema).optional(),
  ports: z.lazy(() => ListeningPorts$inboundSchema).optional(),
  loginUsers: z.lazy(() => LoggedInUsers$inboundSchema).optional(),
});

/** @internal */
export type Collectors$Outbound = {
  hostsfile?: HostsFile$Outbound | undefined;
  interfaces?: Interfaces$Outbound | undefined;
  disk?: DisksAndFileSystems$Outbound | undefined;
  metadata?: HostInfo$Outbound | undefined;
  routes?: InputSystemStateRoutes$Outbound | undefined;
  dns?: Dns$Outbound | undefined;
  user?: UsersAndGroups$Outbound | undefined;
  firewall?: Firewall$Outbound | undefined;
  services?: Services$Outbound | undefined;
  ports?: ListeningPorts$Outbound | undefined;
  loginUsers?: LoggedInUsers$Outbound | undefined;
};

/** @internal */
export const Collectors$outboundSchema: z.ZodType<
  Collectors$Outbound,
  z.ZodTypeDef,
  Collectors
> = z.object({
  hostsfile: z.lazy(() => HostsFile$outboundSchema).optional(),
  interfaces: z.lazy(() => Interfaces$outboundSchema).optional(),
  disk: z.lazy(() => DisksAndFileSystems$outboundSchema).optional(),
  metadata: z.lazy(() => HostInfo$outboundSchema).optional(),
  routes: z.lazy(() => InputSystemStateRoutes$outboundSchema).optional(),
  dns: z.lazy(() => Dns$outboundSchema).optional(),
  user: z.lazy(() => UsersAndGroups$outboundSchema).optional(),
  firewall: z.lazy(() => Firewall$outboundSchema).optional(),
  services: z.lazy(() => Services$outboundSchema).optional(),
  ports: z.lazy(() => ListeningPorts$outboundSchema).optional(),
  loginUsers: z.lazy(() => LoggedInUsers$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Collectors$ {
  /** @deprecated use `Collectors$inboundSchema` instead. */
  export const inboundSchema = Collectors$inboundSchema;
  /** @deprecated use `Collectors$outboundSchema` instead. */
  export const outboundSchema = Collectors$outboundSchema;
  /** @deprecated use `Collectors$Outbound` instead. */
  export type Outbound = Collectors$Outbound;
}

export function collectorsToJSON(collectors: Collectors): string {
  return JSON.stringify(Collectors$outboundSchema.parse(collectors));
}

export function collectorsFromJSON(
  jsonString: string,
): SafeParseResult<Collectors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Collectors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Collectors' from JSON`,
  );
}

/** @internal */
export const InputSystemStateDataCompressionFormat$inboundSchema: z.ZodType<
  InputSystemStateDataCompressionFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSystemStateDataCompressionFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSystemStateDataCompressionFormat$outboundSchema: z.ZodType<
  InputSystemStateDataCompressionFormat,
  z.ZodTypeDef,
  InputSystemStateDataCompressionFormat
> = z.union([
  z.nativeEnum(InputSystemStateDataCompressionFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStateDataCompressionFormat$ {
  /** @deprecated use `InputSystemStateDataCompressionFormat$inboundSchema` instead. */
  export const inboundSchema =
    InputSystemStateDataCompressionFormat$inboundSchema;
  /** @deprecated use `InputSystemStateDataCompressionFormat$outboundSchema` instead. */
  export const outboundSchema =
    InputSystemStateDataCompressionFormat$outboundSchema;
}

/** @internal */
export const InputSystemStatePersistence$inboundSchema: z.ZodType<
  InputSystemStatePersistence,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputSystemStateDataCompressionFormat$inboundSchema.default("none"),
  destPath: z.string().default("$CRIBL_HOME/state/system_state"),
});

/** @internal */
export type InputSystemStatePersistence$Outbound = {
  enable: boolean;
  timeWindow: string;
  maxDataSize: string;
  maxDataTime: string;
  compress: string;
  destPath: string;
};

/** @internal */
export const InputSystemStatePersistence$outboundSchema: z.ZodType<
  InputSystemStatePersistence$Outbound,
  z.ZodTypeDef,
  InputSystemStatePersistence
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputSystemStateDataCompressionFormat$outboundSchema.default(
    "none",
  ),
  destPath: z.string().default("$CRIBL_HOME/state/system_state"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemStatePersistence$ {
  /** @deprecated use `InputSystemStatePersistence$inboundSchema` instead. */
  export const inboundSchema = InputSystemStatePersistence$inboundSchema;
  /** @deprecated use `InputSystemStatePersistence$outboundSchema` instead. */
  export const outboundSchema = InputSystemStatePersistence$outboundSchema;
  /** @deprecated use `InputSystemStatePersistence$Outbound` instead. */
  export type Outbound = InputSystemStatePersistence$Outbound;
}

export function inputSystemStatePersistenceToJSON(
  inputSystemStatePersistence: InputSystemStatePersistence,
): string {
  return JSON.stringify(
    InputSystemStatePersistence$outboundSchema.parse(
      inputSystemStatePersistence,
    ),
  );
}

export function inputSystemStatePersistenceFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemStatePersistence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemStatePersistence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemStatePersistence' from JSON`,
  );
}

/** @internal */
export const InputSystemState$inboundSchema: z.ZodType<
  InputSystemState,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputSystemStateType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSystemStateConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputSystemStatePq$inboundSchema).optional(),
  interval: z.number().default(300),
  metadata: z.array(z.lazy(() => InputSystemStateMetadatum$inboundSchema))
    .optional(),
  collectors: z.lazy(() => Collectors$inboundSchema).optional(),
  persistence: z.lazy(() => InputSystemStatePersistence$inboundSchema)
    .optional(),
  disableNativeModule: z.boolean().default(false),
  description: z.string().optional(),
});

/** @internal */
export type InputSystemState$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputSystemStateConnection$Outbound> | undefined;
  pq?: InputSystemStatePq$Outbound | undefined;
  interval: number;
  metadata?: Array<InputSystemStateMetadatum$Outbound> | undefined;
  collectors?: Collectors$Outbound | undefined;
  persistence?: InputSystemStatePersistence$Outbound | undefined;
  disableNativeModule: boolean;
  description?: string | undefined;
};

/** @internal */
export const InputSystemState$outboundSchema: z.ZodType<
  InputSystemState$Outbound,
  z.ZodTypeDef,
  InputSystemState
> = z.object({
  id: z.string().optional(),
  type: InputSystemStateType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSystemStateConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputSystemStatePq$outboundSchema).optional(),
  interval: z.number().default(300),
  metadata: z.array(z.lazy(() => InputSystemStateMetadatum$outboundSchema))
    .optional(),
  collectors: z.lazy(() => Collectors$outboundSchema).optional(),
  persistence: z.lazy(() => InputSystemStatePersistence$outboundSchema)
    .optional(),
  disableNativeModule: z.boolean().default(false),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSystemState$ {
  /** @deprecated use `InputSystemState$inboundSchema` instead. */
  export const inboundSchema = InputSystemState$inboundSchema;
  /** @deprecated use `InputSystemState$outboundSchema` instead. */
  export const outboundSchema = InputSystemState$outboundSchema;
  /** @deprecated use `InputSystemState$Outbound` instead. */
  export type Outbound = InputSystemState$Outbound;
}

export function inputSystemStateToJSON(
  inputSystemState: InputSystemState,
): string {
  return JSON.stringify(
    InputSystemState$outboundSchema.parse(inputSystemState),
  );
}

export function inputSystemStateFromJSON(
  jsonString: string,
): SafeParseResult<InputSystemState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSystemState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSystemState' from JSON`,
  );
}
