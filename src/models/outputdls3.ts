/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputDlS3Type = {
  DlS3: "dl_s3",
} as const;
export type OutputDlS3Type = ClosedEnum<typeof OutputDlS3Type>;

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const OutputDlS3AuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type OutputDlS3AuthenticationMethod = ClosedEnum<
  typeof OutputDlS3AuthenticationMethod
>;

/**
 * Signature version to use for signing S3 requests
 */
export const OutputDlS3SignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing S3 requests
 */
export type OutputDlS3SignatureVersion = ClosedEnum<
  typeof OutputDlS3SignatureVersion
>;

/**
 * Object ACL to assign to uploaded objects
 */
export const OutputDlS3ObjectACL = {
  Private: "private",
  PublicRead: "public-read",
  PublicReadWrite: "public-read-write",
  AuthenticatedRead: "authenticated-read",
  AwsExecRead: "aws-exec-read",
  BucketOwnerRead: "bucket-owner-read",
  BucketOwnerFullControl: "bucket-owner-full-control",
} as const;
/**
 * Object ACL to assign to uploaded objects
 */
export type OutputDlS3ObjectACL = ClosedEnum<typeof OutputDlS3ObjectACL>;

/**
 * Storage class to select for uploaded objects
 */
export const OutputDlS3StorageClass = {
  Standard: "STANDARD",
  ReducedRedundancy: "REDUCED_REDUNDANCY",
  StandardIa: "STANDARD_IA",
  OnezoneIa: "ONEZONE_IA",
  IntelligentTiering: "INTELLIGENT_TIERING",
  Glacier: "GLACIER",
  GlacierIr: "GLACIER_IR",
  DeepArchive: "DEEP_ARCHIVE",
} as const;
/**
 * Storage class to select for uploaded objects
 */
export type OutputDlS3StorageClass = ClosedEnum<typeof OutputDlS3StorageClass>;

export const OutputDlS3ServerSideEncryptionForUploadedObjects = {
  Aes256: "AES256",
  AwsKms: "aws:kms",
} as const;
export type OutputDlS3ServerSideEncryptionForUploadedObjects = ClosedEnum<
  typeof OutputDlS3ServerSideEncryptionForUploadedObjects
>;

/**
 * Format of the output data
 */
export const OutputDlS3DataFormat = {
  Json: "json",
  Raw: "raw",
  Parquet: "parquet",
} as const;
/**
 * Format of the output data
 */
export type OutputDlS3DataFormat = ClosedEnum<typeof OutputDlS3DataFormat>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputDlS3BackpressureBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputDlS3BackpressureBehavior = ClosedEnum<
  typeof OutputDlS3BackpressureBehavior
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputDlS3DiskSpaceProtection = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputDlS3DiskSpaceProtection = ClosedEnum<
  typeof OutputDlS3DiskSpaceProtection
>;

/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export const OutputDlS3Compression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export type OutputDlS3Compression = ClosedEnum<typeof OutputDlS3Compression>;

/**
 * Compression level to apply before moving files to final destination
 */
export const OutputDlS3CompressionLevel = {
  BestSpeed: "best_speed",
  Normal: "normal",
  BestCompression: "best_compression",
} as const;
/**
 * Compression level to apply before moving files to final destination
 */
export type OutputDlS3CompressionLevel = ClosedEnum<
  typeof OutputDlS3CompressionLevel
>;

/**
 * Determines which data types are supported and how they are represented
 */
export const OutputDlS3ParquetVersion = {
  Parquet10: "PARQUET_1_0",
  Parquet24: "PARQUET_2_4",
  Parquet26: "PARQUET_2_6",
} as const;
/**
 * Determines which data types are supported and how they are represented
 */
export type OutputDlS3ParquetVersion = ClosedEnum<
  typeof OutputDlS3ParquetVersion
>;

/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export const OutputDlS3DataPageVersion = {
  DataPageV1: "DATA_PAGE_V1",
  DataPageV2: "DATA_PAGE_V2",
} as const;
/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export type OutputDlS3DataPageVersion = ClosedEnum<
  typeof OutputDlS3DataPageVersion
>;

export type OutputDlS3KeyValueMetadatum = {
  key?: string | undefined;
  value: string;
};

export type OutputDlS3 = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type?: OutputDlS3Type | undefined;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Name of the destination S3 bucket. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at initialization time. Example referencing a Global Variable: `myBucket-${C.vars.myVar}`
   */
  bucket: string;
  /**
   * Region where the S3 bucket is located
   */
  region?: string | undefined;
  /**
   * Secret key. This value can be a constant or a JavaScript expression. Example: `${C.env.SOME_SECRET}`)
   */
  awsSecretKey?: string | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: OutputDlS3AuthenticationMethod | undefined;
  /**
   * S3 service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to S3-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing S3 requests
   */
  signatureVersion?: OutputDlS3SignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access S3
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Filesystem location in which to buffer files, before compressing and moving to final destination. Use performant and stable storage.
   */
  stagePath?: string | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Prefix to prepend to files before uploading. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `myKeyPrefix-${C.vars.myVar}`
   */
  destPath?: string | undefined;
  /**
   * Object ACL to assign to uploaded objects
   */
  objectACL?: OutputDlS3ObjectACL | undefined;
  /**
   * Storage class to select for uploaded objects
   */
  storageClass?: OutputDlS3StorageClass | undefined;
  serverSideEncryption?:
    | OutputDlS3ServerSideEncryptionForUploadedObjects
    | undefined;
  /**
   * ID or ARN of the KMS customer-managed key to use for encryption
   */
  kmsKeyId?: string | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * Format of the output data
   */
  format?: OutputDlS3DataFormat | undefined;
  /**
   * JavaScript expression to define the output filename prefix (can be constant)
   */
  baseFileName?: string | undefined;
  /**
   * JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`).
   */
  fileNameSuffix?: string | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * If set, this line will be written to the beginning of each output file
   */
  headerLine?: string | undefined;
  /**
   * Buffer size used to write to a file
   */
  writeHighWaterMark?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputDlS3BackpressureBehavior | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?: OutputDlS3DiskSpaceProtection | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of parts to upload in parallel per file. Minimum part size is 5MB.
   */
  maxConcurrentFileParts?: number | undefined;
  /**
   * Disable if you can access files within the bucket but not the bucket itself
   */
  verifyPermissions?: boolean | undefined;
  /**
   * Maximum number of files that can be waiting for upload before backpressure is applied
   */
  maxClosingFilesToBackpressure?: number | undefined;
  /**
   * List of fields to partition the path by, in addition to time, which is included automatically. The effective partition will be YYYY/MM/DD/HH/<list/of/fields>.
   */
  partitioningFields?: Array<string> | undefined;
  description?: string | undefined;
  /**
   * This value can be a constant or a JavaScript expression (`${C.env.SOME_ACCESS_KEY}`)
   */
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  /**
   * Data compression format to apply to HTTP content before it is delivered
   */
  compress?: OutputDlS3Compression | undefined;
  /**
   * Compression level to apply before moving files to final destination
   */
  compressionLevel?: OutputDlS3CompressionLevel | undefined;
  /**
   * Automatically calculate the schema based on the events of each Parquet file generated
   */
  automaticSchema?: boolean | undefined;
  /**
   * Determines which data types are supported and how they are represented
   */
  parquetVersion?: OutputDlS3ParquetVersion | undefined;
  /**
   * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
   */
  parquetDataPageVersion?: OutputDlS3DataPageVersion | undefined;
  /**
   * The number of rows that every group will contain. The final group can contain a smaller number of rows.
   */
  parquetRowGroupLength?: number | undefined;
  /**
   * Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression.
   */
  parquetPageSize?: string | undefined;
  /**
   * Log up to 3 rows that @{product} skips due to data mismatch
   */
  shouldLogInvalidRows?: boolean | undefined;
  /**
   * The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: "key":"OCSF Event Class", "value":"9001"
   */
  keyValueMetadata?: Array<OutputDlS3KeyValueMetadatum> | undefined;
  /**
   * Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics.
   */
  enableStatistics?: boolean | undefined;
  /**
   * One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping.
   */
  enableWritePageIndex?: boolean | undefined;
  /**
   * Parquet tools can use the checksum of a Parquet page to verify data integrity
   */
  enablePageChecksum?: boolean | undefined;
  /**
   * How frequently, in seconds, to clean up empty directories
   */
  emptyDirCleanupSec?: number | undefined;
  /**
   * Storage location for files that fail to reach their final destination after maximum retries are exceeded
   */
  deadletterPath?: string | undefined;
  /**
   * The maximum number of times a file will attempt to move to its final destination before being dead-lettered
   */
  maxRetryNum?: number | undefined;
};

/** @internal */
export const OutputDlS3Type$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3Type
> = z.nativeEnum(OutputDlS3Type);

/** @internal */
export const OutputDlS3Type$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3Type
> = OutputDlS3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3Type$ {
  /** @deprecated use `OutputDlS3Type$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3Type$inboundSchema;
  /** @deprecated use `OutputDlS3Type$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3Type$outboundSchema;
}

/** @internal */
export const OutputDlS3AuthenticationMethod$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3AuthenticationMethod
> = z.nativeEnum(OutputDlS3AuthenticationMethod);

/** @internal */
export const OutputDlS3AuthenticationMethod$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3AuthenticationMethod
> = OutputDlS3AuthenticationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3AuthenticationMethod$ {
  /** @deprecated use `OutputDlS3AuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3AuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputDlS3AuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3AuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputDlS3SignatureVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3SignatureVersion
> = z.nativeEnum(OutputDlS3SignatureVersion);

/** @internal */
export const OutputDlS3SignatureVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3SignatureVersion
> = OutputDlS3SignatureVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3SignatureVersion$ {
  /** @deprecated use `OutputDlS3SignatureVersion$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3SignatureVersion$inboundSchema;
  /** @deprecated use `OutputDlS3SignatureVersion$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3SignatureVersion$outboundSchema;
}

/** @internal */
export const OutputDlS3ObjectACL$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3ObjectACL
> = z.nativeEnum(OutputDlS3ObjectACL);

/** @internal */
export const OutputDlS3ObjectACL$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3ObjectACL
> = OutputDlS3ObjectACL$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3ObjectACL$ {
  /** @deprecated use `OutputDlS3ObjectACL$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3ObjectACL$inboundSchema;
  /** @deprecated use `OutputDlS3ObjectACL$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3ObjectACL$outboundSchema;
}

/** @internal */
export const OutputDlS3StorageClass$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3StorageClass
> = z.nativeEnum(OutputDlS3StorageClass);

/** @internal */
export const OutputDlS3StorageClass$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3StorageClass
> = OutputDlS3StorageClass$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3StorageClass$ {
  /** @deprecated use `OutputDlS3StorageClass$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3StorageClass$inboundSchema;
  /** @deprecated use `OutputDlS3StorageClass$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3StorageClass$outboundSchema;
}

/** @internal */
export const OutputDlS3ServerSideEncryptionForUploadedObjects$inboundSchema:
  z.ZodNativeEnum<typeof OutputDlS3ServerSideEncryptionForUploadedObjects> = z
    .nativeEnum(OutputDlS3ServerSideEncryptionForUploadedObjects);

/** @internal */
export const OutputDlS3ServerSideEncryptionForUploadedObjects$outboundSchema:
  z.ZodNativeEnum<typeof OutputDlS3ServerSideEncryptionForUploadedObjects> =
    OutputDlS3ServerSideEncryptionForUploadedObjects$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3ServerSideEncryptionForUploadedObjects$ {
  /** @deprecated use `OutputDlS3ServerSideEncryptionForUploadedObjects$inboundSchema` instead. */
  export const inboundSchema =
    OutputDlS3ServerSideEncryptionForUploadedObjects$inboundSchema;
  /** @deprecated use `OutputDlS3ServerSideEncryptionForUploadedObjects$outboundSchema` instead. */
  export const outboundSchema =
    OutputDlS3ServerSideEncryptionForUploadedObjects$outboundSchema;
}

/** @internal */
export const OutputDlS3DataFormat$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3DataFormat
> = z.nativeEnum(OutputDlS3DataFormat);

/** @internal */
export const OutputDlS3DataFormat$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3DataFormat
> = OutputDlS3DataFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3DataFormat$ {
  /** @deprecated use `OutputDlS3DataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3DataFormat$inboundSchema;
  /** @deprecated use `OutputDlS3DataFormat$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3DataFormat$outboundSchema;
}

/** @internal */
export const OutputDlS3BackpressureBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3BackpressureBehavior
> = z.nativeEnum(OutputDlS3BackpressureBehavior);

/** @internal */
export const OutputDlS3BackpressureBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3BackpressureBehavior
> = OutputDlS3BackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3BackpressureBehavior$ {
  /** @deprecated use `OutputDlS3BackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3BackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputDlS3BackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3BackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputDlS3DiskSpaceProtection$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3DiskSpaceProtection
> = z.nativeEnum(OutputDlS3DiskSpaceProtection);

/** @internal */
export const OutputDlS3DiskSpaceProtection$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3DiskSpaceProtection
> = OutputDlS3DiskSpaceProtection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3DiskSpaceProtection$ {
  /** @deprecated use `OutputDlS3DiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3DiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputDlS3DiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3DiskSpaceProtection$outboundSchema;
}

/** @internal */
export const OutputDlS3Compression$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3Compression
> = z.nativeEnum(OutputDlS3Compression);

/** @internal */
export const OutputDlS3Compression$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3Compression
> = OutputDlS3Compression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3Compression$ {
  /** @deprecated use `OutputDlS3Compression$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3Compression$inboundSchema;
  /** @deprecated use `OutputDlS3Compression$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3Compression$outboundSchema;
}

/** @internal */
export const OutputDlS3CompressionLevel$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3CompressionLevel
> = z.nativeEnum(OutputDlS3CompressionLevel);

/** @internal */
export const OutputDlS3CompressionLevel$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3CompressionLevel
> = OutputDlS3CompressionLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3CompressionLevel$ {
  /** @deprecated use `OutputDlS3CompressionLevel$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3CompressionLevel$inboundSchema;
  /** @deprecated use `OutputDlS3CompressionLevel$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3CompressionLevel$outboundSchema;
}

/** @internal */
export const OutputDlS3ParquetVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3ParquetVersion
> = z.nativeEnum(OutputDlS3ParquetVersion);

/** @internal */
export const OutputDlS3ParquetVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3ParquetVersion
> = OutputDlS3ParquetVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3ParquetVersion$ {
  /** @deprecated use `OutputDlS3ParquetVersion$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3ParquetVersion$inboundSchema;
  /** @deprecated use `OutputDlS3ParquetVersion$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3ParquetVersion$outboundSchema;
}

/** @internal */
export const OutputDlS3DataPageVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3DataPageVersion
> = z.nativeEnum(OutputDlS3DataPageVersion);

/** @internal */
export const OutputDlS3DataPageVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputDlS3DataPageVersion
> = OutputDlS3DataPageVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3DataPageVersion$ {
  /** @deprecated use `OutputDlS3DataPageVersion$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3DataPageVersion$inboundSchema;
  /** @deprecated use `OutputDlS3DataPageVersion$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3DataPageVersion$outboundSchema;
}

/** @internal */
export const OutputDlS3KeyValueMetadatum$inboundSchema: z.ZodType<
  OutputDlS3KeyValueMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputDlS3KeyValueMetadatum$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const OutputDlS3KeyValueMetadatum$outboundSchema: z.ZodType<
  OutputDlS3KeyValueMetadatum$Outbound,
  z.ZodTypeDef,
  OutputDlS3KeyValueMetadatum
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3KeyValueMetadatum$ {
  /** @deprecated use `OutputDlS3KeyValueMetadatum$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3KeyValueMetadatum$inboundSchema;
  /** @deprecated use `OutputDlS3KeyValueMetadatum$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3KeyValueMetadatum$outboundSchema;
  /** @deprecated use `OutputDlS3KeyValueMetadatum$Outbound` instead. */
  export type Outbound = OutputDlS3KeyValueMetadatum$Outbound;
}

export function outputDlS3KeyValueMetadatumToJSON(
  outputDlS3KeyValueMetadatum: OutputDlS3KeyValueMetadatum,
): string {
  return JSON.stringify(
    OutputDlS3KeyValueMetadatum$outboundSchema.parse(
      outputDlS3KeyValueMetadatum,
    ),
  );
}

export function outputDlS3KeyValueMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<OutputDlS3KeyValueMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputDlS3KeyValueMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputDlS3KeyValueMetadatum' from JSON`,
  );
}

/** @internal */
export const OutputDlS3$inboundSchema: z.ZodType<
  OutputDlS3,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputDlS3Type$inboundSchema.optional(),
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string().optional(),
  awsSecretKey: z.string().optional(),
  awsAuthenticationMethod: OutputDlS3AuthenticationMethod$inboundSchema.default(
    "auto",
  ),
  endpoint: z.string().optional(),
  signatureVersion: OutputDlS3SignatureVersion$inboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  destPath: z.string().default(""),
  objectACL: OutputDlS3ObjectACL$inboundSchema.default("private"),
  storageClass: OutputDlS3StorageClass$inboundSchema.optional(),
  serverSideEncryption:
    OutputDlS3ServerSideEncryptionForUploadedObjects$inboundSchema.optional(),
  kmsKeyId: z.string().optional(),
  removeEmptyDirs: z.boolean().default(true),
  format: OutputDlS3DataFormat$inboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputDlS3BackpressureBehavior$inboundSchema.default("block"),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputDlS3DiskSpaceProtection$inboundSchema.default(
    "block",
  ),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxConcurrentFileParts: z.number().default(4),
  verifyPermissions: z.boolean().default(true),
  maxClosingFilesToBackpressure: z.number().default(100),
  partitioningFields: z.array(z.string()).optional(),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  compress: OutputDlS3Compression$inboundSchema.default("gzip"),
  compressionLevel: OutputDlS3CompressionLevel$inboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputDlS3ParquetVersion$inboundSchema.default("PARQUET_2_6"),
  parquetDataPageVersion: OutputDlS3DataPageVersion$inboundSchema.default(
    "DATA_PAGE_V2",
  ),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputDlS3KeyValueMetadatum$inboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/** @internal */
export type OutputDlS3$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  bucket: string;
  region?: string | undefined;
  awsSecretKey?: string | undefined;
  awsAuthenticationMethod: string;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  stagePath: string;
  addIdToStagePath: boolean;
  destPath: string;
  objectACL: string;
  storageClass?: string | undefined;
  serverSideEncryption?: string | undefined;
  kmsKeyId?: string | undefined;
  removeEmptyDirs: boolean;
  format: string;
  baseFileName: string;
  fileNameSuffix: string;
  maxFileSizeMB: number;
  maxOpenFiles: number;
  headerLine: string;
  writeHighWaterMark: number;
  onBackpressure: string;
  deadletterEnabled: boolean;
  onDiskFullBackpressure: string;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxConcurrentFileParts: number;
  verifyPermissions: boolean;
  maxClosingFilesToBackpressure: number;
  partitioningFields?: Array<string> | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  compress: string;
  compressionLevel: string;
  automaticSchema: boolean;
  parquetVersion: string;
  parquetDataPageVersion: string;
  parquetRowGroupLength: number;
  parquetPageSize: string;
  shouldLogInvalidRows?: boolean | undefined;
  keyValueMetadata?: Array<OutputDlS3KeyValueMetadatum$Outbound> | undefined;
  enableStatistics: boolean;
  enableWritePageIndex: boolean;
  enablePageChecksum: boolean;
  emptyDirCleanupSec: number;
  deadletterPath: string;
  maxRetryNum: number;
};

/** @internal */
export const OutputDlS3$outboundSchema: z.ZodType<
  OutputDlS3$Outbound,
  z.ZodTypeDef,
  OutputDlS3
> = z.object({
  id: z.string().optional(),
  type: OutputDlS3Type$outboundSchema.optional(),
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string().optional(),
  awsSecretKey: z.string().optional(),
  awsAuthenticationMethod: OutputDlS3AuthenticationMethod$outboundSchema
    .default("auto"),
  endpoint: z.string().optional(),
  signatureVersion: OutputDlS3SignatureVersion$outboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  destPath: z.string().default(""),
  objectACL: OutputDlS3ObjectACL$outboundSchema.default("private"),
  storageClass: OutputDlS3StorageClass$outboundSchema.optional(),
  serverSideEncryption:
    OutputDlS3ServerSideEncryptionForUploadedObjects$outboundSchema.optional(),
  kmsKeyId: z.string().optional(),
  removeEmptyDirs: z.boolean().default(true),
  format: OutputDlS3DataFormat$outboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputDlS3BackpressureBehavior$outboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputDlS3DiskSpaceProtection$outboundSchema.default(
    "block",
  ),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxConcurrentFileParts: z.number().default(4),
  verifyPermissions: z.boolean().default(true),
  maxClosingFilesToBackpressure: z.number().default(100),
  partitioningFields: z.array(z.string()).optional(),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  compress: OutputDlS3Compression$outboundSchema.default("gzip"),
  compressionLevel: OutputDlS3CompressionLevel$outboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputDlS3ParquetVersion$outboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputDlS3DataPageVersion$outboundSchema.default(
    "DATA_PAGE_V2",
  ),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputDlS3KeyValueMetadatum$outboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDlS3$ {
  /** @deprecated use `OutputDlS3$inboundSchema` instead. */
  export const inboundSchema = OutputDlS3$inboundSchema;
  /** @deprecated use `OutputDlS3$outboundSchema` instead. */
  export const outboundSchema = OutputDlS3$outboundSchema;
  /** @deprecated use `OutputDlS3$Outbound` instead. */
  export type Outbound = OutputDlS3$Outbound;
}

export function outputDlS3ToJSON(outputDlS3: OutputDlS3): string {
  return JSON.stringify(OutputDlS3$outboundSchema.parse(outputDlS3));
}

export function outputDlS3FromJSON(
  jsonString: string,
): SafeParseResult<OutputDlS3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputDlS3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputDlS3' from JSON`,
  );
}
