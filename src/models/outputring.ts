/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputRingType = {
  Ring: "ring",
} as const;
export type OutputRingType = ClosedEnum<typeof OutputRingType>;

/**
 * Format of the output data.
 */
export const OutputRingDataFormat = {
  Json: "json",
  Raw: "raw",
} as const;
/**
 * Format of the output data.
 */
export type OutputRingDataFormat = OpenEnum<typeof OutputRingDataFormat>;

export const OutputRingDataCompressionFormat = {
  None: "none",
  Gzip: "gzip",
} as const;
export type OutputRingDataCompressionFormat = OpenEnum<
  typeof OutputRingDataCompressionFormat
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputRingBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputRingBackpressureBehavior = OpenEnum<
  typeof OutputRingBackpressureBehavior
>;

export type OutputRing = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputRingType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Format of the output data.
   */
  format?: OutputRingDataFormat | undefined;
  /**
   * JS expression to define how files are partitioned and organized. If left blank, Cribl Stream will fallback on event.__partition.
   */
  partitionExpr?: string | undefined;
  /**
   * Maximum disk space allowed to be consumed (examples: 420MB, 4GB). When limit is reached, older data will be deleted.
   */
  maxDataSize?: string | undefined;
  /**
   * Maximum amount of time to retain data (examples: 2h, 4d). When limit is reached, older data will be deleted.
   */
  maxDataTime?: string | undefined;
  compress?: OutputRingDataCompressionFormat | undefined;
  /**
   * Path to use to write metrics. Defaults to $CRIBL_HOME/state/<id>
   */
  destPath?: string | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputRingBackpressureBehavior | undefined;
  description?: string | undefined;
};

/** @internal */
export const OutputRingType$inboundSchema: z.ZodNativeEnum<
  typeof OutputRingType
> = z.nativeEnum(OutputRingType);

/** @internal */
export const OutputRingType$outboundSchema: z.ZodNativeEnum<
  typeof OutputRingType
> = OutputRingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputRingType$ {
  /** @deprecated use `OutputRingType$inboundSchema` instead. */
  export const inboundSchema = OutputRingType$inboundSchema;
  /** @deprecated use `OutputRingType$outboundSchema` instead. */
  export const outboundSchema = OutputRingType$outboundSchema;
}

/** @internal */
export const OutputRingDataFormat$inboundSchema: z.ZodType<
  OutputRingDataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputRingDataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputRingDataFormat$outboundSchema: z.ZodType<
  OutputRingDataFormat,
  z.ZodTypeDef,
  OutputRingDataFormat
> = z.union([
  z.nativeEnum(OutputRingDataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputRingDataFormat$ {
  /** @deprecated use `OutputRingDataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputRingDataFormat$inboundSchema;
  /** @deprecated use `OutputRingDataFormat$outboundSchema` instead. */
  export const outboundSchema = OutputRingDataFormat$outboundSchema;
}

/** @internal */
export const OutputRingDataCompressionFormat$inboundSchema: z.ZodType<
  OutputRingDataCompressionFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputRingDataCompressionFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputRingDataCompressionFormat$outboundSchema: z.ZodType<
  OutputRingDataCompressionFormat,
  z.ZodTypeDef,
  OutputRingDataCompressionFormat
> = z.union([
  z.nativeEnum(OutputRingDataCompressionFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputRingDataCompressionFormat$ {
  /** @deprecated use `OutputRingDataCompressionFormat$inboundSchema` instead. */
  export const inboundSchema = OutputRingDataCompressionFormat$inboundSchema;
  /** @deprecated use `OutputRingDataCompressionFormat$outboundSchema` instead. */
  export const outboundSchema = OutputRingDataCompressionFormat$outboundSchema;
}

/** @internal */
export const OutputRingBackpressureBehavior$inboundSchema: z.ZodType<
  OutputRingBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputRingBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputRingBackpressureBehavior$outboundSchema: z.ZodType<
  OutputRingBackpressureBehavior,
  z.ZodTypeDef,
  OutputRingBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputRingBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputRingBackpressureBehavior$ {
  /** @deprecated use `OutputRingBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputRingBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputRingBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputRingBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputRing$inboundSchema: z.ZodType<
  OutputRing,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputRingType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  format: OutputRingDataFormat$inboundSchema.default("json"),
  partitionExpr: z.string().optional(),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: OutputRingDataCompressionFormat$inboundSchema.default("gzip"),
  destPath: z.string().optional(),
  onBackpressure: OutputRingBackpressureBehavior$inboundSchema.default("block"),
  description: z.string().optional(),
});

/** @internal */
export type OutputRing$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  format: string;
  partitionExpr?: string | undefined;
  maxDataSize: string;
  maxDataTime: string;
  compress: string;
  destPath?: string | undefined;
  onBackpressure: string;
  description?: string | undefined;
};

/** @internal */
export const OutputRing$outboundSchema: z.ZodType<
  OutputRing$Outbound,
  z.ZodTypeDef,
  OutputRing
> = z.object({
  id: z.string().optional(),
  type: OutputRingType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  format: OutputRingDataFormat$outboundSchema.default("json"),
  partitionExpr: z.string().optional(),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: OutputRingDataCompressionFormat$outboundSchema.default("gzip"),
  destPath: z.string().optional(),
  onBackpressure: OutputRingBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputRing$ {
  /** @deprecated use `OutputRing$inboundSchema` instead. */
  export const inboundSchema = OutputRing$inboundSchema;
  /** @deprecated use `OutputRing$outboundSchema` instead. */
  export const outboundSchema = OutputRing$outboundSchema;
  /** @deprecated use `OutputRing$Outbound` instead. */
  export type Outbound = OutputRing$Outbound;
}

export function outputRingToJSON(outputRing: OutputRing): string {
  return JSON.stringify(OutputRing$outboundSchema.parse(outputRing));
}

export function outputRingFromJSON(
  jsonString: string,
): SafeParseResult<OutputRing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputRing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputRing' from JSON`,
  );
}
