/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Role = {
  Primary: "primary",
  Standby: "standby",
} as const;
export type Role = OpenEnum<typeof Role>;

export const HealthStatusStatus = {
  Healthy: "healthy",
  ShuttingDown: "shutting down",
  Standby: "standby",
} as const;
export type HealthStatusStatus = OpenEnum<typeof HealthStatusStatus>;

export type HealthStatus = {
  role?: Role | undefined;
  status: HealthStatusStatus;
  startTime: number;
};

/** @internal */
export const Role$inboundSchema: z.ZodType<Role, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Role),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Role$outboundSchema: z.ZodType<Role, z.ZodTypeDef, Role> = z.union(
  [
    z.nativeEnum(Role),
    z.string().and(z.custom<Unrecognized<string>>()),
  ],
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const HealthStatusStatus$inboundSchema: z.ZodType<
  HealthStatusStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HealthStatusStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HealthStatusStatus$outboundSchema: z.ZodType<
  HealthStatusStatus,
  z.ZodTypeDef,
  HealthStatusStatus
> = z.union([
  z.nativeEnum(HealthStatusStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthStatusStatus$ {
  /** @deprecated use `HealthStatusStatus$inboundSchema` instead. */
  export const inboundSchema = HealthStatusStatus$inboundSchema;
  /** @deprecated use `HealthStatusStatus$outboundSchema` instead. */
  export const outboundSchema = HealthStatusStatus$outboundSchema;
}

/** @internal */
export const HealthStatus$inboundSchema: z.ZodType<
  HealthStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: Role$inboundSchema.optional(),
  status: HealthStatusStatus$inboundSchema,
  startTime: z.number(),
});

/** @internal */
export type HealthStatus$Outbound = {
  role?: string | undefined;
  status: string;
  startTime: number;
};

/** @internal */
export const HealthStatus$outboundSchema: z.ZodType<
  HealthStatus$Outbound,
  z.ZodTypeDef,
  HealthStatus
> = z.object({
  role: Role$outboundSchema.optional(),
  status: HealthStatusStatus$outboundSchema,
  startTime: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthStatus$ {
  /** @deprecated use `HealthStatus$inboundSchema` instead. */
  export const inboundSchema = HealthStatus$inboundSchema;
  /** @deprecated use `HealthStatus$outboundSchema` instead. */
  export const outboundSchema = HealthStatus$outboundSchema;
  /** @deprecated use `HealthStatus$Outbound` instead. */
  export type Outbound = HealthStatus$Outbound;
}

export function healthStatusToJSON(healthStatus: HealthStatus): string {
  return JSON.stringify(HealthStatus$outboundSchema.parse(healthStatus));
}

export function healthStatusFromJSON(
  jsonString: string,
): SafeParseResult<HealthStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HealthStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HealthStatus' from JSON`,
  );
}
