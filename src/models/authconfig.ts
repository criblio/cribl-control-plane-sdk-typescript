/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const AuthConfigType = {
  Ldap: "ldap",
  Splunk: "splunk",
  Local: "local",
  Saml: "saml",
  Openid: "openid",
  Saas: "saas",
} as const;
export type AuthConfigType = ClosedEnum<typeof AuthConfigType>;

export type AuthConfig = {
  fallback: boolean;
  fallbackBadLogin: boolean;
  filterType?: string | undefined;
  host: string;
  port: number;
  ssl: boolean;
  type: AuthConfigType;
};

/** @internal */
export const AuthConfigType$inboundSchema: z.ZodNativeEnum<
  typeof AuthConfigType
> = z.nativeEnum(AuthConfigType);

/** @internal */
export const AuthConfigType$outboundSchema: z.ZodNativeEnum<
  typeof AuthConfigType
> = AuthConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthConfigType$ {
  /** @deprecated use `AuthConfigType$inboundSchema` instead. */
  export const inboundSchema = AuthConfigType$inboundSchema;
  /** @deprecated use `AuthConfigType$outboundSchema` instead. */
  export const outboundSchema = AuthConfigType$outboundSchema;
}

/** @internal */
export const AuthConfig$inboundSchema: z.ZodType<
  AuthConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  fallback: z.boolean(),
  fallbackBadLogin: z.boolean(),
  filter_type: z.string().optional(),
  host: z.string(),
  port: z.number(),
  ssl: z.boolean(),
  type: AuthConfigType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "filter_type": "filterType",
  });
});

/** @internal */
export type AuthConfig$Outbound = {
  fallback: boolean;
  fallbackBadLogin: boolean;
  filter_type?: string | undefined;
  host: string;
  port: number;
  ssl: boolean;
  type: string;
};

/** @internal */
export const AuthConfig$outboundSchema: z.ZodType<
  AuthConfig$Outbound,
  z.ZodTypeDef,
  AuthConfig
> = z.object({
  fallback: z.boolean(),
  fallbackBadLogin: z.boolean(),
  filterType: z.string().optional(),
  host: z.string(),
  port: z.number(),
  ssl: z.boolean(),
  type: AuthConfigType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    filterType: "filter_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthConfig$ {
  /** @deprecated use `AuthConfig$inboundSchema` instead. */
  export const inboundSchema = AuthConfig$inboundSchema;
  /** @deprecated use `AuthConfig$outboundSchema` instead. */
  export const outboundSchema = AuthConfig$outboundSchema;
  /** @deprecated use `AuthConfig$Outbound` instead. */
  export type Outbound = AuthConfig$Outbound;
}

export function authConfigToJSON(authConfig: AuthConfig): string {
  return JSON.stringify(AuthConfig$outboundSchema.parse(authConfig));
}

export function authConfigFromJSON(
  jsonString: string,
): SafeParseResult<AuthConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthConfig' from JSON`,
  );
}
