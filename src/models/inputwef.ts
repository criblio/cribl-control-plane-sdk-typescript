/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputWefType = {
  Wef: "wef",
} as const;
export type InputWefType = ClosedEnum<typeof InputWefType>;

export type InputWefConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputWefMode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputWefMode = OpenEnum<typeof InputWefMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputWefCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputWefCompression = OpenEnum<typeof InputWefCompression>;

export type InputWefPqControls = {};

export type InputWefPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputWefMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputWefCompression | undefined;
  pqControls?: InputWefPqControls | undefined;
};

/**
 * How to authenticate incoming client connections
 */
export const InputWefAuthenticationMethod = {
  /**
   * Client certificate
   */
  ClientCert: "clientCert",
  /**
   * Kerberos
   */
  Kerberos: "kerberos",
} as const;
/**
 * How to authenticate incoming client connections
 */
export type InputWefAuthenticationMethod = OpenEnum<
  typeof InputWefAuthenticationMethod
>;

export const InputWefMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputWefMinimumTLSVersion = OpenEnum<
  typeof InputWefMinimumTLSVersion
>;

export const InputWefMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputWefMaximumTLSVersion = OpenEnum<
  typeof InputWefMaximumTLSVersion
>;

export type MTLSSettings = {
  /**
   * Enable TLS
   */
  disabled?: boolean | undefined;
  /**
   * Required for WEF certificate authentication
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Required for WEF certificate authentication
   */
  requestCert?: boolean | undefined;
  /**
   * Name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath: string;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath: string;
  /**
   * Server path containing CA certificates (in PEM format) to use. Can reference $ENV_VARS. If multiple certificates are present in a .pem, each must directly certify the one preceding it.
   */
  caPath: string;
  /**
   * Regex matching allowable common names in peer certificates' subject attribute
   */
  commonNameRegex?: string | undefined;
  minVersion?: InputWefMinimumTLSVersion | undefined;
  maxVersion?: InputWefMaximumTLSVersion | undefined;
  /**
   * Enable OCSP check of certificate
   */
  ocspCheck?: boolean | undefined;
  keytab?: any | undefined;
  principal?: any | undefined;
  /**
   * If enabled, checks will fail on any OCSP error. Otherwise, checks will fail only when a certificate is revoked, ignoring other errors.
   */
  ocspCheckFailClose?: boolean | undefined;
};

/**
 * Content format in which the endpoint should deliver events
 */
export const InputWefFormat = {
  Raw: "Raw",
  RenderedText: "RenderedText",
} as const;
/**
 * Content format in which the endpoint should deliver events
 */
export type InputWefFormat = OpenEnum<typeof InputWefFormat>;

export const QueryBuilderMode = {
  Simple: "simple",
  Xml: "xml",
} as const;
export type QueryBuilderMode = OpenEnum<typeof QueryBuilderMode>;

export type SubscriptionMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type Subscription = {
  subscriptionName: string;
  /**
   * Version UUID for this subscription. If any subscription parameters are modified, this value will change.
   */
  version?: string | undefined;
  /**
   * Content format in which the endpoint should deliver events
   */
  contentFormat?: InputWefFormat | undefined;
  /**
   * Maximum time (in seconds) between endpoint checkins before considering it unavailable
   */
  heartbeatInterval?: number | undefined;
  /**
   * Interval (in seconds) over which the endpoint should collect events before sending them to Stream
   */
  batchTimeout?: number | undefined;
  /**
   * Newly subscribed endpoints will send previously existing events. Disable to receive new events only.
   */
  readExistingEvents?: boolean | undefined;
  /**
   * Keep track of which events have been received, resuming from that point after a re-subscription. This setting takes precedence over 'Read existing events'. See [Cribl Docs](https://docs.cribl.io/stream/sources-wef/#subscriptions) for more details.
   */
  sendBookmarks?: boolean | undefined;
  /**
   * Receive compressed events from the source
   */
  compress?: boolean | undefined;
  /**
   * The DNS names of the endpoints that should forward these events. You may use wildcards, such as *.mydomain.com
   */
  targets: Array<string>;
  /**
   * The RFC-3066 locale the Windows clients should use when sending events. Defaults to "en-US".
   */
  locale?: string | undefined;
  querySelector?: QueryBuilderMode | undefined;
  /**
   * Fields to add to events ingested under this subscription
   */
  metadata?: Array<SubscriptionMetadatum> | undefined;
};

export type InputWefMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputWef = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputWefType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputWefConnection> | undefined;
  pq?: InputWefPq | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port?: number | undefined;
  /**
   * How to authenticate incoming client connections
   */
  authMethod?: InputWefAuthenticationMethod | undefined;
  tls?: MTLSSettings | undefined;
  /**
   * Maximum number of active requests allowed per Worker Process. Set to 0 for unlimited. Caution: Increasing the limit above the default value, or setting it to unlimited, may degrade performance and reduce throughput.
   */
  maxActiveReq?: number | undefined;
  /**
   * Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
   */
  maxRequestsPerSocket?: number | undefined;
  /**
   * Preserve the clientâ€™s original IP address in the __srcIpPort field when connecting through an HTTP proxy that supports the X-Forwarded-For header. This does not apply to TCP-layer Proxy Protocol v1/v2.
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Add request headers to events in the __headers field
   */
  captureHeaders?: boolean | undefined;
  /**
   * After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 second, maximum 600 seconds (10 minutes).
   */
  keepAliveTimeout?: number | undefined;
  /**
   * Expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
   */
  enableHealthCheck?: boolean | undefined;
  /**
   * Messages from matched IP addresses will be processed, unless also matched by the denylist
   */
  ipAllowlistRegex?: string | undefined;
  /**
   * Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
   */
  ipDenylistRegex?: string | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
   */
  socketTimeout?: number | undefined;
  /**
   * SHA1 fingerprint expected by the client, if it does not match the first certificate in the configured CA chain
   */
  caFingerprint?: string | undefined;
  /**
   * Path to the keytab file containing the service principal credentials. @{product} will use `/etc/krb5.keytab` if not provided.
   */
  keytab?: string | undefined;
  /**
   * Kerberos principal used for authentication, typically in the form HTTP/<hostname>@<REALM>
   */
  principal?: string | undefined;
  /**
   * Allow events to be ingested even if their MachineID does not match the client certificate CN
   */
  allowMachineIdMismatch?: boolean | undefined;
  /**
   * Subscriptions to events on forwarding endpoints
   */
  subscriptions: Array<Subscription>;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputWefMetadatum> | undefined;
  description?: string | undefined;
  /**
   * Log a warning if the client certificate authority (CA) fingerprint does not match the expected value. A mismatch prevents Cribl from receiving events from the Windows Event Forwarder.
   */
  logFingerprintMismatch?: boolean | undefined;
};

/** @internal */
export const InputWefType$inboundSchema: z.ZodNativeEnum<typeof InputWefType> =
  z.nativeEnum(InputWefType);

/** @internal */
export const InputWefType$outboundSchema: z.ZodNativeEnum<typeof InputWefType> =
  InputWefType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefType$ {
  /** @deprecated use `InputWefType$inboundSchema` instead. */
  export const inboundSchema = InputWefType$inboundSchema;
  /** @deprecated use `InputWefType$outboundSchema` instead. */
  export const outboundSchema = InputWefType$outboundSchema;
}

/** @internal */
export const InputWefConnection$inboundSchema: z.ZodType<
  InputWefConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputWefConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputWefConnection$outboundSchema: z.ZodType<
  InputWefConnection$Outbound,
  z.ZodTypeDef,
  InputWefConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefConnection$ {
  /** @deprecated use `InputWefConnection$inboundSchema` instead. */
  export const inboundSchema = InputWefConnection$inboundSchema;
  /** @deprecated use `InputWefConnection$outboundSchema` instead. */
  export const outboundSchema = InputWefConnection$outboundSchema;
  /** @deprecated use `InputWefConnection$Outbound` instead. */
  export type Outbound = InputWefConnection$Outbound;
}

export function inputWefConnectionToJSON(
  inputWefConnection: InputWefConnection,
): string {
  return JSON.stringify(
    InputWefConnection$outboundSchema.parse(inputWefConnection),
  );
}

export function inputWefConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputWefConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWefConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWefConnection' from JSON`,
  );
}

/** @internal */
export const InputWefMode$inboundSchema: z.ZodType<
  InputWefMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWefMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWefMode$outboundSchema: z.ZodType<
  InputWefMode,
  z.ZodTypeDef,
  InputWefMode
> = z.union([
  z.nativeEnum(InputWefMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefMode$ {
  /** @deprecated use `InputWefMode$inboundSchema` instead. */
  export const inboundSchema = InputWefMode$inboundSchema;
  /** @deprecated use `InputWefMode$outboundSchema` instead. */
  export const outboundSchema = InputWefMode$outboundSchema;
}

/** @internal */
export const InputWefCompression$inboundSchema: z.ZodType<
  InputWefCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWefCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWefCompression$outboundSchema: z.ZodType<
  InputWefCompression,
  z.ZodTypeDef,
  InputWefCompression
> = z.union([
  z.nativeEnum(InputWefCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefCompression$ {
  /** @deprecated use `InputWefCompression$inboundSchema` instead. */
  export const inboundSchema = InputWefCompression$inboundSchema;
  /** @deprecated use `InputWefCompression$outboundSchema` instead. */
  export const outboundSchema = InputWefCompression$outboundSchema;
}

/** @internal */
export const InputWefPqControls$inboundSchema: z.ZodType<
  InputWefPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputWefPqControls$Outbound = {};

/** @internal */
export const InputWefPqControls$outboundSchema: z.ZodType<
  InputWefPqControls$Outbound,
  z.ZodTypeDef,
  InputWefPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefPqControls$ {
  /** @deprecated use `InputWefPqControls$inboundSchema` instead. */
  export const inboundSchema = InputWefPqControls$inboundSchema;
  /** @deprecated use `InputWefPqControls$outboundSchema` instead. */
  export const outboundSchema = InputWefPqControls$outboundSchema;
  /** @deprecated use `InputWefPqControls$Outbound` instead. */
  export type Outbound = InputWefPqControls$Outbound;
}

export function inputWefPqControlsToJSON(
  inputWefPqControls: InputWefPqControls,
): string {
  return JSON.stringify(
    InputWefPqControls$outboundSchema.parse(inputWefPqControls),
  );
}

export function inputWefPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputWefPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWefPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWefPqControls' from JSON`,
  );
}

/** @internal */
export const InputWefPq$inboundSchema: z.ZodType<
  InputWefPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputWefMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputWefCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputWefPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputWefPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputWefPqControls$Outbound | undefined;
};

/** @internal */
export const InputWefPq$outboundSchema: z.ZodType<
  InputWefPq$Outbound,
  z.ZodTypeDef,
  InputWefPq
> = z.object({
  mode: InputWefMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputWefCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputWefPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefPq$ {
  /** @deprecated use `InputWefPq$inboundSchema` instead. */
  export const inboundSchema = InputWefPq$inboundSchema;
  /** @deprecated use `InputWefPq$outboundSchema` instead. */
  export const outboundSchema = InputWefPq$outboundSchema;
  /** @deprecated use `InputWefPq$Outbound` instead. */
  export type Outbound = InputWefPq$Outbound;
}

export function inputWefPqToJSON(inputWefPq: InputWefPq): string {
  return JSON.stringify(InputWefPq$outboundSchema.parse(inputWefPq));
}

export function inputWefPqFromJSON(
  jsonString: string,
): SafeParseResult<InputWefPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWefPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWefPq' from JSON`,
  );
}

/** @internal */
export const InputWefAuthenticationMethod$inboundSchema: z.ZodType<
  InputWefAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWefAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWefAuthenticationMethod$outboundSchema: z.ZodType<
  InputWefAuthenticationMethod,
  z.ZodTypeDef,
  InputWefAuthenticationMethod
> = z.union([
  z.nativeEnum(InputWefAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefAuthenticationMethod$ {
  /** @deprecated use `InputWefAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = InputWefAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputWefAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = InputWefAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputWefMinimumTLSVersion$inboundSchema: z.ZodType<
  InputWefMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWefMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWefMinimumTLSVersion$outboundSchema: z.ZodType<
  InputWefMinimumTLSVersion,
  z.ZodTypeDef,
  InputWefMinimumTLSVersion
> = z.union([
  z.nativeEnum(InputWefMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefMinimumTLSVersion$ {
  /** @deprecated use `InputWefMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputWefMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputWefMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputWefMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputWefMaximumTLSVersion$inboundSchema: z.ZodType<
  InputWefMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWefMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWefMaximumTLSVersion$outboundSchema: z.ZodType<
  InputWefMaximumTLSVersion,
  z.ZodTypeDef,
  InputWefMaximumTLSVersion
> = z.union([
  z.nativeEnum(InputWefMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefMaximumTLSVersion$ {
  /** @deprecated use `InputWefMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputWefMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputWefMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputWefMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const MTLSSettings$inboundSchema: z.ZodType<
  MTLSSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(false),
  rejectUnauthorized: z.boolean().default(true),
  requestCert: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string(),
  passphrase: z.string().optional(),
  certPath: z.string(),
  caPath: z.string(),
  commonNameRegex: z.string().default("/.*/"),
  minVersion: InputWefMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputWefMaximumTLSVersion$inboundSchema.optional(),
  ocspCheck: z.boolean().default(false),
  keytab: z.any().optional(),
  principal: z.any().optional(),
  ocspCheckFailClose: z.boolean().default(false),
});

/** @internal */
export type MTLSSettings$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  requestCert: boolean;
  certificateName?: string | undefined;
  privKeyPath: string;
  passphrase?: string | undefined;
  certPath: string;
  caPath: string;
  commonNameRegex: string;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
  ocspCheck: boolean;
  keytab?: any | undefined;
  principal?: any | undefined;
  ocspCheckFailClose: boolean;
};

/** @internal */
export const MTLSSettings$outboundSchema: z.ZodType<
  MTLSSettings$Outbound,
  z.ZodTypeDef,
  MTLSSettings
> = z.object({
  disabled: z.boolean().default(false),
  rejectUnauthorized: z.boolean().default(true),
  requestCert: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string(),
  passphrase: z.string().optional(),
  certPath: z.string(),
  caPath: z.string(),
  commonNameRegex: z.string().default("/.*/"),
  minVersion: InputWefMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputWefMaximumTLSVersion$outboundSchema.optional(),
  ocspCheck: z.boolean().default(false),
  keytab: z.any().optional(),
  principal: z.any().optional(),
  ocspCheckFailClose: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MTLSSettings$ {
  /** @deprecated use `MTLSSettings$inboundSchema` instead. */
  export const inboundSchema = MTLSSettings$inboundSchema;
  /** @deprecated use `MTLSSettings$outboundSchema` instead. */
  export const outboundSchema = MTLSSettings$outboundSchema;
  /** @deprecated use `MTLSSettings$Outbound` instead. */
  export type Outbound = MTLSSettings$Outbound;
}

export function mTLSSettingsToJSON(mtlsSettings: MTLSSettings): string {
  return JSON.stringify(MTLSSettings$outboundSchema.parse(mtlsSettings));
}

export function mTLSSettingsFromJSON(
  jsonString: string,
): SafeParseResult<MTLSSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MTLSSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MTLSSettings' from JSON`,
  );
}

/** @internal */
export const InputWefFormat$inboundSchema: z.ZodType<
  InputWefFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWefFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWefFormat$outboundSchema: z.ZodType<
  InputWefFormat,
  z.ZodTypeDef,
  InputWefFormat
> = z.union([
  z.nativeEnum(InputWefFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefFormat$ {
  /** @deprecated use `InputWefFormat$inboundSchema` instead. */
  export const inboundSchema = InputWefFormat$inboundSchema;
  /** @deprecated use `InputWefFormat$outboundSchema` instead. */
  export const outboundSchema = InputWefFormat$outboundSchema;
}

/** @internal */
export const QueryBuilderMode$inboundSchema: z.ZodType<
  QueryBuilderMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(QueryBuilderMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const QueryBuilderMode$outboundSchema: z.ZodType<
  QueryBuilderMode,
  z.ZodTypeDef,
  QueryBuilderMode
> = z.union([
  z.nativeEnum(QueryBuilderMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryBuilderMode$ {
  /** @deprecated use `QueryBuilderMode$inboundSchema` instead. */
  export const inboundSchema = QueryBuilderMode$inboundSchema;
  /** @deprecated use `QueryBuilderMode$outboundSchema` instead. */
  export const outboundSchema = QueryBuilderMode$outboundSchema;
}

/** @internal */
export const SubscriptionMetadatum$inboundSchema: z.ZodType<
  SubscriptionMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type SubscriptionMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const SubscriptionMetadatum$outboundSchema: z.ZodType<
  SubscriptionMetadatum$Outbound,
  z.ZodTypeDef,
  SubscriptionMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionMetadatum$ {
  /** @deprecated use `SubscriptionMetadatum$inboundSchema` instead. */
  export const inboundSchema = SubscriptionMetadatum$inboundSchema;
  /** @deprecated use `SubscriptionMetadatum$outboundSchema` instead. */
  export const outboundSchema = SubscriptionMetadatum$outboundSchema;
  /** @deprecated use `SubscriptionMetadatum$Outbound` instead. */
  export type Outbound = SubscriptionMetadatum$Outbound;
}

export function subscriptionMetadatumToJSON(
  subscriptionMetadatum: SubscriptionMetadatum,
): string {
  return JSON.stringify(
    SubscriptionMetadatum$outboundSchema.parse(subscriptionMetadatum),
  );
}

export function subscriptionMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionMetadatum' from JSON`,
  );
}

/** @internal */
export const Subscription$inboundSchema: z.ZodType<
  Subscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriptionName: z.string(),
  version: z.string().optional(),
  contentFormat: InputWefFormat$inboundSchema.default("Raw"),
  heartbeatInterval: z.number().default(60),
  batchTimeout: z.number().default(60),
  readExistingEvents: z.boolean().default(false),
  sendBookmarks: z.boolean().default(true),
  compress: z.boolean().default(true),
  targets: z.array(z.string()),
  locale: z.string().default("en-US"),
  querySelector: QueryBuilderMode$inboundSchema.default("simple"),
  metadata: z.array(z.lazy(() => SubscriptionMetadatum$inboundSchema))
    .optional(),
});

/** @internal */
export type Subscription$Outbound = {
  subscriptionName: string;
  version?: string | undefined;
  contentFormat: string;
  heartbeatInterval: number;
  batchTimeout: number;
  readExistingEvents: boolean;
  sendBookmarks: boolean;
  compress: boolean;
  targets: Array<string>;
  locale: string;
  querySelector: string;
  metadata?: Array<SubscriptionMetadatum$Outbound> | undefined;
};

/** @internal */
export const Subscription$outboundSchema: z.ZodType<
  Subscription$Outbound,
  z.ZodTypeDef,
  Subscription
> = z.object({
  subscriptionName: z.string(),
  version: z.string().optional(),
  contentFormat: InputWefFormat$outboundSchema.default("Raw"),
  heartbeatInterval: z.number().default(60),
  batchTimeout: z.number().default(60),
  readExistingEvents: z.boolean().default(false),
  sendBookmarks: z.boolean().default(true),
  compress: z.boolean().default(true),
  targets: z.array(z.string()),
  locale: z.string().default("en-US"),
  querySelector: QueryBuilderMode$outboundSchema.default("simple"),
  metadata: z.array(z.lazy(() => SubscriptionMetadatum$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Subscription$ {
  /** @deprecated use `Subscription$inboundSchema` instead. */
  export const inboundSchema = Subscription$inboundSchema;
  /** @deprecated use `Subscription$outboundSchema` instead. */
  export const outboundSchema = Subscription$outboundSchema;
  /** @deprecated use `Subscription$Outbound` instead. */
  export type Outbound = Subscription$Outbound;
}

export function subscriptionToJSON(subscription: Subscription): string {
  return JSON.stringify(Subscription$outboundSchema.parse(subscription));
}

export function subscriptionFromJSON(
  jsonString: string,
): SafeParseResult<Subscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Subscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Subscription' from JSON`,
  );
}

/** @internal */
export const InputWefMetadatum$inboundSchema: z.ZodType<
  InputWefMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputWefMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputWefMetadatum$outboundSchema: z.ZodType<
  InputWefMetadatum$Outbound,
  z.ZodTypeDef,
  InputWefMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWefMetadatum$ {
  /** @deprecated use `InputWefMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputWefMetadatum$inboundSchema;
  /** @deprecated use `InputWefMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputWefMetadatum$outboundSchema;
  /** @deprecated use `InputWefMetadatum$Outbound` instead. */
  export type Outbound = InputWefMetadatum$Outbound;
}

export function inputWefMetadatumToJSON(
  inputWefMetadatum: InputWefMetadatum,
): string {
  return JSON.stringify(
    InputWefMetadatum$outboundSchema.parse(inputWefMetadatum),
  );
}

export function inputWefMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputWefMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWefMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWefMetadatum' from JSON`,
  );
}

/** @internal */
export const InputWef$inboundSchema: z.ZodType<
  InputWef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputWefType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputWefConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputWefPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number().default(5986),
  authMethod: InputWefAuthenticationMethod$inboundSchema.default("clientCert"),
  tls: z.lazy(() => MTLSSettings$inboundSchema).optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  keepAliveTimeout: z.number().default(90),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  socketTimeout: z.number().default(0),
  caFingerprint: z.string().optional(),
  keytab: z.string().optional(),
  principal: z.string().optional(),
  allowMachineIdMismatch: z.boolean().default(false),
  subscriptions: z.array(z.lazy(() => Subscription$inboundSchema)),
  metadata: z.array(z.lazy(() => InputWefMetadatum$inboundSchema)).optional(),
  description: z.string().optional(),
  logFingerprintMismatch: z.boolean().default(false),
});

/** @internal */
export type InputWef$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputWefConnection$Outbound> | undefined;
  pq?: InputWefPq$Outbound | undefined;
  host: string;
  port: number;
  authMethod: string;
  tls?: MTLSSettings$Outbound | undefined;
  maxActiveReq: number;
  maxRequestsPerSocket: number;
  enableProxyHeader: boolean;
  captureHeaders: boolean;
  keepAliveTimeout: number;
  enableHealthCheck: boolean;
  ipAllowlistRegex: string;
  ipDenylistRegex: string;
  socketTimeout: number;
  caFingerprint?: string | undefined;
  keytab?: string | undefined;
  principal?: string | undefined;
  allowMachineIdMismatch: boolean;
  subscriptions: Array<Subscription$Outbound>;
  metadata?: Array<InputWefMetadatum$Outbound> | undefined;
  description?: string | undefined;
  logFingerprintMismatch: boolean;
};

/** @internal */
export const InputWef$outboundSchema: z.ZodType<
  InputWef$Outbound,
  z.ZodTypeDef,
  InputWef
> = z.object({
  id: z.string().optional(),
  type: InputWefType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputWefConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputWefPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number().default(5986),
  authMethod: InputWefAuthenticationMethod$outboundSchema.default("clientCert"),
  tls: z.lazy(() => MTLSSettings$outboundSchema).optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  keepAliveTimeout: z.number().default(90),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  socketTimeout: z.number().default(0),
  caFingerprint: z.string().optional(),
  keytab: z.string().optional(),
  principal: z.string().optional(),
  allowMachineIdMismatch: z.boolean().default(false),
  subscriptions: z.array(z.lazy(() => Subscription$outboundSchema)),
  metadata: z.array(z.lazy(() => InputWefMetadatum$outboundSchema)).optional(),
  description: z.string().optional(),
  logFingerprintMismatch: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWef$ {
  /** @deprecated use `InputWef$inboundSchema` instead. */
  export const inboundSchema = InputWef$inboundSchema;
  /** @deprecated use `InputWef$outboundSchema` instead. */
  export const outboundSchema = InputWef$outboundSchema;
  /** @deprecated use `InputWef$Outbound` instead. */
  export type Outbound = InputWef$Outbound;
}

export function inputWefToJSON(inputWef: InputWef): string {
  return JSON.stringify(InputWef$outboundSchema.parse(inputWef));
}

export function inputWefFromJSON(
  jsonString: string,
): SafeParseResult<InputWef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWef' from JSON`,
  );
}
