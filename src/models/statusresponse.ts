/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CacheStatusByDatasetIdUnion,
  CacheStatusByDatasetIdUnion$inboundSchema,
  CacheStatusByDatasetIdUnion$Outbound,
  CacheStatusByDatasetIdUnion$outboundSchema,
} from "./cachestatusbydatasetidunion.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CacheStatusesByStageId2 = {
  reason: string;
  usedCache: boolean;
};

export type CacheStatusesByStageId1 = {
  usedCache: boolean;
};

export type CacheStatusesByStageIdUnion =
  | CacheStatusesByStageId2
  | CacheStatusesByStageId1;

export const StageDetailStatus = {
  Failed: "failed",
  New: "new",
  Running: "running",
  Completed: "completed",
  Canceled: "canceled",
  Queued: "queued",
} as const;
export type StageDetailStatus = OpenEnum<typeof StageDetailStatus>;

export type StageDetail = {
  cacheStatusByDatasetId: { [k: string]: CacheStatusByDatasetIdUnion };
  stageId: string;
  status: StageDetailStatus;
};

export const StatusResponseStatus = {
  Failed: "failed",
  New: "new",
  Running: "running",
  Completed: "completed",
  Canceled: "canceled",
  Queued: "queued",
} as const;
export type StatusResponseStatus = OpenEnum<typeof StatusResponseStatus>;

export type StatusResponse = {
  bytesIn?: number | undefined;
  bytesSkipped?: number | undefined;
  cacheStatusesByStageId?: {
    [k: string]: {
      [k: string]: CacheStatusesByStageId2 | CacheStatusesByStageId1;
    };
  } | undefined;
  eventsFound?: number | undefined;
  eventsIn?: number | undefined;
  eventsSkipped?: number | undefined;
  objectsFound?: number | undefined;
  objectsSearched?: number | undefined;
  objectsSkipped?: number | undefined;
  stageDetails?: Array<StageDetail> | undefined;
  status: StatusResponseStatus;
  timeCompleted?: number | undefined;
  timeCreated: number;
  timeNow?: number | undefined;
  timeStarted?: number | undefined;
};

/** @internal */
export const CacheStatusesByStageId2$inboundSchema: z.ZodType<
  CacheStatusesByStageId2,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: z.string(),
  usedCache: z.boolean(),
});

/** @internal */
export type CacheStatusesByStageId2$Outbound = {
  reason: string;
  usedCache: boolean;
};

/** @internal */
export const CacheStatusesByStageId2$outboundSchema: z.ZodType<
  CacheStatusesByStageId2$Outbound,
  z.ZodTypeDef,
  CacheStatusesByStageId2
> = z.object({
  reason: z.string(),
  usedCache: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheStatusesByStageId2$ {
  /** @deprecated use `CacheStatusesByStageId2$inboundSchema` instead. */
  export const inboundSchema = CacheStatusesByStageId2$inboundSchema;
  /** @deprecated use `CacheStatusesByStageId2$outboundSchema` instead. */
  export const outboundSchema = CacheStatusesByStageId2$outboundSchema;
  /** @deprecated use `CacheStatusesByStageId2$Outbound` instead. */
  export type Outbound = CacheStatusesByStageId2$Outbound;
}

export function cacheStatusesByStageId2ToJSON(
  cacheStatusesByStageId2: CacheStatusesByStageId2,
): string {
  return JSON.stringify(
    CacheStatusesByStageId2$outboundSchema.parse(cacheStatusesByStageId2),
  );
}

export function cacheStatusesByStageId2FromJSON(
  jsonString: string,
): SafeParseResult<CacheStatusesByStageId2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheStatusesByStageId2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheStatusesByStageId2' from JSON`,
  );
}

/** @internal */
export const CacheStatusesByStageId1$inboundSchema: z.ZodType<
  CacheStatusesByStageId1,
  z.ZodTypeDef,
  unknown
> = z.object({
  usedCache: z.boolean(),
});

/** @internal */
export type CacheStatusesByStageId1$Outbound = {
  usedCache: boolean;
};

/** @internal */
export const CacheStatusesByStageId1$outboundSchema: z.ZodType<
  CacheStatusesByStageId1$Outbound,
  z.ZodTypeDef,
  CacheStatusesByStageId1
> = z.object({
  usedCache: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheStatusesByStageId1$ {
  /** @deprecated use `CacheStatusesByStageId1$inboundSchema` instead. */
  export const inboundSchema = CacheStatusesByStageId1$inboundSchema;
  /** @deprecated use `CacheStatusesByStageId1$outboundSchema` instead. */
  export const outboundSchema = CacheStatusesByStageId1$outboundSchema;
  /** @deprecated use `CacheStatusesByStageId1$Outbound` instead. */
  export type Outbound = CacheStatusesByStageId1$Outbound;
}

export function cacheStatusesByStageId1ToJSON(
  cacheStatusesByStageId1: CacheStatusesByStageId1,
): string {
  return JSON.stringify(
    CacheStatusesByStageId1$outboundSchema.parse(cacheStatusesByStageId1),
  );
}

export function cacheStatusesByStageId1FromJSON(
  jsonString: string,
): SafeParseResult<CacheStatusesByStageId1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheStatusesByStageId1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheStatusesByStageId1' from JSON`,
  );
}

/** @internal */
export const CacheStatusesByStageIdUnion$inboundSchema: z.ZodType<
  CacheStatusesByStageIdUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CacheStatusesByStageId2$inboundSchema),
  z.lazy(() => CacheStatusesByStageId1$inboundSchema),
]);

/** @internal */
export type CacheStatusesByStageIdUnion$Outbound =
  | CacheStatusesByStageId2$Outbound
  | CacheStatusesByStageId1$Outbound;

/** @internal */
export const CacheStatusesByStageIdUnion$outboundSchema: z.ZodType<
  CacheStatusesByStageIdUnion$Outbound,
  z.ZodTypeDef,
  CacheStatusesByStageIdUnion
> = z.union([
  z.lazy(() => CacheStatusesByStageId2$outboundSchema),
  z.lazy(() => CacheStatusesByStageId1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheStatusesByStageIdUnion$ {
  /** @deprecated use `CacheStatusesByStageIdUnion$inboundSchema` instead. */
  export const inboundSchema = CacheStatusesByStageIdUnion$inboundSchema;
  /** @deprecated use `CacheStatusesByStageIdUnion$outboundSchema` instead. */
  export const outboundSchema = CacheStatusesByStageIdUnion$outboundSchema;
  /** @deprecated use `CacheStatusesByStageIdUnion$Outbound` instead. */
  export type Outbound = CacheStatusesByStageIdUnion$Outbound;
}

export function cacheStatusesByStageIdUnionToJSON(
  cacheStatusesByStageIdUnion: CacheStatusesByStageIdUnion,
): string {
  return JSON.stringify(
    CacheStatusesByStageIdUnion$outboundSchema.parse(
      cacheStatusesByStageIdUnion,
    ),
  );
}

export function cacheStatusesByStageIdUnionFromJSON(
  jsonString: string,
): SafeParseResult<CacheStatusesByStageIdUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheStatusesByStageIdUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheStatusesByStageIdUnion' from JSON`,
  );
}

/** @internal */
export const StageDetailStatus$inboundSchema: z.ZodType<
  StageDetailStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(StageDetailStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const StageDetailStatus$outboundSchema: z.ZodType<
  StageDetailStatus,
  z.ZodTypeDef,
  StageDetailStatus
> = z.union([
  z.nativeEnum(StageDetailStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StageDetailStatus$ {
  /** @deprecated use `StageDetailStatus$inboundSchema` instead. */
  export const inboundSchema = StageDetailStatus$inboundSchema;
  /** @deprecated use `StageDetailStatus$outboundSchema` instead. */
  export const outboundSchema = StageDetailStatus$outboundSchema;
}

/** @internal */
export const StageDetail$inboundSchema: z.ZodType<
  StageDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  cacheStatusByDatasetId: z.record(CacheStatusByDatasetIdUnion$inboundSchema),
  stageId: z.string(),
  status: StageDetailStatus$inboundSchema,
});

/** @internal */
export type StageDetail$Outbound = {
  cacheStatusByDatasetId: { [k: string]: CacheStatusByDatasetIdUnion$Outbound };
  stageId: string;
  status: string;
};

/** @internal */
export const StageDetail$outboundSchema: z.ZodType<
  StageDetail$Outbound,
  z.ZodTypeDef,
  StageDetail
> = z.object({
  cacheStatusByDatasetId: z.record(CacheStatusByDatasetIdUnion$outboundSchema),
  stageId: z.string(),
  status: StageDetailStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StageDetail$ {
  /** @deprecated use `StageDetail$inboundSchema` instead. */
  export const inboundSchema = StageDetail$inboundSchema;
  /** @deprecated use `StageDetail$outboundSchema` instead. */
  export const outboundSchema = StageDetail$outboundSchema;
  /** @deprecated use `StageDetail$Outbound` instead. */
  export type Outbound = StageDetail$Outbound;
}

export function stageDetailToJSON(stageDetail: StageDetail): string {
  return JSON.stringify(StageDetail$outboundSchema.parse(stageDetail));
}

export function stageDetailFromJSON(
  jsonString: string,
): SafeParseResult<StageDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StageDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StageDetail' from JSON`,
  );
}

/** @internal */
export const StatusResponseStatus$inboundSchema: z.ZodType<
  StatusResponseStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(StatusResponseStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const StatusResponseStatus$outboundSchema: z.ZodType<
  StatusResponseStatus,
  z.ZodTypeDef,
  StatusResponseStatus
> = z.union([
  z.nativeEnum(StatusResponseStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusResponseStatus$ {
  /** @deprecated use `StatusResponseStatus$inboundSchema` instead. */
  export const inboundSchema = StatusResponseStatus$inboundSchema;
  /** @deprecated use `StatusResponseStatus$outboundSchema` instead. */
  export const outboundSchema = StatusResponseStatus$outboundSchema;
}

/** @internal */
export const StatusResponse$inboundSchema: z.ZodType<
  StatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  bytesIn: z.number().optional(),
  bytesSkipped: z.number().optional(),
  cacheStatusesByStageId: z.record(
    z.record(z.union([
      z.lazy(() => CacheStatusesByStageId2$inboundSchema),
      z.lazy(() =>
        CacheStatusesByStageId1$inboundSchema
      ),
    ])),
  ).optional(),
  eventsFound: z.number().optional(),
  eventsIn: z.number().optional(),
  eventsSkipped: z.number().optional(),
  objectsFound: z.number().optional(),
  objectsSearched: z.number().optional(),
  objectsSkipped: z.number().optional(),
  stageDetails: z.array(z.lazy(() => StageDetail$inboundSchema)).optional(),
  status: StatusResponseStatus$inboundSchema,
  timeCompleted: z.number().optional(),
  timeCreated: z.number(),
  timeNow: z.number().optional(),
  timeStarted: z.number().optional(),
});

/** @internal */
export type StatusResponse$Outbound = {
  bytesIn?: number | undefined;
  bytesSkipped?: number | undefined;
  cacheStatusesByStageId?: {
    [k: string]: {
      [k: string]:
        | CacheStatusesByStageId2$Outbound
        | CacheStatusesByStageId1$Outbound;
    };
  } | undefined;
  eventsFound?: number | undefined;
  eventsIn?: number | undefined;
  eventsSkipped?: number | undefined;
  objectsFound?: number | undefined;
  objectsSearched?: number | undefined;
  objectsSkipped?: number | undefined;
  stageDetails?: Array<StageDetail$Outbound> | undefined;
  status: string;
  timeCompleted?: number | undefined;
  timeCreated: number;
  timeNow?: number | undefined;
  timeStarted?: number | undefined;
};

/** @internal */
export const StatusResponse$outboundSchema: z.ZodType<
  StatusResponse$Outbound,
  z.ZodTypeDef,
  StatusResponse
> = z.object({
  bytesIn: z.number().optional(),
  bytesSkipped: z.number().optional(),
  cacheStatusesByStageId: z.record(
    z.record(z.union([
      z.lazy(() => CacheStatusesByStageId2$outboundSchema),
      z.lazy(() =>
        CacheStatusesByStageId1$outboundSchema
      ),
    ])),
  ).optional(),
  eventsFound: z.number().optional(),
  eventsIn: z.number().optional(),
  eventsSkipped: z.number().optional(),
  objectsFound: z.number().optional(),
  objectsSearched: z.number().optional(),
  objectsSkipped: z.number().optional(),
  stageDetails: z.array(z.lazy(() => StageDetail$outboundSchema)).optional(),
  status: StatusResponseStatus$outboundSchema,
  timeCompleted: z.number().optional(),
  timeCreated: z.number(),
  timeNow: z.number().optional(),
  timeStarted: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusResponse$ {
  /** @deprecated use `StatusResponse$inboundSchema` instead. */
  export const inboundSchema = StatusResponse$inboundSchema;
  /** @deprecated use `StatusResponse$outboundSchema` instead. */
  export const outboundSchema = StatusResponse$outboundSchema;
  /** @deprecated use `StatusResponse$Outbound` instead. */
  export type Outbound = StatusResponse$Outbound;
}

export function statusResponseToJSON(statusResponse: StatusResponse): string {
  return JSON.stringify(StatusResponse$outboundSchema.parse(statusResponse));
}

export function statusResponseFromJSON(
  jsonString: string,
): SafeParseResult<StatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusResponse' from JSON`,
  );
}
