/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ComputeTypes = {
  v1?: number | undefined;
  v2?: number | undefined;
  lakehouse?: number | undefined;
};

export type SearchJobMetadata = {
  arguments?: { [k: string]: Array<{ [k: string]: string }> } | undefined;
  computeTypes?: ComputeTypes | undefined;
  datasets?: { [k: string]: number } | undefined;
  functions?: { [k: string]: number } | undefined;
  operators?: { [k: string]: number } | undefined;
  providerTypes?: { [k: string]: number } | undefined;
  providers?: { [k: string]: number } | undefined;
};

/** @internal */
export const ComputeTypes$inboundSchema: z.ZodType<
  ComputeTypes,
  z.ZodTypeDef,
  unknown
> = z.object({
  v1: z.number().optional(),
  v2: z.number().optional(),
  lakehouse: z.number().optional(),
});

/** @internal */
export type ComputeTypes$Outbound = {
  v1?: number | undefined;
  v2?: number | undefined;
  lakehouse?: number | undefined;
};

/** @internal */
export const ComputeTypes$outboundSchema: z.ZodType<
  ComputeTypes$Outbound,
  z.ZodTypeDef,
  ComputeTypes
> = z.object({
  v1: z.number().optional(),
  v2: z.number().optional(),
  lakehouse: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComputeTypes$ {
  /** @deprecated use `ComputeTypes$inboundSchema` instead. */
  export const inboundSchema = ComputeTypes$inboundSchema;
  /** @deprecated use `ComputeTypes$outboundSchema` instead. */
  export const outboundSchema = ComputeTypes$outboundSchema;
  /** @deprecated use `ComputeTypes$Outbound` instead. */
  export type Outbound = ComputeTypes$Outbound;
}

export function computeTypesToJSON(computeTypes: ComputeTypes): string {
  return JSON.stringify(ComputeTypes$outboundSchema.parse(computeTypes));
}

export function computeTypesFromJSON(
  jsonString: string,
): SafeParseResult<ComputeTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComputeTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComputeTypes' from JSON`,
  );
}

/** @internal */
export const SearchJobMetadata$inboundSchema: z.ZodType<
  SearchJobMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  arguments: z.record(z.array(z.record(z.string()))).optional(),
  computeTypes: z.lazy(() => ComputeTypes$inboundSchema).optional(),
  datasets: z.record(z.number()).optional(),
  functions: z.record(z.number()).optional(),
  operators: z.record(z.number()).optional(),
  providerTypes: z.record(z.number()).optional(),
  providers: z.record(z.number()).optional(),
});

/** @internal */
export type SearchJobMetadata$Outbound = {
  arguments?: { [k: string]: Array<{ [k: string]: string }> } | undefined;
  computeTypes?: ComputeTypes$Outbound | undefined;
  datasets?: { [k: string]: number } | undefined;
  functions?: { [k: string]: number } | undefined;
  operators?: { [k: string]: number } | undefined;
  providerTypes?: { [k: string]: number } | undefined;
  providers?: { [k: string]: number } | undefined;
};

/** @internal */
export const SearchJobMetadata$outboundSchema: z.ZodType<
  SearchJobMetadata$Outbound,
  z.ZodTypeDef,
  SearchJobMetadata
> = z.object({
  arguments: z.record(z.array(z.record(z.string()))).optional(),
  computeTypes: z.lazy(() => ComputeTypes$outboundSchema).optional(),
  datasets: z.record(z.number()).optional(),
  functions: z.record(z.number()).optional(),
  operators: z.record(z.number()).optional(),
  providerTypes: z.record(z.number()).optional(),
  providers: z.record(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJobMetadata$ {
  /** @deprecated use `SearchJobMetadata$inboundSchema` instead. */
  export const inboundSchema = SearchJobMetadata$inboundSchema;
  /** @deprecated use `SearchJobMetadata$outboundSchema` instead. */
  export const outboundSchema = SearchJobMetadata$outboundSchema;
  /** @deprecated use `SearchJobMetadata$Outbound` instead. */
  export type Outbound = SearchJobMetadata$Outbound;
}

export function searchJobMetadataToJSON(
  searchJobMetadata: SearchJobMetadata,
): string {
  return JSON.stringify(
    SearchJobMetadata$outboundSchema.parse(searchJobMetadata),
  );
}

export function searchJobMetadataFromJSON(
  jsonString: string,
): SafeParseResult<SearchJobMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchJobMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchJobMetadata' from JSON`,
  );
}
