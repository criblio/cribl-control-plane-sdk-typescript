/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateCriblLakeDatasetByLakeIdRequest = {
  /**
   * The <code>id</code> of the Lake to create the Lake Dataset in.
   */
  lakeId: string;
  /**
   * CriblLakeDataset object
   */
  criblLakeDataset: models.CriblLakeDataset;
};

/**
 * a list of CriblLakeDataset objects
 */
export type CreateCriblLakeDatasetByLakeIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.CriblLakeDataset> | undefined;
};

/** @internal */
export const CreateCriblLakeDatasetByLakeIdRequest$inboundSchema: z.ZodType<
  CreateCriblLakeDatasetByLakeIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lakeId: z.string(),
  CriblLakeDataset: models.CriblLakeDataset$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CriblLakeDataset": "criblLakeDataset",
  });
});

/** @internal */
export type CreateCriblLakeDatasetByLakeIdRequest$Outbound = {
  lakeId: string;
  CriblLakeDataset: models.CriblLakeDataset$Outbound;
};

/** @internal */
export const CreateCriblLakeDatasetByLakeIdRequest$outboundSchema: z.ZodType<
  CreateCriblLakeDatasetByLakeIdRequest$Outbound,
  z.ZodTypeDef,
  CreateCriblLakeDatasetByLakeIdRequest
> = z.object({
  lakeId: z.string(),
  criblLakeDataset: models.CriblLakeDataset$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    criblLakeDataset: "CriblLakeDataset",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCriblLakeDatasetByLakeIdRequest$ {
  /** @deprecated use `CreateCriblLakeDatasetByLakeIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateCriblLakeDatasetByLakeIdRequest$inboundSchema;
  /** @deprecated use `CreateCriblLakeDatasetByLakeIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateCriblLakeDatasetByLakeIdRequest$outboundSchema;
  /** @deprecated use `CreateCriblLakeDatasetByLakeIdRequest$Outbound` instead. */
  export type Outbound = CreateCriblLakeDatasetByLakeIdRequest$Outbound;
}

export function createCriblLakeDatasetByLakeIdRequestToJSON(
  createCriblLakeDatasetByLakeIdRequest: CreateCriblLakeDatasetByLakeIdRequest,
): string {
  return JSON.stringify(
    CreateCriblLakeDatasetByLakeIdRequest$outboundSchema.parse(
      createCriblLakeDatasetByLakeIdRequest,
    ),
  );
}

export function createCriblLakeDatasetByLakeIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCriblLakeDatasetByLakeIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCriblLakeDatasetByLakeIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCriblLakeDatasetByLakeIdRequest' from JSON`,
  );
}

/** @internal */
export const CreateCriblLakeDatasetByLakeIdResponse$inboundSchema: z.ZodType<
  CreateCriblLakeDatasetByLakeIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.CriblLakeDataset$inboundSchema).optional(),
});

/** @internal */
export type CreateCriblLakeDatasetByLakeIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.CriblLakeDataset$Outbound> | undefined;
};

/** @internal */
export const CreateCriblLakeDatasetByLakeIdResponse$outboundSchema: z.ZodType<
  CreateCriblLakeDatasetByLakeIdResponse$Outbound,
  z.ZodTypeDef,
  CreateCriblLakeDatasetByLakeIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.CriblLakeDataset$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCriblLakeDatasetByLakeIdResponse$ {
  /** @deprecated use `CreateCriblLakeDatasetByLakeIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateCriblLakeDatasetByLakeIdResponse$inboundSchema;
  /** @deprecated use `CreateCriblLakeDatasetByLakeIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateCriblLakeDatasetByLakeIdResponse$outboundSchema;
  /** @deprecated use `CreateCriblLakeDatasetByLakeIdResponse$Outbound` instead. */
  export type Outbound = CreateCriblLakeDatasetByLakeIdResponse$Outbound;
}

export function createCriblLakeDatasetByLakeIdResponseToJSON(
  createCriblLakeDatasetByLakeIdResponse:
    CreateCriblLakeDatasetByLakeIdResponse,
): string {
  return JSON.stringify(
    CreateCriblLakeDatasetByLakeIdResponse$outboundSchema.parse(
      createCriblLakeDatasetByLakeIdResponse,
    ),
  );
}

export function createCriblLakeDatasetByLakeIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCriblLakeDatasetByLakeIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCriblLakeDatasetByLakeIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCriblLakeDatasetByLakeIdResponse' from JSON`,
  );
}
