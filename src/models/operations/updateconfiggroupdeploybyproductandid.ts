/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Name of the Cribl product to get the Worker Groups or Edge Fleets for.
 */
export const UpdateConfigGroupDeployByProductAndIdProduct = {
  Stream: "stream",
  Edge: "edge",
} as const;
/**
 * Name of the Cribl product to get the Worker Groups or Edge Fleets for.
 */
export type UpdateConfigGroupDeployByProductAndIdProduct = ClosedEnum<
  typeof UpdateConfigGroupDeployByProductAndIdProduct
>;

export type UpdateConfigGroupDeployByProductAndIdRequest = {
  /**
   * Name of the Cribl product to get the Worker Groups or Edge Fleets for.
   */
  product: UpdateConfigGroupDeployByProductAndIdProduct;
  /**
   * The <code>id</code> of the target Worker Group or Edge Fleet for commit deployment.
   */
  id: string;
  /**
   * DeployRequest object
   */
  deployRequest: models.DeployRequest;
};

/**
 * a list of ConfigGroup objects
 */
export type UpdateConfigGroupDeployByProductAndIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.ConfigGroup> | undefined;
};

/** @internal */
export const UpdateConfigGroupDeployByProductAndIdProduct$inboundSchema:
  z.ZodNativeEnum<typeof UpdateConfigGroupDeployByProductAndIdProduct> = z
    .nativeEnum(UpdateConfigGroupDeployByProductAndIdProduct);

/** @internal */
export const UpdateConfigGroupDeployByProductAndIdProduct$outboundSchema:
  z.ZodNativeEnum<typeof UpdateConfigGroupDeployByProductAndIdProduct> =
    UpdateConfigGroupDeployByProductAndIdProduct$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConfigGroupDeployByProductAndIdProduct$ {
  /** @deprecated use `UpdateConfigGroupDeployByProductAndIdProduct$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConfigGroupDeployByProductAndIdProduct$inboundSchema;
  /** @deprecated use `UpdateConfigGroupDeployByProductAndIdProduct$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConfigGroupDeployByProductAndIdProduct$outboundSchema;
}

/** @internal */
export const UpdateConfigGroupDeployByProductAndIdRequest$inboundSchema:
  z.ZodType<
    UpdateConfigGroupDeployByProductAndIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    product: UpdateConfigGroupDeployByProductAndIdProduct$inboundSchema,
    id: z.string(),
    DeployRequest: models.DeployRequest$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "DeployRequest": "deployRequest",
    });
  });

/** @internal */
export type UpdateConfigGroupDeployByProductAndIdRequest$Outbound = {
  product: string;
  id: string;
  DeployRequest: models.DeployRequest$Outbound;
};

/** @internal */
export const UpdateConfigGroupDeployByProductAndIdRequest$outboundSchema:
  z.ZodType<
    UpdateConfigGroupDeployByProductAndIdRequest$Outbound,
    z.ZodTypeDef,
    UpdateConfigGroupDeployByProductAndIdRequest
  > = z.object({
    product: UpdateConfigGroupDeployByProductAndIdProduct$outboundSchema,
    id: z.string(),
    deployRequest: models.DeployRequest$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      deployRequest: "DeployRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConfigGroupDeployByProductAndIdRequest$ {
  /** @deprecated use `UpdateConfigGroupDeployByProductAndIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConfigGroupDeployByProductAndIdRequest$inboundSchema;
  /** @deprecated use `UpdateConfigGroupDeployByProductAndIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConfigGroupDeployByProductAndIdRequest$outboundSchema;
  /** @deprecated use `UpdateConfigGroupDeployByProductAndIdRequest$Outbound` instead. */
  export type Outbound = UpdateConfigGroupDeployByProductAndIdRequest$Outbound;
}

export function updateConfigGroupDeployByProductAndIdRequestToJSON(
  updateConfigGroupDeployByProductAndIdRequest:
    UpdateConfigGroupDeployByProductAndIdRequest,
): string {
  return JSON.stringify(
    UpdateConfigGroupDeployByProductAndIdRequest$outboundSchema.parse(
      updateConfigGroupDeployByProductAndIdRequest,
    ),
  );
}

export function updateConfigGroupDeployByProductAndIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConfigGroupDeployByProductAndIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConfigGroupDeployByProductAndIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConfigGroupDeployByProductAndIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateConfigGroupDeployByProductAndIdResponse$inboundSchema:
  z.ZodType<
    UpdateConfigGroupDeployByProductAndIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.ConfigGroup$inboundSchema).optional(),
  });

/** @internal */
export type UpdateConfigGroupDeployByProductAndIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.ConfigGroup$Outbound> | undefined;
};

/** @internal */
export const UpdateConfigGroupDeployByProductAndIdResponse$outboundSchema:
  z.ZodType<
    UpdateConfigGroupDeployByProductAndIdResponse$Outbound,
    z.ZodTypeDef,
    UpdateConfigGroupDeployByProductAndIdResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.ConfigGroup$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConfigGroupDeployByProductAndIdResponse$ {
  /** @deprecated use `UpdateConfigGroupDeployByProductAndIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConfigGroupDeployByProductAndIdResponse$inboundSchema;
  /** @deprecated use `UpdateConfigGroupDeployByProductAndIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConfigGroupDeployByProductAndIdResponse$outboundSchema;
  /** @deprecated use `UpdateConfigGroupDeployByProductAndIdResponse$Outbound` instead. */
  export type Outbound = UpdateConfigGroupDeployByProductAndIdResponse$Outbound;
}

export function updateConfigGroupDeployByProductAndIdResponseToJSON(
  updateConfigGroupDeployByProductAndIdResponse:
    UpdateConfigGroupDeployByProductAndIdResponse,
): string {
  return JSON.stringify(
    UpdateConfigGroupDeployByProductAndIdResponse$outboundSchema.parse(
      updateConfigGroupDeployByProductAndIdResponse,
    ),
  );
}

export function updateConfigGroupDeployByProductAndIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConfigGroupDeployByProductAndIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConfigGroupDeployByProductAndIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConfigGroupDeployByProductAndIdResponse' from JSON`,
  );
}
