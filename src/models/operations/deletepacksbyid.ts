/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeletePacksByIdRequest = {
  /**
   * The <code>id</code> of the Pack to uninstall.
   */
  id: string;
};

/**
 * a list of PackInstallInfo objects
 */
export type DeletePacksByIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.PackInstallInfo> | undefined;
};

/** @internal */
export const DeletePacksByIdRequest$inboundSchema: z.ZodType<
  DeletePacksByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeletePacksByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeletePacksByIdRequest$outboundSchema: z.ZodType<
  DeletePacksByIdRequest$Outbound,
  z.ZodTypeDef,
  DeletePacksByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePacksByIdRequest$ {
  /** @deprecated use `DeletePacksByIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeletePacksByIdRequest$inboundSchema;
  /** @deprecated use `DeletePacksByIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeletePacksByIdRequest$outboundSchema;
  /** @deprecated use `DeletePacksByIdRequest$Outbound` instead. */
  export type Outbound = DeletePacksByIdRequest$Outbound;
}

export function deletePacksByIdRequestToJSON(
  deletePacksByIdRequest: DeletePacksByIdRequest,
): string {
  return JSON.stringify(
    DeletePacksByIdRequest$outboundSchema.parse(deletePacksByIdRequest),
  );
}

export function deletePacksByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeletePacksByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePacksByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePacksByIdRequest' from JSON`,
  );
}

/** @internal */
export const DeletePacksByIdResponse$inboundSchema: z.ZodType<
  DeletePacksByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.PackInstallInfo$inboundSchema).optional(),
});

/** @internal */
export type DeletePacksByIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.PackInstallInfo$Outbound> | undefined;
};

/** @internal */
export const DeletePacksByIdResponse$outboundSchema: z.ZodType<
  DeletePacksByIdResponse$Outbound,
  z.ZodTypeDef,
  DeletePacksByIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.PackInstallInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePacksByIdResponse$ {
  /** @deprecated use `DeletePacksByIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeletePacksByIdResponse$inboundSchema;
  /** @deprecated use `DeletePacksByIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeletePacksByIdResponse$outboundSchema;
  /** @deprecated use `DeletePacksByIdResponse$Outbound` instead. */
  export type Outbound = DeletePacksByIdResponse$Outbound;
}

export function deletePacksByIdResponseToJSON(
  deletePacksByIdResponse: DeletePacksByIdResponse,
): string {
  return JSON.stringify(
    DeletePacksByIdResponse$outboundSchema.parse(deletePacksByIdResponse),
  );
}

export function deletePacksByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeletePacksByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePacksByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePacksByIdResponse' from JSON`,
  );
}
