/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateRoutesByIdRequest = {
  /**
   * Unique ID to PATCH
   */
  id: string;
  /**
   * Routes object to be updated
   */
  routes: models.Routes;
};

/**
 * a list of Routes objects
 */
export type UpdateRoutesByIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.Routes> | undefined;
};

/** @internal */
export const UpdateRoutesByIdRequest$inboundSchema: z.ZodType<
  UpdateRoutesByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  Routes: models.Routes$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Routes": "routes",
  });
});

/** @internal */
export type UpdateRoutesByIdRequest$Outbound = {
  id: string;
  Routes: models.Routes$Outbound;
};

/** @internal */
export const UpdateRoutesByIdRequest$outboundSchema: z.ZodType<
  UpdateRoutesByIdRequest$Outbound,
  z.ZodTypeDef,
  UpdateRoutesByIdRequest
> = z.object({
  id: z.string(),
  routes: models.Routes$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    routes: "Routes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRoutesByIdRequest$ {
  /** @deprecated use `UpdateRoutesByIdRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRoutesByIdRequest$inboundSchema;
  /** @deprecated use `UpdateRoutesByIdRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRoutesByIdRequest$outboundSchema;
  /** @deprecated use `UpdateRoutesByIdRequest$Outbound` instead. */
  export type Outbound = UpdateRoutesByIdRequest$Outbound;
}

export function updateRoutesByIdRequestToJSON(
  updateRoutesByIdRequest: UpdateRoutesByIdRequest,
): string {
  return JSON.stringify(
    UpdateRoutesByIdRequest$outboundSchema.parse(updateRoutesByIdRequest),
  );
}

export function updateRoutesByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRoutesByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRoutesByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRoutesByIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateRoutesByIdResponse$inboundSchema: z.ZodType<
  UpdateRoutesByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.Routes$inboundSchema).optional(),
});

/** @internal */
export type UpdateRoutesByIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.Routes$Outbound> | undefined;
};

/** @internal */
export const UpdateRoutesByIdResponse$outboundSchema: z.ZodType<
  UpdateRoutesByIdResponse$Outbound,
  z.ZodTypeDef,
  UpdateRoutesByIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.Routes$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRoutesByIdResponse$ {
  /** @deprecated use `UpdateRoutesByIdResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateRoutesByIdResponse$inboundSchema;
  /** @deprecated use `UpdateRoutesByIdResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateRoutesByIdResponse$outboundSchema;
  /** @deprecated use `UpdateRoutesByIdResponse$Outbound` instead. */
  export type Outbound = UpdateRoutesByIdResponse$Outbound;
}

export function updateRoutesByIdResponseToJSON(
  updateRoutesByIdResponse: UpdateRoutesByIdResponse,
): string {
  return JSON.stringify(
    UpdateRoutesByIdResponse$outboundSchema.parse(updateRoutesByIdResponse),
  );
}

export function updateRoutesByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRoutesByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRoutesByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRoutesByIdResponse' from JSON`,
  );
}
