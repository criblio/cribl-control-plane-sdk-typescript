/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateAdminProductsMappingsByProductAndIdRequest = {
  /**
   * Name of the Cribl product to update the Mapping Ruleset for
   */
  product: models.ProductsCore;
  /**
   * The <code>id</code> of the Mapping Ruleset to update.
   */
  id: string;
  /**
   * MappingRuleset object
   */
  mappingRuleset: models.MappingRuleset;
};

/**
 * A list containing the updated Mapping Ruleset objects
 */
export type UpdateAdminProductsMappingsByProductAndIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.MappingRuleset> | undefined;
};

/** @internal */
export const UpdateAdminProductsMappingsByProductAndIdRequest$inboundSchema:
  z.ZodType<
    UpdateAdminProductsMappingsByProductAndIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    product: models.ProductsCore$inboundSchema,
    id: z.string(),
    MappingRuleset: models.MappingRuleset$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "MappingRuleset": "mappingRuleset",
    });
  });

/** @internal */
export type UpdateAdminProductsMappingsByProductAndIdRequest$Outbound = {
  product: string;
  id: string;
  MappingRuleset: models.MappingRuleset$Outbound;
};

/** @internal */
export const UpdateAdminProductsMappingsByProductAndIdRequest$outboundSchema:
  z.ZodType<
    UpdateAdminProductsMappingsByProductAndIdRequest$Outbound,
    z.ZodTypeDef,
    UpdateAdminProductsMappingsByProductAndIdRequest
  > = z.object({
    product: models.ProductsCore$outboundSchema,
    id: z.string(),
    mappingRuleset: models.MappingRuleset$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      mappingRuleset: "MappingRuleset",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAdminProductsMappingsByProductAndIdRequest$ {
  /** @deprecated use `UpdateAdminProductsMappingsByProductAndIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAdminProductsMappingsByProductAndIdRequest$inboundSchema;
  /** @deprecated use `UpdateAdminProductsMappingsByProductAndIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAdminProductsMappingsByProductAndIdRequest$outboundSchema;
  /** @deprecated use `UpdateAdminProductsMappingsByProductAndIdRequest$Outbound` instead. */
  export type Outbound =
    UpdateAdminProductsMappingsByProductAndIdRequest$Outbound;
}

export function updateAdminProductsMappingsByProductAndIdRequestToJSON(
  updateAdminProductsMappingsByProductAndIdRequest:
    UpdateAdminProductsMappingsByProductAndIdRequest,
): string {
  return JSON.stringify(
    UpdateAdminProductsMappingsByProductAndIdRequest$outboundSchema.parse(
      updateAdminProductsMappingsByProductAndIdRequest,
    ),
  );
}

export function updateAdminProductsMappingsByProductAndIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAdminProductsMappingsByProductAndIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAdminProductsMappingsByProductAndIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAdminProductsMappingsByProductAndIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAdminProductsMappingsByProductAndIdResponse$inboundSchema:
  z.ZodType<
    UpdateAdminProductsMappingsByProductAndIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.MappingRuleset$inboundSchema).optional(),
  });

/** @internal */
export type UpdateAdminProductsMappingsByProductAndIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.MappingRuleset$Outbound> | undefined;
};

/** @internal */
export const UpdateAdminProductsMappingsByProductAndIdResponse$outboundSchema:
  z.ZodType<
    UpdateAdminProductsMappingsByProductAndIdResponse$Outbound,
    z.ZodTypeDef,
    UpdateAdminProductsMappingsByProductAndIdResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.MappingRuleset$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAdminProductsMappingsByProductAndIdResponse$ {
  /** @deprecated use `UpdateAdminProductsMappingsByProductAndIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateAdminProductsMappingsByProductAndIdResponse$inboundSchema;
  /** @deprecated use `UpdateAdminProductsMappingsByProductAndIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAdminProductsMappingsByProductAndIdResponse$outboundSchema;
  /** @deprecated use `UpdateAdminProductsMappingsByProductAndIdResponse$Outbound` instead. */
  export type Outbound =
    UpdateAdminProductsMappingsByProductAndIdResponse$Outbound;
}

export function updateAdminProductsMappingsByProductAndIdResponseToJSON(
  updateAdminProductsMappingsByProductAndIdResponse:
    UpdateAdminProductsMappingsByProductAndIdResponse,
): string {
  return JSON.stringify(
    UpdateAdminProductsMappingsByProductAndIdResponse$outboundSchema.parse(
      updateAdminProductsMappingsByProductAndIdResponse,
    ),
  );
}

export function updateAdminProductsMappingsByProductAndIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateAdminProductsMappingsByProductAndIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateAdminProductsMappingsByProductAndIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateAdminProductsMappingsByProductAndIdResponse' from JSON`,
  );
}
