/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeleteAdminProductsMappingsByProductAndIdRequest = {
  /**
   * Name of the Cribl product to delete the Mapping Ruleset for
   */
  product: models.ProductsCore;
  /**
   * The <code>id</code> of the Mapping Ruleset to delete.
   */
  id: string;
};

/**
 * A list containing the deleted Mapping Ruleset objects
 */
export type DeleteAdminProductsMappingsByProductAndIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.MappingRuleset> | undefined;
};

/** @internal */
export const DeleteAdminProductsMappingsByProductAndIdRequest$inboundSchema:
  z.ZodType<
    DeleteAdminProductsMappingsByProductAndIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    product: models.ProductsCore$inboundSchema,
    id: z.string(),
  });

/** @internal */
export type DeleteAdminProductsMappingsByProductAndIdRequest$Outbound = {
  product: string;
  id: string;
};

/** @internal */
export const DeleteAdminProductsMappingsByProductAndIdRequest$outboundSchema:
  z.ZodType<
    DeleteAdminProductsMappingsByProductAndIdRequest$Outbound,
    z.ZodTypeDef,
    DeleteAdminProductsMappingsByProductAndIdRequest
  > = z.object({
    product: models.ProductsCore$outboundSchema,
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAdminProductsMappingsByProductAndIdRequest$ {
  /** @deprecated use `DeleteAdminProductsMappingsByProductAndIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAdminProductsMappingsByProductAndIdRequest$inboundSchema;
  /** @deprecated use `DeleteAdminProductsMappingsByProductAndIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAdminProductsMappingsByProductAndIdRequest$outboundSchema;
  /** @deprecated use `DeleteAdminProductsMappingsByProductAndIdRequest$Outbound` instead. */
  export type Outbound =
    DeleteAdminProductsMappingsByProductAndIdRequest$Outbound;
}

export function deleteAdminProductsMappingsByProductAndIdRequestToJSON(
  deleteAdminProductsMappingsByProductAndIdRequest:
    DeleteAdminProductsMappingsByProductAndIdRequest,
): string {
  return JSON.stringify(
    DeleteAdminProductsMappingsByProductAndIdRequest$outboundSchema.parse(
      deleteAdminProductsMappingsByProductAndIdRequest,
    ),
  );
}

export function deleteAdminProductsMappingsByProductAndIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteAdminProductsMappingsByProductAndIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAdminProductsMappingsByProductAndIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteAdminProductsMappingsByProductAndIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteAdminProductsMappingsByProductAndIdResponse$inboundSchema:
  z.ZodType<
    DeleteAdminProductsMappingsByProductAndIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.MappingRuleset$inboundSchema).optional(),
  });

/** @internal */
export type DeleteAdminProductsMappingsByProductAndIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.MappingRuleset$Outbound> | undefined;
};

/** @internal */
export const DeleteAdminProductsMappingsByProductAndIdResponse$outboundSchema:
  z.ZodType<
    DeleteAdminProductsMappingsByProductAndIdResponse$Outbound,
    z.ZodTypeDef,
    DeleteAdminProductsMappingsByProductAndIdResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.MappingRuleset$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAdminProductsMappingsByProductAndIdResponse$ {
  /** @deprecated use `DeleteAdminProductsMappingsByProductAndIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAdminProductsMappingsByProductAndIdResponse$inboundSchema;
  /** @deprecated use `DeleteAdminProductsMappingsByProductAndIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAdminProductsMappingsByProductAndIdResponse$outboundSchema;
  /** @deprecated use `DeleteAdminProductsMappingsByProductAndIdResponse$Outbound` instead. */
  export type Outbound =
    DeleteAdminProductsMappingsByProductAndIdResponse$Outbound;
}

export function deleteAdminProductsMappingsByProductAndIdResponseToJSON(
  deleteAdminProductsMappingsByProductAndIdResponse:
    DeleteAdminProductsMappingsByProductAndIdResponse,
): string {
  return JSON.stringify(
    DeleteAdminProductsMappingsByProductAndIdResponse$outboundSchema.parse(
      deleteAdminProductsMappingsByProductAndIdResponse,
    ),
  );
}

export function deleteAdminProductsMappingsByProductAndIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteAdminProductsMappingsByProductAndIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAdminProductsMappingsByProductAndIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteAdminProductsMappingsByProductAndIdResponse' from JSON`,
  );
}
