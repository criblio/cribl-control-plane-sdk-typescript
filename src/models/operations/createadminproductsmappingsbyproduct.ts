/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateAdminProductsMappingsByProductRequest = {
  /**
   * Name of the Cribl product to create the Mapping Ruleset for
   */
  product: models.ProductsCore;
  /**
   * MappingRuleset object
   */
  mappingRuleset: models.MappingRuleset;
};

/**
 * A list containing the newly created Mapping Ruleset objects
 */
export type CreateAdminProductsMappingsByProductResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.MappingRuleset> | undefined;
};

/** @internal */
export const CreateAdminProductsMappingsByProductRequest$inboundSchema:
  z.ZodType<
    CreateAdminProductsMappingsByProductRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    product: models.ProductsCore$inboundSchema,
    MappingRuleset: models.MappingRuleset$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "MappingRuleset": "mappingRuleset",
    });
  });

/** @internal */
export type CreateAdminProductsMappingsByProductRequest$Outbound = {
  product: string;
  MappingRuleset: models.MappingRuleset$Outbound;
};

/** @internal */
export const CreateAdminProductsMappingsByProductRequest$outboundSchema:
  z.ZodType<
    CreateAdminProductsMappingsByProductRequest$Outbound,
    z.ZodTypeDef,
    CreateAdminProductsMappingsByProductRequest
  > = z.object({
    product: models.ProductsCore$outboundSchema,
    mappingRuleset: models.MappingRuleset$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      mappingRuleset: "MappingRuleset",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAdminProductsMappingsByProductRequest$ {
  /** @deprecated use `CreateAdminProductsMappingsByProductRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateAdminProductsMappingsByProductRequest$inboundSchema;
  /** @deprecated use `CreateAdminProductsMappingsByProductRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateAdminProductsMappingsByProductRequest$outboundSchema;
  /** @deprecated use `CreateAdminProductsMappingsByProductRequest$Outbound` instead. */
  export type Outbound = CreateAdminProductsMappingsByProductRequest$Outbound;
}

export function createAdminProductsMappingsByProductRequestToJSON(
  createAdminProductsMappingsByProductRequest:
    CreateAdminProductsMappingsByProductRequest,
): string {
  return JSON.stringify(
    CreateAdminProductsMappingsByProductRequest$outboundSchema.parse(
      createAdminProductsMappingsByProductRequest,
    ),
  );
}

export function createAdminProductsMappingsByProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAdminProductsMappingsByProductRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAdminProductsMappingsByProductRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAdminProductsMappingsByProductRequest' from JSON`,
  );
}

/** @internal */
export const CreateAdminProductsMappingsByProductResponse$inboundSchema:
  z.ZodType<
    CreateAdminProductsMappingsByProductResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.MappingRuleset$inboundSchema).optional(),
  });

/** @internal */
export type CreateAdminProductsMappingsByProductResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.MappingRuleset$Outbound> | undefined;
};

/** @internal */
export const CreateAdminProductsMappingsByProductResponse$outboundSchema:
  z.ZodType<
    CreateAdminProductsMappingsByProductResponse$Outbound,
    z.ZodTypeDef,
    CreateAdminProductsMappingsByProductResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.MappingRuleset$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAdminProductsMappingsByProductResponse$ {
  /** @deprecated use `CreateAdminProductsMappingsByProductResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateAdminProductsMappingsByProductResponse$inboundSchema;
  /** @deprecated use `CreateAdminProductsMappingsByProductResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateAdminProductsMappingsByProductResponse$outboundSchema;
  /** @deprecated use `CreateAdminProductsMappingsByProductResponse$Outbound` instead. */
  export type Outbound = CreateAdminProductsMappingsByProductResponse$Outbound;
}

export function createAdminProductsMappingsByProductResponseToJSON(
  createAdminProductsMappingsByProductResponse:
    CreateAdminProductsMappingsByProductResponse,
): string {
  return JSON.stringify(
    CreateAdminProductsMappingsByProductResponse$outboundSchema.parse(
      createAdminProductsMappingsByProductResponse,
    ),
  );
}

export function createAdminProductsMappingsByProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAdminProductsMappingsByProductResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAdminProductsMappingsByProductResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAdminProductsMappingsByProductResponse' from JSON`,
  );
}
