/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetSummaryRequest = {
  /**
   * Filter for limiting the response by Cribl product: Cribl Stream (<code>worker</code>) or Cribl Edge (<code>managed-edge</code>).
   */
  mode?: models.WorkerTypes | undefined;
};

/**
 * a list of DistributedSummary objects
 */
export type GetSummaryResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.DistributedSummary> | undefined;
};

/** @internal */
export const GetSummaryRequest$inboundSchema: z.ZodType<
  GetSummaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: models.WorkerTypes$inboundSchema.optional(),
});

/** @internal */
export type GetSummaryRequest$Outbound = {
  mode?: string | undefined;
};

/** @internal */
export const GetSummaryRequest$outboundSchema: z.ZodType<
  GetSummaryRequest$Outbound,
  z.ZodTypeDef,
  GetSummaryRequest
> = z.object({
  mode: models.WorkerTypes$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSummaryRequest$ {
  /** @deprecated use `GetSummaryRequest$inboundSchema` instead. */
  export const inboundSchema = GetSummaryRequest$inboundSchema;
  /** @deprecated use `GetSummaryRequest$outboundSchema` instead. */
  export const outboundSchema = GetSummaryRequest$outboundSchema;
  /** @deprecated use `GetSummaryRequest$Outbound` instead. */
  export type Outbound = GetSummaryRequest$Outbound;
}

export function getSummaryRequestToJSON(
  getSummaryRequest: GetSummaryRequest,
): string {
  return JSON.stringify(
    GetSummaryRequest$outboundSchema.parse(getSummaryRequest),
  );
}

export function getSummaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSummaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSummaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSummaryRequest' from JSON`,
  );
}

/** @internal */
export const GetSummaryResponse$inboundSchema: z.ZodType<
  GetSummaryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.DistributedSummary$inboundSchema).optional(),
});

/** @internal */
export type GetSummaryResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.DistributedSummary$Outbound> | undefined;
};

/** @internal */
export const GetSummaryResponse$outboundSchema: z.ZodType<
  GetSummaryResponse$Outbound,
  z.ZodTypeDef,
  GetSummaryResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.DistributedSummary$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSummaryResponse$ {
  /** @deprecated use `GetSummaryResponse$inboundSchema` instead. */
  export const inboundSchema = GetSummaryResponse$inboundSchema;
  /** @deprecated use `GetSummaryResponse$outboundSchema` instead. */
  export const outboundSchema = GetSummaryResponse$outboundSchema;
  /** @deprecated use `GetSummaryResponse$Outbound` instead. */
  export type Outbound = GetSummaryResponse$Outbound;
}

export function getSummaryResponseToJSON(
  getSummaryResponse: GetSummaryResponse,
): string {
  return JSON.stringify(
    GetSummaryResponse$outboundSchema.parse(getSummaryResponse),
  );
}

export function getSummaryResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSummaryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSummaryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSummaryResponse' from JSON`,
  );
}
