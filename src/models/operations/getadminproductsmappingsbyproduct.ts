/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetAdminProductsMappingsByProductRequest = {
  /**
   * Name of the Cribl product to list the Mapping Rulesets for
   */
  product: models.ProductsCore;
};

/**
 * a list of MappingRuleset objects
 */
export type GetAdminProductsMappingsByProductResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.MappingRuleset> | undefined;
};

/** @internal */
export const GetAdminProductsMappingsByProductRequest$inboundSchema: z.ZodType<
  GetAdminProductsMappingsByProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  product: models.ProductsCore$inboundSchema,
});

/** @internal */
export type GetAdminProductsMappingsByProductRequest$Outbound = {
  product: string;
};

/** @internal */
export const GetAdminProductsMappingsByProductRequest$outboundSchema: z.ZodType<
  GetAdminProductsMappingsByProductRequest$Outbound,
  z.ZodTypeDef,
  GetAdminProductsMappingsByProductRequest
> = z.object({
  product: models.ProductsCore$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAdminProductsMappingsByProductRequest$ {
  /** @deprecated use `GetAdminProductsMappingsByProductRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetAdminProductsMappingsByProductRequest$inboundSchema;
  /** @deprecated use `GetAdminProductsMappingsByProductRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetAdminProductsMappingsByProductRequest$outboundSchema;
  /** @deprecated use `GetAdminProductsMappingsByProductRequest$Outbound` instead. */
  export type Outbound = GetAdminProductsMappingsByProductRequest$Outbound;
}

export function getAdminProductsMappingsByProductRequestToJSON(
  getAdminProductsMappingsByProductRequest:
    GetAdminProductsMappingsByProductRequest,
): string {
  return JSON.stringify(
    GetAdminProductsMappingsByProductRequest$outboundSchema.parse(
      getAdminProductsMappingsByProductRequest,
    ),
  );
}

export function getAdminProductsMappingsByProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAdminProductsMappingsByProductRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAdminProductsMappingsByProductRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAdminProductsMappingsByProductRequest' from JSON`,
  );
}

/** @internal */
export const GetAdminProductsMappingsByProductResponse$inboundSchema: z.ZodType<
  GetAdminProductsMappingsByProductResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.MappingRuleset$inboundSchema).optional(),
});

/** @internal */
export type GetAdminProductsMappingsByProductResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.MappingRuleset$Outbound> | undefined;
};

/** @internal */
export const GetAdminProductsMappingsByProductResponse$outboundSchema:
  z.ZodType<
    GetAdminProductsMappingsByProductResponse$Outbound,
    z.ZodTypeDef,
    GetAdminProductsMappingsByProductResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.MappingRuleset$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAdminProductsMappingsByProductResponse$ {
  /** @deprecated use `GetAdminProductsMappingsByProductResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetAdminProductsMappingsByProductResponse$inboundSchema;
  /** @deprecated use `GetAdminProductsMappingsByProductResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetAdminProductsMappingsByProductResponse$outboundSchema;
  /** @deprecated use `GetAdminProductsMappingsByProductResponse$Outbound` instead. */
  export type Outbound = GetAdminProductsMappingsByProductResponse$Outbound;
}

export function getAdminProductsMappingsByProductResponseToJSON(
  getAdminProductsMappingsByProductResponse:
    GetAdminProductsMappingsByProductResponse,
): string {
  return JSON.stringify(
    GetAdminProductsMappingsByProductResponse$outboundSchema.parse(
      getAdminProductsMappingsByProductResponse,
    ),
  );
}

export function getAdminProductsMappingsByProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAdminProductsMappingsByProductResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAdminProductsMappingsByProductResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAdminProductsMappingsByProductResponse' from JSON`,
  );
}
