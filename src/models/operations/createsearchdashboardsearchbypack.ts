/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateSearchDashboardSearchByPackRequest = {
  /**
   * pack ID to POST
   */
  pack: string;
  /**
   * New SearchDashboard object
   */
  searchDashboard: models.SearchDashboard;
};

/**
 * a list of SearchDashboard objects
 */
export type CreateSearchDashboardSearchByPackResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.SearchDashboard> | undefined;
};

/** @internal */
export const CreateSearchDashboardSearchByPackRequest$inboundSchema: z.ZodType<
  CreateSearchDashboardSearchByPackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  pack: z.string(),
  SearchDashboard: models.SearchDashboard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SearchDashboard": "searchDashboard",
  });
});

/** @internal */
export type CreateSearchDashboardSearchByPackRequest$Outbound = {
  pack: string;
  SearchDashboard: models.SearchDashboard$Outbound;
};

/** @internal */
export const CreateSearchDashboardSearchByPackRequest$outboundSchema: z.ZodType<
  CreateSearchDashboardSearchByPackRequest$Outbound,
  z.ZodTypeDef,
  CreateSearchDashboardSearchByPackRequest
> = z.object({
  pack: z.string(),
  searchDashboard: models.SearchDashboard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    searchDashboard: "SearchDashboard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSearchDashboardSearchByPackRequest$ {
  /** @deprecated use `CreateSearchDashboardSearchByPackRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateSearchDashboardSearchByPackRequest$inboundSchema;
  /** @deprecated use `CreateSearchDashboardSearchByPackRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateSearchDashboardSearchByPackRequest$outboundSchema;
  /** @deprecated use `CreateSearchDashboardSearchByPackRequest$Outbound` instead. */
  export type Outbound = CreateSearchDashboardSearchByPackRequest$Outbound;
}

export function createSearchDashboardSearchByPackRequestToJSON(
  createSearchDashboardSearchByPackRequest:
    CreateSearchDashboardSearchByPackRequest,
): string {
  return JSON.stringify(
    CreateSearchDashboardSearchByPackRequest$outboundSchema.parse(
      createSearchDashboardSearchByPackRequest,
    ),
  );
}

export function createSearchDashboardSearchByPackRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSearchDashboardSearchByPackRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSearchDashboardSearchByPackRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSearchDashboardSearchByPackRequest' from JSON`,
  );
}

/** @internal */
export const CreateSearchDashboardSearchByPackResponse$inboundSchema: z.ZodType<
  CreateSearchDashboardSearchByPackResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.SearchDashboard$inboundSchema).optional(),
});

/** @internal */
export type CreateSearchDashboardSearchByPackResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.SearchDashboard$Outbound> | undefined;
};

/** @internal */
export const CreateSearchDashboardSearchByPackResponse$outboundSchema:
  z.ZodType<
    CreateSearchDashboardSearchByPackResponse$Outbound,
    z.ZodTypeDef,
    CreateSearchDashboardSearchByPackResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.SearchDashboard$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSearchDashboardSearchByPackResponse$ {
  /** @deprecated use `CreateSearchDashboardSearchByPackResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateSearchDashboardSearchByPackResponse$inboundSchema;
  /** @deprecated use `CreateSearchDashboardSearchByPackResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateSearchDashboardSearchByPackResponse$outboundSchema;
  /** @deprecated use `CreateSearchDashboardSearchByPackResponse$Outbound` instead. */
  export type Outbound = CreateSearchDashboardSearchByPackResponse$Outbound;
}

export function createSearchDashboardSearchByPackResponseToJSON(
  createSearchDashboardSearchByPackResponse:
    CreateSearchDashboardSearchByPackResponse,
): string {
  return JSON.stringify(
    CreateSearchDashboardSearchByPackResponse$outboundSchema.parse(
      createSearchDashboardSearchByPackResponse,
    ),
  );
}

export function createSearchDashboardSearchByPackResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSearchDashboardSearchByPackResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSearchDashboardSearchByPackResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSearchDashboardSearchByPackResponse' from JSON`,
  );
}
