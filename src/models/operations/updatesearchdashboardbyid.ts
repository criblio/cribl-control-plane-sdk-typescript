/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateSearchDashboardByIdRequest = {
  /**
   * Unique ID to PATCH
   */
  id: string;
  /**
   * SearchDashboard object to be updated
   */
  searchDashboard: models.SearchDashboard;
};

/**
 * a list of SearchDashboard objects
 */
export type UpdateSearchDashboardByIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.SearchDashboard> | undefined;
};

/** @internal */
export const UpdateSearchDashboardByIdRequest$inboundSchema: z.ZodType<
  UpdateSearchDashboardByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  SearchDashboard: models.SearchDashboard$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SearchDashboard": "searchDashboard",
  });
});

/** @internal */
export type UpdateSearchDashboardByIdRequest$Outbound = {
  id: string;
  SearchDashboard: models.SearchDashboard$Outbound;
};

/** @internal */
export const UpdateSearchDashboardByIdRequest$outboundSchema: z.ZodType<
  UpdateSearchDashboardByIdRequest$Outbound,
  z.ZodTypeDef,
  UpdateSearchDashboardByIdRequest
> = z.object({
  id: z.string(),
  searchDashboard: models.SearchDashboard$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    searchDashboard: "SearchDashboard",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSearchDashboardByIdRequest$ {
  /** @deprecated use `UpdateSearchDashboardByIdRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSearchDashboardByIdRequest$inboundSchema;
  /** @deprecated use `UpdateSearchDashboardByIdRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSearchDashboardByIdRequest$outboundSchema;
  /** @deprecated use `UpdateSearchDashboardByIdRequest$Outbound` instead. */
  export type Outbound = UpdateSearchDashboardByIdRequest$Outbound;
}

export function updateSearchDashboardByIdRequestToJSON(
  updateSearchDashboardByIdRequest: UpdateSearchDashboardByIdRequest,
): string {
  return JSON.stringify(
    UpdateSearchDashboardByIdRequest$outboundSchema.parse(
      updateSearchDashboardByIdRequest,
    ),
  );
}

export function updateSearchDashboardByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSearchDashboardByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSearchDashboardByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSearchDashboardByIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSearchDashboardByIdResponse$inboundSchema: z.ZodType<
  UpdateSearchDashboardByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.SearchDashboard$inboundSchema).optional(),
});

/** @internal */
export type UpdateSearchDashboardByIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.SearchDashboard$Outbound> | undefined;
};

/** @internal */
export const UpdateSearchDashboardByIdResponse$outboundSchema: z.ZodType<
  UpdateSearchDashboardByIdResponse$Outbound,
  z.ZodTypeDef,
  UpdateSearchDashboardByIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.SearchDashboard$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSearchDashboardByIdResponse$ {
  /** @deprecated use `UpdateSearchDashboardByIdResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSearchDashboardByIdResponse$inboundSchema;
  /** @deprecated use `UpdateSearchDashboardByIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSearchDashboardByIdResponse$outboundSchema;
  /** @deprecated use `UpdateSearchDashboardByIdResponse$Outbound` instead. */
  export type Outbound = UpdateSearchDashboardByIdResponse$Outbound;
}

export function updateSearchDashboardByIdResponseToJSON(
  updateSearchDashboardByIdResponse: UpdateSearchDashboardByIdResponse,
): string {
  return JSON.stringify(
    UpdateSearchDashboardByIdResponse$outboundSchema.parse(
      updateSearchDashboardByIdResponse,
    ),
  );
}

export function updateSearchDashboardByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSearchDashboardByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSearchDashboardByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSearchDashboardByIdResponse' from JSON`,
  );
}
