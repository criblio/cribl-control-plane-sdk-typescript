/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateInputHecTokenByIdAndTokenRequest = {
  /**
   * The <code>id</code> of the Splunk HEC Source.
   */
  id: string;
  /**
   * The <code>id</code> of the HEC token to update.
   */
  token: string;
  /**
   * UpdateHecTokenRequest object
   */
  updateHecTokenRequest: models.UpdateHecTokenRequest;
};

/**
 * a list of any objects
 */
export type UpdateInputHecTokenByIdAndTokenResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const UpdateInputHecTokenByIdAndTokenRequest$inboundSchema: z.ZodType<
  UpdateInputHecTokenByIdAndTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  token: z.string(),
  UpdateHecTokenRequest: models.UpdateHecTokenRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateHecTokenRequest": "updateHecTokenRequest",
  });
});

/** @internal */
export type UpdateInputHecTokenByIdAndTokenRequest$Outbound = {
  id: string;
  token: string;
  UpdateHecTokenRequest: models.UpdateHecTokenRequest$Outbound;
};

/** @internal */
export const UpdateInputHecTokenByIdAndTokenRequest$outboundSchema: z.ZodType<
  UpdateInputHecTokenByIdAndTokenRequest$Outbound,
  z.ZodTypeDef,
  UpdateInputHecTokenByIdAndTokenRequest
> = z.object({
  id: z.string(),
  token: z.string(),
  updateHecTokenRequest: models.UpdateHecTokenRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateHecTokenRequest: "UpdateHecTokenRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInputHecTokenByIdAndTokenRequest$ {
  /** @deprecated use `UpdateInputHecTokenByIdAndTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInputHecTokenByIdAndTokenRequest$inboundSchema;
  /** @deprecated use `UpdateInputHecTokenByIdAndTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInputHecTokenByIdAndTokenRequest$outboundSchema;
  /** @deprecated use `UpdateInputHecTokenByIdAndTokenRequest$Outbound` instead. */
  export type Outbound = UpdateInputHecTokenByIdAndTokenRequest$Outbound;
}

export function updateInputHecTokenByIdAndTokenRequestToJSON(
  updateInputHecTokenByIdAndTokenRequest:
    UpdateInputHecTokenByIdAndTokenRequest,
): string {
  return JSON.stringify(
    UpdateInputHecTokenByIdAndTokenRequest$outboundSchema.parse(
      updateInputHecTokenByIdAndTokenRequest,
    ),
  );
}

export function updateInputHecTokenByIdAndTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInputHecTokenByIdAndTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInputHecTokenByIdAndTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInputHecTokenByIdAndTokenRequest' from JSON`,
  );
}

/** @internal */
export const UpdateInputHecTokenByIdAndTokenResponse$inboundSchema: z.ZodType<
  UpdateInputHecTokenByIdAndTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(z.record(z.any())).optional(),
});

/** @internal */
export type UpdateInputHecTokenByIdAndTokenResponse$Outbound = {
  count?: number | undefined;
  items?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const UpdateInputHecTokenByIdAndTokenResponse$outboundSchema: z.ZodType<
  UpdateInputHecTokenByIdAndTokenResponse$Outbound,
  z.ZodTypeDef,
  UpdateInputHecTokenByIdAndTokenResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInputHecTokenByIdAndTokenResponse$ {
  /** @deprecated use `UpdateInputHecTokenByIdAndTokenResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateInputHecTokenByIdAndTokenResponse$inboundSchema;
  /** @deprecated use `UpdateInputHecTokenByIdAndTokenResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateInputHecTokenByIdAndTokenResponse$outboundSchema;
  /** @deprecated use `UpdateInputHecTokenByIdAndTokenResponse$Outbound` instead. */
  export type Outbound = UpdateInputHecTokenByIdAndTokenResponse$Outbound;
}

export function updateInputHecTokenByIdAndTokenResponseToJSON(
  updateInputHecTokenByIdAndTokenResponse:
    UpdateInputHecTokenByIdAndTokenResponse,
): string {
  return JSON.stringify(
    UpdateInputHecTokenByIdAndTokenResponse$outboundSchema.parse(
      updateInputHecTokenByIdAndTokenResponse,
    ),
  );
}

export function updateInputHecTokenByIdAndTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateInputHecTokenByIdAndTokenResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateInputHecTokenByIdAndTokenResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateInputHecTokenByIdAndTokenResponse' from JSON`,
  );
}
