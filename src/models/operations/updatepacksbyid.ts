/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdatePacksByIdRequest = {
  /**
   * The <code>id</code> of the Pack to upgrade.
   */
  id: string;
  /**
   * body string required Pack source
   */
  source?: string | undefined;
  /**
   * body boolean optional Only upgrade to minor/patch versions
   */
  minor?: string | undefined;
  /**
   * body string optional Specify a branch, tag or a semver spec
   */
  spec?: string | undefined;
};

/**
 * a list of PackInfo objects
 */
export type UpdatePacksByIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.PackInfo> | undefined;
};

/** @internal */
export const UpdatePacksByIdRequest$inboundSchema: z.ZodType<
  UpdatePacksByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  source: z.string().optional(),
  minor: z.string().optional(),
  spec: z.string().optional(),
});

/** @internal */
export type UpdatePacksByIdRequest$Outbound = {
  id: string;
  source?: string | undefined;
  minor?: string | undefined;
  spec?: string | undefined;
};

/** @internal */
export const UpdatePacksByIdRequest$outboundSchema: z.ZodType<
  UpdatePacksByIdRequest$Outbound,
  z.ZodTypeDef,
  UpdatePacksByIdRequest
> = z.object({
  id: z.string(),
  source: z.string().optional(),
  minor: z.string().optional(),
  spec: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePacksByIdRequest$ {
  /** @deprecated use `UpdatePacksByIdRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePacksByIdRequest$inboundSchema;
  /** @deprecated use `UpdatePacksByIdRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePacksByIdRequest$outboundSchema;
  /** @deprecated use `UpdatePacksByIdRequest$Outbound` instead. */
  export type Outbound = UpdatePacksByIdRequest$Outbound;
}

export function updatePacksByIdRequestToJSON(
  updatePacksByIdRequest: UpdatePacksByIdRequest,
): string {
  return JSON.stringify(
    UpdatePacksByIdRequest$outboundSchema.parse(updatePacksByIdRequest),
  );
}

export function updatePacksByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePacksByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePacksByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePacksByIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePacksByIdResponse$inboundSchema: z.ZodType<
  UpdatePacksByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.PackInfo$inboundSchema).optional(),
});

/** @internal */
export type UpdatePacksByIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.PackInfo$Outbound> | undefined;
};

/** @internal */
export const UpdatePacksByIdResponse$outboundSchema: z.ZodType<
  UpdatePacksByIdResponse$Outbound,
  z.ZodTypeDef,
  UpdatePacksByIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.PackInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePacksByIdResponse$ {
  /** @deprecated use `UpdatePacksByIdResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePacksByIdResponse$inboundSchema;
  /** @deprecated use `UpdatePacksByIdResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePacksByIdResponse$outboundSchema;
  /** @deprecated use `UpdatePacksByIdResponse$Outbound` instead. */
  export type Outbound = UpdatePacksByIdResponse$Outbound;
}

export function updatePacksByIdResponseToJSON(
  updatePacksByIdResponse: UpdatePacksByIdResponse,
): string {
  return JSON.stringify(
    UpdatePacksByIdResponse$outboundSchema.parse(updatePacksByIdResponse),
  );
}

export function updatePacksByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePacksByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePacksByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePacksByIdResponse' from JSON`,
  );
}
