/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMasterWorkerEntryRequest = {
  /**
   * Filter expression evaluated against nodes
   */
  filterExp?: string | undefined;
};

/**
 * a list of number objects
 */
export type GetMasterWorkerEntryResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<number> | undefined;
};

/** @internal */
export const GetMasterWorkerEntryRequest$inboundSchema: z.ZodType<
  GetMasterWorkerEntryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filterExp: z.string().optional(),
});

/** @internal */
export type GetMasterWorkerEntryRequest$Outbound = {
  filterExp?: string | undefined;
};

/** @internal */
export const GetMasterWorkerEntryRequest$outboundSchema: z.ZodType<
  GetMasterWorkerEntryRequest$Outbound,
  z.ZodTypeDef,
  GetMasterWorkerEntryRequest
> = z.object({
  filterExp: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMasterWorkerEntryRequest$ {
  /** @deprecated use `GetMasterWorkerEntryRequest$inboundSchema` instead. */
  export const inboundSchema = GetMasterWorkerEntryRequest$inboundSchema;
  /** @deprecated use `GetMasterWorkerEntryRequest$outboundSchema` instead. */
  export const outboundSchema = GetMasterWorkerEntryRequest$outboundSchema;
  /** @deprecated use `GetMasterWorkerEntryRequest$Outbound` instead. */
  export type Outbound = GetMasterWorkerEntryRequest$Outbound;
}

export function getMasterWorkerEntryRequestToJSON(
  getMasterWorkerEntryRequest: GetMasterWorkerEntryRequest,
): string {
  return JSON.stringify(
    GetMasterWorkerEntryRequest$outboundSchema.parse(
      getMasterWorkerEntryRequest,
    ),
  );
}

export function getMasterWorkerEntryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMasterWorkerEntryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMasterWorkerEntryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMasterWorkerEntryRequest' from JSON`,
  );
}

/** @internal */
export const GetMasterWorkerEntryResponse$inboundSchema: z.ZodType<
  GetMasterWorkerEntryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(z.number()).optional(),
});

/** @internal */
export type GetMasterWorkerEntryResponse$Outbound = {
  count?: number | undefined;
  items?: Array<number> | undefined;
};

/** @internal */
export const GetMasterWorkerEntryResponse$outboundSchema: z.ZodType<
  GetMasterWorkerEntryResponse$Outbound,
  z.ZodTypeDef,
  GetMasterWorkerEntryResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMasterWorkerEntryResponse$ {
  /** @deprecated use `GetMasterWorkerEntryResponse$inboundSchema` instead. */
  export const inboundSchema = GetMasterWorkerEntryResponse$inboundSchema;
  /** @deprecated use `GetMasterWorkerEntryResponse$outboundSchema` instead. */
  export const outboundSchema = GetMasterWorkerEntryResponse$outboundSchema;
  /** @deprecated use `GetMasterWorkerEntryResponse$Outbound` instead. */
  export type Outbound = GetMasterWorkerEntryResponse$Outbound;
}

export function getMasterWorkerEntryResponseToJSON(
  getMasterWorkerEntryResponse: GetMasterWorkerEntryResponse,
): string {
  return JSON.stringify(
    GetMasterWorkerEntryResponse$outboundSchema.parse(
      getMasterWorkerEntryResponse,
    ),
  );
}

export function getMasterWorkerEntryResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetMasterWorkerEntryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMasterWorkerEntryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMasterWorkerEntryResponse' from JSON`,
  );
}
