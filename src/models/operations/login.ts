/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type LoginResponse = {
  headers: { [k: string]: Array<string> };
  result: models.AuthToken;
};

/** @internal */
export const LoginResponse$inboundSchema: z.ZodType<
  LoginResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: models.AuthToken$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type LoginResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.AuthToken$Outbound;
};

/** @internal */
export const LoginResponse$outboundSchema: z.ZodType<
  LoginResponse$Outbound,
  z.ZodTypeDef,
  LoginResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: models.AuthToken$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LoginResponse$ {
  /** @deprecated use `LoginResponse$inboundSchema` instead. */
  export const inboundSchema = LoginResponse$inboundSchema;
  /** @deprecated use `LoginResponse$outboundSchema` instead. */
  export const outboundSchema = LoginResponse$outboundSchema;
  /** @deprecated use `LoginResponse$Outbound` instead. */
  export type Outbound = LoginResponse$Outbound;
}

export function loginResponseToJSON(loginResponse: LoginResponse): string {
  return JSON.stringify(LoginResponse$outboundSchema.parse(loginResponse));
}

export function loginResponseFromJSON(
  jsonString: string,
): SafeParseResult<LoginResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LoginResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LoginResponse' from JSON`,
  );
}
