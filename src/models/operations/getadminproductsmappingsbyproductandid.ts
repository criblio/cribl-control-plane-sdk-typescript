/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetAdminProductsMappingsByProductAndIdRequest = {
  /**
   * Name of the Cribl product to get the Mappings for
   */
  product: models.ProductsCore;
  /**
   * The <code>id</code> of the Worker Group or Edge Fleet Mapping Ruleset to get
   */
  id: string;
};

/**
 * a list of MappingRuleset objects
 */
export type GetAdminProductsMappingsByProductAndIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.MappingRuleset> | undefined;
};

/** @internal */
export const GetAdminProductsMappingsByProductAndIdRequest$inboundSchema:
  z.ZodType<
    GetAdminProductsMappingsByProductAndIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    product: models.ProductsCore$inboundSchema,
    id: z.string(),
  });

/** @internal */
export type GetAdminProductsMappingsByProductAndIdRequest$Outbound = {
  product: string;
  id: string;
};

/** @internal */
export const GetAdminProductsMappingsByProductAndIdRequest$outboundSchema:
  z.ZodType<
    GetAdminProductsMappingsByProductAndIdRequest$Outbound,
    z.ZodTypeDef,
    GetAdminProductsMappingsByProductAndIdRequest
  > = z.object({
    product: models.ProductsCore$outboundSchema,
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAdminProductsMappingsByProductAndIdRequest$ {
  /** @deprecated use `GetAdminProductsMappingsByProductAndIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetAdminProductsMappingsByProductAndIdRequest$inboundSchema;
  /** @deprecated use `GetAdminProductsMappingsByProductAndIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetAdminProductsMappingsByProductAndIdRequest$outboundSchema;
  /** @deprecated use `GetAdminProductsMappingsByProductAndIdRequest$Outbound` instead. */
  export type Outbound = GetAdminProductsMappingsByProductAndIdRequest$Outbound;
}

export function getAdminProductsMappingsByProductAndIdRequestToJSON(
  getAdminProductsMappingsByProductAndIdRequest:
    GetAdminProductsMappingsByProductAndIdRequest,
): string {
  return JSON.stringify(
    GetAdminProductsMappingsByProductAndIdRequest$outboundSchema.parse(
      getAdminProductsMappingsByProductAndIdRequest,
    ),
  );
}

export function getAdminProductsMappingsByProductAndIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAdminProductsMappingsByProductAndIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAdminProductsMappingsByProductAndIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAdminProductsMappingsByProductAndIdRequest' from JSON`,
  );
}

/** @internal */
export const GetAdminProductsMappingsByProductAndIdResponse$inboundSchema:
  z.ZodType<
    GetAdminProductsMappingsByProductAndIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.MappingRuleset$inboundSchema).optional(),
  });

/** @internal */
export type GetAdminProductsMappingsByProductAndIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.MappingRuleset$Outbound> | undefined;
};

/** @internal */
export const GetAdminProductsMappingsByProductAndIdResponse$outboundSchema:
  z.ZodType<
    GetAdminProductsMappingsByProductAndIdResponse$Outbound,
    z.ZodTypeDef,
    GetAdminProductsMappingsByProductAndIdResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.MappingRuleset$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAdminProductsMappingsByProductAndIdResponse$ {
  /** @deprecated use `GetAdminProductsMappingsByProductAndIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetAdminProductsMappingsByProductAndIdResponse$inboundSchema;
  /** @deprecated use `GetAdminProductsMappingsByProductAndIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetAdminProductsMappingsByProductAndIdResponse$outboundSchema;
  /** @deprecated use `GetAdminProductsMappingsByProductAndIdResponse$Outbound` instead. */
  export type Outbound =
    GetAdminProductsMappingsByProductAndIdResponse$Outbound;
}

export function getAdminProductsMappingsByProductAndIdResponseToJSON(
  getAdminProductsMappingsByProductAndIdResponse:
    GetAdminProductsMappingsByProductAndIdResponse,
): string {
  return JSON.stringify(
    GetAdminProductsMappingsByProductAndIdResponse$outboundSchema.parse(
      getAdminProductsMappingsByProductAndIdResponse,
    ),
  );
}

export function getAdminProductsMappingsByProductAndIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAdminProductsMappingsByProductAndIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAdminProductsMappingsByProductAndIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAdminProductsMappingsByProductAndIdResponse' from JSON`,
  );
}
