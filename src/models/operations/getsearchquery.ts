/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSearchQueryRequest = {
  /**
   * Saved query ID
   */
  queryId?: string | undefined;
  /**
   * Job ID
   */
  jobId?: string | undefined;
  /**
   * Search query string
   */
  query?: string | undefined;
  /**
   * Beginning of query time range, inclusive, in a relative time format or seconds
   */
  earliest?: number | undefined;
  /**
   * End of query time range, exclusive, in a relative time format or seconds
   */
  latest?: number | undefined;
  /**
   * Number between 0-1 to sample events during search
   */
  sampleRate?: number | undefined;
  /**
   * When true, forces to run the scheduled query
   */
  force?: boolean | undefined;
  /**
   * Pagination offset
   */
  offset?: number | undefined;
  /**
   * Pagination limit - maximum number of events to return
   */
  limit?: number | undefined;
};

/** @internal */
export const GetSearchQueryRequest$inboundSchema: z.ZodType<
  GetSearchQueryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  queryId: z.string().optional(),
  jobId: z.string().optional(),
  query: z.string().optional(),
  earliest: z.number().optional(),
  latest: z.number().optional(),
  sampleRate: z.number().optional(),
  force: z.boolean().optional(),
  offset: z.number().optional(),
  limit: z.number().optional(),
});

/** @internal */
export type GetSearchQueryRequest$Outbound = {
  queryId?: string | undefined;
  jobId?: string | undefined;
  query?: string | undefined;
  earliest?: number | undefined;
  latest?: number | undefined;
  sampleRate?: number | undefined;
  force?: boolean | undefined;
  offset?: number | undefined;
  limit?: number | undefined;
};

/** @internal */
export const GetSearchQueryRequest$outboundSchema: z.ZodType<
  GetSearchQueryRequest$Outbound,
  z.ZodTypeDef,
  GetSearchQueryRequest
> = z.object({
  queryId: z.string().optional(),
  jobId: z.string().optional(),
  query: z.string().optional(),
  earliest: z.number().optional(),
  latest: z.number().optional(),
  sampleRate: z.number().optional(),
  force: z.boolean().optional(),
  offset: z.number().optional(),
  limit: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSearchQueryRequest$ {
  /** @deprecated use `GetSearchQueryRequest$inboundSchema` instead. */
  export const inboundSchema = GetSearchQueryRequest$inboundSchema;
  /** @deprecated use `GetSearchQueryRequest$outboundSchema` instead. */
  export const outboundSchema = GetSearchQueryRequest$outboundSchema;
  /** @deprecated use `GetSearchQueryRequest$Outbound` instead. */
  export type Outbound = GetSearchQueryRequest$Outbound;
}

export function getSearchQueryRequestToJSON(
  getSearchQueryRequest: GetSearchQueryRequest,
): string {
  return JSON.stringify(
    GetSearchQueryRequest$outboundSchema.parse(getSearchQueryRequest),
  );
}

export function getSearchQueryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSearchQueryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSearchQueryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSearchQueryRequest' from JSON`,
  );
}
