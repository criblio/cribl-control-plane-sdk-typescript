/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateSearchDashboardSearchByPackAndIdRequest = {
  /**
   * Unique ID to PATCH
   */
  id: string;
  /**
   * pack ID to PATCH
   */
  pack: string;
  /**
   * SearchDashboard object to be updated
   */
  searchDashboard: models.SearchDashboard;
};

/**
 * a list of SearchDashboard objects
 */
export type UpdateSearchDashboardSearchByPackAndIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.SearchDashboard> | undefined;
};

/** @internal */
export const UpdateSearchDashboardSearchByPackAndIdRequest$inboundSchema:
  z.ZodType<
    UpdateSearchDashboardSearchByPackAndIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    pack: z.string(),
    SearchDashboard: models.SearchDashboard$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "SearchDashboard": "searchDashboard",
    });
  });

/** @internal */
export type UpdateSearchDashboardSearchByPackAndIdRequest$Outbound = {
  id: string;
  pack: string;
  SearchDashboard: models.SearchDashboard$Outbound;
};

/** @internal */
export const UpdateSearchDashboardSearchByPackAndIdRequest$outboundSchema:
  z.ZodType<
    UpdateSearchDashboardSearchByPackAndIdRequest$Outbound,
    z.ZodTypeDef,
    UpdateSearchDashboardSearchByPackAndIdRequest
  > = z.object({
    id: z.string(),
    pack: z.string(),
    searchDashboard: models.SearchDashboard$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      searchDashboard: "SearchDashboard",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSearchDashboardSearchByPackAndIdRequest$ {
  /** @deprecated use `UpdateSearchDashboardSearchByPackAndIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSearchDashboardSearchByPackAndIdRequest$inboundSchema;
  /** @deprecated use `UpdateSearchDashboardSearchByPackAndIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSearchDashboardSearchByPackAndIdRequest$outboundSchema;
  /** @deprecated use `UpdateSearchDashboardSearchByPackAndIdRequest$Outbound` instead. */
  export type Outbound = UpdateSearchDashboardSearchByPackAndIdRequest$Outbound;
}

export function updateSearchDashboardSearchByPackAndIdRequestToJSON(
  updateSearchDashboardSearchByPackAndIdRequest:
    UpdateSearchDashboardSearchByPackAndIdRequest,
): string {
  return JSON.stringify(
    UpdateSearchDashboardSearchByPackAndIdRequest$outboundSchema.parse(
      updateSearchDashboardSearchByPackAndIdRequest,
    ),
  );
}

export function updateSearchDashboardSearchByPackAndIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSearchDashboardSearchByPackAndIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSearchDashboardSearchByPackAndIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSearchDashboardSearchByPackAndIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSearchDashboardSearchByPackAndIdResponse$inboundSchema:
  z.ZodType<
    UpdateSearchDashboardSearchByPackAndIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.SearchDashboard$inboundSchema).optional(),
  });

/** @internal */
export type UpdateSearchDashboardSearchByPackAndIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.SearchDashboard$Outbound> | undefined;
};

/** @internal */
export const UpdateSearchDashboardSearchByPackAndIdResponse$outboundSchema:
  z.ZodType<
    UpdateSearchDashboardSearchByPackAndIdResponse$Outbound,
    z.ZodTypeDef,
    UpdateSearchDashboardSearchByPackAndIdResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.SearchDashboard$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSearchDashboardSearchByPackAndIdResponse$ {
  /** @deprecated use `UpdateSearchDashboardSearchByPackAndIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSearchDashboardSearchByPackAndIdResponse$inboundSchema;
  /** @deprecated use `UpdateSearchDashboardSearchByPackAndIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSearchDashboardSearchByPackAndIdResponse$outboundSchema;
  /** @deprecated use `UpdateSearchDashboardSearchByPackAndIdResponse$Outbound` instead. */
  export type Outbound =
    UpdateSearchDashboardSearchByPackAndIdResponse$Outbound;
}

export function updateSearchDashboardSearchByPackAndIdResponseToJSON(
  updateSearchDashboardSearchByPackAndIdResponse:
    UpdateSearchDashboardSearchByPackAndIdResponse,
): string {
  return JSON.stringify(
    UpdateSearchDashboardSearchByPackAndIdResponse$outboundSchema.parse(
      updateSearchDashboardSearchByPackAndIdResponse,
    ),
  );
}

export function updateSearchDashboardSearchByPackAndIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSearchDashboardSearchByPackAndIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSearchDashboardSearchByPackAndIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSearchDashboardSearchByPackAndIdResponse' from JSON`,
  );
}
