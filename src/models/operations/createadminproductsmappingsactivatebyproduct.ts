/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateAdminProductsMappingsActivateByProductRequest = {
  /**
   * Name of the Cribl product to activate the Mapping Ruleset for
   */
  product: models.ProductsCore;
  /**
   * RulesetId object
   */
  rulesetId: models.RulesetId;
};

/**
 * The <code>id</code> of the Mapping Ruleset that has been successfully activated
 */
export type CreateAdminProductsMappingsActivateByProductResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.RulesetId> | undefined;
};

/** @internal */
export const CreateAdminProductsMappingsActivateByProductRequest$inboundSchema:
  z.ZodType<
    CreateAdminProductsMappingsActivateByProductRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    product: models.ProductsCore$inboundSchema,
    RulesetId: models.RulesetId$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "RulesetId": "rulesetId",
    });
  });

/** @internal */
export type CreateAdminProductsMappingsActivateByProductRequest$Outbound = {
  product: string;
  RulesetId: models.RulesetId$Outbound;
};

/** @internal */
export const CreateAdminProductsMappingsActivateByProductRequest$outboundSchema:
  z.ZodType<
    CreateAdminProductsMappingsActivateByProductRequest$Outbound,
    z.ZodTypeDef,
    CreateAdminProductsMappingsActivateByProductRequest
  > = z.object({
    product: models.ProductsCore$outboundSchema,
    rulesetId: models.RulesetId$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      rulesetId: "RulesetId",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAdminProductsMappingsActivateByProductRequest$ {
  /** @deprecated use `CreateAdminProductsMappingsActivateByProductRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateAdminProductsMappingsActivateByProductRequest$inboundSchema;
  /** @deprecated use `CreateAdminProductsMappingsActivateByProductRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateAdminProductsMappingsActivateByProductRequest$outboundSchema;
  /** @deprecated use `CreateAdminProductsMappingsActivateByProductRequest$Outbound` instead. */
  export type Outbound =
    CreateAdminProductsMappingsActivateByProductRequest$Outbound;
}

export function createAdminProductsMappingsActivateByProductRequestToJSON(
  createAdminProductsMappingsActivateByProductRequest:
    CreateAdminProductsMappingsActivateByProductRequest,
): string {
  return JSON.stringify(
    CreateAdminProductsMappingsActivateByProductRequest$outboundSchema.parse(
      createAdminProductsMappingsActivateByProductRequest,
    ),
  );
}

export function createAdminProductsMappingsActivateByProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAdminProductsMappingsActivateByProductRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAdminProductsMappingsActivateByProductRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAdminProductsMappingsActivateByProductRequest' from JSON`,
  );
}

/** @internal */
export const CreateAdminProductsMappingsActivateByProductResponse$inboundSchema:
  z.ZodType<
    CreateAdminProductsMappingsActivateByProductResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.RulesetId$inboundSchema).optional(),
  });

/** @internal */
export type CreateAdminProductsMappingsActivateByProductResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.RulesetId$Outbound> | undefined;
};

/** @internal */
export const CreateAdminProductsMappingsActivateByProductResponse$outboundSchema:
  z.ZodType<
    CreateAdminProductsMappingsActivateByProductResponse$Outbound,
    z.ZodTypeDef,
    CreateAdminProductsMappingsActivateByProductResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.RulesetId$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAdminProductsMappingsActivateByProductResponse$ {
  /** @deprecated use `CreateAdminProductsMappingsActivateByProductResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateAdminProductsMappingsActivateByProductResponse$inboundSchema;
  /** @deprecated use `CreateAdminProductsMappingsActivateByProductResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateAdminProductsMappingsActivateByProductResponse$outboundSchema;
  /** @deprecated use `CreateAdminProductsMappingsActivateByProductResponse$Outbound` instead. */
  export type Outbound =
    CreateAdminProductsMappingsActivateByProductResponse$Outbound;
}

export function createAdminProductsMappingsActivateByProductResponseToJSON(
  createAdminProductsMappingsActivateByProductResponse:
    CreateAdminProductsMappingsActivateByProductResponse,
): string {
  return JSON.stringify(
    CreateAdminProductsMappingsActivateByProductResponse$outboundSchema.parse(
      createAdminProductsMappingsActivateByProductResponse,
    ),
  );
}

export function createAdminProductsMappingsActivateByProductResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAdminProductsMappingsActivateByProductResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAdminProductsMappingsActivateByProductResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAdminProductsMappingsActivateByProductResponse' from JSON`,
  );
}
