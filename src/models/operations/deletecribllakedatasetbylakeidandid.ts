/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeleteCriblLakeDatasetByLakeIdAndIdRequest = {
  /**
   * The <code>id</code> of the Lake that contains the Lake Dataset to delete.
   */
  lakeId: string;
  /**
   * The <code>id</code> of the Lake Dataset to delete.
   */
  id: string;
};

/**
 * a list of CriblLakeDataset objects
 */
export type DeleteCriblLakeDatasetByLakeIdAndIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.CriblLakeDataset> | undefined;
};

/** @internal */
export const DeleteCriblLakeDatasetByLakeIdAndIdRequest$inboundSchema:
  z.ZodType<DeleteCriblLakeDatasetByLakeIdAndIdRequest, z.ZodTypeDef, unknown> =
    z.object({
      lakeId: z.string(),
      id: z.string(),
    });

/** @internal */
export type DeleteCriblLakeDatasetByLakeIdAndIdRequest$Outbound = {
  lakeId: string;
  id: string;
};

/** @internal */
export const DeleteCriblLakeDatasetByLakeIdAndIdRequest$outboundSchema:
  z.ZodType<
    DeleteCriblLakeDatasetByLakeIdAndIdRequest$Outbound,
    z.ZodTypeDef,
    DeleteCriblLakeDatasetByLakeIdAndIdRequest
  > = z.object({
    lakeId: z.string(),
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCriblLakeDatasetByLakeIdAndIdRequest$ {
  /** @deprecated use `DeleteCriblLakeDatasetByLakeIdAndIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteCriblLakeDatasetByLakeIdAndIdRequest$inboundSchema;
  /** @deprecated use `DeleteCriblLakeDatasetByLakeIdAndIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteCriblLakeDatasetByLakeIdAndIdRequest$outboundSchema;
  /** @deprecated use `DeleteCriblLakeDatasetByLakeIdAndIdRequest$Outbound` instead. */
  export type Outbound = DeleteCriblLakeDatasetByLakeIdAndIdRequest$Outbound;
}

export function deleteCriblLakeDatasetByLakeIdAndIdRequestToJSON(
  deleteCriblLakeDatasetByLakeIdAndIdRequest:
    DeleteCriblLakeDatasetByLakeIdAndIdRequest,
): string {
  return JSON.stringify(
    DeleteCriblLakeDatasetByLakeIdAndIdRequest$outboundSchema.parse(
      deleteCriblLakeDatasetByLakeIdAndIdRequest,
    ),
  );
}

export function deleteCriblLakeDatasetByLakeIdAndIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteCriblLakeDatasetByLakeIdAndIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteCriblLakeDatasetByLakeIdAndIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteCriblLakeDatasetByLakeIdAndIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteCriblLakeDatasetByLakeIdAndIdResponse$inboundSchema:
  z.ZodType<
    DeleteCriblLakeDatasetByLakeIdAndIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.CriblLakeDataset$inboundSchema).optional(),
  });

/** @internal */
export type DeleteCriblLakeDatasetByLakeIdAndIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.CriblLakeDataset$Outbound> | undefined;
};

/** @internal */
export const DeleteCriblLakeDatasetByLakeIdAndIdResponse$outboundSchema:
  z.ZodType<
    DeleteCriblLakeDatasetByLakeIdAndIdResponse$Outbound,
    z.ZodTypeDef,
    DeleteCriblLakeDatasetByLakeIdAndIdResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.CriblLakeDataset$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCriblLakeDatasetByLakeIdAndIdResponse$ {
  /** @deprecated use `DeleteCriblLakeDatasetByLakeIdAndIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    DeleteCriblLakeDatasetByLakeIdAndIdResponse$inboundSchema;
  /** @deprecated use `DeleteCriblLakeDatasetByLakeIdAndIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteCriblLakeDatasetByLakeIdAndIdResponse$outboundSchema;
  /** @deprecated use `DeleteCriblLakeDatasetByLakeIdAndIdResponse$Outbound` instead. */
  export type Outbound = DeleteCriblLakeDatasetByLakeIdAndIdResponse$Outbound;
}

export function deleteCriblLakeDatasetByLakeIdAndIdResponseToJSON(
  deleteCriblLakeDatasetByLakeIdAndIdResponse:
    DeleteCriblLakeDatasetByLakeIdAndIdResponse,
): string {
  return JSON.stringify(
    DeleteCriblLakeDatasetByLakeIdAndIdResponse$outboundSchema.parse(
      deleteCriblLakeDatasetByLakeIdAndIdResponse,
    ),
  );
}

export function deleteCriblLakeDatasetByLakeIdAndIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteCriblLakeDatasetByLakeIdAndIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteCriblLakeDatasetByLakeIdAndIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteCriblLakeDatasetByLakeIdAndIdResponse' from JSON`,
  );
}
