/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetVersionShowRequest = {
  /**
   * The Git commit hash to retrieve the diff and log message for.
   */
  commit?: string | undefined;
  /**
   * The <code>id</code> of the Worker Group or Edge Fleet to get the diff and log message for.
   */
  groupId?: string | undefined;
  /**
   * The relative path of the file to get the diff and log message for.
   */
  filename?: string | undefined;
  /**
   * Number of lines of the diff to return. Default is 1000. Set to <code>0</code> to return the full diff, regardless of the number of lines.
   */
  diffLineLimit?: number | undefined;
};

/**
 * a list of GitShowResult objects
 */
export type GetVersionShowResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.GitShowResult> | undefined;
};

/** @internal */
export const GetVersionShowRequest$inboundSchema: z.ZodType<
  GetVersionShowRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  commit: z.string().optional(),
  groupId: z.string().optional(),
  filename: z.string().optional(),
  diffLineLimit: z.number().optional(),
});

/** @internal */
export type GetVersionShowRequest$Outbound = {
  commit?: string | undefined;
  groupId?: string | undefined;
  filename?: string | undefined;
  diffLineLimit?: number | undefined;
};

/** @internal */
export const GetVersionShowRequest$outboundSchema: z.ZodType<
  GetVersionShowRequest$Outbound,
  z.ZodTypeDef,
  GetVersionShowRequest
> = z.object({
  commit: z.string().optional(),
  groupId: z.string().optional(),
  filename: z.string().optional(),
  diffLineLimit: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVersionShowRequest$ {
  /** @deprecated use `GetVersionShowRequest$inboundSchema` instead. */
  export const inboundSchema = GetVersionShowRequest$inboundSchema;
  /** @deprecated use `GetVersionShowRequest$outboundSchema` instead. */
  export const outboundSchema = GetVersionShowRequest$outboundSchema;
  /** @deprecated use `GetVersionShowRequest$Outbound` instead. */
  export type Outbound = GetVersionShowRequest$Outbound;
}

export function getVersionShowRequestToJSON(
  getVersionShowRequest: GetVersionShowRequest,
): string {
  return JSON.stringify(
    GetVersionShowRequest$outboundSchema.parse(getVersionShowRequest),
  );
}

export function getVersionShowRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVersionShowRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVersionShowRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVersionShowRequest' from JSON`,
  );
}

/** @internal */
export const GetVersionShowResponse$inboundSchema: z.ZodType<
  GetVersionShowResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.GitShowResult$inboundSchema).optional(),
});

/** @internal */
export type GetVersionShowResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.GitShowResult$Outbound> | undefined;
};

/** @internal */
export const GetVersionShowResponse$outboundSchema: z.ZodType<
  GetVersionShowResponse$Outbound,
  z.ZodTypeDef,
  GetVersionShowResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.GitShowResult$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVersionShowResponse$ {
  /** @deprecated use `GetVersionShowResponse$inboundSchema` instead. */
  export const inboundSchema = GetVersionShowResponse$inboundSchema;
  /** @deprecated use `GetVersionShowResponse$outboundSchema` instead. */
  export const outboundSchema = GetVersionShowResponse$outboundSchema;
  /** @deprecated use `GetVersionShowResponse$Outbound` instead. */
  export type Outbound = GetVersionShowResponse$Outbound;
}

export function getVersionShowResponseToJSON(
  getVersionShowResponse: GetVersionShowResponse,
): string {
  return JSON.stringify(
    GetVersionShowResponse$outboundSchema.parse(getVersionShowResponse),
  );
}

export function getVersionShowResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetVersionShowResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVersionShowResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVersionShowResponse' from JSON`,
  );
}
