/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePacksRequest = {
  /**
   * the file to upload
   */
  filename?: string | undefined;
  /**
   * Gzip-compressed payload of the pack file
   */
  requestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/**
 * a list of any objects
 */
export type UpdatePacksResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const UpdatePacksRequest$inboundSchema: z.ZodType<
  UpdatePacksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filename: z.string().optional(),
  RequestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdatePacksRequest$Outbound = {
  filename?: string | undefined;
  RequestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const UpdatePacksRequest$outboundSchema: z.ZodType<
  UpdatePacksRequest$Outbound,
  z.ZodTypeDef,
  UpdatePacksRequest
> = z.object({
  filename: z.string().optional(),
  requestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePacksRequest$ {
  /** @deprecated use `UpdatePacksRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePacksRequest$inboundSchema;
  /** @deprecated use `UpdatePacksRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePacksRequest$outboundSchema;
  /** @deprecated use `UpdatePacksRequest$Outbound` instead. */
  export type Outbound = UpdatePacksRequest$Outbound;
}

export function updatePacksRequestToJSON(
  updatePacksRequest: UpdatePacksRequest,
): string {
  return JSON.stringify(
    UpdatePacksRequest$outboundSchema.parse(updatePacksRequest),
  );
}

export function updatePacksRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePacksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePacksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePacksRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePacksResponse$inboundSchema: z.ZodType<
  UpdatePacksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(z.record(z.any())).optional(),
});

/** @internal */
export type UpdatePacksResponse$Outbound = {
  count?: number | undefined;
  items?: Array<{ [k: string]: any }> | undefined;
};

/** @internal */
export const UpdatePacksResponse$outboundSchema: z.ZodType<
  UpdatePacksResponse$Outbound,
  z.ZodTypeDef,
  UpdatePacksResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePacksResponse$ {
  /** @deprecated use `UpdatePacksResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePacksResponse$inboundSchema;
  /** @deprecated use `UpdatePacksResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePacksResponse$outboundSchema;
  /** @deprecated use `UpdatePacksResponse$Outbound` instead. */
  export type Outbound = UpdatePacksResponse$Outbound;
}

export function updatePacksResponseToJSON(
  updatePacksResponse: UpdatePacksResponse,
): string {
  return JSON.stringify(
    UpdatePacksResponse$outboundSchema.parse(updatePacksResponse),
  );
}

export function updatePacksResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePacksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePacksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePacksResponse' from JSON`,
  );
}
