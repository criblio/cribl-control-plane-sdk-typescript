/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateCriblLakeDatasetByLakeIdAndIdRequest = {
  /**
   * The <code>id</code> of the Lake that contains the Lake Dataset to update.
   */
  lakeId: string;
  /**
   * The <code>id</code> of the Lake Dataset to update.
   */
  id: string;
  /**
   * CriblLakeDataset object
   */
  criblLakeDataset: models.CriblLakeDataset;
};

/**
 * a list of CriblLakeDataset objects
 */
export type UpdateCriblLakeDatasetByLakeIdAndIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.CriblLakeDataset> | undefined;
};

/** @internal */
export const UpdateCriblLakeDatasetByLakeIdAndIdRequest$inboundSchema:
  z.ZodType<UpdateCriblLakeDatasetByLakeIdAndIdRequest, z.ZodTypeDef, unknown> =
    z.object({
      lakeId: z.string(),
      id: z.string(),
      CriblLakeDataset: models.CriblLakeDataset$inboundSchema,
    }).transform((v) => {
      return remap$(v, {
        "CriblLakeDataset": "criblLakeDataset",
      });
    });

/** @internal */
export type UpdateCriblLakeDatasetByLakeIdAndIdRequest$Outbound = {
  lakeId: string;
  id: string;
  CriblLakeDataset: models.CriblLakeDataset$Outbound;
};

/** @internal */
export const UpdateCriblLakeDatasetByLakeIdAndIdRequest$outboundSchema:
  z.ZodType<
    UpdateCriblLakeDatasetByLakeIdAndIdRequest$Outbound,
    z.ZodTypeDef,
    UpdateCriblLakeDatasetByLakeIdAndIdRequest
  > = z.object({
    lakeId: z.string(),
    id: z.string(),
    criblLakeDataset: models.CriblLakeDataset$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      criblLakeDataset: "CriblLakeDataset",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCriblLakeDatasetByLakeIdAndIdRequest$ {
  /** @deprecated use `UpdateCriblLakeDatasetByLakeIdAndIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCriblLakeDatasetByLakeIdAndIdRequest$inboundSchema;
  /** @deprecated use `UpdateCriblLakeDatasetByLakeIdAndIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCriblLakeDatasetByLakeIdAndIdRequest$outboundSchema;
  /** @deprecated use `UpdateCriblLakeDatasetByLakeIdAndIdRequest$Outbound` instead. */
  export type Outbound = UpdateCriblLakeDatasetByLakeIdAndIdRequest$Outbound;
}

export function updateCriblLakeDatasetByLakeIdAndIdRequestToJSON(
  updateCriblLakeDatasetByLakeIdAndIdRequest:
    UpdateCriblLakeDatasetByLakeIdAndIdRequest,
): string {
  return JSON.stringify(
    UpdateCriblLakeDatasetByLakeIdAndIdRequest$outboundSchema.parse(
      updateCriblLakeDatasetByLakeIdAndIdRequest,
    ),
  );
}

export function updateCriblLakeDatasetByLakeIdAndIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateCriblLakeDatasetByLakeIdAndIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCriblLakeDatasetByLakeIdAndIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateCriblLakeDatasetByLakeIdAndIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCriblLakeDatasetByLakeIdAndIdResponse$inboundSchema:
  z.ZodType<
    UpdateCriblLakeDatasetByLakeIdAndIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.CriblLakeDataset$inboundSchema).optional(),
  });

/** @internal */
export type UpdateCriblLakeDatasetByLakeIdAndIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.CriblLakeDataset$Outbound> | undefined;
};

/** @internal */
export const UpdateCriblLakeDatasetByLakeIdAndIdResponse$outboundSchema:
  z.ZodType<
    UpdateCriblLakeDatasetByLakeIdAndIdResponse$Outbound,
    z.ZodTypeDef,
    UpdateCriblLakeDatasetByLakeIdAndIdResponse
  > = z.object({
    count: z.number().int().optional(),
    items: z.array(models.CriblLakeDataset$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCriblLakeDatasetByLakeIdAndIdResponse$ {
  /** @deprecated use `UpdateCriblLakeDatasetByLakeIdAndIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCriblLakeDatasetByLakeIdAndIdResponse$inboundSchema;
  /** @deprecated use `UpdateCriblLakeDatasetByLakeIdAndIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCriblLakeDatasetByLakeIdAndIdResponse$outboundSchema;
  /** @deprecated use `UpdateCriblLakeDatasetByLakeIdAndIdResponse$Outbound` instead. */
  export type Outbound = UpdateCriblLakeDatasetByLakeIdAndIdResponse$Outbound;
}

export function updateCriblLakeDatasetByLakeIdAndIdResponseToJSON(
  updateCriblLakeDatasetByLakeIdAndIdResponse:
    UpdateCriblLakeDatasetByLakeIdAndIdResponse,
): string {
  return JSON.stringify(
    UpdateCriblLakeDatasetByLakeIdAndIdResponse$outboundSchema.parse(
      updateCriblLakeDatasetByLakeIdAndIdResponse,
    ),
  );
}

export function updateCriblLakeDatasetByLakeIdAndIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateCriblLakeDatasetByLakeIdAndIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCriblLakeDatasetByLakeIdAndIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateCriblLakeDatasetByLakeIdAndIdResponse' from JSON`,
  );
}
