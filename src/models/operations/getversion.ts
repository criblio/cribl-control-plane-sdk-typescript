/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetVersionRequest = {
  /**
   * The <code>id</code> of the Worker Group or Edge Fleet to get the commit history for.
   */
  groupId?: string | undefined;
  /**
   * Maximum number of commits to return in the response for this request.
   */
  count?: number | undefined;
};

/**
 * a list of GitLogResult objects
 */
export type GetVersionResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.GitLogResult> | undefined;
};

/** @internal */
export const GetVersionRequest$inboundSchema: z.ZodType<
  GetVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupId: z.string().optional(),
  count: z.number().optional(),
});

/** @internal */
export type GetVersionRequest$Outbound = {
  groupId?: string | undefined;
  count?: number | undefined;
};

/** @internal */
export const GetVersionRequest$outboundSchema: z.ZodType<
  GetVersionRequest$Outbound,
  z.ZodTypeDef,
  GetVersionRequest
> = z.object({
  groupId: z.string().optional(),
  count: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVersionRequest$ {
  /** @deprecated use `GetVersionRequest$inboundSchema` instead. */
  export const inboundSchema = GetVersionRequest$inboundSchema;
  /** @deprecated use `GetVersionRequest$outboundSchema` instead. */
  export const outboundSchema = GetVersionRequest$outboundSchema;
  /** @deprecated use `GetVersionRequest$Outbound` instead. */
  export type Outbound = GetVersionRequest$Outbound;
}

export function getVersionRequestToJSON(
  getVersionRequest: GetVersionRequest,
): string {
  return JSON.stringify(
    GetVersionRequest$outboundSchema.parse(getVersionRequest),
  );
}

export function getVersionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVersionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVersionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVersionRequest' from JSON`,
  );
}

/** @internal */
export const GetVersionResponse$inboundSchema: z.ZodType<
  GetVersionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.GitLogResult$inboundSchema).optional(),
});

/** @internal */
export type GetVersionResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.GitLogResult$Outbound> | undefined;
};

/** @internal */
export const GetVersionResponse$outboundSchema: z.ZodType<
  GetVersionResponse$Outbound,
  z.ZodTypeDef,
  GetVersionResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.GitLogResult$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVersionResponse$ {
  /** @deprecated use `GetVersionResponse$inboundSchema` instead. */
  export const inboundSchema = GetVersionResponse$inboundSchema;
  /** @deprecated use `GetVersionResponse$outboundSchema` instead. */
  export const outboundSchema = GetVersionResponse$outboundSchema;
  /** @deprecated use `GetVersionResponse$Outbound` instead. */
  export type Outbound = GetVersionResponse$Outbound;
}

export function getVersionResponseToJSON(
  getVersionResponse: GetVersionResponse,
): string {
  return JSON.stringify(
    GetVersionResponse$outboundSchema.parse(getVersionResponse),
  );
}

export function getVersionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetVersionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVersionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVersionResponse' from JSON`,
  );
}
