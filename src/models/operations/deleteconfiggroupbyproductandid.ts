/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeleteConfigGroupByProductAndIdRequest = {
  /**
   * Name of the Cribl product to get the Worker Groups or Edge Fleets for.
   */
  product: models.ProductsCore;
  /**
   * The <code>id</code> of the Worker Group or Edge Fleet to delete.
   */
  id: string;
};

/**
 * a list of ConfigGroup objects
 */
export type DeleteConfigGroupByProductAndIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.ConfigGroup> | undefined;
};

/** @internal */
export const DeleteConfigGroupByProductAndIdRequest$inboundSchema: z.ZodType<
  DeleteConfigGroupByProductAndIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  product: models.ProductsCore$inboundSchema,
  id: z.string(),
});

/** @internal */
export type DeleteConfigGroupByProductAndIdRequest$Outbound = {
  product: string;
  id: string;
};

/** @internal */
export const DeleteConfigGroupByProductAndIdRequest$outboundSchema: z.ZodType<
  DeleteConfigGroupByProductAndIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteConfigGroupByProductAndIdRequest
> = z.object({
  product: models.ProductsCore$outboundSchema,
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConfigGroupByProductAndIdRequest$ {
  /** @deprecated use `DeleteConfigGroupByProductAndIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteConfigGroupByProductAndIdRequest$inboundSchema;
  /** @deprecated use `DeleteConfigGroupByProductAndIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteConfigGroupByProductAndIdRequest$outboundSchema;
  /** @deprecated use `DeleteConfigGroupByProductAndIdRequest$Outbound` instead. */
  export type Outbound = DeleteConfigGroupByProductAndIdRequest$Outbound;
}

export function deleteConfigGroupByProductAndIdRequestToJSON(
  deleteConfigGroupByProductAndIdRequest:
    DeleteConfigGroupByProductAndIdRequest,
): string {
  return JSON.stringify(
    DeleteConfigGroupByProductAndIdRequest$outboundSchema.parse(
      deleteConfigGroupByProductAndIdRequest,
    ),
  );
}

export function deleteConfigGroupByProductAndIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteConfigGroupByProductAndIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteConfigGroupByProductAndIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteConfigGroupByProductAndIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteConfigGroupByProductAndIdResponse$inboundSchema: z.ZodType<
  DeleteConfigGroupByProductAndIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$inboundSchema).optional(),
});

/** @internal */
export type DeleteConfigGroupByProductAndIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.ConfigGroup$Outbound> | undefined;
};

/** @internal */
export const DeleteConfigGroupByProductAndIdResponse$outboundSchema: z.ZodType<
  DeleteConfigGroupByProductAndIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteConfigGroupByProductAndIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConfigGroupByProductAndIdResponse$ {
  /** @deprecated use `DeleteConfigGroupByProductAndIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    DeleteConfigGroupByProductAndIdResponse$inboundSchema;
  /** @deprecated use `DeleteConfigGroupByProductAndIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteConfigGroupByProductAndIdResponse$outboundSchema;
  /** @deprecated use `DeleteConfigGroupByProductAndIdResponse$Outbound` instead. */
  export type Outbound = DeleteConfigGroupByProductAndIdResponse$Outbound;
}

export function deleteConfigGroupByProductAndIdResponseToJSON(
  deleteConfigGroupByProductAndIdResponse:
    DeleteConfigGroupByProductAndIdResponse,
): string {
  return JSON.stringify(
    DeleteConfigGroupByProductAndIdResponse$outboundSchema.parse(
      deleteConfigGroupByProductAndIdResponse,
    ),
  );
}

export function deleteConfigGroupByProductAndIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteConfigGroupByProductAndIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteConfigGroupByProductAndIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteConfigGroupByProductAndIdResponse' from JSON`,
  );
}
