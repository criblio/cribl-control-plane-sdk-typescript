/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListMasterWorkerEntryRequest = {
  /**
   * Filter expression evaluated against nodes
   */
  filterExp?: string | undefined;
  /**
   * Sorting object (JSON stringified) expression evaluated against nodes
   */
  sort?: string | undefined;
  /**
   * Sorting expression evaluated against nodes
   */
  sortExp?: string | undefined;
  /**
   * Maximum number of nodes to return
   */
  limit?: number | undefined;
  /**
   * Pagination offset
   */
  offset?: number | undefined;
  /**
   * Filter object (JSON stringified) to select nodes
   */
  filter?: string | undefined;
};

/**
 * a list of MasterWorkerEntry objects
 */
export type ListMasterWorkerEntryResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.MasterWorkerEntry> | undefined;
};

/** @internal */
export const ListMasterWorkerEntryRequest$inboundSchema: z.ZodType<
  ListMasterWorkerEntryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filterExp: z.string().optional(),
  sort: z.string().optional(),
  sortExp: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
});

/** @internal */
export type ListMasterWorkerEntryRequest$Outbound = {
  filterExp?: string | undefined;
  sort?: string | undefined;
  sortExp?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  filter?: string | undefined;
};

/** @internal */
export const ListMasterWorkerEntryRequest$outboundSchema: z.ZodType<
  ListMasterWorkerEntryRequest$Outbound,
  z.ZodTypeDef,
  ListMasterWorkerEntryRequest
> = z.object({
  filterExp: z.string().optional(),
  sort: z.string().optional(),
  sortExp: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  filter: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMasterWorkerEntryRequest$ {
  /** @deprecated use `ListMasterWorkerEntryRequest$inboundSchema` instead. */
  export const inboundSchema = ListMasterWorkerEntryRequest$inboundSchema;
  /** @deprecated use `ListMasterWorkerEntryRequest$outboundSchema` instead. */
  export const outboundSchema = ListMasterWorkerEntryRequest$outboundSchema;
  /** @deprecated use `ListMasterWorkerEntryRequest$Outbound` instead. */
  export type Outbound = ListMasterWorkerEntryRequest$Outbound;
}

export function listMasterWorkerEntryRequestToJSON(
  listMasterWorkerEntryRequest: ListMasterWorkerEntryRequest,
): string {
  return JSON.stringify(
    ListMasterWorkerEntryRequest$outboundSchema.parse(
      listMasterWorkerEntryRequest,
    ),
  );
}

export function listMasterWorkerEntryRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMasterWorkerEntryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMasterWorkerEntryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMasterWorkerEntryRequest' from JSON`,
  );
}

/** @internal */
export const ListMasterWorkerEntryResponse$inboundSchema: z.ZodType<
  ListMasterWorkerEntryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.MasterWorkerEntry$inboundSchema).optional(),
});

/** @internal */
export type ListMasterWorkerEntryResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.MasterWorkerEntry$Outbound> | undefined;
};

/** @internal */
export const ListMasterWorkerEntryResponse$outboundSchema: z.ZodType<
  ListMasterWorkerEntryResponse$Outbound,
  z.ZodTypeDef,
  ListMasterWorkerEntryResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.MasterWorkerEntry$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMasterWorkerEntryResponse$ {
  /** @deprecated use `ListMasterWorkerEntryResponse$inboundSchema` instead. */
  export const inboundSchema = ListMasterWorkerEntryResponse$inboundSchema;
  /** @deprecated use `ListMasterWorkerEntryResponse$outboundSchema` instead. */
  export const outboundSchema = ListMasterWorkerEntryResponse$outboundSchema;
  /** @deprecated use `ListMasterWorkerEntryResponse$Outbound` instead. */
  export type Outbound = ListMasterWorkerEntryResponse$Outbound;
}

export function listMasterWorkerEntryResponseToJSON(
  listMasterWorkerEntryResponse: ListMasterWorkerEntryResponse,
): string {
  return JSON.stringify(
    ListMasterWorkerEntryResponse$outboundSchema.parse(
      listMasterWorkerEntryResponse,
    ),
  );
}

export function listMasterWorkerEntryResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMasterWorkerEntryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMasterWorkerEntryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMasterWorkerEntryResponse' from JSON`,
  );
}
