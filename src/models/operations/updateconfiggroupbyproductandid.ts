/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Name of the Cribl product to get the Worker Groups or Edge Fleets for.
 */
export const UpdateConfigGroupByProductAndIdProduct = {
  Stream: "stream",
  Edge: "edge",
} as const;
/**
 * Name of the Cribl product to get the Worker Groups or Edge Fleets for.
 */
export type UpdateConfigGroupByProductAndIdProduct = ClosedEnum<
  typeof UpdateConfigGroupByProductAndIdProduct
>;

export type UpdateConfigGroupByProductAndIdRequest = {
  /**
   * Name of the Cribl product to get the Worker Groups or Edge Fleets for.
   */
  product: UpdateConfigGroupByProductAndIdProduct;
  /**
   * The <code>id</code> of the Worker Group or Edge Fleet to update.
   */
  id: string;
  /**
   * ConfigGroup object
   */
  configGroup: models.ConfigGroup;
};

/**
 * a list of ConfigGroup objects
 */
export type UpdateConfigGroupByProductAndIdResponse = {
  /**
   * number of items present in the items array
   */
  count?: number | undefined;
  items?: Array<models.ConfigGroup> | undefined;
};

/** @internal */
export const UpdateConfigGroupByProductAndIdProduct$inboundSchema:
  z.ZodNativeEnum<typeof UpdateConfigGroupByProductAndIdProduct> = z.nativeEnum(
    UpdateConfigGroupByProductAndIdProduct,
  );

/** @internal */
export const UpdateConfigGroupByProductAndIdProduct$outboundSchema:
  z.ZodNativeEnum<typeof UpdateConfigGroupByProductAndIdProduct> =
    UpdateConfigGroupByProductAndIdProduct$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConfigGroupByProductAndIdProduct$ {
  /** @deprecated use `UpdateConfigGroupByProductAndIdProduct$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConfigGroupByProductAndIdProduct$inboundSchema;
  /** @deprecated use `UpdateConfigGroupByProductAndIdProduct$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConfigGroupByProductAndIdProduct$outboundSchema;
}

/** @internal */
export const UpdateConfigGroupByProductAndIdRequest$inboundSchema: z.ZodType<
  UpdateConfigGroupByProductAndIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  product: UpdateConfigGroupByProductAndIdProduct$inboundSchema,
  id: z.string(),
  ConfigGroup: models.ConfigGroup$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ConfigGroup": "configGroup",
  });
});

/** @internal */
export type UpdateConfigGroupByProductAndIdRequest$Outbound = {
  product: string;
  id: string;
  ConfigGroup: models.ConfigGroup$Outbound;
};

/** @internal */
export const UpdateConfigGroupByProductAndIdRequest$outboundSchema: z.ZodType<
  UpdateConfigGroupByProductAndIdRequest$Outbound,
  z.ZodTypeDef,
  UpdateConfigGroupByProductAndIdRequest
> = z.object({
  product: UpdateConfigGroupByProductAndIdProduct$outboundSchema,
  id: z.string(),
  configGroup: models.ConfigGroup$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    configGroup: "ConfigGroup",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConfigGroupByProductAndIdRequest$ {
  /** @deprecated use `UpdateConfigGroupByProductAndIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConfigGroupByProductAndIdRequest$inboundSchema;
  /** @deprecated use `UpdateConfigGroupByProductAndIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConfigGroupByProductAndIdRequest$outboundSchema;
  /** @deprecated use `UpdateConfigGroupByProductAndIdRequest$Outbound` instead. */
  export type Outbound = UpdateConfigGroupByProductAndIdRequest$Outbound;
}

export function updateConfigGroupByProductAndIdRequestToJSON(
  updateConfigGroupByProductAndIdRequest:
    UpdateConfigGroupByProductAndIdRequest,
): string {
  return JSON.stringify(
    UpdateConfigGroupByProductAndIdRequest$outboundSchema.parse(
      updateConfigGroupByProductAndIdRequest,
    ),
  );
}

export function updateConfigGroupByProductAndIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConfigGroupByProductAndIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConfigGroupByProductAndIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConfigGroupByProductAndIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateConfigGroupByProductAndIdResponse$inboundSchema: z.ZodType<
  UpdateConfigGroupByProductAndIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$inboundSchema).optional(),
});

/** @internal */
export type UpdateConfigGroupByProductAndIdResponse$Outbound = {
  count?: number | undefined;
  items?: Array<models.ConfigGroup$Outbound> | undefined;
};

/** @internal */
export const UpdateConfigGroupByProductAndIdResponse$outboundSchema: z.ZodType<
  UpdateConfigGroupByProductAndIdResponse$Outbound,
  z.ZodTypeDef,
  UpdateConfigGroupByProductAndIdResponse
> = z.object({
  count: z.number().int().optional(),
  items: z.array(models.ConfigGroup$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConfigGroupByProductAndIdResponse$ {
  /** @deprecated use `UpdateConfigGroupByProductAndIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateConfigGroupByProductAndIdResponse$inboundSchema;
  /** @deprecated use `UpdateConfigGroupByProductAndIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateConfigGroupByProductAndIdResponse$outboundSchema;
  /** @deprecated use `UpdateConfigGroupByProductAndIdResponse$Outbound` instead. */
  export type Outbound = UpdateConfigGroupByProductAndIdResponse$Outbound;
}

export function updateConfigGroupByProductAndIdResponseToJSON(
  updateConfigGroupByProductAndIdResponse:
    UpdateConfigGroupByProductAndIdResponse,
): string {
  return JSON.stringify(
    UpdateConfigGroupByProductAndIdResponse$outboundSchema.parse(
      updateConfigGroupByProductAndIdResponse,
    ),
  );
}

export function updateConfigGroupByProductAndIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateConfigGroupByProductAndIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateConfigGroupByProductAndIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateConfigGroupByProductAndIdResponse' from JSON`,
  );
}
