/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputAppscopeType = {
  Appscope: "appscope",
} as const;
export type InputAppscopeType = ClosedEnum<typeof InputAppscopeType>;

export type InputAppscopeConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputAppscopeMode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputAppscopeMode = OpenEnum<typeof InputAppscopeMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputAppscopeCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputAppscopeCompression = OpenEnum<
  typeof InputAppscopeCompression
>;

export type InputAppscopePqControls = {};

export type InputAppscopePq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputAppscopeMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputAppscopeCompression | undefined;
  pqControls?: InputAppscopePqControls | undefined;
};

export type InputAppscopeMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type Allow = {
  /**
   * Specify the name of a process or family of processes.
   */
  procname: string;
  /**
   * Specify a string to substring-match against process command-line.
   */
  arg?: string | undefined;
  /**
   * Choose a config to apply to processes that match the process name and/or argument.
   */
  config: string;
};

export type InputAppscopeFilter = {
  /**
   * Specify processes that AppScope should be loaded into, and the config to use.
   */
  allow?: Array<Allow> | undefined;
  /**
   * To override the UNIX domain socket or address/port specified in General Settings (while leaving Authentication settings as is), enter a URL.
   */
  transportURL?: string | undefined;
};

export const InputAppscopeDataCompressionFormat = {
  None: "none",
  Gzip: "gzip",
} as const;
export type InputAppscopeDataCompressionFormat = OpenEnum<
  typeof InputAppscopeDataCompressionFormat
>;

export type InputAppscopePersistence = {
  /**
   * Spool events and metrics on disk for Cribl Edge and Search
   */
  enable?: boolean | undefined;
  /**
   * Time span for each file bucket
   */
  timeWindow?: string | undefined;
  /**
   * Maximum disk space allowed to be consumed (examples: 420MB, 4GB). When limit is reached, older data will be deleted.
   */
  maxDataSize?: string | undefined;
  /**
   * Maximum amount of time to retain data (examples: 2h, 4d). When limit is reached, older data will be deleted.
   */
  maxDataTime?: string | undefined;
  compress?: InputAppscopeDataCompressionFormat | undefined;
  /**
   * Path to use to write metrics. Defaults to $CRIBL_HOME/state/appscope
   */
  destPath?: string | undefined;
};

/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export const InputAppscopeAuthenticationMethod = {
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
 */
export type InputAppscopeAuthenticationMethod = OpenEnum<
  typeof InputAppscopeAuthenticationMethod
>;

export const InputAppscopeMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputAppscopeMinimumTLSVersion = OpenEnum<
  typeof InputAppscopeMinimumTLSVersion
>;

export const InputAppscopeMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputAppscopeMaximumTLSVersion = OpenEnum<
  typeof InputAppscopeMaximumTLSVersion
>;

export type InputAppscopeTLSSettingsServerSide = {
  disabled?: boolean | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's)
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Regex matching allowable common names in peer certificates' subject attribute
   */
  commonNameRegex?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  minVersion?: InputAppscopeMinimumTLSVersion | undefined;
  maxVersion?: InputAppscopeMaximumTLSVersion | undefined;
};

export type InputAppscope = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputAppscopeType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputAppscopeConnection> | undefined;
  pq?: InputAppscopePq | undefined;
  /**
   * Regex matching IP addresses that are allowed to establish a connection
   */
  ipWhitelistRegex?: string | undefined;
  /**
   * Maximum number of active connections allowed per Worker Process. Use 0 for unlimited.
   */
  maxActiveCxn?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. After this time, the connection will be closed. Leave at 0 for no inactive socket monitoring.
   */
  socketIdleTimeout?: number | undefined;
  /**
   * How long the server will wait after initiating a closure for a client to close its end of the connection. If the client doesn't close the connection within this time, the server will forcefully terminate the socket to prevent resource leaks and ensure efficient connection cleanup and system stability. Leave at 0 for no inactive socket monitoring.
   */
  socketEndingMaxWait?: number | undefined;
  /**
   * The maximum duration a socket can remain open, even if active. This helps manage resources and mitigate issues caused by TCP pinning. Set to 0 to disable.
   */
  socketMaxLifespan?: number | undefined;
  /**
   * Enable if the connection is proxied by a device that supports proxy protocol v1 or v2
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputAppscopeMetadatum> | undefined;
  /**
   * A list of event-breaking rulesets that will be applied, in order, to the input data stream
   */
  breakerRulesets?: Array<string> | undefined;
  /**
   * How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
   */
  staleChannelFlushMs?: number | undefined;
  /**
   * Toggle to Yes to specify a file-backed UNIX domain socket connection, instead of a network host and port.
   */
  enableUnixPath?: boolean | undefined;
  filter?: InputAppscopeFilter | undefined;
  persistence?: InputAppscopePersistence | undefined;
  /**
   * Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
   */
  authType?: InputAppscopeAuthenticationMethod | undefined;
  description?: string | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port?: number | undefined;
  tls?: InputAppscopeTLSSettingsServerSide | undefined;
  /**
   * Path to the UNIX domain socket to listen on.
   */
  unixSocketPath?: string | undefined;
  /**
   * Permissions to set for socket e.g., 777. If empty, falls back to the runtime user's default permissions.
   */
  unixSocketPerms?: string | undefined;
  /**
   * Shared secret to be provided by any client (in authToken header field). If empty, unauthorized access is permitted.
   */
  authToken?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
};

/** @internal */
export const InputAppscopeType$inboundSchema: z.ZodNativeEnum<
  typeof InputAppscopeType
> = z.nativeEnum(InputAppscopeType);

/** @internal */
export const InputAppscopeType$outboundSchema: z.ZodNativeEnum<
  typeof InputAppscopeType
> = InputAppscopeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeType$ {
  /** @deprecated use `InputAppscopeType$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeType$inboundSchema;
  /** @deprecated use `InputAppscopeType$outboundSchema` instead. */
  export const outboundSchema = InputAppscopeType$outboundSchema;
}

/** @internal */
export const InputAppscopeConnection$inboundSchema: z.ZodType<
  InputAppscopeConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputAppscopeConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputAppscopeConnection$outboundSchema: z.ZodType<
  InputAppscopeConnection$Outbound,
  z.ZodTypeDef,
  InputAppscopeConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeConnection$ {
  /** @deprecated use `InputAppscopeConnection$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeConnection$inboundSchema;
  /** @deprecated use `InputAppscopeConnection$outboundSchema` instead. */
  export const outboundSchema = InputAppscopeConnection$outboundSchema;
  /** @deprecated use `InputAppscopeConnection$Outbound` instead. */
  export type Outbound = InputAppscopeConnection$Outbound;
}

export function inputAppscopeConnectionToJSON(
  inputAppscopeConnection: InputAppscopeConnection,
): string {
  return JSON.stringify(
    InputAppscopeConnection$outboundSchema.parse(inputAppscopeConnection),
  );
}

export function inputAppscopeConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputAppscopeConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAppscopeConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAppscopeConnection' from JSON`,
  );
}

/** @internal */
export const InputAppscopeMode$inboundSchema: z.ZodType<
  InputAppscopeMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputAppscopeMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputAppscopeMode$outboundSchema: z.ZodType<
  InputAppscopeMode,
  z.ZodTypeDef,
  InputAppscopeMode
> = z.union([
  z.nativeEnum(InputAppscopeMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeMode$ {
  /** @deprecated use `InputAppscopeMode$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeMode$inboundSchema;
  /** @deprecated use `InputAppscopeMode$outboundSchema` instead. */
  export const outboundSchema = InputAppscopeMode$outboundSchema;
}

/** @internal */
export const InputAppscopeCompression$inboundSchema: z.ZodType<
  InputAppscopeCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputAppscopeCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputAppscopeCompression$outboundSchema: z.ZodType<
  InputAppscopeCompression,
  z.ZodTypeDef,
  InputAppscopeCompression
> = z.union([
  z.nativeEnum(InputAppscopeCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeCompression$ {
  /** @deprecated use `InputAppscopeCompression$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeCompression$inboundSchema;
  /** @deprecated use `InputAppscopeCompression$outboundSchema` instead. */
  export const outboundSchema = InputAppscopeCompression$outboundSchema;
}

/** @internal */
export const InputAppscopePqControls$inboundSchema: z.ZodType<
  InputAppscopePqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputAppscopePqControls$Outbound = {};

/** @internal */
export const InputAppscopePqControls$outboundSchema: z.ZodType<
  InputAppscopePqControls$Outbound,
  z.ZodTypeDef,
  InputAppscopePqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopePqControls$ {
  /** @deprecated use `InputAppscopePqControls$inboundSchema` instead. */
  export const inboundSchema = InputAppscopePqControls$inboundSchema;
  /** @deprecated use `InputAppscopePqControls$outboundSchema` instead. */
  export const outboundSchema = InputAppscopePqControls$outboundSchema;
  /** @deprecated use `InputAppscopePqControls$Outbound` instead. */
  export type Outbound = InputAppscopePqControls$Outbound;
}

export function inputAppscopePqControlsToJSON(
  inputAppscopePqControls: InputAppscopePqControls,
): string {
  return JSON.stringify(
    InputAppscopePqControls$outboundSchema.parse(inputAppscopePqControls),
  );
}

export function inputAppscopePqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputAppscopePqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAppscopePqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAppscopePqControls' from JSON`,
  );
}

/** @internal */
export const InputAppscopePq$inboundSchema: z.ZodType<
  InputAppscopePq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputAppscopeMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputAppscopeCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputAppscopePqControls$inboundSchema).optional(),
});

/** @internal */
export type InputAppscopePq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputAppscopePqControls$Outbound | undefined;
};

/** @internal */
export const InputAppscopePq$outboundSchema: z.ZodType<
  InputAppscopePq$Outbound,
  z.ZodTypeDef,
  InputAppscopePq
> = z.object({
  mode: InputAppscopeMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputAppscopeCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputAppscopePqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopePq$ {
  /** @deprecated use `InputAppscopePq$inboundSchema` instead. */
  export const inboundSchema = InputAppscopePq$inboundSchema;
  /** @deprecated use `InputAppscopePq$outboundSchema` instead. */
  export const outboundSchema = InputAppscopePq$outboundSchema;
  /** @deprecated use `InputAppscopePq$Outbound` instead. */
  export type Outbound = InputAppscopePq$Outbound;
}

export function inputAppscopePqToJSON(
  inputAppscopePq: InputAppscopePq,
): string {
  return JSON.stringify(InputAppscopePq$outboundSchema.parse(inputAppscopePq));
}

export function inputAppscopePqFromJSON(
  jsonString: string,
): SafeParseResult<InputAppscopePq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAppscopePq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAppscopePq' from JSON`,
  );
}

/** @internal */
export const InputAppscopeMetadatum$inboundSchema: z.ZodType<
  InputAppscopeMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputAppscopeMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputAppscopeMetadatum$outboundSchema: z.ZodType<
  InputAppscopeMetadatum$Outbound,
  z.ZodTypeDef,
  InputAppscopeMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeMetadatum$ {
  /** @deprecated use `InputAppscopeMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeMetadatum$inboundSchema;
  /** @deprecated use `InputAppscopeMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputAppscopeMetadatum$outboundSchema;
  /** @deprecated use `InputAppscopeMetadatum$Outbound` instead. */
  export type Outbound = InputAppscopeMetadatum$Outbound;
}

export function inputAppscopeMetadatumToJSON(
  inputAppscopeMetadatum: InputAppscopeMetadatum,
): string {
  return JSON.stringify(
    InputAppscopeMetadatum$outboundSchema.parse(inputAppscopeMetadatum),
  );
}

export function inputAppscopeMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputAppscopeMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAppscopeMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAppscopeMetadatum' from JSON`,
  );
}

/** @internal */
export const Allow$inboundSchema: z.ZodType<Allow, z.ZodTypeDef, unknown> = z
  .object({
    procname: z.string(),
    arg: z.string().optional(),
    config: z.string(),
  });

/** @internal */
export type Allow$Outbound = {
  procname: string;
  arg?: string | undefined;
  config: string;
};

/** @internal */
export const Allow$outboundSchema: z.ZodType<
  Allow$Outbound,
  z.ZodTypeDef,
  Allow
> = z.object({
  procname: z.string(),
  arg: z.string().optional(),
  config: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Allow$ {
  /** @deprecated use `Allow$inboundSchema` instead. */
  export const inboundSchema = Allow$inboundSchema;
  /** @deprecated use `Allow$outboundSchema` instead. */
  export const outboundSchema = Allow$outboundSchema;
  /** @deprecated use `Allow$Outbound` instead. */
  export type Outbound = Allow$Outbound;
}

export function allowToJSON(allow: Allow): string {
  return JSON.stringify(Allow$outboundSchema.parse(allow));
}

export function allowFromJSON(
  jsonString: string,
): SafeParseResult<Allow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Allow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Allow' from JSON`,
  );
}

/** @internal */
export const InputAppscopeFilter$inboundSchema: z.ZodType<
  InputAppscopeFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  allow: z.array(z.lazy(() => Allow$inboundSchema)).optional(),
  transportURL: z.string().optional(),
});

/** @internal */
export type InputAppscopeFilter$Outbound = {
  allow?: Array<Allow$Outbound> | undefined;
  transportURL?: string | undefined;
};

/** @internal */
export const InputAppscopeFilter$outboundSchema: z.ZodType<
  InputAppscopeFilter$Outbound,
  z.ZodTypeDef,
  InputAppscopeFilter
> = z.object({
  allow: z.array(z.lazy(() => Allow$outboundSchema)).optional(),
  transportURL: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeFilter$ {
  /** @deprecated use `InputAppscopeFilter$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeFilter$inboundSchema;
  /** @deprecated use `InputAppscopeFilter$outboundSchema` instead. */
  export const outboundSchema = InputAppscopeFilter$outboundSchema;
  /** @deprecated use `InputAppscopeFilter$Outbound` instead. */
  export type Outbound = InputAppscopeFilter$Outbound;
}

export function inputAppscopeFilterToJSON(
  inputAppscopeFilter: InputAppscopeFilter,
): string {
  return JSON.stringify(
    InputAppscopeFilter$outboundSchema.parse(inputAppscopeFilter),
  );
}

export function inputAppscopeFilterFromJSON(
  jsonString: string,
): SafeParseResult<InputAppscopeFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAppscopeFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAppscopeFilter' from JSON`,
  );
}

/** @internal */
export const InputAppscopeDataCompressionFormat$inboundSchema: z.ZodType<
  InputAppscopeDataCompressionFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputAppscopeDataCompressionFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputAppscopeDataCompressionFormat$outboundSchema: z.ZodType<
  InputAppscopeDataCompressionFormat,
  z.ZodTypeDef,
  InputAppscopeDataCompressionFormat
> = z.union([
  z.nativeEnum(InputAppscopeDataCompressionFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeDataCompressionFormat$ {
  /** @deprecated use `InputAppscopeDataCompressionFormat$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeDataCompressionFormat$inboundSchema;
  /** @deprecated use `InputAppscopeDataCompressionFormat$outboundSchema` instead. */
  export const outboundSchema =
    InputAppscopeDataCompressionFormat$outboundSchema;
}

/** @internal */
export const InputAppscopePersistence$inboundSchema: z.ZodType<
  InputAppscopePersistence,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputAppscopeDataCompressionFormat$inboundSchema.default("gzip"),
  destPath: z.string().default("$CRIBL_HOME/state/appscope"),
});

/** @internal */
export type InputAppscopePersistence$Outbound = {
  enable: boolean;
  timeWindow: string;
  maxDataSize: string;
  maxDataTime: string;
  compress: string;
  destPath: string;
};

/** @internal */
export const InputAppscopePersistence$outboundSchema: z.ZodType<
  InputAppscopePersistence$Outbound,
  z.ZodTypeDef,
  InputAppscopePersistence
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputAppscopeDataCompressionFormat$outboundSchema.default("gzip"),
  destPath: z.string().default("$CRIBL_HOME/state/appscope"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopePersistence$ {
  /** @deprecated use `InputAppscopePersistence$inboundSchema` instead. */
  export const inboundSchema = InputAppscopePersistence$inboundSchema;
  /** @deprecated use `InputAppscopePersistence$outboundSchema` instead. */
  export const outboundSchema = InputAppscopePersistence$outboundSchema;
  /** @deprecated use `InputAppscopePersistence$Outbound` instead. */
  export type Outbound = InputAppscopePersistence$Outbound;
}

export function inputAppscopePersistenceToJSON(
  inputAppscopePersistence: InputAppscopePersistence,
): string {
  return JSON.stringify(
    InputAppscopePersistence$outboundSchema.parse(inputAppscopePersistence),
  );
}

export function inputAppscopePersistenceFromJSON(
  jsonString: string,
): SafeParseResult<InputAppscopePersistence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAppscopePersistence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAppscopePersistence' from JSON`,
  );
}

/** @internal */
export const InputAppscopeAuthenticationMethod$inboundSchema: z.ZodType<
  InputAppscopeAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputAppscopeAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputAppscopeAuthenticationMethod$outboundSchema: z.ZodType<
  InputAppscopeAuthenticationMethod,
  z.ZodTypeDef,
  InputAppscopeAuthenticationMethod
> = z.union([
  z.nativeEnum(InputAppscopeAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeAuthenticationMethod$ {
  /** @deprecated use `InputAppscopeAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputAppscopeAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    InputAppscopeAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputAppscopeMinimumTLSVersion$inboundSchema: z.ZodType<
  InputAppscopeMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputAppscopeMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputAppscopeMinimumTLSVersion$outboundSchema: z.ZodType<
  InputAppscopeMinimumTLSVersion,
  z.ZodTypeDef,
  InputAppscopeMinimumTLSVersion
> = z.union([
  z.nativeEnum(InputAppscopeMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeMinimumTLSVersion$ {
  /** @deprecated use `InputAppscopeMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputAppscopeMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputAppscopeMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputAppscopeMaximumTLSVersion$inboundSchema: z.ZodType<
  InputAppscopeMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputAppscopeMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputAppscopeMaximumTLSVersion$outboundSchema: z.ZodType<
  InputAppscopeMaximumTLSVersion,
  z.ZodTypeDef,
  InputAppscopeMaximumTLSVersion
> = z.union([
  z.nativeEnum(InputAppscopeMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeMaximumTLSVersion$ {
  /** @deprecated use `InputAppscopeMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputAppscopeMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputAppscopeMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputAppscopeTLSSettingsServerSide$inboundSchema: z.ZodType<
  InputAppscopeTLSSettingsServerSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.boolean().default(true),
  commonNameRegex: z.string().default("/.*/"),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  minVersion: InputAppscopeMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputAppscopeMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputAppscopeTLSSettingsServerSide$Outbound = {
  disabled: boolean;
  requestCert: boolean;
  rejectUnauthorized: boolean;
  commonNameRegex: string;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputAppscopeTLSSettingsServerSide$outboundSchema: z.ZodType<
  InputAppscopeTLSSettingsServerSide$Outbound,
  z.ZodTypeDef,
  InputAppscopeTLSSettingsServerSide
> = z.object({
  disabled: z.boolean().default(true),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.boolean().default(true),
  commonNameRegex: z.string().default("/.*/"),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  minVersion: InputAppscopeMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputAppscopeMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscopeTLSSettingsServerSide$ {
  /** @deprecated use `InputAppscopeTLSSettingsServerSide$inboundSchema` instead. */
  export const inboundSchema = InputAppscopeTLSSettingsServerSide$inboundSchema;
  /** @deprecated use `InputAppscopeTLSSettingsServerSide$outboundSchema` instead. */
  export const outboundSchema =
    InputAppscopeTLSSettingsServerSide$outboundSchema;
  /** @deprecated use `InputAppscopeTLSSettingsServerSide$Outbound` instead. */
  export type Outbound = InputAppscopeTLSSettingsServerSide$Outbound;
}

export function inputAppscopeTLSSettingsServerSideToJSON(
  inputAppscopeTLSSettingsServerSide: InputAppscopeTLSSettingsServerSide,
): string {
  return JSON.stringify(
    InputAppscopeTLSSettingsServerSide$outboundSchema.parse(
      inputAppscopeTLSSettingsServerSide,
    ),
  );
}

export function inputAppscopeTLSSettingsServerSideFromJSON(
  jsonString: string,
): SafeParseResult<InputAppscopeTLSSettingsServerSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InputAppscopeTLSSettingsServerSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAppscopeTLSSettingsServerSide' from JSON`,
  );
}

/** @internal */
export const InputAppscope$inboundSchema: z.ZodType<
  InputAppscope,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputAppscopeType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputAppscopeConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputAppscopePq$inboundSchema).optional(),
  ipWhitelistRegex: z.string().default("/.*/"),
  maxActiveCxn: z.number().default(1000),
  socketIdleTimeout: z.number().default(0),
  socketEndingMaxWait: z.number().default(30),
  socketMaxLifespan: z.number().default(0),
  enableProxyHeader: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputAppscopeMetadatum$inboundSchema))
    .optional(),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  enableUnixPath: z.boolean().default(false),
  filter: z.lazy(() => InputAppscopeFilter$inboundSchema).optional(),
  persistence: z.lazy(() => InputAppscopePersistence$inboundSchema).optional(),
  authType: InputAppscopeAuthenticationMethod$inboundSchema.default("manual"),
  description: z.string().optional(),
  host: z.string().optional(),
  port: z.number().optional(),
  tls: z.lazy(() => InputAppscopeTLSSettingsServerSide$inboundSchema)
    .optional(),
  unixSocketPath: z.string().default("$CRIBL_HOME/state/appscope.sock"),
  unixSocketPerms: z.string().optional(),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/** @internal */
export type InputAppscope$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputAppscopeConnection$Outbound> | undefined;
  pq?: InputAppscopePq$Outbound | undefined;
  ipWhitelistRegex: string;
  maxActiveCxn: number;
  socketIdleTimeout: number;
  socketEndingMaxWait: number;
  socketMaxLifespan: number;
  enableProxyHeader: boolean;
  metadata?: Array<InputAppscopeMetadatum$Outbound> | undefined;
  breakerRulesets?: Array<string> | undefined;
  staleChannelFlushMs: number;
  enableUnixPath: boolean;
  filter?: InputAppscopeFilter$Outbound | undefined;
  persistence?: InputAppscopePersistence$Outbound | undefined;
  authType: string;
  description?: string | undefined;
  host?: string | undefined;
  port?: number | undefined;
  tls?: InputAppscopeTLSSettingsServerSide$Outbound | undefined;
  unixSocketPath: string;
  unixSocketPerms?: string | undefined;
  authToken: string;
  textSecret?: string | undefined;
};

/** @internal */
export const InputAppscope$outboundSchema: z.ZodType<
  InputAppscope$Outbound,
  z.ZodTypeDef,
  InputAppscope
> = z.object({
  id: z.string().optional(),
  type: InputAppscopeType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputAppscopeConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputAppscopePq$outboundSchema).optional(),
  ipWhitelistRegex: z.string().default("/.*/"),
  maxActiveCxn: z.number().default(1000),
  socketIdleTimeout: z.number().default(0),
  socketEndingMaxWait: z.number().default(30),
  socketMaxLifespan: z.number().default(0),
  enableProxyHeader: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputAppscopeMetadatum$outboundSchema))
    .optional(),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  enableUnixPath: z.boolean().default(false),
  filter: z.lazy(() => InputAppscopeFilter$outboundSchema).optional(),
  persistence: z.lazy(() => InputAppscopePersistence$outboundSchema).optional(),
  authType: InputAppscopeAuthenticationMethod$outboundSchema.default("manual"),
  description: z.string().optional(),
  host: z.string().optional(),
  port: z.number().optional(),
  tls: z.lazy(() => InputAppscopeTLSSettingsServerSide$outboundSchema)
    .optional(),
  unixSocketPath: z.string().default("$CRIBL_HOME/state/appscope.sock"),
  unixSocketPerms: z.string().optional(),
  authToken: z.string().default(""),
  textSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAppscope$ {
  /** @deprecated use `InputAppscope$inboundSchema` instead. */
  export const inboundSchema = InputAppscope$inboundSchema;
  /** @deprecated use `InputAppscope$outboundSchema` instead. */
  export const outboundSchema = InputAppscope$outboundSchema;
  /** @deprecated use `InputAppscope$Outbound` instead. */
  export type Outbound = InputAppscope$Outbound;
}

export function inputAppscopeToJSON(inputAppscope: InputAppscope): string {
  return JSON.stringify(InputAppscope$outboundSchema.parse(inputAppscope));
}

export function inputAppscopeFromJSON(
  jsonString: string,
): SafeParseResult<InputAppscope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAppscope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAppscope' from JSON`,
  );
}
