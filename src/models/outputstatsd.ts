/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputStatsdType = {
  Statsd: "statsd",
} as const;
export type OutputStatsdType = ClosedEnum<typeof OutputStatsdType>;

/**
 * Protocol to use when communicating with the destination.
 */
export const OutputStatsdDestinationProtocol = {
  /**
   * UDP
   */
  Udp: "udp",
  /**
   * TCP
   */
  Tcp: "tcp",
} as const;
/**
 * Protocol to use when communicating with the destination.
 */
export type OutputStatsdDestinationProtocol = OpenEnum<
  typeof OutputStatsdDestinationProtocol
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputStatsdBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputStatsdBackpressureBehavior = OpenEnum<
  typeof OutputStatsdBackpressureBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputStatsdMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Always: "always",
  /**
   * Always On
   */
  Backpressure: "backpressure",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputStatsdMode = OpenEnum<typeof OutputStatsdMode>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputStatsdCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputStatsdCompression = OpenEnum<typeof OutputStatsdCompression>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputStatsdQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputStatsdQueueFullBehavior = OpenEnum<
  typeof OutputStatsdQueueFullBehavior
>;

export type OutputStatsdPqControls = {};

export type OutputStatsd = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputStatsdType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Protocol to use when communicating with the destination.
   */
  protocol?: OutputStatsdDestinationProtocol | undefined;
  /**
   * The hostname of the destination.
   */
  host: string;
  /**
   * Destination port.
   */
  port?: number | undefined;
  /**
   * When protocol is UDP, specifies the maximum size of packets sent to the destination. Also known as the MTU for the network path to the destination system.
   */
  mtu?: number | undefined;
  /**
   * When protocol is TCP, specifies how often buffers should be flushed, resulting in records sent to the destination.
   */
  flushPeriodSec?: number | undefined;
  /**
   * How often to resolve the destination hostname to an IP address. Ignored if the destination is an IP address. A value of 0 means every batch sent will incur a DNS lookup.
   */
  dnsResolvePeriodSec?: number | undefined;
  description?: string | undefined;
  /**
   * Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
   */
  throttleRatePerSec?: string | undefined;
  /**
   * Amount of time (milliseconds) to wait for the connection to establish before retrying
   */
  connectionTimeout?: number | undefined;
  /**
   * Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
   */
  writeTimeout?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputStatsdBackpressureBehavior | undefined;
  /**
   * Use FIFO (first in, first out) processing. Disable to forward new events to receivers before queue is flushed.
   */
  pqStrictOrdering?: boolean | undefined;
  /**
   * Throttling rate (in events per second) to impose while writing to Destinations from PQ. Defaults to 0, which disables throttling.
   */
  pqRatePerSec?: number | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputStatsdMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  pqMaxBufferSize?: number | undefined;
  /**
   * How long (in seconds) to wait for backpressure to resolve before engaging the queue
   */
  pqMaxBackpressureSec?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputStatsdCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputStatsdQueueFullBehavior | undefined;
  pqControls?: OutputStatsdPqControls | undefined;
};

/** @internal */
export const OutputStatsdType$inboundSchema: z.ZodNativeEnum<
  typeof OutputStatsdType
> = z.nativeEnum(OutputStatsdType);

/** @internal */
export const OutputStatsdType$outboundSchema: z.ZodNativeEnum<
  typeof OutputStatsdType
> = OutputStatsdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdType$ {
  /** @deprecated use `OutputStatsdType$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdType$inboundSchema;
  /** @deprecated use `OutputStatsdType$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdType$outboundSchema;
}

/** @internal */
export const OutputStatsdDestinationProtocol$inboundSchema: z.ZodType<
  OutputStatsdDestinationProtocol,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdDestinationProtocol),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdDestinationProtocol$outboundSchema: z.ZodType<
  OutputStatsdDestinationProtocol,
  z.ZodTypeDef,
  OutputStatsdDestinationProtocol
> = z.union([
  z.nativeEnum(OutputStatsdDestinationProtocol),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdDestinationProtocol$ {
  /** @deprecated use `OutputStatsdDestinationProtocol$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdDestinationProtocol$inboundSchema;
  /** @deprecated use `OutputStatsdDestinationProtocol$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdDestinationProtocol$outboundSchema;
}

/** @internal */
export const OutputStatsdBackpressureBehavior$inboundSchema: z.ZodType<
  OutputStatsdBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdBackpressureBehavior$outboundSchema: z.ZodType<
  OutputStatsdBackpressureBehavior,
  z.ZodTypeDef,
  OutputStatsdBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputStatsdBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdBackpressureBehavior$ {
  /** @deprecated use `OutputStatsdBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputStatsdBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputStatsdMode$inboundSchema: z.ZodType<
  OutputStatsdMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdMode$outboundSchema: z.ZodType<
  OutputStatsdMode,
  z.ZodTypeDef,
  OutputStatsdMode
> = z.union([
  z.nativeEnum(OutputStatsdMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdMode$ {
  /** @deprecated use `OutputStatsdMode$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdMode$inboundSchema;
  /** @deprecated use `OutputStatsdMode$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdMode$outboundSchema;
}

/** @internal */
export const OutputStatsdCompression$inboundSchema: z.ZodType<
  OutputStatsdCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdCompression$outboundSchema: z.ZodType<
  OutputStatsdCompression,
  z.ZodTypeDef,
  OutputStatsdCompression
> = z.union([
  z.nativeEnum(OutputStatsdCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdCompression$ {
  /** @deprecated use `OutputStatsdCompression$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdCompression$inboundSchema;
  /** @deprecated use `OutputStatsdCompression$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdCompression$outboundSchema;
}

/** @internal */
export const OutputStatsdQueueFullBehavior$inboundSchema: z.ZodType<
  OutputStatsdQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdQueueFullBehavior$outboundSchema: z.ZodType<
  OutputStatsdQueueFullBehavior,
  z.ZodTypeDef,
  OutputStatsdQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputStatsdQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdQueueFullBehavior$ {
  /** @deprecated use `OutputStatsdQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputStatsdQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputStatsdPqControls$inboundSchema: z.ZodType<
  OutputStatsdPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputStatsdPqControls$Outbound = {};

/** @internal */
export const OutputStatsdPqControls$outboundSchema: z.ZodType<
  OutputStatsdPqControls$Outbound,
  z.ZodTypeDef,
  OutputStatsdPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdPqControls$ {
  /** @deprecated use `OutputStatsdPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdPqControls$inboundSchema;
  /** @deprecated use `OutputStatsdPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdPqControls$outboundSchema;
  /** @deprecated use `OutputStatsdPqControls$Outbound` instead. */
  export type Outbound = OutputStatsdPqControls$Outbound;
}

export function outputStatsdPqControlsToJSON(
  outputStatsdPqControls: OutputStatsdPqControls,
): string {
  return JSON.stringify(
    OutputStatsdPqControls$outboundSchema.parse(outputStatsdPqControls),
  );
}

export function outputStatsdPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputStatsdPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputStatsdPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputStatsdPqControls' from JSON`,
  );
}

/** @internal */
export const OutputStatsd$inboundSchema: z.ZodType<
  OutputStatsd,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputStatsdType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  protocol: OutputStatsdDestinationProtocol$inboundSchema.default("udp"),
  host: z.string(),
  port: z.number().default(8125),
  mtu: z.number().default(512),
  flushPeriodSec: z.number().default(1),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  onBackpressure: OutputStatsdBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  pqStrictOrdering: z.boolean().default(true),
  pqRatePerSec: z.number().default(0),
  pqMode: OutputStatsdMode$inboundSchema.default("error"),
  pqMaxBufferSize: z.number().default(42),
  pqMaxBackpressureSec: z.number().default(30),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputStatsdCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputStatsdQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqControls: z.lazy(() => OutputStatsdPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputStatsd$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  protocol: string;
  host: string;
  port: number;
  mtu: number;
  flushPeriodSec: number;
  dnsResolvePeriodSec: number;
  description?: string | undefined;
  throttleRatePerSec: string;
  connectionTimeout: number;
  writeTimeout: number;
  onBackpressure: string;
  pqStrictOrdering: boolean;
  pqRatePerSec: number;
  pqMode: string;
  pqMaxBufferSize: number;
  pqMaxBackpressureSec: number;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqControls?: OutputStatsdPqControls$Outbound | undefined;
};

/** @internal */
export const OutputStatsd$outboundSchema: z.ZodType<
  OutputStatsd$Outbound,
  z.ZodTypeDef,
  OutputStatsd
> = z.object({
  id: z.string().optional(),
  type: OutputStatsdType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  protocol: OutputStatsdDestinationProtocol$outboundSchema.default("udp"),
  host: z.string(),
  port: z.number().default(8125),
  mtu: z.number().default(512),
  flushPeriodSec: z.number().default(1),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  onBackpressure: OutputStatsdBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  pqStrictOrdering: z.boolean().default(true),
  pqRatePerSec: z.number().default(0),
  pqMode: OutputStatsdMode$outboundSchema.default("error"),
  pqMaxBufferSize: z.number().default(42),
  pqMaxBackpressureSec: z.number().default(30),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputStatsdCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputStatsdQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqControls: z.lazy(() => OutputStatsdPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsd$ {
  /** @deprecated use `OutputStatsd$inboundSchema` instead. */
  export const inboundSchema = OutputStatsd$inboundSchema;
  /** @deprecated use `OutputStatsd$outboundSchema` instead. */
  export const outboundSchema = OutputStatsd$outboundSchema;
  /** @deprecated use `OutputStatsd$Outbound` instead. */
  export type Outbound = OutputStatsd$Outbound;
}

export function outputStatsdToJSON(outputStatsd: OutputStatsd): string {
  return JSON.stringify(OutputStatsd$outboundSchema.parse(outputStatsd));
}

export function outputStatsdFromJSON(
  jsonString: string,
): SafeParseResult<OutputStatsd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputStatsd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputStatsd' from JSON`,
  );
}
