/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputGoogleCloudStorageType = {
  GoogleCloudStorage: "google_cloud_storage",
} as const;
export type OutputGoogleCloudStorageType = ClosedEnum<
  typeof OutputGoogleCloudStorageType
>;

/**
 * Signature version to use for signing Google Cloud Storage requests
 */
export const OutputGoogleCloudStorageSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing Google Cloud Storage requests
 */
export type OutputGoogleCloudStorageSignatureVersion = ClosedEnum<
  typeof OutputGoogleCloudStorageSignatureVersion
>;

export const OutputGoogleCloudStorageAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
export type OutputGoogleCloudStorageAuthenticationMethod = ClosedEnum<
  typeof OutputGoogleCloudStorageAuthenticationMethod
>;

/**
 * Object ACL to assign to uploaded objects
 */
export const OutputGoogleCloudStorageObjectACL = {
  Private: "private",
  BucketOwnerRead: "bucket-owner-read",
  BucketOwnerFullControl: "bucket-owner-full-control",
  ProjectPrivate: "project-private",
  AuthenticatedRead: "authenticated-read",
  PublicRead: "public-read",
} as const;
/**
 * Object ACL to assign to uploaded objects
 */
export type OutputGoogleCloudStorageObjectACL = ClosedEnum<
  typeof OutputGoogleCloudStorageObjectACL
>;

/**
 * Storage class to select for uploaded objects
 */
export const OutputGoogleCloudStorageStorageClass = {
  Standard: "STANDARD",
  Nearline: "NEARLINE",
  Coldline: "COLDLINE",
  Archive: "ARCHIVE",
} as const;
/**
 * Storage class to select for uploaded objects
 */
export type OutputGoogleCloudStorageStorageClass = ClosedEnum<
  typeof OutputGoogleCloudStorageStorageClass
>;

/**
 * Format of the output data
 */
export const OutputGoogleCloudStorageDataFormat = {
  Json: "json",
  Raw: "raw",
  Parquet: "parquet",
} as const;
/**
 * Format of the output data
 */
export type OutputGoogleCloudStorageDataFormat = ClosedEnum<
  typeof OutputGoogleCloudStorageDataFormat
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputGoogleCloudStorageBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputGoogleCloudStorageBackpressureBehavior = ClosedEnum<
  typeof OutputGoogleCloudStorageBackpressureBehavior
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputGoogleCloudStorageDiskSpaceProtection = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputGoogleCloudStorageDiskSpaceProtection = ClosedEnum<
  typeof OutputGoogleCloudStorageDiskSpaceProtection
>;

/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export const OutputGoogleCloudStorageCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export type OutputGoogleCloudStorageCompression = ClosedEnum<
  typeof OutputGoogleCloudStorageCompression
>;

/**
 * Compression level to apply before moving files to final destination
 */
export const OutputGoogleCloudStorageCompressionLevel = {
  BestSpeed: "best_speed",
  Normal: "normal",
  BestCompression: "best_compression",
} as const;
/**
 * Compression level to apply before moving files to final destination
 */
export type OutputGoogleCloudStorageCompressionLevel = ClosedEnum<
  typeof OutputGoogleCloudStorageCompressionLevel
>;

/**
 * Determines which data types are supported and how they are represented
 */
export const OutputGoogleCloudStorageParquetVersion = {
  Parquet10: "PARQUET_1_0",
  Parquet24: "PARQUET_2_4",
  Parquet26: "PARQUET_2_6",
} as const;
/**
 * Determines which data types are supported and how they are represented
 */
export type OutputGoogleCloudStorageParquetVersion = ClosedEnum<
  typeof OutputGoogleCloudStorageParquetVersion
>;

/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export const OutputGoogleCloudStorageDataPageVersion = {
  DataPageV1: "DATA_PAGE_V1",
  DataPageV2: "DATA_PAGE_V2",
} as const;
/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export type OutputGoogleCloudStorageDataPageVersion = ClosedEnum<
  typeof OutputGoogleCloudStorageDataPageVersion
>;

export type OutputGoogleCloudStorageKeyValueMetadatum = {
  key?: string | undefined;
  value: string;
};

export type OutputGoogleCloudStorage = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type?: OutputGoogleCloudStorageType | undefined;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Name of the destination bucket. This value can be a constant or a JavaScript expression that can only be evaluated at init time. Example of referencing a Global Variable: `myBucket-${C.vars.myVar}`.
   */
  bucket: string;
  /**
   * Region where the bucket is located
   */
  region: string;
  /**
   * Google Cloud Storage service endpoint
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing Google Cloud Storage requests
   */
  signatureVersion?: OutputGoogleCloudStorageSignatureVersion | undefined;
  awsAuthenticationMethod?:
    | OutputGoogleCloudStorageAuthenticationMethod
    | undefined;
  /**
   * Filesystem location in which to buffer files, before compressing and moving to final destination. Use performant and stable storage.
   */
  stagePath?: string | undefined;
  /**
   * Prefix to prepend to files before uploading. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `myKeyPrefix-${C.vars.myVar}`
   */
  destPath?: string | undefined;
  /**
   * Disable if you can access files within the bucket but not the bucket itself
   */
  verifyPermissions?: boolean | undefined;
  /**
   * Object ACL to assign to uploaded objects
   */
  objectACL?: OutputGoogleCloudStorageObjectACL | undefined;
  /**
   * Storage class to select for uploaded objects
   */
  storageClass?: OutputGoogleCloudStorageStorageClass | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * JavaScript expression defining how files are partitioned and organized. Default is date-based. If blank, Stream will fall back to the event's __partition field value – if present – otherwise to each location's root directory.
   */
  partitionExpr?: string | undefined;
  /**
   * Format of the output data
   */
  format?: OutputGoogleCloudStorageDataFormat | undefined;
  /**
   * JavaScript expression to define the output filename prefix (can be constant)
   */
  baseFileName?: string | undefined;
  /**
   * JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`).
   */
  fileNameSuffix?: string | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * If set, this line will be written to the beginning of each output file
   */
  headerLine?: string | undefined;
  /**
   * Buffer size used to write to a file
   */
  writeHighWaterMark?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputGoogleCloudStorageBackpressureBehavior | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?:
    | OutputGoogleCloudStorageDiskSpaceProtection
    | undefined;
  description?: string | undefined;
  /**
   * Data compression format to apply to HTTP content before it is delivered
   */
  compress?: OutputGoogleCloudStorageCompression | undefined;
  /**
   * Compression level to apply before moving files to final destination
   */
  compressionLevel?: OutputGoogleCloudStorageCompressionLevel | undefined;
  /**
   * Automatically calculate the schema based on the events of each Parquet file generated
   */
  automaticSchema?: boolean | undefined;
  /**
   * Determines which data types are supported and how they are represented
   */
  parquetVersion?: OutputGoogleCloudStorageParquetVersion | undefined;
  /**
   * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
   */
  parquetDataPageVersion?: OutputGoogleCloudStorageDataPageVersion | undefined;
  /**
   * The number of rows that every group will contain. The final group can contain a smaller number of rows.
   */
  parquetRowGroupLength?: number | undefined;
  /**
   * Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression.
   */
  parquetPageSize?: string | undefined;
  /**
   * Log up to 3 rows that @{product} skips due to data mismatch
   */
  shouldLogInvalidRows?: boolean | undefined;
  /**
   * The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: "key":"OCSF Event Class", "value":"9001"
   */
  keyValueMetadata?:
    | Array<OutputGoogleCloudStorageKeyValueMetadatum>
    | undefined;
  /**
   * Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics.
   */
  enableStatistics?: boolean | undefined;
  /**
   * One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping.
   */
  enableWritePageIndex?: boolean | undefined;
  /**
   * Parquet tools can use the checksum of a Parquet page to verify data integrity
   */
  enablePageChecksum?: boolean | undefined;
  /**
   * How frequently, in seconds, to clean up empty directories
   */
  emptyDirCleanupSec?: number | undefined;
  /**
   * Storage location for files that fail to reach their final destination after maximum retries are exceeded
   */
  deadletterPath?: string | undefined;
  /**
   * The maximum number of times a file will attempt to move to its final destination before being dead-lettered
   */
  maxRetryNum?: number | undefined;
  /**
   * HMAC access key. This value can be a constant or a JavaScript expression, such as `${C.env.GCS_ACCESS_KEY}`.
   */
  awsApiKey?: string | undefined;
  /**
   * HMAC secret. This value can be a constant or a JavaScript expression, such as `${C.env.GCS_SECRET}`.
   */
  awsSecretKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
};

/** @internal */
export const OutputGoogleCloudStorageType$inboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleCloudStorageType
> = z.nativeEnum(OutputGoogleCloudStorageType);

/** @internal */
export const OutputGoogleCloudStorageType$outboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleCloudStorageType
> = OutputGoogleCloudStorageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageType$ {
  /** @deprecated use `OutputGoogleCloudStorageType$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleCloudStorageType$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageType$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleCloudStorageType$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageSignatureVersion$inboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageSignatureVersion> = z
    .nativeEnum(OutputGoogleCloudStorageSignatureVersion);

/** @internal */
export const OutputGoogleCloudStorageSignatureVersion$outboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageSignatureVersion> =
    OutputGoogleCloudStorageSignatureVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageSignatureVersion$ {
  /** @deprecated use `OutputGoogleCloudStorageSignatureVersion$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageSignatureVersion$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageSignatureVersion$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageSignatureVersion$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageAuthenticationMethod$inboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageAuthenticationMethod> = z
    .nativeEnum(OutputGoogleCloudStorageAuthenticationMethod);

/** @internal */
export const OutputGoogleCloudStorageAuthenticationMethod$outboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageAuthenticationMethod> =
    OutputGoogleCloudStorageAuthenticationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageAuthenticationMethod$ {
  /** @deprecated use `OutputGoogleCloudStorageAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageObjectACL$inboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleCloudStorageObjectACL
> = z.nativeEnum(OutputGoogleCloudStorageObjectACL);

/** @internal */
export const OutputGoogleCloudStorageObjectACL$outboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleCloudStorageObjectACL
> = OutputGoogleCloudStorageObjectACL$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageObjectACL$ {
  /** @deprecated use `OutputGoogleCloudStorageObjectACL$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleCloudStorageObjectACL$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageObjectACL$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageObjectACL$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageStorageClass$inboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageStorageClass> = z.nativeEnum(
    OutputGoogleCloudStorageStorageClass,
  );

/** @internal */
export const OutputGoogleCloudStorageStorageClass$outboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageStorageClass> =
    OutputGoogleCloudStorageStorageClass$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageStorageClass$ {
  /** @deprecated use `OutputGoogleCloudStorageStorageClass$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageStorageClass$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageStorageClass$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageStorageClass$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageDataFormat$inboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleCloudStorageDataFormat
> = z.nativeEnum(OutputGoogleCloudStorageDataFormat);

/** @internal */
export const OutputGoogleCloudStorageDataFormat$outboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleCloudStorageDataFormat
> = OutputGoogleCloudStorageDataFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageDataFormat$ {
  /** @deprecated use `OutputGoogleCloudStorageDataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleCloudStorageDataFormat$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageDataFormat$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageDataFormat$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageBackpressureBehavior$inboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageBackpressureBehavior> = z
    .nativeEnum(OutputGoogleCloudStorageBackpressureBehavior);

/** @internal */
export const OutputGoogleCloudStorageBackpressureBehavior$outboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageBackpressureBehavior> =
    OutputGoogleCloudStorageBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageBackpressureBehavior$ {
  /** @deprecated use `OutputGoogleCloudStorageBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageDiskSpaceProtection$inboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageDiskSpaceProtection> = z
    .nativeEnum(OutputGoogleCloudStorageDiskSpaceProtection);

/** @internal */
export const OutputGoogleCloudStorageDiskSpaceProtection$outboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageDiskSpaceProtection> =
    OutputGoogleCloudStorageDiskSpaceProtection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageDiskSpaceProtection$ {
  /** @deprecated use `OutputGoogleCloudStorageDiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageDiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageDiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageDiskSpaceProtection$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageCompression$inboundSchema: z.ZodNativeEnum<
  typeof OutputGoogleCloudStorageCompression
> = z.nativeEnum(OutputGoogleCloudStorageCompression);

/** @internal */
export const OutputGoogleCloudStorageCompression$outboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageCompression> =
    OutputGoogleCloudStorageCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageCompression$ {
  /** @deprecated use `OutputGoogleCloudStorageCompression$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageCompression$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageCompression$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageCompression$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageCompressionLevel$inboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageCompressionLevel> = z
    .nativeEnum(OutputGoogleCloudStorageCompressionLevel);

/** @internal */
export const OutputGoogleCloudStorageCompressionLevel$outboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageCompressionLevel> =
    OutputGoogleCloudStorageCompressionLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageCompressionLevel$ {
  /** @deprecated use `OutputGoogleCloudStorageCompressionLevel$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageCompressionLevel$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageCompressionLevel$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageCompressionLevel$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageParquetVersion$inboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageParquetVersion> = z.nativeEnum(
    OutputGoogleCloudStorageParquetVersion,
  );

/** @internal */
export const OutputGoogleCloudStorageParquetVersion$outboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageParquetVersion> =
    OutputGoogleCloudStorageParquetVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageParquetVersion$ {
  /** @deprecated use `OutputGoogleCloudStorageParquetVersion$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageParquetVersion$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageParquetVersion$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageParquetVersion$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageDataPageVersion$inboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageDataPageVersion> = z
    .nativeEnum(OutputGoogleCloudStorageDataPageVersion);

/** @internal */
export const OutputGoogleCloudStorageDataPageVersion$outboundSchema:
  z.ZodNativeEnum<typeof OutputGoogleCloudStorageDataPageVersion> =
    OutputGoogleCloudStorageDataPageVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageDataPageVersion$ {
  /** @deprecated use `OutputGoogleCloudStorageDataPageVersion$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageDataPageVersion$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageDataPageVersion$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageDataPageVersion$outboundSchema;
}

/** @internal */
export const OutputGoogleCloudStorageKeyValueMetadatum$inboundSchema: z.ZodType<
  OutputGoogleCloudStorageKeyValueMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputGoogleCloudStorageKeyValueMetadatum$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const OutputGoogleCloudStorageKeyValueMetadatum$outboundSchema:
  z.ZodType<
    OutputGoogleCloudStorageKeyValueMetadatum$Outbound,
    z.ZodTypeDef,
    OutputGoogleCloudStorageKeyValueMetadatum
  > = z.object({
    key: z.string().default(""),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorageKeyValueMetadatum$ {
  /** @deprecated use `OutputGoogleCloudStorageKeyValueMetadatum$inboundSchema` instead. */
  export const inboundSchema =
    OutputGoogleCloudStorageKeyValueMetadatum$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageKeyValueMetadatum$outboundSchema` instead. */
  export const outboundSchema =
    OutputGoogleCloudStorageKeyValueMetadatum$outboundSchema;
  /** @deprecated use `OutputGoogleCloudStorageKeyValueMetadatum$Outbound` instead. */
  export type Outbound = OutputGoogleCloudStorageKeyValueMetadatum$Outbound;
}

export function outputGoogleCloudStorageKeyValueMetadatumToJSON(
  outputGoogleCloudStorageKeyValueMetadatum:
    OutputGoogleCloudStorageKeyValueMetadatum,
): string {
  return JSON.stringify(
    OutputGoogleCloudStorageKeyValueMetadatum$outboundSchema.parse(
      outputGoogleCloudStorageKeyValueMetadatum,
    ),
  );
}

export function outputGoogleCloudStorageKeyValueMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<
  OutputGoogleCloudStorageKeyValueMetadatum,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OutputGoogleCloudStorageKeyValueMetadatum$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OutputGoogleCloudStorageKeyValueMetadatum' from JSON`,
  );
}

/** @internal */
export const OutputGoogleCloudStorage$inboundSchema: z.ZodType<
  OutputGoogleCloudStorage,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputGoogleCloudStorageType$inboundSchema.optional(),
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string(),
  endpoint: z.string().default("https://storage.googleapis.com"),
  signatureVersion: OutputGoogleCloudStorageSignatureVersion$inboundSchema
    .default("v4"),
  awsAuthenticationMethod:
    OutputGoogleCloudStorageAuthenticationMethod$inboundSchema.default(
      "manual",
    ),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  destPath: z.string().default(""),
  verifyPermissions: z.boolean().default(true),
  objectACL: OutputGoogleCloudStorageObjectACL$inboundSchema.default("private"),
  storageClass: OutputGoogleCloudStorageStorageClass$inboundSchema.optional(),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputGoogleCloudStorageDataFormat$inboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputGoogleCloudStorageBackpressureBehavior$inboundSchema
    .default("block"),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure:
    OutputGoogleCloudStorageDiskSpaceProtection$inboundSchema.default("block"),
  description: z.string().optional(),
  compress: OutputGoogleCloudStorageCompression$inboundSchema.default("gzip"),
  compressionLevel: OutputGoogleCloudStorageCompressionLevel$inboundSchema
    .default("best_speed"),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputGoogleCloudStorageParquetVersion$inboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputGoogleCloudStorageDataPageVersion$inboundSchema
    .default("DATA_PAGE_V2"),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputGoogleCloudStorageKeyValueMetadatum$inboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
  awsApiKey: z.string().optional(),
  awsSecretKey: z.string().optional(),
  awsSecret: z.string().optional(),
});

/** @internal */
export type OutputGoogleCloudStorage$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  bucket: string;
  region: string;
  endpoint: string;
  signatureVersion: string;
  awsAuthenticationMethod: string;
  stagePath: string;
  destPath: string;
  verifyPermissions: boolean;
  objectACL: string;
  storageClass?: string | undefined;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  addIdToStagePath: boolean;
  removeEmptyDirs: boolean;
  partitionExpr: string;
  format: string;
  baseFileName: string;
  fileNameSuffix: string;
  maxFileSizeMB: number;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxOpenFiles: number;
  headerLine: string;
  writeHighWaterMark: number;
  onBackpressure: string;
  deadletterEnabled: boolean;
  onDiskFullBackpressure: string;
  description?: string | undefined;
  compress: string;
  compressionLevel: string;
  automaticSchema: boolean;
  parquetVersion: string;
  parquetDataPageVersion: string;
  parquetRowGroupLength: number;
  parquetPageSize: string;
  shouldLogInvalidRows?: boolean | undefined;
  keyValueMetadata?:
    | Array<OutputGoogleCloudStorageKeyValueMetadatum$Outbound>
    | undefined;
  enableStatistics: boolean;
  enableWritePageIndex: boolean;
  enablePageChecksum: boolean;
  emptyDirCleanupSec: number;
  deadletterPath: string;
  maxRetryNum: number;
  awsApiKey?: string | undefined;
  awsSecretKey?: string | undefined;
  awsSecret?: string | undefined;
};

/** @internal */
export const OutputGoogleCloudStorage$outboundSchema: z.ZodType<
  OutputGoogleCloudStorage$Outbound,
  z.ZodTypeDef,
  OutputGoogleCloudStorage
> = z.object({
  id: z.string().optional(),
  type: OutputGoogleCloudStorageType$outboundSchema.optional(),
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string(),
  endpoint: z.string().default("https://storage.googleapis.com"),
  signatureVersion: OutputGoogleCloudStorageSignatureVersion$outboundSchema
    .default("v4"),
  awsAuthenticationMethod:
    OutputGoogleCloudStorageAuthenticationMethod$outboundSchema.default(
      "manual",
    ),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  destPath: z.string().default(""),
  verifyPermissions: z.boolean().default(true),
  objectACL: OutputGoogleCloudStorageObjectACL$outboundSchema.default(
    "private",
  ),
  storageClass: OutputGoogleCloudStorageStorageClass$outboundSchema.optional(),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputGoogleCloudStorageDataFormat$outboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputGoogleCloudStorageBackpressureBehavior$outboundSchema
    .default("block"),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure:
    OutputGoogleCloudStorageDiskSpaceProtection$outboundSchema.default("block"),
  description: z.string().optional(),
  compress: OutputGoogleCloudStorageCompression$outboundSchema.default("gzip"),
  compressionLevel: OutputGoogleCloudStorageCompressionLevel$outboundSchema
    .default("best_speed"),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputGoogleCloudStorageParquetVersion$outboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputGoogleCloudStorageDataPageVersion$outboundSchema
    .default("DATA_PAGE_V2"),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputGoogleCloudStorageKeyValueMetadatum$outboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
  awsApiKey: z.string().optional(),
  awsSecretKey: z.string().optional(),
  awsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputGoogleCloudStorage$ {
  /** @deprecated use `OutputGoogleCloudStorage$inboundSchema` instead. */
  export const inboundSchema = OutputGoogleCloudStorage$inboundSchema;
  /** @deprecated use `OutputGoogleCloudStorage$outboundSchema` instead. */
  export const outboundSchema = OutputGoogleCloudStorage$outboundSchema;
  /** @deprecated use `OutputGoogleCloudStorage$Outbound` instead. */
  export type Outbound = OutputGoogleCloudStorage$Outbound;
}

export function outputGoogleCloudStorageToJSON(
  outputGoogleCloudStorage: OutputGoogleCloudStorage,
): string {
  return JSON.stringify(
    OutputGoogleCloudStorage$outboundSchema.parse(outputGoogleCloudStorage),
  );
}

export function outputGoogleCloudStorageFromJSON(
  jsonString: string,
): SafeParseResult<OutputGoogleCloudStorage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputGoogleCloudStorage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputGoogleCloudStorage' from JSON`,
  );
}
