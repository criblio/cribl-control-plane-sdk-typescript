/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { CriblControlPlaneError } from "./criblcontrolplaneerror.js";

export type HealthStatusErrorData = {
  role?: models.Role | undefined;
  status: models.Status;
  startTime: number;
};

export class HealthStatusError extends CriblControlPlaneError {
  role?: models.Role | undefined;
  status: models.Status;
  startTime: number;

  /** The original data that was passed to this error instance. */
  data$: HealthStatusErrorData;

  constructor(
    err: HealthStatusErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.role != null) this.role = err.role;
    this.status = err.status;
    this.startTime = err.startTime;

    this.name = "HealthStatusError";
  }
}

/** @internal */
export const HealthStatusError$inboundSchema: z.ZodType<
  HealthStatusError,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: models.Role$inboundSchema.optional(),
  status: models.Status$inboundSchema,
  startTime: z.number(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HealthStatusError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HealthStatusError$Outbound = {
  role?: string | undefined;
  status: string;
  startTime: number;
};

/** @internal */
export const HealthStatusError$outboundSchema: z.ZodType<
  HealthStatusError$Outbound,
  z.ZodTypeDef,
  HealthStatusError
> = z.instanceof(HealthStatusError)
  .transform(v => v.data$)
  .pipe(z.object({
    role: models.Role$outboundSchema.optional(),
    status: models.Status$outboundSchema,
    startTime: z.number(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthStatusError$ {
  /** @deprecated use `HealthStatusError$inboundSchema` instead. */
  export const inboundSchema = HealthStatusError$inboundSchema;
  /** @deprecated use `HealthStatusError$outboundSchema` instead. */
  export const outboundSchema = HealthStatusError$outboundSchema;
  /** @deprecated use `HealthStatusError$Outbound` instead. */
  export type Outbound = HealthStatusError$Outbound;
}
