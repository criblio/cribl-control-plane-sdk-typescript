/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import * as models from "../index.js";
import { CriblControlPlaneError } from "./criblcontrolplaneerror.js";

export type HealthServerStatusErrorData = {
  role?: models.Role | undefined;
  startTime: number;
  status: models.Status;
};

export class HealthServerStatusError extends CriblControlPlaneError {
  role?: models.Role | undefined;
  startTime: number;
  status: models.Status;

  /** The original data that was passed to this error instance. */
  data$: HealthServerStatusErrorData;

  constructor(
    err: HealthServerStatusErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.role != null) this.role = err.role;
    this.startTime = err.startTime;
    this.status = err.status;

    this.name = "HealthServerStatusError";
  }
}

/** @internal */
export const HealthServerStatusError$inboundSchema: z.ZodType<
  HealthServerStatusError,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: models.Role$inboundSchema.optional(),
  startTime: z.number(),
  status: models.Status$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new HealthServerStatusError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HealthServerStatusError$Outbound = {
  role?: string | undefined;
  startTime: number;
  status: string;
};

/** @internal */
export const HealthServerStatusError$outboundSchema: z.ZodType<
  HealthServerStatusError$Outbound,
  z.ZodTypeDef,
  HealthServerStatusError
> = z.instanceof(HealthServerStatusError)
  .transform(v => v.data$)
  .pipe(z.object({
    role: models.Role$outboundSchema.optional(),
    startTime: z.number(),
    status: models.Status$outboundSchema,
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthServerStatusError$ {
  /** @deprecated use `HealthServerStatusError$inboundSchema` instead. */
  export const inboundSchema = HealthServerStatusError$inboundSchema;
  /** @deprecated use `HealthServerStatusError$outboundSchema` instead. */
  export const outboundSchema = HealthServerStatusError$outboundSchema;
  /** @deprecated use `HealthServerStatusError$Outbound` instead. */
  export type Outbound = HealthServerStatusError$Outbound;
}
