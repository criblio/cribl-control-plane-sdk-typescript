/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CommonServiceLimitConfigs,
  CommonServiceLimitConfigs$inboundSchema,
  CommonServiceLimitConfigs$Outbound,
  CommonServiceLimitConfigs$outboundSchema,
} from "./commonservicelimitconfigs.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ServicesLimits = {
  connections: CommonServiceLimitConfigs;
  metrics: CommonServiceLimitConfigs;
  notifications: CommonServiceLimitConfigs;
};

/** @internal */
export const ServicesLimits$inboundSchema: z.ZodType<
  ServicesLimits,
  z.ZodTypeDef,
  unknown
> = z.object({
  connections: CommonServiceLimitConfigs$inboundSchema,
  metrics: CommonServiceLimitConfigs$inboundSchema,
  notifications: CommonServiceLimitConfigs$inboundSchema,
});

/** @internal */
export type ServicesLimits$Outbound = {
  connections: CommonServiceLimitConfigs$Outbound;
  metrics: CommonServiceLimitConfigs$Outbound;
  notifications: CommonServiceLimitConfigs$Outbound;
};

/** @internal */
export const ServicesLimits$outboundSchema: z.ZodType<
  ServicesLimits$Outbound,
  z.ZodTypeDef,
  ServicesLimits
> = z.object({
  connections: CommonServiceLimitConfigs$outboundSchema,
  metrics: CommonServiceLimitConfigs$outboundSchema,
  notifications: CommonServiceLimitConfigs$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServicesLimits$ {
  /** @deprecated use `ServicesLimits$inboundSchema` instead. */
  export const inboundSchema = ServicesLimits$inboundSchema;
  /** @deprecated use `ServicesLimits$outboundSchema` instead. */
  export const outboundSchema = ServicesLimits$outboundSchema;
  /** @deprecated use `ServicesLimits$Outbound` instead. */
  export type Outbound = ServicesLimits$Outbound;
}

export function servicesLimitsToJSON(servicesLimits: ServicesLimits): string {
  return JSON.stringify(ServicesLimits$outboundSchema.parse(servicesLimits));
}

export function servicesLimitsFromJSON(
  jsonString: string,
): SafeParseResult<ServicesLimits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServicesLimits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServicesLimits' from JSON`,
  );
}
