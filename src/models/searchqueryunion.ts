/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExpectedOutputType,
  ExpectedOutputType$inboundSchema,
  ExpectedOutputType$outboundSchema,
} from "./expectedoutputtype.js";
import {
  PanelQueryDefinition,
  PanelQueryDefinition$inboundSchema,
  PanelQueryDefinition$Outbound,
  PanelQueryDefinition$outboundSchema,
} from "./panelquerydefinition.js";
import {
  SavesSearchRunMode,
  SavesSearchRunMode$inboundSchema,
  SavesSearchRunMode$outboundSchema,
} from "./savessearchrunmode.js";

export type Earliest2 = string | number;

export type Latest2 = string | number;

export const SearchQueryType5 = {
  Metric: "metric",
} as const;
export type SearchQueryType5 = OpenEnum<typeof SearchQueryType5>;

export type SearchQuery5 = {
  earliest: string | number;
  expectedOutputType?: ExpectedOutputType | undefined;
  latest: string | number;
  queries: Array<PanelQueryDefinition>;
  timezone?: string | undefined;
  type: SearchQueryType5;
};

export const SearchQueryType4 = {
  Empty: "empty",
} as const;
export type SearchQueryType4 = OpenEnum<typeof SearchQueryType4>;

export type SearchQuery4 = {
  type: SearchQueryType4;
};

export const SearchQueryType3 = {
  Values: "values",
} as const;
export type SearchQueryType3 = OpenEnum<typeof SearchQueryType3>;

export type SearchQuery3 = {
  type: SearchQueryType3;
  values: Array<string>;
};

export type Earliest1 = string | number;

export type Latest1 = string | number;

export const SearchQueryType2 = {
  Inline: "inline",
} as const;
export type SearchQueryType2 = OpenEnum<typeof SearchQueryType2>;

export type SearchQuery2 = {
  earliest: string | number;
  expectedOutputType?: ExpectedOutputType | undefined;
  latest: string | number;
  parentSearchId?: string | undefined;
  query: string;
  sampleRate?: number | undefined;
  timezone?: string | undefined;
  type: SearchQueryType2;
};

export const SearchQueryType1 = {
  Saved: "saved",
} as const;
export type SearchQueryType1 = OpenEnum<typeof SearchQueryType1>;

export type SearchQuery1 = {
  query?: string | undefined;
  queryId: string;
  runMode?: SavesSearchRunMode | undefined;
  type: SearchQueryType1;
};

export type SearchQueryUnion =
  | SearchQuery2
  | SearchQuery5
  | SearchQuery1
  | SearchQuery3
  | SearchQuery4;

/** @internal */
export const Earliest2$inboundSchema: z.ZodType<
  Earliest2,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type Earliest2$Outbound = string | number;

/** @internal */
export const Earliest2$outboundSchema: z.ZodType<
  Earliest2$Outbound,
  z.ZodTypeDef,
  Earliest2
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Earliest2$ {
  /** @deprecated use `Earliest2$inboundSchema` instead. */
  export const inboundSchema = Earliest2$inboundSchema;
  /** @deprecated use `Earliest2$outboundSchema` instead. */
  export const outboundSchema = Earliest2$outboundSchema;
  /** @deprecated use `Earliest2$Outbound` instead. */
  export type Outbound = Earliest2$Outbound;
}

export function earliest2ToJSON(earliest2: Earliest2): string {
  return JSON.stringify(Earliest2$outboundSchema.parse(earliest2));
}

export function earliest2FromJSON(
  jsonString: string,
): SafeParseResult<Earliest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Earliest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Earliest2' from JSON`,
  );
}

/** @internal */
export const Latest2$inboundSchema: z.ZodType<Latest2, z.ZodTypeDef, unknown> =
  z.union([z.string(), z.number()]);

/** @internal */
export type Latest2$Outbound = string | number;

/** @internal */
export const Latest2$outboundSchema: z.ZodType<
  Latest2$Outbound,
  z.ZodTypeDef,
  Latest2
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Latest2$ {
  /** @deprecated use `Latest2$inboundSchema` instead. */
  export const inboundSchema = Latest2$inboundSchema;
  /** @deprecated use `Latest2$outboundSchema` instead. */
  export const outboundSchema = Latest2$outboundSchema;
  /** @deprecated use `Latest2$Outbound` instead. */
  export type Outbound = Latest2$Outbound;
}

export function latest2ToJSON(latest2: Latest2): string {
  return JSON.stringify(Latest2$outboundSchema.parse(latest2));
}

export function latest2FromJSON(
  jsonString: string,
): SafeParseResult<Latest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Latest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Latest2' from JSON`,
  );
}

/** @internal */
export const SearchQueryType5$inboundSchema: z.ZodType<
  SearchQueryType5,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchQueryType5),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchQueryType5$outboundSchema: z.ZodType<
  SearchQueryType5,
  z.ZodTypeDef,
  SearchQueryType5
> = z.union([
  z.nativeEnum(SearchQueryType5),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQueryType5$ {
  /** @deprecated use `SearchQueryType5$inboundSchema` instead. */
  export const inboundSchema = SearchQueryType5$inboundSchema;
  /** @deprecated use `SearchQueryType5$outboundSchema` instead. */
  export const outboundSchema = SearchQueryType5$outboundSchema;
}

/** @internal */
export const SearchQuery5$inboundSchema: z.ZodType<
  SearchQuery5,
  z.ZodTypeDef,
  unknown
> = z.object({
  earliest: z.union([z.string(), z.number()]),
  expectedOutputType: ExpectedOutputType$inboundSchema.optional(),
  latest: z.union([z.string(), z.number()]),
  queries: z.array(PanelQueryDefinition$inboundSchema),
  timezone: z.string().optional(),
  type: SearchQueryType5$inboundSchema,
});

/** @internal */
export type SearchQuery5$Outbound = {
  earliest: string | number;
  expectedOutputType?: string | undefined;
  latest: string | number;
  queries: Array<PanelQueryDefinition$Outbound>;
  timezone?: string | undefined;
  type: string;
};

/** @internal */
export const SearchQuery5$outboundSchema: z.ZodType<
  SearchQuery5$Outbound,
  z.ZodTypeDef,
  SearchQuery5
> = z.object({
  earliest: z.union([z.string(), z.number()]),
  expectedOutputType: ExpectedOutputType$outboundSchema.optional(),
  latest: z.union([z.string(), z.number()]),
  queries: z.array(PanelQueryDefinition$outboundSchema),
  timezone: z.string().optional(),
  type: SearchQueryType5$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQuery5$ {
  /** @deprecated use `SearchQuery5$inboundSchema` instead. */
  export const inboundSchema = SearchQuery5$inboundSchema;
  /** @deprecated use `SearchQuery5$outboundSchema` instead. */
  export const outboundSchema = SearchQuery5$outboundSchema;
  /** @deprecated use `SearchQuery5$Outbound` instead. */
  export type Outbound = SearchQuery5$Outbound;
}

export function searchQuery5ToJSON(searchQuery5: SearchQuery5): string {
  return JSON.stringify(SearchQuery5$outboundSchema.parse(searchQuery5));
}

export function searchQuery5FromJSON(
  jsonString: string,
): SafeParseResult<SearchQuery5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchQuery5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchQuery5' from JSON`,
  );
}

/** @internal */
export const SearchQueryType4$inboundSchema: z.ZodType<
  SearchQueryType4,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchQueryType4),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchQueryType4$outboundSchema: z.ZodType<
  SearchQueryType4,
  z.ZodTypeDef,
  SearchQueryType4
> = z.union([
  z.nativeEnum(SearchQueryType4),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQueryType4$ {
  /** @deprecated use `SearchQueryType4$inboundSchema` instead. */
  export const inboundSchema = SearchQueryType4$inboundSchema;
  /** @deprecated use `SearchQueryType4$outboundSchema` instead. */
  export const outboundSchema = SearchQueryType4$outboundSchema;
}

/** @internal */
export const SearchQuery4$inboundSchema: z.ZodType<
  SearchQuery4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SearchQueryType4$inboundSchema,
});

/** @internal */
export type SearchQuery4$Outbound = {
  type: string;
};

/** @internal */
export const SearchQuery4$outboundSchema: z.ZodType<
  SearchQuery4$Outbound,
  z.ZodTypeDef,
  SearchQuery4
> = z.object({
  type: SearchQueryType4$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQuery4$ {
  /** @deprecated use `SearchQuery4$inboundSchema` instead. */
  export const inboundSchema = SearchQuery4$inboundSchema;
  /** @deprecated use `SearchQuery4$outboundSchema` instead. */
  export const outboundSchema = SearchQuery4$outboundSchema;
  /** @deprecated use `SearchQuery4$Outbound` instead. */
  export type Outbound = SearchQuery4$Outbound;
}

export function searchQuery4ToJSON(searchQuery4: SearchQuery4): string {
  return JSON.stringify(SearchQuery4$outboundSchema.parse(searchQuery4));
}

export function searchQuery4FromJSON(
  jsonString: string,
): SafeParseResult<SearchQuery4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchQuery4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchQuery4' from JSON`,
  );
}

/** @internal */
export const SearchQueryType3$inboundSchema: z.ZodType<
  SearchQueryType3,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchQueryType3),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchQueryType3$outboundSchema: z.ZodType<
  SearchQueryType3,
  z.ZodTypeDef,
  SearchQueryType3
> = z.union([
  z.nativeEnum(SearchQueryType3),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQueryType3$ {
  /** @deprecated use `SearchQueryType3$inboundSchema` instead. */
  export const inboundSchema = SearchQueryType3$inboundSchema;
  /** @deprecated use `SearchQueryType3$outboundSchema` instead. */
  export const outboundSchema = SearchQueryType3$outboundSchema;
}

/** @internal */
export const SearchQuery3$inboundSchema: z.ZodType<
  SearchQuery3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SearchQueryType3$inboundSchema,
  values: z.array(z.string()),
});

/** @internal */
export type SearchQuery3$Outbound = {
  type: string;
  values: Array<string>;
};

/** @internal */
export const SearchQuery3$outboundSchema: z.ZodType<
  SearchQuery3$Outbound,
  z.ZodTypeDef,
  SearchQuery3
> = z.object({
  type: SearchQueryType3$outboundSchema,
  values: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQuery3$ {
  /** @deprecated use `SearchQuery3$inboundSchema` instead. */
  export const inboundSchema = SearchQuery3$inboundSchema;
  /** @deprecated use `SearchQuery3$outboundSchema` instead. */
  export const outboundSchema = SearchQuery3$outboundSchema;
  /** @deprecated use `SearchQuery3$Outbound` instead. */
  export type Outbound = SearchQuery3$Outbound;
}

export function searchQuery3ToJSON(searchQuery3: SearchQuery3): string {
  return JSON.stringify(SearchQuery3$outboundSchema.parse(searchQuery3));
}

export function searchQuery3FromJSON(
  jsonString: string,
): SafeParseResult<SearchQuery3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchQuery3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchQuery3' from JSON`,
  );
}

/** @internal */
export const Earliest1$inboundSchema: z.ZodType<
  Earliest1,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type Earliest1$Outbound = string | number;

/** @internal */
export const Earliest1$outboundSchema: z.ZodType<
  Earliest1$Outbound,
  z.ZodTypeDef,
  Earliest1
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Earliest1$ {
  /** @deprecated use `Earliest1$inboundSchema` instead. */
  export const inboundSchema = Earliest1$inboundSchema;
  /** @deprecated use `Earliest1$outboundSchema` instead. */
  export const outboundSchema = Earliest1$outboundSchema;
  /** @deprecated use `Earliest1$Outbound` instead. */
  export type Outbound = Earliest1$Outbound;
}

export function earliest1ToJSON(earliest1: Earliest1): string {
  return JSON.stringify(Earliest1$outboundSchema.parse(earliest1));
}

export function earliest1FromJSON(
  jsonString: string,
): SafeParseResult<Earliest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Earliest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Earliest1' from JSON`,
  );
}

/** @internal */
export const Latest1$inboundSchema: z.ZodType<Latest1, z.ZodTypeDef, unknown> =
  z.union([z.string(), z.number()]);

/** @internal */
export type Latest1$Outbound = string | number;

/** @internal */
export const Latest1$outboundSchema: z.ZodType<
  Latest1$Outbound,
  z.ZodTypeDef,
  Latest1
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Latest1$ {
  /** @deprecated use `Latest1$inboundSchema` instead. */
  export const inboundSchema = Latest1$inboundSchema;
  /** @deprecated use `Latest1$outboundSchema` instead. */
  export const outboundSchema = Latest1$outboundSchema;
  /** @deprecated use `Latest1$Outbound` instead. */
  export type Outbound = Latest1$Outbound;
}

export function latest1ToJSON(latest1: Latest1): string {
  return JSON.stringify(Latest1$outboundSchema.parse(latest1));
}

export function latest1FromJSON(
  jsonString: string,
): SafeParseResult<Latest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Latest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Latest1' from JSON`,
  );
}

/** @internal */
export const SearchQueryType2$inboundSchema: z.ZodType<
  SearchQueryType2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchQueryType2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchQueryType2$outboundSchema: z.ZodType<
  SearchQueryType2,
  z.ZodTypeDef,
  SearchQueryType2
> = z.union([
  z.nativeEnum(SearchQueryType2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQueryType2$ {
  /** @deprecated use `SearchQueryType2$inboundSchema` instead. */
  export const inboundSchema = SearchQueryType2$inboundSchema;
  /** @deprecated use `SearchQueryType2$outboundSchema` instead. */
  export const outboundSchema = SearchQueryType2$outboundSchema;
}

/** @internal */
export const SearchQuery2$inboundSchema: z.ZodType<
  SearchQuery2,
  z.ZodTypeDef,
  unknown
> = z.object({
  earliest: z.union([z.string(), z.number()]),
  expectedOutputType: ExpectedOutputType$inboundSchema.optional(),
  latest: z.union([z.string(), z.number()]),
  parentSearchId: z.string().optional(),
  query: z.string(),
  sampleRate: z.number().optional(),
  timezone: z.string().optional(),
  type: SearchQueryType2$inboundSchema,
});

/** @internal */
export type SearchQuery2$Outbound = {
  earliest: string | number;
  expectedOutputType?: string | undefined;
  latest: string | number;
  parentSearchId?: string | undefined;
  query: string;
  sampleRate?: number | undefined;
  timezone?: string | undefined;
  type: string;
};

/** @internal */
export const SearchQuery2$outboundSchema: z.ZodType<
  SearchQuery2$Outbound,
  z.ZodTypeDef,
  SearchQuery2
> = z.object({
  earliest: z.union([z.string(), z.number()]),
  expectedOutputType: ExpectedOutputType$outboundSchema.optional(),
  latest: z.union([z.string(), z.number()]),
  parentSearchId: z.string().optional(),
  query: z.string(),
  sampleRate: z.number().optional(),
  timezone: z.string().optional(),
  type: SearchQueryType2$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQuery2$ {
  /** @deprecated use `SearchQuery2$inboundSchema` instead. */
  export const inboundSchema = SearchQuery2$inboundSchema;
  /** @deprecated use `SearchQuery2$outboundSchema` instead. */
  export const outboundSchema = SearchQuery2$outboundSchema;
  /** @deprecated use `SearchQuery2$Outbound` instead. */
  export type Outbound = SearchQuery2$Outbound;
}

export function searchQuery2ToJSON(searchQuery2: SearchQuery2): string {
  return JSON.stringify(SearchQuery2$outboundSchema.parse(searchQuery2));
}

export function searchQuery2FromJSON(
  jsonString: string,
): SafeParseResult<SearchQuery2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchQuery2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchQuery2' from JSON`,
  );
}

/** @internal */
export const SearchQueryType1$inboundSchema: z.ZodType<
  SearchQueryType1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(SearchQueryType1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SearchQueryType1$outboundSchema: z.ZodType<
  SearchQueryType1,
  z.ZodTypeDef,
  SearchQueryType1
> = z.union([
  z.nativeEnum(SearchQueryType1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQueryType1$ {
  /** @deprecated use `SearchQueryType1$inboundSchema` instead. */
  export const inboundSchema = SearchQueryType1$inboundSchema;
  /** @deprecated use `SearchQueryType1$outboundSchema` instead. */
  export const outboundSchema = SearchQueryType1$outboundSchema;
}

/** @internal */
export const SearchQuery1$inboundSchema: z.ZodType<
  SearchQuery1,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  queryId: z.string(),
  runMode: SavesSearchRunMode$inboundSchema.optional(),
  type: SearchQueryType1$inboundSchema,
});

/** @internal */
export type SearchQuery1$Outbound = {
  query?: string | undefined;
  queryId: string;
  runMode?: string | undefined;
  type: string;
};

/** @internal */
export const SearchQuery1$outboundSchema: z.ZodType<
  SearchQuery1$Outbound,
  z.ZodTypeDef,
  SearchQuery1
> = z.object({
  query: z.string().optional(),
  queryId: z.string(),
  runMode: SavesSearchRunMode$outboundSchema.optional(),
  type: SearchQueryType1$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQuery1$ {
  /** @deprecated use `SearchQuery1$inboundSchema` instead. */
  export const inboundSchema = SearchQuery1$inboundSchema;
  /** @deprecated use `SearchQuery1$outboundSchema` instead. */
  export const outboundSchema = SearchQuery1$outboundSchema;
  /** @deprecated use `SearchQuery1$Outbound` instead. */
  export type Outbound = SearchQuery1$Outbound;
}

export function searchQuery1ToJSON(searchQuery1: SearchQuery1): string {
  return JSON.stringify(SearchQuery1$outboundSchema.parse(searchQuery1));
}

export function searchQuery1FromJSON(
  jsonString: string,
): SafeParseResult<SearchQuery1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchQuery1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchQuery1' from JSON`,
  );
}

/** @internal */
export const SearchQueryUnion$inboundSchema: z.ZodType<
  SearchQueryUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SearchQuery2$inboundSchema),
  z.lazy(() => SearchQuery5$inboundSchema),
  z.lazy(() => SearchQuery1$inboundSchema),
  z.lazy(() => SearchQuery3$inboundSchema),
  z.lazy(() => SearchQuery4$inboundSchema),
]);

/** @internal */
export type SearchQueryUnion$Outbound =
  | SearchQuery2$Outbound
  | SearchQuery5$Outbound
  | SearchQuery1$Outbound
  | SearchQuery3$Outbound
  | SearchQuery4$Outbound;

/** @internal */
export const SearchQueryUnion$outboundSchema: z.ZodType<
  SearchQueryUnion$Outbound,
  z.ZodTypeDef,
  SearchQueryUnion
> = z.union([
  z.lazy(() => SearchQuery2$outboundSchema),
  z.lazy(() => SearchQuery5$outboundSchema),
  z.lazy(() => SearchQuery1$outboundSchema),
  z.lazy(() => SearchQuery3$outboundSchema),
  z.lazy(() => SearchQuery4$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQueryUnion$ {
  /** @deprecated use `SearchQueryUnion$inboundSchema` instead. */
  export const inboundSchema = SearchQueryUnion$inboundSchema;
  /** @deprecated use `SearchQueryUnion$outboundSchema` instead. */
  export const outboundSchema = SearchQueryUnion$outboundSchema;
  /** @deprecated use `SearchQueryUnion$Outbound` instead. */
  export type Outbound = SearchQueryUnion$Outbound;
}

export function searchQueryUnionToJSON(
  searchQueryUnion: SearchQueryUnion,
): string {
  return JSON.stringify(
    SearchQueryUnion$outboundSchema.parse(searchQueryUnion),
  );
}

export function searchQueryUnionFromJSON(
  jsonString: string,
): SafeParseResult<SearchQueryUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchQueryUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchQueryUnion' from JSON`,
  );
}
