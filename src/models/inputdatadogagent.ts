/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputDatadogAgentType = {
  DatadogAgent: "datadog_agent",
} as const;
export type InputDatadogAgentType = ClosedEnum<typeof InputDatadogAgentType>;

export type InputDatadogAgentConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputDatadogAgentMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputDatadogAgentMode = ClosedEnum<typeof InputDatadogAgentMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputDatadogAgentCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputDatadogAgentCompression = ClosedEnum<
  typeof InputDatadogAgentCompression
>;

export type InputDatadogAgentPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputDatadogAgentMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputDatadogAgentCompression | undefined;
};

export const InputDatadogAgentMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputDatadogAgentMinimumTLSVersion = ClosedEnum<
  typeof InputDatadogAgentMinimumTLSVersion
>;

export const InputDatadogAgentMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputDatadogAgentMaximumTLSVersion = ClosedEnum<
  typeof InputDatadogAgentMaximumTLSVersion
>;

export type InputDatadogAgentTLSSettingsServerSide = {
  disabled?: boolean | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: InputDatadogAgentMinimumTLSVersion | undefined;
  maxVersion?: InputDatadogAgentMaximumTLSVersion | undefined;
};

export type InputDatadogAgentMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputDatadogAgentProxyMode = {
  /**
   * Toggle to Yes to send key validation requests from Datadog Agent to the Datadog API. If toggled to No (the default), Stream handles key validation requests by always responding that the key is valid.
   */
  enabled?: boolean | undefined;
  /**
   * Whether to reject certificates that cannot be verified against a valid CA (e.g., self-signed certificates).
   */
  rejectUnauthorized?: boolean | undefined;
};

export type InputDatadogAgent = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputDatadogAgentType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputDatadogAgentConnection> | undefined;
  pq?: InputDatadogAgentPq | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  tls?: InputDatadogAgentTLSSettingsServerSide | undefined;
  /**
   * Maximum number of active requests allowed per Worker Process. Set to 0 for unlimited. Caution: Increasing the limit above the default value, or setting it to unlimited, may degrade performance and reduce throughput.
   */
  maxActiveReq?: number | undefined;
  /**
   * Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
   */
  maxRequestsPerSocket?: number | undefined;
  /**
   * Extract the client IP and port from PROXY protocol v1/v2. When enabled, the X-Forwarded-For header is ignored. Disable to use the X-Forwarded-For header for client IP extraction.
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Add request headers to events, in the __headers field
   */
  captureHeaders?: boolean | undefined;
  /**
   * How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
   */
  activityLogSampleRate?: number | undefined;
  /**
   * How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
   */
  requestTimeout?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
   */
  socketTimeout?: number | undefined;
  /**
   * After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 second, maximum 600 seconds (10 minutes).
   */
  keepAliveTimeout?: number | undefined;
  /**
   * Expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
   */
  enableHealthCheck?: boolean | undefined;
  /**
   * Messages from matched IP addresses will be processed, unless also matched by the denylist
   */
  ipAllowlistRegex?: string | undefined;
  /**
   * Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
   */
  ipDenylistRegex?: string | undefined;
  /**
   * Toggle to Yes to extract each incoming metric to multiple events, one per data point. This works well when sending metrics to a statsd-type output. If sending metrics to DatadogHQ or any destination that accepts arbitrary JSON, leave toggled to No (the default).
   */
  extractMetrics?: boolean | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputDatadogAgentMetadatum> | undefined;
  proxyMode?: InputDatadogAgentProxyMode | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputDatadogAgentType$inboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentType
> = z.nativeEnum(InputDatadogAgentType);

/** @internal */
export const InputDatadogAgentType$outboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentType
> = InputDatadogAgentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentType$ {
  /** @deprecated use `InputDatadogAgentType$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgentType$inboundSchema;
  /** @deprecated use `InputDatadogAgentType$outboundSchema` instead. */
  export const outboundSchema = InputDatadogAgentType$outboundSchema;
}

/** @internal */
export const InputDatadogAgentConnection$inboundSchema: z.ZodType<
  InputDatadogAgentConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputDatadogAgentConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputDatadogAgentConnection$outboundSchema: z.ZodType<
  InputDatadogAgentConnection$Outbound,
  z.ZodTypeDef,
  InputDatadogAgentConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentConnection$ {
  /** @deprecated use `InputDatadogAgentConnection$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgentConnection$inboundSchema;
  /** @deprecated use `InputDatadogAgentConnection$outboundSchema` instead. */
  export const outboundSchema = InputDatadogAgentConnection$outboundSchema;
  /** @deprecated use `InputDatadogAgentConnection$Outbound` instead. */
  export type Outbound = InputDatadogAgentConnection$Outbound;
}

export function inputDatadogAgentConnectionToJSON(
  inputDatadogAgentConnection: InputDatadogAgentConnection,
): string {
  return JSON.stringify(
    InputDatadogAgentConnection$outboundSchema.parse(
      inputDatadogAgentConnection,
    ),
  );
}

export function inputDatadogAgentConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputDatadogAgentConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputDatadogAgentConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputDatadogAgentConnection' from JSON`,
  );
}

/** @internal */
export const InputDatadogAgentMode$inboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentMode
> = z.nativeEnum(InputDatadogAgentMode);

/** @internal */
export const InputDatadogAgentMode$outboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentMode
> = InputDatadogAgentMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentMode$ {
  /** @deprecated use `InputDatadogAgentMode$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgentMode$inboundSchema;
  /** @deprecated use `InputDatadogAgentMode$outboundSchema` instead. */
  export const outboundSchema = InputDatadogAgentMode$outboundSchema;
}

/** @internal */
export const InputDatadogAgentCompression$inboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentCompression
> = z.nativeEnum(InputDatadogAgentCompression);

/** @internal */
export const InputDatadogAgentCompression$outboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentCompression
> = InputDatadogAgentCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentCompression$ {
  /** @deprecated use `InputDatadogAgentCompression$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgentCompression$inboundSchema;
  /** @deprecated use `InputDatadogAgentCompression$outboundSchema` instead. */
  export const outboundSchema = InputDatadogAgentCompression$outboundSchema;
}

/** @internal */
export const InputDatadogAgentPq$inboundSchema: z.ZodType<
  InputDatadogAgentPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputDatadogAgentMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputDatadogAgentCompression$inboundSchema.default("none"),
});

/** @internal */
export type InputDatadogAgentPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
};

/** @internal */
export const InputDatadogAgentPq$outboundSchema: z.ZodType<
  InputDatadogAgentPq$Outbound,
  z.ZodTypeDef,
  InputDatadogAgentPq
> = z.object({
  mode: InputDatadogAgentMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputDatadogAgentCompression$outboundSchema.default("none"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentPq$ {
  /** @deprecated use `InputDatadogAgentPq$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgentPq$inboundSchema;
  /** @deprecated use `InputDatadogAgentPq$outboundSchema` instead. */
  export const outboundSchema = InputDatadogAgentPq$outboundSchema;
  /** @deprecated use `InputDatadogAgentPq$Outbound` instead. */
  export type Outbound = InputDatadogAgentPq$Outbound;
}

export function inputDatadogAgentPqToJSON(
  inputDatadogAgentPq: InputDatadogAgentPq,
): string {
  return JSON.stringify(
    InputDatadogAgentPq$outboundSchema.parse(inputDatadogAgentPq),
  );
}

export function inputDatadogAgentPqFromJSON(
  jsonString: string,
): SafeParseResult<InputDatadogAgentPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputDatadogAgentPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputDatadogAgentPq' from JSON`,
  );
}

/** @internal */
export const InputDatadogAgentMinimumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentMinimumTLSVersion
> = z.nativeEnum(InputDatadogAgentMinimumTLSVersion);

/** @internal */
export const InputDatadogAgentMinimumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentMinimumTLSVersion
> = InputDatadogAgentMinimumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentMinimumTLSVersion$ {
  /** @deprecated use `InputDatadogAgentMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgentMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputDatadogAgentMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputDatadogAgentMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputDatadogAgentMaximumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentMaximumTLSVersion
> = z.nativeEnum(InputDatadogAgentMaximumTLSVersion);

/** @internal */
export const InputDatadogAgentMaximumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof InputDatadogAgentMaximumTLSVersion
> = InputDatadogAgentMaximumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentMaximumTLSVersion$ {
  /** @deprecated use `InputDatadogAgentMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgentMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputDatadogAgentMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputDatadogAgentMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputDatadogAgentTLSSettingsServerSide$inboundSchema: z.ZodType<
  InputDatadogAgentTLSSettingsServerSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputDatadogAgentMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputDatadogAgentMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputDatadogAgentTLSSettingsServerSide$Outbound = {
  disabled: boolean;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  requestCert: boolean;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputDatadogAgentTLSSettingsServerSide$outboundSchema: z.ZodType<
  InputDatadogAgentTLSSettingsServerSide$Outbound,
  z.ZodTypeDef,
  InputDatadogAgentTLSSettingsServerSide
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputDatadogAgentMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputDatadogAgentMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentTLSSettingsServerSide$ {
  /** @deprecated use `InputDatadogAgentTLSSettingsServerSide$inboundSchema` instead. */
  export const inboundSchema =
    InputDatadogAgentTLSSettingsServerSide$inboundSchema;
  /** @deprecated use `InputDatadogAgentTLSSettingsServerSide$outboundSchema` instead. */
  export const outboundSchema =
    InputDatadogAgentTLSSettingsServerSide$outboundSchema;
  /** @deprecated use `InputDatadogAgentTLSSettingsServerSide$Outbound` instead. */
  export type Outbound = InputDatadogAgentTLSSettingsServerSide$Outbound;
}

export function inputDatadogAgentTLSSettingsServerSideToJSON(
  inputDatadogAgentTLSSettingsServerSide:
    InputDatadogAgentTLSSettingsServerSide,
): string {
  return JSON.stringify(
    InputDatadogAgentTLSSettingsServerSide$outboundSchema.parse(
      inputDatadogAgentTLSSettingsServerSide,
    ),
  );
}

export function inputDatadogAgentTLSSettingsServerSideFromJSON(
  jsonString: string,
): SafeParseResult<InputDatadogAgentTLSSettingsServerSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InputDatadogAgentTLSSettingsServerSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputDatadogAgentTLSSettingsServerSide' from JSON`,
  );
}

/** @internal */
export const InputDatadogAgentMetadatum$inboundSchema: z.ZodType<
  InputDatadogAgentMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputDatadogAgentMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputDatadogAgentMetadatum$outboundSchema: z.ZodType<
  InputDatadogAgentMetadatum$Outbound,
  z.ZodTypeDef,
  InputDatadogAgentMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentMetadatum$ {
  /** @deprecated use `InputDatadogAgentMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgentMetadatum$inboundSchema;
  /** @deprecated use `InputDatadogAgentMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputDatadogAgentMetadatum$outboundSchema;
  /** @deprecated use `InputDatadogAgentMetadatum$Outbound` instead. */
  export type Outbound = InputDatadogAgentMetadatum$Outbound;
}

export function inputDatadogAgentMetadatumToJSON(
  inputDatadogAgentMetadatum: InputDatadogAgentMetadatum,
): string {
  return JSON.stringify(
    InputDatadogAgentMetadatum$outboundSchema.parse(inputDatadogAgentMetadatum),
  );
}

export function inputDatadogAgentMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputDatadogAgentMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputDatadogAgentMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputDatadogAgentMetadatum' from JSON`,
  );
}

/** @internal */
export const InputDatadogAgentProxyMode$inboundSchema: z.ZodType<
  InputDatadogAgentProxyMode,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().default(false),
  rejectUnauthorized: z.boolean().default(true),
});

/** @internal */
export type InputDatadogAgentProxyMode$Outbound = {
  enabled: boolean;
  rejectUnauthorized: boolean;
};

/** @internal */
export const InputDatadogAgentProxyMode$outboundSchema: z.ZodType<
  InputDatadogAgentProxyMode$Outbound,
  z.ZodTypeDef,
  InputDatadogAgentProxyMode
> = z.object({
  enabled: z.boolean().default(false),
  rejectUnauthorized: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgentProxyMode$ {
  /** @deprecated use `InputDatadogAgentProxyMode$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgentProxyMode$inboundSchema;
  /** @deprecated use `InputDatadogAgentProxyMode$outboundSchema` instead. */
  export const outboundSchema = InputDatadogAgentProxyMode$outboundSchema;
  /** @deprecated use `InputDatadogAgentProxyMode$Outbound` instead. */
  export type Outbound = InputDatadogAgentProxyMode$Outbound;
}

export function inputDatadogAgentProxyModeToJSON(
  inputDatadogAgentProxyMode: InputDatadogAgentProxyMode,
): string {
  return JSON.stringify(
    InputDatadogAgentProxyMode$outboundSchema.parse(inputDatadogAgentProxyMode),
  );
}

export function inputDatadogAgentProxyModeFromJSON(
  jsonString: string,
): SafeParseResult<InputDatadogAgentProxyMode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputDatadogAgentProxyMode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputDatadogAgentProxyMode' from JSON`,
  );
}

/** @internal */
export const InputDatadogAgent$inboundSchema: z.ZodType<
  InputDatadogAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputDatadogAgentType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputDatadogAgentConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputDatadogAgentPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputDatadogAgentTLSSettingsServerSide$inboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  extractMetrics: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputDatadogAgentMetadatum$inboundSchema))
    .optional(),
  proxyMode: z.lazy(() => InputDatadogAgentProxyMode$inboundSchema).optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputDatadogAgent$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputDatadogAgentConnection$Outbound> | undefined;
  pq?: InputDatadogAgentPq$Outbound | undefined;
  host: string;
  port: number;
  tls?: InputDatadogAgentTLSSettingsServerSide$Outbound | undefined;
  maxActiveReq: number;
  maxRequestsPerSocket: number;
  enableProxyHeader: boolean;
  captureHeaders: boolean;
  activityLogSampleRate: number;
  requestTimeout: number;
  socketTimeout: number;
  keepAliveTimeout: number;
  enableHealthCheck: boolean;
  ipAllowlistRegex: string;
  ipDenylistRegex: string;
  extractMetrics: boolean;
  metadata?: Array<InputDatadogAgentMetadatum$Outbound> | undefined;
  proxyMode?: InputDatadogAgentProxyMode$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputDatadogAgent$outboundSchema: z.ZodType<
  InputDatadogAgent$Outbound,
  z.ZodTypeDef,
  InputDatadogAgent
> = z.object({
  id: z.string().optional(),
  type: InputDatadogAgentType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputDatadogAgentConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputDatadogAgentPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputDatadogAgentTLSSettingsServerSide$outboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  extractMetrics: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputDatadogAgentMetadatum$outboundSchema))
    .optional(),
  proxyMode: z.lazy(() => InputDatadogAgentProxyMode$outboundSchema).optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDatadogAgent$ {
  /** @deprecated use `InputDatadogAgent$inboundSchema` instead. */
  export const inboundSchema = InputDatadogAgent$inboundSchema;
  /** @deprecated use `InputDatadogAgent$outboundSchema` instead. */
  export const outboundSchema = InputDatadogAgent$outboundSchema;
  /** @deprecated use `InputDatadogAgent$Outbound` instead. */
  export type Outbound = InputDatadogAgent$Outbound;
}

export function inputDatadogAgentToJSON(
  inputDatadogAgent: InputDatadogAgent,
): string {
  return JSON.stringify(
    InputDatadogAgent$outboundSchema.parse(inputDatadogAgent),
  );
}

export function inputDatadogAgentFromJSON(
  jsonString: string,
): SafeParseResult<InputDatadogAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputDatadogAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputDatadogAgent' from JSON`,
  );
}
