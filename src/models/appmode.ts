/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

export const AppMode = {
  Single: "single",
  Master: "master",
  Worker: "worker",
  Edge: "edge",
  ManagedEdge: "managed-edge",
  Outpost: "outpost",
} as const;
export type AppMode = OpenEnum<typeof AppMode>;

/** @internal */
export const AppMode$inboundSchema: z.ZodType<AppMode, z.ZodTypeDef, unknown> =
  z
    .union([
      z.nativeEnum(AppMode),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const AppMode$outboundSchema: z.ZodType<AppMode, z.ZodTypeDef, AppMode> =
  z.union([
    z.nativeEnum(AppMode),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppMode$ {
  /** @deprecated use `AppMode$inboundSchema` instead. */
  export const inboundSchema = AppMode$inboundSchema;
  /** @deprecated use `AppMode$outboundSchema` instead. */
  export const outboundSchema = AppMode$outboundSchema;
}
