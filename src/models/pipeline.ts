/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PipelineFunctionConf,
  PipelineFunctionConf$inboundSchema,
  PipelineFunctionConf$Outbound,
  PipelineFunctionConf$outboundSchema,
} from "./pipelinefunctionconf.js";

export type PipelineGroups = {
  name: string;
  /**
   * Short description of this group
   */
  description?: string | undefined;
  /**
   * Whether this group is disabled
   */
  disabled?: boolean | undefined;
};

export type Conf = {
  /**
   * Time (in ms) to wait for an async function to complete processing of a data item
   */
  asyncFuncTimeout?: number | undefined;
  /**
   * The output destination for events processed by this Pipeline
   */
  output?: string | undefined;
  description?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * List of Functions to pass data through
   */
  functions?: Array<PipelineFunctionConf> | undefined;
  groups?: { [k: string]: PipelineGroups } | undefined;
};

export type Pipeline = {
  id: string;
  conf: Conf;
};

/** @internal */
export const PipelineGroups$inboundSchema: z.ZodType<
  PipelineGroups,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  disabled: z.boolean().optional(),
});

/** @internal */
export type PipelineGroups$Outbound = {
  name: string;
  description?: string | undefined;
  disabled?: boolean | undefined;
};

/** @internal */
export const PipelineGroups$outboundSchema: z.ZodType<
  PipelineGroups$Outbound,
  z.ZodTypeDef,
  PipelineGroups
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  disabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineGroups$ {
  /** @deprecated use `PipelineGroups$inboundSchema` instead. */
  export const inboundSchema = PipelineGroups$inboundSchema;
  /** @deprecated use `PipelineGroups$outboundSchema` instead. */
  export const outboundSchema = PipelineGroups$outboundSchema;
  /** @deprecated use `PipelineGroups$Outbound` instead. */
  export type Outbound = PipelineGroups$Outbound;
}

export function pipelineGroupsToJSON(pipelineGroups: PipelineGroups): string {
  return JSON.stringify(PipelineGroups$outboundSchema.parse(pipelineGroups));
}

export function pipelineGroupsFromJSON(
  jsonString: string,
): SafeParseResult<PipelineGroups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelineGroups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelineGroups' from JSON`,
  );
}

/** @internal */
export const Conf$inboundSchema: z.ZodType<Conf, z.ZodTypeDef, unknown> = z
  .object({
    asyncFuncTimeout: z.number().int().optional(),
    output: z.string().default("default"),
    description: z.string().optional(),
    streamtags: z.array(z.string()).optional(),
    functions: z.array(PipelineFunctionConf$inboundSchema).optional(),
    groups: z.record(z.lazy(() => PipelineGroups$inboundSchema)).optional(),
  });

/** @internal */
export type Conf$Outbound = {
  asyncFuncTimeout?: number | undefined;
  output: string;
  description?: string | undefined;
  streamtags?: Array<string> | undefined;
  functions?: Array<PipelineFunctionConf$Outbound> | undefined;
  groups?: { [k: string]: PipelineGroups$Outbound } | undefined;
};

/** @internal */
export const Conf$outboundSchema: z.ZodType<Conf$Outbound, z.ZodTypeDef, Conf> =
  z.object({
    asyncFuncTimeout: z.number().int().optional(),
    output: z.string().default("default"),
    description: z.string().optional(),
    streamtags: z.array(z.string()).optional(),
    functions: z.array(PipelineFunctionConf$outboundSchema).optional(),
    groups: z.record(z.lazy(() => PipelineGroups$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conf$ {
  /** @deprecated use `Conf$inboundSchema` instead. */
  export const inboundSchema = Conf$inboundSchema;
  /** @deprecated use `Conf$outboundSchema` instead. */
  export const outboundSchema = Conf$outboundSchema;
  /** @deprecated use `Conf$Outbound` instead. */
  export type Outbound = Conf$Outbound;
}

export function confToJSON(conf: Conf): string {
  return JSON.stringify(Conf$outboundSchema.parse(conf));
}

export function confFromJSON(
  jsonString: string,
): SafeParseResult<Conf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Conf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Conf' from JSON`,
  );
}

/** @internal */
export const Pipeline$inboundSchema: z.ZodType<
  Pipeline,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  conf: z.lazy(() => Conf$inboundSchema),
});

/** @internal */
export type Pipeline$Outbound = {
  id: string;
  conf: Conf$Outbound;
};

/** @internal */
export const Pipeline$outboundSchema: z.ZodType<
  Pipeline$Outbound,
  z.ZodTypeDef,
  Pipeline
> = z.object({
  id: z.string(),
  conf: z.lazy(() => Conf$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pipeline$ {
  /** @deprecated use `Pipeline$inboundSchema` instead. */
  export const inboundSchema = Pipeline$inboundSchema;
  /** @deprecated use `Pipeline$outboundSchema` instead. */
  export const outboundSchema = Pipeline$outboundSchema;
  /** @deprecated use `Pipeline$Outbound` instead. */
  export type Outbound = Pipeline$Outbound;
}

export function pipelineToJSON(pipeline: Pipeline): string {
  return JSON.stringify(Pipeline$outboundSchema.parse(pipeline));
}

export function pipelineFromJSON(
  jsonString: string,
): SafeParseResult<Pipeline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pipeline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pipeline' from JSON`,
  );
}
