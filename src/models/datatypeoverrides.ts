/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  EventBreakerRuleset,
  EventBreakerRuleset$inboundSchema,
  EventBreakerRuleset$Outbound,
  EventBreakerRuleset$outboundSchema,
} from "./eventbreakerruleset.js";

export type DatatypeOverrides = {
  breakerRulesets?: Array<EventBreakerRuleset> | undefined;
  disableBreakers: boolean;
};

/** @internal */
export const DatatypeOverrides$inboundSchema: z.ZodType<
  DatatypeOverrides,
  z.ZodTypeDef,
  unknown
> = z.object({
  breakerRulesets: z.array(EventBreakerRuleset$inboundSchema).optional(),
  disableBreakers: z.boolean(),
});

/** @internal */
export type DatatypeOverrides$Outbound = {
  breakerRulesets?: Array<EventBreakerRuleset$Outbound> | undefined;
  disableBreakers: boolean;
};

/** @internal */
export const DatatypeOverrides$outboundSchema: z.ZodType<
  DatatypeOverrides$Outbound,
  z.ZodTypeDef,
  DatatypeOverrides
> = z.object({
  breakerRulesets: z.array(EventBreakerRuleset$outboundSchema).optional(),
  disableBreakers: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatatypeOverrides$ {
  /** @deprecated use `DatatypeOverrides$inboundSchema` instead. */
  export const inboundSchema = DatatypeOverrides$inboundSchema;
  /** @deprecated use `DatatypeOverrides$outboundSchema` instead. */
  export const outboundSchema = DatatypeOverrides$outboundSchema;
  /** @deprecated use `DatatypeOverrides$Outbound` instead. */
  export type Outbound = DatatypeOverrides$Outbound;
}

export function datatypeOverridesToJSON(
  datatypeOverrides: DatatypeOverrides,
): string {
  return JSON.stringify(
    DatatypeOverrides$outboundSchema.parse(datatypeOverrides),
  );
}

export function datatypeOverridesFromJSON(
  jsonString: string,
): SafeParseResult<DatatypeOverrides, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatatypeOverrides$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatatypeOverrides' from JSON`,
  );
}
