/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InputElementType,
  InputElementType$inboundSchema,
  InputElementType$outboundSchema,
} from "./inputelementtype.js";
import {
  MarkdownElementConfig,
  MarkdownElementConfig$inboundSchema,
  MarkdownElementConfig$Outbound,
  MarkdownElementConfig$outboundSchema,
} from "./markdownelementconfig.js";
import {
  MarkdownElementType,
  MarkdownElementType$inboundSchema,
  MarkdownElementType$outboundSchema,
} from "./markdownelementtype.js";
import {
  SearchQueryUnion,
  SearchQueryUnion$inboundSchema,
  SearchQueryUnion$Outbound,
  SearchQueryUnion$outboundSchema,
} from "./searchqueryunion.js";
import {
  TitleAction,
  TitleAction$inboundSchema,
  TitleAction$Outbound,
  TitleAction$outboundSchema,
} from "./titleaction.js";
import {
  VisualizationElementType,
  VisualizationElementType$inboundSchema,
  VisualizationElementType$Outbound,
  VisualizationElementType$outboundSchema,
} from "./visualizationelementtype.js";

export const Variant3 = {
  Markdown: "markdown",
} as const;
export type Variant3 = OpenEnum<typeof Variant3>;

export type DashboardElement3 = {
  config?: MarkdownElementConfig | undefined;
  description?: string | undefined;
  empty?: boolean | undefined;
  group?: string | undefined;
  hidePanel?: boolean | undefined;
  horizontalChart?: boolean | undefined;
  id: string;
  index?: number | undefined;
  title?: string | undefined;
  titleAction?: TitleAction | undefined;
  type: MarkdownElementType;
  variant: Variant3;
};

export const Variant2 = {
  Input: "input",
} as const;
export type Variant2 = OpenEnum<typeof Variant2>;

export type DashboardElement2 = {
  description?: string | undefined;
  empty?: boolean | undefined;
  group?: string | undefined;
  hidePanel?: boolean | undefined;
  horizontalChart?: boolean | undefined;
  id: string;
  index?: number | undefined;
  inputId: string;
  search?: SearchQueryUnion | undefined;
  title?: string | undefined;
  titleAction?: TitleAction | undefined;
  type: InputElementType;
  value?: { [k: string]: any } | undefined;
  variant: Variant2;
};

export const Variant1 = {
  Visualization: "visualization",
} as const;
export type Variant1 = OpenEnum<typeof Variant1>;

export type DashboardElement1 = {
  config?: any | undefined;
  description?: string | undefined;
  empty?: boolean | undefined;
  group?: string | undefined;
  hidePanel?: boolean | undefined;
  horizontalChart?: boolean | undefined;
  id: string;
  index?: number | undefined;
  search: SearchQueryUnion;
  title?: string | undefined;
  titleAction?: TitleAction | undefined;
  type: VisualizationElementType;
  variant?: Variant1 | undefined;
};

export type DashboardElementUnion =
  | DashboardElement2
  | DashboardElement1
  | DashboardElement3;

/** @internal */
export const Variant3$inboundSchema: z.ZodType<
  Variant3,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Variant3),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Variant3$outboundSchema: z.ZodType<
  Variant3,
  z.ZodTypeDef,
  Variant3
> = z.union([
  z.nativeEnum(Variant3),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variant3$ {
  /** @deprecated use `Variant3$inboundSchema` instead. */
  export const inboundSchema = Variant3$inboundSchema;
  /** @deprecated use `Variant3$outboundSchema` instead. */
  export const outboundSchema = Variant3$outboundSchema;
}

/** @internal */
export const DashboardElement3$inboundSchema: z.ZodType<
  DashboardElement3,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: MarkdownElementConfig$inboundSchema.optional(),
  description: z.string().optional(),
  empty: z.boolean().optional(),
  group: z.string().optional(),
  hidePanel: z.boolean().optional(),
  horizontalChart: z.boolean().optional(),
  id: z.string(),
  index: z.number().optional(),
  title: z.string().optional(),
  titleAction: TitleAction$inboundSchema.optional(),
  type: MarkdownElementType$inboundSchema,
  variant: Variant3$inboundSchema,
});

/** @internal */
export type DashboardElement3$Outbound = {
  config?: MarkdownElementConfig$Outbound | undefined;
  description?: string | undefined;
  empty?: boolean | undefined;
  group?: string | undefined;
  hidePanel?: boolean | undefined;
  horizontalChart?: boolean | undefined;
  id: string;
  index?: number | undefined;
  title?: string | undefined;
  titleAction?: TitleAction$Outbound | undefined;
  type: string;
  variant: string;
};

/** @internal */
export const DashboardElement3$outboundSchema: z.ZodType<
  DashboardElement3$Outbound,
  z.ZodTypeDef,
  DashboardElement3
> = z.object({
  config: MarkdownElementConfig$outboundSchema.optional(),
  description: z.string().optional(),
  empty: z.boolean().optional(),
  group: z.string().optional(),
  hidePanel: z.boolean().optional(),
  horizontalChart: z.boolean().optional(),
  id: z.string(),
  index: z.number().optional(),
  title: z.string().optional(),
  titleAction: TitleAction$outboundSchema.optional(),
  type: MarkdownElementType$outboundSchema,
  variant: Variant3$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DashboardElement3$ {
  /** @deprecated use `DashboardElement3$inboundSchema` instead. */
  export const inboundSchema = DashboardElement3$inboundSchema;
  /** @deprecated use `DashboardElement3$outboundSchema` instead. */
  export const outboundSchema = DashboardElement3$outboundSchema;
  /** @deprecated use `DashboardElement3$Outbound` instead. */
  export type Outbound = DashboardElement3$Outbound;
}

export function dashboardElement3ToJSON(
  dashboardElement3: DashboardElement3,
): string {
  return JSON.stringify(
    DashboardElement3$outboundSchema.parse(dashboardElement3),
  );
}

export function dashboardElement3FromJSON(
  jsonString: string,
): SafeParseResult<DashboardElement3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DashboardElement3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DashboardElement3' from JSON`,
  );
}

/** @internal */
export const Variant2$inboundSchema: z.ZodType<
  Variant2,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Variant2),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Variant2$outboundSchema: z.ZodType<
  Variant2,
  z.ZodTypeDef,
  Variant2
> = z.union([
  z.nativeEnum(Variant2),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variant2$ {
  /** @deprecated use `Variant2$inboundSchema` instead. */
  export const inboundSchema = Variant2$inboundSchema;
  /** @deprecated use `Variant2$outboundSchema` instead. */
  export const outboundSchema = Variant2$outboundSchema;
}

/** @internal */
export const DashboardElement2$inboundSchema: z.ZodType<
  DashboardElement2,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  empty: z.boolean().optional(),
  group: z.string().optional(),
  hidePanel: z.boolean().optional(),
  horizontalChart: z.boolean().optional(),
  id: z.string(),
  index: z.number().optional(),
  inputId: z.string(),
  search: SearchQueryUnion$inboundSchema.optional(),
  title: z.string().optional(),
  titleAction: TitleAction$inboundSchema.optional(),
  type: InputElementType$inboundSchema,
  value: z.record(z.any()).optional(),
  variant: Variant2$inboundSchema,
});

/** @internal */
export type DashboardElement2$Outbound = {
  description?: string | undefined;
  empty?: boolean | undefined;
  group?: string | undefined;
  hidePanel?: boolean | undefined;
  horizontalChart?: boolean | undefined;
  id: string;
  index?: number | undefined;
  inputId: string;
  search?: SearchQueryUnion$Outbound | undefined;
  title?: string | undefined;
  titleAction?: TitleAction$Outbound | undefined;
  type: string;
  value?: { [k: string]: any } | undefined;
  variant: string;
};

/** @internal */
export const DashboardElement2$outboundSchema: z.ZodType<
  DashboardElement2$Outbound,
  z.ZodTypeDef,
  DashboardElement2
> = z.object({
  description: z.string().optional(),
  empty: z.boolean().optional(),
  group: z.string().optional(),
  hidePanel: z.boolean().optional(),
  horizontalChart: z.boolean().optional(),
  id: z.string(),
  index: z.number().optional(),
  inputId: z.string(),
  search: SearchQueryUnion$outboundSchema.optional(),
  title: z.string().optional(),
  titleAction: TitleAction$outboundSchema.optional(),
  type: InputElementType$outboundSchema,
  value: z.record(z.any()).optional(),
  variant: Variant2$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DashboardElement2$ {
  /** @deprecated use `DashboardElement2$inboundSchema` instead. */
  export const inboundSchema = DashboardElement2$inboundSchema;
  /** @deprecated use `DashboardElement2$outboundSchema` instead. */
  export const outboundSchema = DashboardElement2$outboundSchema;
  /** @deprecated use `DashboardElement2$Outbound` instead. */
  export type Outbound = DashboardElement2$Outbound;
}

export function dashboardElement2ToJSON(
  dashboardElement2: DashboardElement2,
): string {
  return JSON.stringify(
    DashboardElement2$outboundSchema.parse(dashboardElement2),
  );
}

export function dashboardElement2FromJSON(
  jsonString: string,
): SafeParseResult<DashboardElement2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DashboardElement2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DashboardElement2' from JSON`,
  );
}

/** @internal */
export const Variant1$inboundSchema: z.ZodType<
  Variant1,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Variant1),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Variant1$outboundSchema: z.ZodType<
  Variant1,
  z.ZodTypeDef,
  Variant1
> = z.union([
  z.nativeEnum(Variant1),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variant1$ {
  /** @deprecated use `Variant1$inboundSchema` instead. */
  export const inboundSchema = Variant1$inboundSchema;
  /** @deprecated use `Variant1$outboundSchema` instead. */
  export const outboundSchema = Variant1$outboundSchema;
}

/** @internal */
export const DashboardElement1$inboundSchema: z.ZodType<
  DashboardElement1,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.any().optional(),
  description: z.string().optional(),
  empty: z.boolean().optional(),
  group: z.string().optional(),
  hidePanel: z.boolean().optional(),
  horizontalChart: z.boolean().optional(),
  id: z.string(),
  index: z.number().optional(),
  search: SearchQueryUnion$inboundSchema,
  title: z.string().optional(),
  titleAction: TitleAction$inboundSchema.optional(),
  type: VisualizationElementType$inboundSchema,
  variant: Variant1$inboundSchema.optional(),
});

/** @internal */
export type DashboardElement1$Outbound = {
  config?: any | undefined;
  description?: string | undefined;
  empty?: boolean | undefined;
  group?: string | undefined;
  hidePanel?: boolean | undefined;
  horizontalChart?: boolean | undefined;
  id: string;
  index?: number | undefined;
  search: SearchQueryUnion$Outbound;
  title?: string | undefined;
  titleAction?: TitleAction$Outbound | undefined;
  type: VisualizationElementType$Outbound;
  variant?: string | undefined;
};

/** @internal */
export const DashboardElement1$outboundSchema: z.ZodType<
  DashboardElement1$Outbound,
  z.ZodTypeDef,
  DashboardElement1
> = z.object({
  config: z.any().optional(),
  description: z.string().optional(),
  empty: z.boolean().optional(),
  group: z.string().optional(),
  hidePanel: z.boolean().optional(),
  horizontalChart: z.boolean().optional(),
  id: z.string(),
  index: z.number().optional(),
  search: SearchQueryUnion$outboundSchema,
  title: z.string().optional(),
  titleAction: TitleAction$outboundSchema.optional(),
  type: VisualizationElementType$outboundSchema,
  variant: Variant1$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DashboardElement1$ {
  /** @deprecated use `DashboardElement1$inboundSchema` instead. */
  export const inboundSchema = DashboardElement1$inboundSchema;
  /** @deprecated use `DashboardElement1$outboundSchema` instead. */
  export const outboundSchema = DashboardElement1$outboundSchema;
  /** @deprecated use `DashboardElement1$Outbound` instead. */
  export type Outbound = DashboardElement1$Outbound;
}

export function dashboardElement1ToJSON(
  dashboardElement1: DashboardElement1,
): string {
  return JSON.stringify(
    DashboardElement1$outboundSchema.parse(dashboardElement1),
  );
}

export function dashboardElement1FromJSON(
  jsonString: string,
): SafeParseResult<DashboardElement1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DashboardElement1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DashboardElement1' from JSON`,
  );
}

/** @internal */
export const DashboardElementUnion$inboundSchema: z.ZodType<
  DashboardElementUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DashboardElement2$inboundSchema),
  z.lazy(() => DashboardElement1$inboundSchema),
  z.lazy(() => DashboardElement3$inboundSchema),
]);

/** @internal */
export type DashboardElementUnion$Outbound =
  | DashboardElement2$Outbound
  | DashboardElement1$Outbound
  | DashboardElement3$Outbound;

/** @internal */
export const DashboardElementUnion$outboundSchema: z.ZodType<
  DashboardElementUnion$Outbound,
  z.ZodTypeDef,
  DashboardElementUnion
> = z.union([
  z.lazy(() => DashboardElement2$outboundSchema),
  z.lazy(() => DashboardElement1$outboundSchema),
  z.lazy(() => DashboardElement3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DashboardElementUnion$ {
  /** @deprecated use `DashboardElementUnion$inboundSchema` instead. */
  export const inboundSchema = DashboardElementUnion$inboundSchema;
  /** @deprecated use `DashboardElementUnion$outboundSchema` instead. */
  export const outboundSchema = DashboardElementUnion$outboundSchema;
  /** @deprecated use `DashboardElementUnion$Outbound` instead. */
  export type Outbound = DashboardElementUnion$Outbound;
}

export function dashboardElementUnionToJSON(
  dashboardElementUnion: DashboardElementUnion,
): string {
  return JSON.stringify(
    DashboardElementUnion$outboundSchema.parse(dashboardElementUnion),
  );
}

export function dashboardElementUnionFromJSON(
  jsonString: string,
): SafeParseResult<DashboardElementUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DashboardElementUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DashboardElementUnion' from JSON`,
  );
}
