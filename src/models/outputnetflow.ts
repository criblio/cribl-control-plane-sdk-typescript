/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputNetflowType = {
  Netflow: "netflow",
} as const;
export type OutputNetflowType = OpenEnum<typeof OutputNetflowType>;

export type OutputNetflowHost = {
  /**
   * Destination host
   */
  host: string;
  /**
   * Destination port, default is 2055
   */
  port?: number | undefined;
};

export type OutputNetflow = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputNetflowType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * One or more NetFlow destinations to forward events to
   */
  hosts: Array<OutputNetflowHost>;
  /**
   * How often to resolve the destination hostname to an IP address. Ignored if all destinations are IP addresses. A value of 0 means every datagram sent will incur a DNS lookup.
   */
  dnsResolvePeriodSec?: number | undefined;
  description?: string | undefined;
};

/** @internal */
export const OutputNetflowType$inboundSchema: z.ZodType<
  OutputNetflowType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputNetflowType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputNetflowType$outboundSchema: z.ZodType<
  OutputNetflowType,
  z.ZodTypeDef,
  OutputNetflowType
> = z.union([
  z.nativeEnum(OutputNetflowType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNetflowType$ {
  /** @deprecated use `OutputNetflowType$inboundSchema` instead. */
  export const inboundSchema = OutputNetflowType$inboundSchema;
  /** @deprecated use `OutputNetflowType$outboundSchema` instead. */
  export const outboundSchema = OutputNetflowType$outboundSchema;
}

/** @internal */
export const OutputNetflowHost$inboundSchema: z.ZodType<
  OutputNetflowHost,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  port: z.number().default(2055),
});

/** @internal */
export type OutputNetflowHost$Outbound = {
  host: string;
  port: number;
};

/** @internal */
export const OutputNetflowHost$outboundSchema: z.ZodType<
  OutputNetflowHost$Outbound,
  z.ZodTypeDef,
  OutputNetflowHost
> = z.object({
  host: z.string(),
  port: z.number().default(2055),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNetflowHost$ {
  /** @deprecated use `OutputNetflowHost$inboundSchema` instead. */
  export const inboundSchema = OutputNetflowHost$inboundSchema;
  /** @deprecated use `OutputNetflowHost$outboundSchema` instead. */
  export const outboundSchema = OutputNetflowHost$outboundSchema;
  /** @deprecated use `OutputNetflowHost$Outbound` instead. */
  export type Outbound = OutputNetflowHost$Outbound;
}

export function outputNetflowHostToJSON(
  outputNetflowHost: OutputNetflowHost,
): string {
  return JSON.stringify(
    OutputNetflowHost$outboundSchema.parse(outputNetflowHost),
  );
}

export function outputNetflowHostFromJSON(
  jsonString: string,
): SafeParseResult<OutputNetflowHost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputNetflowHost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputNetflowHost' from JSON`,
  );
}

/** @internal */
export const OutputNetflow$inboundSchema: z.ZodType<
  OutputNetflow,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputNetflowType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  hosts: z.array(z.lazy(() => OutputNetflowHost$inboundSchema)),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
});

/** @internal */
export type OutputNetflow$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  hosts: Array<OutputNetflowHost$Outbound>;
  dnsResolvePeriodSec: number;
  description?: string | undefined;
};

/** @internal */
export const OutputNetflow$outboundSchema: z.ZodType<
  OutputNetflow$Outbound,
  z.ZodTypeDef,
  OutputNetflow
> = z.object({
  id: z.string().optional(),
  type: OutputNetflowType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  hosts: z.array(z.lazy(() => OutputNetflowHost$outboundSchema)),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputNetflow$ {
  /** @deprecated use `OutputNetflow$inboundSchema` instead. */
  export const inboundSchema = OutputNetflow$inboundSchema;
  /** @deprecated use `OutputNetflow$outboundSchema` instead. */
  export const outboundSchema = OutputNetflow$outboundSchema;
  /** @deprecated use `OutputNetflow$Outbound` instead. */
  export type Outbound = OutputNetflow$Outbound;
}

export function outputNetflowToJSON(outputNetflow: OutputNetflow): string {
  return JSON.stringify(OutputNetflow$outboundSchema.parse(outputNetflow));
}

export function outputNetflowFromJSON(
  jsonString: string,
): SafeParseResult<OutputNetflow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputNetflow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputNetflow' from JSON`,
  );
}
