/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputFilesystemType = {
  Filesystem: "filesystem",
} as const;
export type OutputFilesystemType = ClosedEnum<typeof OutputFilesystemType>;

/**
 * Format of the output data
 */
export const OutputFilesystemDataFormat = {
  Json: "json",
  Raw: "raw",
  Parquet: "parquet",
} as const;
/**
 * Format of the output data
 */
export type OutputFilesystemDataFormat = OpenEnum<
  typeof OutputFilesystemDataFormat
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputFilesystemBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputFilesystemBackpressureBehavior = OpenEnum<
  typeof OutputFilesystemBackpressureBehavior
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputFilesystemDiskSpaceProtection = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputFilesystemDiskSpaceProtection = OpenEnum<
  typeof OutputFilesystemDiskSpaceProtection
>;

/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export const OutputFilesystemCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export type OutputFilesystemCompression = OpenEnum<
  typeof OutputFilesystemCompression
>;

/**
 * Compression level to apply before moving files to final destination
 */
export const OutputFilesystemCompressionLevel = {
  BestSpeed: "best_speed",
  Normal: "normal",
  BestCompression: "best_compression",
} as const;
/**
 * Compression level to apply before moving files to final destination
 */
export type OutputFilesystemCompressionLevel = OpenEnum<
  typeof OutputFilesystemCompressionLevel
>;

/**
 * Determines which data types are supported and how they are represented
 */
export const OutputFilesystemParquetVersion = {
  Parquet10: "PARQUET_1_0",
  Parquet24: "PARQUET_2_4",
  Parquet26: "PARQUET_2_6",
} as const;
/**
 * Determines which data types are supported and how they are represented
 */
export type OutputFilesystemParquetVersion = OpenEnum<
  typeof OutputFilesystemParquetVersion
>;

/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export const OutputFilesystemDataPageVersion = {
  DataPageV1: "DATA_PAGE_V1",
  DataPageV2: "DATA_PAGE_V2",
} as const;
/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export type OutputFilesystemDataPageVersion = OpenEnum<
  typeof OutputFilesystemDataPageVersion
>;

export type OutputFilesystemKeyValueMetadatum = {
  key?: string | undefined;
  value: string;
};

export type OutputFilesystem = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputFilesystemType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Final destination for the output files
   */
  destPath: string;
  /**
   * Filesystem location in which to buffer files before compressing and moving to final destination. Use performant, stable storage.
   */
  stagePath?: string | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * JavaScript expression defining how files are partitioned and organized. Default is date-based. If blank, Stream will fall back to the event's __partition field value – if present – otherwise to each location's root directory.
   */
  partitionExpr?: string | undefined;
  /**
   * Format of the output data
   */
  format?: OutputFilesystemDataFormat | undefined;
  /**
   * JavaScript expression to define the output filename prefix (can be constant)
   */
  baseFileName?: string | undefined;
  /**
   * JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`).
   */
  fileNameSuffix?: string | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * If set, this line will be written to the beginning of each output file
   */
  headerLine?: string | undefined;
  /**
   * Buffer size used to write to a file
   */
  writeHighWaterMark?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputFilesystemBackpressureBehavior | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?: OutputFilesystemDiskSpaceProtection | undefined;
  description?: string | undefined;
  /**
   * Data compression format to apply to HTTP content before it is delivered
   */
  compress?: OutputFilesystemCompression | undefined;
  /**
   * Compression level to apply before moving files to final destination
   */
  compressionLevel?: OutputFilesystemCompressionLevel | undefined;
  /**
   * Automatically calculate the schema based on the events of each Parquet file generated
   */
  automaticSchema?: boolean | undefined;
  /**
   * Determines which data types are supported and how they are represented
   */
  parquetVersion?: OutputFilesystemParquetVersion | undefined;
  /**
   * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
   */
  parquetDataPageVersion?: OutputFilesystemDataPageVersion | undefined;
  /**
   * The number of rows that every group will contain. The final group can contain a smaller number of rows.
   */
  parquetRowGroupLength?: number | undefined;
  /**
   * Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression.
   */
  parquetPageSize?: string | undefined;
  /**
   * Log up to 3 rows that @{product} skips due to data mismatch
   */
  shouldLogInvalidRows?: boolean | undefined;
  /**
   * The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: "key":"OCSF Event Class", "value":"9001"
   */
  keyValueMetadata?: Array<OutputFilesystemKeyValueMetadatum> | undefined;
  /**
   * Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics.
   */
  enableStatistics?: boolean | undefined;
  /**
   * One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping.
   */
  enableWritePageIndex?: boolean | undefined;
  /**
   * Parquet tools can use the checksum of a Parquet page to verify data integrity
   */
  enablePageChecksum?: boolean | undefined;
  /**
   * How frequently, in seconds, to clean up empty directories
   */
  emptyDirCleanupSec?: number | undefined;
  /**
   * Storage location for files that fail to reach their final destination after maximum retries are exceeded
   */
  deadletterPath?: string | undefined;
  /**
   * The maximum number of times a file will attempt to move to its final destination before being dead-lettered
   */
  maxRetryNum?: number | undefined;
};

/** @internal */
export const OutputFilesystemType$inboundSchema: z.ZodNativeEnum<
  typeof OutputFilesystemType
> = z.nativeEnum(OutputFilesystemType);

/** @internal */
export const OutputFilesystemType$outboundSchema: z.ZodNativeEnum<
  typeof OutputFilesystemType
> = OutputFilesystemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystemType$ {
  /** @deprecated use `OutputFilesystemType$inboundSchema` instead. */
  export const inboundSchema = OutputFilesystemType$inboundSchema;
  /** @deprecated use `OutputFilesystemType$outboundSchema` instead. */
  export const outboundSchema = OutputFilesystemType$outboundSchema;
}

/** @internal */
export const OutputFilesystemDataFormat$inboundSchema: z.ZodType<
  OutputFilesystemDataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputFilesystemDataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputFilesystemDataFormat$outboundSchema: z.ZodType<
  OutputFilesystemDataFormat,
  z.ZodTypeDef,
  OutputFilesystemDataFormat
> = z.union([
  z.nativeEnum(OutputFilesystemDataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystemDataFormat$ {
  /** @deprecated use `OutputFilesystemDataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputFilesystemDataFormat$inboundSchema;
  /** @deprecated use `OutputFilesystemDataFormat$outboundSchema` instead. */
  export const outboundSchema = OutputFilesystemDataFormat$outboundSchema;
}

/** @internal */
export const OutputFilesystemBackpressureBehavior$inboundSchema: z.ZodType<
  OutputFilesystemBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputFilesystemBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputFilesystemBackpressureBehavior$outboundSchema: z.ZodType<
  OutputFilesystemBackpressureBehavior,
  z.ZodTypeDef,
  OutputFilesystemBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputFilesystemBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystemBackpressureBehavior$ {
  /** @deprecated use `OutputFilesystemBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputFilesystemBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputFilesystemBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputFilesystemBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputFilesystemDiskSpaceProtection$inboundSchema: z.ZodType<
  OutputFilesystemDiskSpaceProtection,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputFilesystemDiskSpaceProtection),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputFilesystemDiskSpaceProtection$outboundSchema: z.ZodType<
  OutputFilesystemDiskSpaceProtection,
  z.ZodTypeDef,
  OutputFilesystemDiskSpaceProtection
> = z.union([
  z.nativeEnum(OutputFilesystemDiskSpaceProtection),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystemDiskSpaceProtection$ {
  /** @deprecated use `OutputFilesystemDiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema =
    OutputFilesystemDiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputFilesystemDiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema =
    OutputFilesystemDiskSpaceProtection$outboundSchema;
}

/** @internal */
export const OutputFilesystemCompression$inboundSchema: z.ZodType<
  OutputFilesystemCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputFilesystemCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputFilesystemCompression$outboundSchema: z.ZodType<
  OutputFilesystemCompression,
  z.ZodTypeDef,
  OutputFilesystemCompression
> = z.union([
  z.nativeEnum(OutputFilesystemCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystemCompression$ {
  /** @deprecated use `OutputFilesystemCompression$inboundSchema` instead. */
  export const inboundSchema = OutputFilesystemCompression$inboundSchema;
  /** @deprecated use `OutputFilesystemCompression$outboundSchema` instead. */
  export const outboundSchema = OutputFilesystemCompression$outboundSchema;
}

/** @internal */
export const OutputFilesystemCompressionLevel$inboundSchema: z.ZodType<
  OutputFilesystemCompressionLevel,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputFilesystemCompressionLevel),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputFilesystemCompressionLevel$outboundSchema: z.ZodType<
  OutputFilesystemCompressionLevel,
  z.ZodTypeDef,
  OutputFilesystemCompressionLevel
> = z.union([
  z.nativeEnum(OutputFilesystemCompressionLevel),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystemCompressionLevel$ {
  /** @deprecated use `OutputFilesystemCompressionLevel$inboundSchema` instead. */
  export const inboundSchema = OutputFilesystemCompressionLevel$inboundSchema;
  /** @deprecated use `OutputFilesystemCompressionLevel$outboundSchema` instead. */
  export const outboundSchema = OutputFilesystemCompressionLevel$outboundSchema;
}

/** @internal */
export const OutputFilesystemParquetVersion$inboundSchema: z.ZodType<
  OutputFilesystemParquetVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputFilesystemParquetVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputFilesystemParquetVersion$outboundSchema: z.ZodType<
  OutputFilesystemParquetVersion,
  z.ZodTypeDef,
  OutputFilesystemParquetVersion
> = z.union([
  z.nativeEnum(OutputFilesystemParquetVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystemParquetVersion$ {
  /** @deprecated use `OutputFilesystemParquetVersion$inboundSchema` instead. */
  export const inboundSchema = OutputFilesystemParquetVersion$inboundSchema;
  /** @deprecated use `OutputFilesystemParquetVersion$outboundSchema` instead. */
  export const outboundSchema = OutputFilesystemParquetVersion$outboundSchema;
}

/** @internal */
export const OutputFilesystemDataPageVersion$inboundSchema: z.ZodType<
  OutputFilesystemDataPageVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputFilesystemDataPageVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputFilesystemDataPageVersion$outboundSchema: z.ZodType<
  OutputFilesystemDataPageVersion,
  z.ZodTypeDef,
  OutputFilesystemDataPageVersion
> = z.union([
  z.nativeEnum(OutputFilesystemDataPageVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystemDataPageVersion$ {
  /** @deprecated use `OutputFilesystemDataPageVersion$inboundSchema` instead. */
  export const inboundSchema = OutputFilesystemDataPageVersion$inboundSchema;
  /** @deprecated use `OutputFilesystemDataPageVersion$outboundSchema` instead. */
  export const outboundSchema = OutputFilesystemDataPageVersion$outboundSchema;
}

/** @internal */
export const OutputFilesystemKeyValueMetadatum$inboundSchema: z.ZodType<
  OutputFilesystemKeyValueMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputFilesystemKeyValueMetadatum$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const OutputFilesystemKeyValueMetadatum$outboundSchema: z.ZodType<
  OutputFilesystemKeyValueMetadatum$Outbound,
  z.ZodTypeDef,
  OutputFilesystemKeyValueMetadatum
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystemKeyValueMetadatum$ {
  /** @deprecated use `OutputFilesystemKeyValueMetadatum$inboundSchema` instead. */
  export const inboundSchema = OutputFilesystemKeyValueMetadatum$inboundSchema;
  /** @deprecated use `OutputFilesystemKeyValueMetadatum$outboundSchema` instead. */
  export const outboundSchema =
    OutputFilesystemKeyValueMetadatum$outboundSchema;
  /** @deprecated use `OutputFilesystemKeyValueMetadatum$Outbound` instead. */
  export type Outbound = OutputFilesystemKeyValueMetadatum$Outbound;
}

export function outputFilesystemKeyValueMetadatumToJSON(
  outputFilesystemKeyValueMetadatum: OutputFilesystemKeyValueMetadatum,
): string {
  return JSON.stringify(
    OutputFilesystemKeyValueMetadatum$outboundSchema.parse(
      outputFilesystemKeyValueMetadatum,
    ),
  );
}

export function outputFilesystemKeyValueMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<OutputFilesystemKeyValueMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputFilesystemKeyValueMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputFilesystemKeyValueMetadatum' from JSON`,
  );
}

/** @internal */
export const OutputFilesystem$inboundSchema: z.ZodType<
  OutputFilesystem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputFilesystemType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  destPath: z.string(),
  stagePath: z.string().optional(),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputFilesystemDataFormat$inboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputFilesystemBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputFilesystemDiskSpaceProtection$inboundSchema
    .default("block"),
  description: z.string().optional(),
  compress: OutputFilesystemCompression$inboundSchema.default("gzip"),
  compressionLevel: OutputFilesystemCompressionLevel$inboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputFilesystemParquetVersion$inboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputFilesystemDataPageVersion$inboundSchema.default(
    "DATA_PAGE_V2",
  ),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputFilesystemKeyValueMetadatum$inboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/** @internal */
export type OutputFilesystem$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  destPath: string;
  stagePath?: string | undefined;
  addIdToStagePath: boolean;
  removeEmptyDirs: boolean;
  partitionExpr: string;
  format: string;
  baseFileName: string;
  fileNameSuffix: string;
  maxFileSizeMB: number;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxOpenFiles: number;
  headerLine: string;
  writeHighWaterMark: number;
  onBackpressure: string;
  deadletterEnabled: boolean;
  onDiskFullBackpressure: string;
  description?: string | undefined;
  compress: string;
  compressionLevel: string;
  automaticSchema: boolean;
  parquetVersion: string;
  parquetDataPageVersion: string;
  parquetRowGroupLength: number;
  parquetPageSize: string;
  shouldLogInvalidRows?: boolean | undefined;
  keyValueMetadata?:
    | Array<OutputFilesystemKeyValueMetadatum$Outbound>
    | undefined;
  enableStatistics: boolean;
  enableWritePageIndex: boolean;
  enablePageChecksum: boolean;
  emptyDirCleanupSec: number;
  deadletterPath: string;
  maxRetryNum: number;
};

/** @internal */
export const OutputFilesystem$outboundSchema: z.ZodType<
  OutputFilesystem$Outbound,
  z.ZodTypeDef,
  OutputFilesystem
> = z.object({
  id: z.string().optional(),
  type: OutputFilesystemType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  destPath: z.string(),
  stagePath: z.string().optional(),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputFilesystemDataFormat$outboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputFilesystemBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputFilesystemDiskSpaceProtection$outboundSchema
    .default("block"),
  description: z.string().optional(),
  compress: OutputFilesystemCompression$outboundSchema.default("gzip"),
  compressionLevel: OutputFilesystemCompressionLevel$outboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputFilesystemParquetVersion$outboundSchema.default(
    "PARQUET_2_6",
  ),
  parquetDataPageVersion: OutputFilesystemDataPageVersion$outboundSchema
    .default("DATA_PAGE_V2"),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputFilesystemKeyValueMetadatum$outboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFilesystem$ {
  /** @deprecated use `OutputFilesystem$inboundSchema` instead. */
  export const inboundSchema = OutputFilesystem$inboundSchema;
  /** @deprecated use `OutputFilesystem$outboundSchema` instead. */
  export const outboundSchema = OutputFilesystem$outboundSchema;
  /** @deprecated use `OutputFilesystem$Outbound` instead. */
  export type Outbound = OutputFilesystem$Outbound;
}

export function outputFilesystemToJSON(
  outputFilesystem: OutputFilesystem,
): string {
  return JSON.stringify(
    OutputFilesystem$outboundSchema.parse(outputFilesystem),
  );
}

export function outputFilesystemFromJSON(
  jsonString: string,
): SafeParseResult<OutputFilesystem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputFilesystem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputFilesystem' from JSON`,
  );
}
