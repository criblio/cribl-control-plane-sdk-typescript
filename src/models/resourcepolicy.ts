/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RbacResource,
  RbacResource$inboundSchema,
  RbacResource$outboundSchema,
} from "./rbacresource.js";

export type ResourcePolicy = {
  gid: string;
  id?: string | undefined;
  policy: string;
  type: RbacResource;
};

/** @internal */
export const ResourcePolicy$inboundSchema: z.ZodType<
  ResourcePolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  gid: z.string(),
  id: z.string().optional(),
  policy: z.string(),
  type: RbacResource$inboundSchema,
});

/** @internal */
export type ResourcePolicy$Outbound = {
  gid: string;
  id?: string | undefined;
  policy: string;
  type: string;
};

/** @internal */
export const ResourcePolicy$outboundSchema: z.ZodType<
  ResourcePolicy$Outbound,
  z.ZodTypeDef,
  ResourcePolicy
> = z.object({
  gid: z.string(),
  id: z.string().optional(),
  policy: z.string(),
  type: RbacResource$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourcePolicy$ {
  /** @deprecated use `ResourcePolicy$inboundSchema` instead. */
  export const inboundSchema = ResourcePolicy$inboundSchema;
  /** @deprecated use `ResourcePolicy$outboundSchema` instead. */
  export const outboundSchema = ResourcePolicy$outboundSchema;
  /** @deprecated use `ResourcePolicy$Outbound` instead. */
  export type Outbound = ResourcePolicy$Outbound;
}

export function resourcePolicyToJSON(resourcePolicy: ResourcePolicy): string {
  return JSON.stringify(ResourcePolicy$outboundSchema.parse(resourcePolicy));
}

export function resourcePolicyFromJSON(
  jsonString: string,
): SafeParseResult<ResourcePolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourcePolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourcePolicy' from JSON`,
  );
}
