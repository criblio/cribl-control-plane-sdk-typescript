/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DatasetMetadataRunInfo = {
  earliestScannedTime?: number | undefined;
  finishedAt?: number | undefined;
  latestScannedTime?: number | undefined;
  objectCount?: number | undefined;
};

/** @internal */
export const DatasetMetadataRunInfo$inboundSchema: z.ZodType<
  DatasetMetadataRunInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  earliestScannedTime: z.number().optional(),
  finishedAt: z.number().optional(),
  latestScannedTime: z.number().optional(),
  objectCount: z.number().optional(),
});

/** @internal */
export type DatasetMetadataRunInfo$Outbound = {
  earliestScannedTime?: number | undefined;
  finishedAt?: number | undefined;
  latestScannedTime?: number | undefined;
  objectCount?: number | undefined;
};

/** @internal */
export const DatasetMetadataRunInfo$outboundSchema: z.ZodType<
  DatasetMetadataRunInfo$Outbound,
  z.ZodTypeDef,
  DatasetMetadataRunInfo
> = z.object({
  earliestScannedTime: z.number().optional(),
  finishedAt: z.number().optional(),
  latestScannedTime: z.number().optional(),
  objectCount: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasetMetadataRunInfo$ {
  /** @deprecated use `DatasetMetadataRunInfo$inboundSchema` instead. */
  export const inboundSchema = DatasetMetadataRunInfo$inboundSchema;
  /** @deprecated use `DatasetMetadataRunInfo$outboundSchema` instead. */
  export const outboundSchema = DatasetMetadataRunInfo$outboundSchema;
  /** @deprecated use `DatasetMetadataRunInfo$Outbound` instead. */
  export type Outbound = DatasetMetadataRunInfo$Outbound;
}

export function datasetMetadataRunInfoToJSON(
  datasetMetadataRunInfo: DatasetMetadataRunInfo,
): string {
  return JSON.stringify(
    DatasetMetadataRunInfo$outboundSchema.parse(datasetMetadataRunInfo),
  );
}

export function datasetMetadataRunInfoFromJSON(
  jsonString: string,
): SafeParseResult<DatasetMetadataRunInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatasetMetadataRunInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatasetMetadataRunInfo' from JSON`,
  );
}
