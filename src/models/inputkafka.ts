/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputKafkaType = {
  Kafka: "kafka",
} as const;
export type InputKafkaType = ClosedEnum<typeof InputKafkaType>;

export type InputKafkaConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputKafkaMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputKafkaMode = ClosedEnum<typeof InputKafkaMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputKafkaCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputKafkaCompression = ClosedEnum<typeof InputKafkaCompression>;

export type InputKafkaPqControls = {};

export type InputKafkaPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputKafkaMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputKafkaCompression | undefined;
  pqControls?: InputKafkaPqControls | undefined;
};

/**
 * The schema format used to encode and decode event data
 */
export const InputKafkaSchemaType = {
  Avro: "avro",
  Json: "json",
} as const;
/**
 * The schema format used to encode and decode event data
 */
export type InputKafkaSchemaType = ClosedEnum<typeof InputKafkaSchemaType>;

/**
 * Credentials to use when authenticating with the schema registry using basic HTTP authentication
 */
export type InputKafkaAuth = {
  disabled?: boolean | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
};

export const InputKafkaKafkaSchemaRegistryMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputKafkaKafkaSchemaRegistryMinimumTLSVersion = ClosedEnum<
  typeof InputKafkaKafkaSchemaRegistryMinimumTLSVersion
>;

export const InputKafkaKafkaSchemaRegistryMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputKafkaKafkaSchemaRegistryMaximumTLSVersion = ClosedEnum<
  typeof InputKafkaKafkaSchemaRegistryMaximumTLSVersion
>;

export type InputKafkaKafkaSchemaRegistryTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Reject certificates that are not authorized by a CA in the CA certificate path, or by another
   *
   * @remarks
   *                     trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: InputKafkaKafkaSchemaRegistryMinimumTLSVersion | undefined;
  maxVersion?: InputKafkaKafkaSchemaRegistryMaximumTLSVersion | undefined;
};

export type InputKafkaKafkaSchemaRegistryAuthentication = {
  disabled?: boolean | undefined;
  /**
   * URL for accessing the Confluent Schema Registry. Example: http://localhost:8081. To connect over TLS, use https instead of http.
   */
  schemaRegistryURL?: string | undefined;
  /**
   * The schema format used to encode and decode event data
   */
  schemaType?: InputKafkaSchemaType | undefined;
  /**
   * Maximum time to wait for a Schema Registry connection to complete successfully
   */
  connectionTimeout?: number | undefined;
  /**
   * Maximum time to wait for the Schema Registry to respond to a request
   */
  requestTimeout?: number | undefined;
  /**
   * Maximum number of times to try fetching schemas from the Schema Registry
   */
  maxRetries?: number | undefined;
  /**
   * Credentials to use when authenticating with the schema registry using basic HTTP authentication
   */
  auth?: InputKafkaAuth | undefined;
  tls?: InputKafkaKafkaSchemaRegistryTLSSettingsClientSide | undefined;
};

export const InputKafkaSASLMechanism = {
  Plain: "plain",
  ScramSha256: "scram-sha-256",
  ScramSha512: "scram-sha-512",
  Kerberos: "kerberos",
} as const;
export type InputKafkaSASLMechanism = ClosedEnum<
  typeof InputKafkaSASLMechanism
>;

/**
 * Authentication parameters to use when connecting to brokers. Using TLS is highly recommended.
 */
export type InputKafkaAuthentication = {
  disabled?: boolean | undefined;
  mechanism?: InputKafkaSASLMechanism | undefined;
};

export const InputKafkaMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputKafkaMinimumTLSVersion = ClosedEnum<
  typeof InputKafkaMinimumTLSVersion
>;

export const InputKafkaMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputKafkaMaximumTLSVersion = ClosedEnum<
  typeof InputKafkaMaximumTLSVersion
>;

export type InputKafkaTLSSettingsClientSide = {
  disabled?: boolean | undefined;
  /**
   * Reject certificates that are not authorized by a CA in the CA certificate path, or by another
   *
   * @remarks
   *                     trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
   */
  servername?: string | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  minVersion?: InputKafkaMinimumTLSVersion | undefined;
  maxVersion?: InputKafkaMaximumTLSVersion | undefined;
};

export type InputKafkaMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputKafka = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputKafkaType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputKafkaConnection> | undefined;
  pq?: InputKafkaPq | undefined;
  /**
   * Enter each Kafka bootstrap server you want to use. Specify the hostname and port (such as mykafkabroker:9092) or just the hostname (in which case @{product} will assign port 9092).
   */
  brokers: Array<string>;
  /**
   * Topic to subscribe to. Warning: To optimize performance, Cribl suggests subscribing each Kafka Source to a single topic only.
   */
  topics: Array<string>;
  /**
   * The consumer group to which this instance belongs. Defaults to 'Cribl'.
   */
  groupId?: string | undefined;
  /**
   * Leave enabled if you want the Source, upon first subscribing to a topic, to read starting with the earliest available message
   */
  fromBeginning?: boolean | undefined;
  kafkaSchemaRegistry?: InputKafkaKafkaSchemaRegistryAuthentication | undefined;
  /**
   * Maximum time to wait for a connection to complete successfully
   */
  connectionTimeout?: number | undefined;
  /**
   * Maximum time to wait for Kafka to respond to a request
   */
  requestTimeout?: number | undefined;
  /**
   * If messages are failing, you can set the maximum number of retries as high as 100 to prevent loss of data
   */
  maxRetries?: number | undefined;
  /**
   * The maximum wait time for a retry, in milliseconds. Default (and minimum) is 30,000 ms (30 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackOff?: number | undefined;
  /**
   * Initial value used to calculate the retry, in milliseconds. Maximum is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Set the backoff multiplier (2-20) to control the retry frequency for failed messages. For faster retries, use a lower multiplier. For slower retries with more delay between attempts, use a higher multiplier. The multiplier is used in an exponential backoff formula; see the Kafka [documentation](https://kafka.js.org/docs/retry-detailed) for details.
   */
  backoffRate?: number | undefined;
  /**
   * Maximum time to wait for Kafka to respond to an authentication request
   */
  authenticationTimeout?: number | undefined;
  /**
   * Specifies a time window during which @{product} can reauthenticate if needed. Creates the window measuring backward from the moment when credentials are set to expire.
   */
  reauthenticationThreshold?: number | undefined;
  /**
   * Authentication parameters to use when connecting to brokers. Using TLS is highly recommended.
   */
  sasl?: InputKafkaAuthentication | undefined;
  tls?: InputKafkaTLSSettingsClientSide | undefined;
  /**
   *       Timeout used to detect client failures when using Kafka's group-management facilities.
   *
   * @remarks
   *       If the client sends no heartbeats to the broker before the timeout expires,
   *       the broker will remove the client from the group and initiate a rebalance.
   *       Value must be between the broker's configured group.min.session.timeout.ms and group.max.session.timeout.ms.
   *       See [Kafka's documentation](https://kafka.apache.org/documentation/#consumerconfigs_session.timeout.ms) for details.
   */
  sessionTimeout?: number | undefined;
  /**
   *       Maximum allowed time for each worker to join the group after a rebalance begins.
   *
   * @remarks
   *       If the timeout is exceeded, the coordinator broker will remove the worker from the group.
   *       See [Kafka's documentation](https://kafka.apache.org/documentation/#connectconfigs_rebalance.timeout.ms) for details.
   */
  rebalanceTimeout?: number | undefined;
  /**
   *       Expected time between heartbeats to the consumer coordinator when using Kafka's group-management facilities.
   *
   * @remarks
   *       Value must be lower than sessionTimeout and typically should not exceed 1/3 of the sessionTimeout value.
   *       See [Kafka's documentation](https://kafka.apache.org/documentation/#consumerconfigs_heartbeat.interval.ms) for details.
   */
  heartbeatInterval?: number | undefined;
  /**
   * How often to commit offsets. If both this and Offset commit threshold are set, @{product} commits offsets when either condition is met. If both are empty, @{product} commits offsets after each batch.
   */
  autoCommitInterval?: number | undefined;
  /**
   * How many events are needed to trigger an offset commit. If both this and Offset commit interval are set, @{product} commits offsets when either condition is met. If both are empty, @{product} commits offsets after each batch.
   */
  autoCommitThreshold?: number | undefined;
  /**
   * Maximum amount of data that Kafka will return per partition, per fetch request. Must equal or exceed the maximum message size (maxBytesPerPartition) that Kafka is configured to allow. Otherwise, @{product} can get stuck trying to retrieve messages. Defaults to 1048576 (1 MB).
   */
  maxBytesPerPartition?: number | undefined;
  /**
   * Maximum number of bytes that Kafka will return per fetch request. Defaults to 10485760 (10 MB).
   */
  maxBytes?: number | undefined;
  /**
   * Maximum number of network errors before the consumer re-creates a socket
   */
  maxSocketErrors?: number | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputKafkaMetadatum> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputKafkaType$inboundSchema: z.ZodNativeEnum<
  typeof InputKafkaType
> = z.nativeEnum(InputKafkaType);

/** @internal */
export const InputKafkaType$outboundSchema: z.ZodNativeEnum<
  typeof InputKafkaType
> = InputKafkaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaType$ {
  /** @deprecated use `InputKafkaType$inboundSchema` instead. */
  export const inboundSchema = InputKafkaType$inboundSchema;
  /** @deprecated use `InputKafkaType$outboundSchema` instead. */
  export const outboundSchema = InputKafkaType$outboundSchema;
}

/** @internal */
export const InputKafkaConnection$inboundSchema: z.ZodType<
  InputKafkaConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputKafkaConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputKafkaConnection$outboundSchema: z.ZodType<
  InputKafkaConnection$Outbound,
  z.ZodTypeDef,
  InputKafkaConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaConnection$ {
  /** @deprecated use `InputKafkaConnection$inboundSchema` instead. */
  export const inboundSchema = InputKafkaConnection$inboundSchema;
  /** @deprecated use `InputKafkaConnection$outboundSchema` instead. */
  export const outboundSchema = InputKafkaConnection$outboundSchema;
  /** @deprecated use `InputKafkaConnection$Outbound` instead. */
  export type Outbound = InputKafkaConnection$Outbound;
}

export function inputKafkaConnectionToJSON(
  inputKafkaConnection: InputKafkaConnection,
): string {
  return JSON.stringify(
    InputKafkaConnection$outboundSchema.parse(inputKafkaConnection),
  );
}

export function inputKafkaConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputKafkaConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKafkaConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKafkaConnection' from JSON`,
  );
}

/** @internal */
export const InputKafkaMode$inboundSchema: z.ZodNativeEnum<
  typeof InputKafkaMode
> = z.nativeEnum(InputKafkaMode);

/** @internal */
export const InputKafkaMode$outboundSchema: z.ZodNativeEnum<
  typeof InputKafkaMode
> = InputKafkaMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaMode$ {
  /** @deprecated use `InputKafkaMode$inboundSchema` instead. */
  export const inboundSchema = InputKafkaMode$inboundSchema;
  /** @deprecated use `InputKafkaMode$outboundSchema` instead. */
  export const outboundSchema = InputKafkaMode$outboundSchema;
}

/** @internal */
export const InputKafkaCompression$inboundSchema: z.ZodNativeEnum<
  typeof InputKafkaCompression
> = z.nativeEnum(InputKafkaCompression);

/** @internal */
export const InputKafkaCompression$outboundSchema: z.ZodNativeEnum<
  typeof InputKafkaCompression
> = InputKafkaCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaCompression$ {
  /** @deprecated use `InputKafkaCompression$inboundSchema` instead. */
  export const inboundSchema = InputKafkaCompression$inboundSchema;
  /** @deprecated use `InputKafkaCompression$outboundSchema` instead. */
  export const outboundSchema = InputKafkaCompression$outboundSchema;
}

/** @internal */
export const InputKafkaPqControls$inboundSchema: z.ZodType<
  InputKafkaPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputKafkaPqControls$Outbound = {};

/** @internal */
export const InputKafkaPqControls$outboundSchema: z.ZodType<
  InputKafkaPqControls$Outbound,
  z.ZodTypeDef,
  InputKafkaPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaPqControls$ {
  /** @deprecated use `InputKafkaPqControls$inboundSchema` instead. */
  export const inboundSchema = InputKafkaPqControls$inboundSchema;
  /** @deprecated use `InputKafkaPqControls$outboundSchema` instead. */
  export const outboundSchema = InputKafkaPqControls$outboundSchema;
  /** @deprecated use `InputKafkaPqControls$Outbound` instead. */
  export type Outbound = InputKafkaPqControls$Outbound;
}

export function inputKafkaPqControlsToJSON(
  inputKafkaPqControls: InputKafkaPqControls,
): string {
  return JSON.stringify(
    InputKafkaPqControls$outboundSchema.parse(inputKafkaPqControls),
  );
}

export function inputKafkaPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputKafkaPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKafkaPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKafkaPqControls' from JSON`,
  );
}

/** @internal */
export const InputKafkaPq$inboundSchema: z.ZodType<
  InputKafkaPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputKafkaMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputKafkaCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputKafkaPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputKafkaPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputKafkaPqControls$Outbound | undefined;
};

/** @internal */
export const InputKafkaPq$outboundSchema: z.ZodType<
  InputKafkaPq$Outbound,
  z.ZodTypeDef,
  InputKafkaPq
> = z.object({
  mode: InputKafkaMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputKafkaCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputKafkaPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaPq$ {
  /** @deprecated use `InputKafkaPq$inboundSchema` instead. */
  export const inboundSchema = InputKafkaPq$inboundSchema;
  /** @deprecated use `InputKafkaPq$outboundSchema` instead. */
  export const outboundSchema = InputKafkaPq$outboundSchema;
  /** @deprecated use `InputKafkaPq$Outbound` instead. */
  export type Outbound = InputKafkaPq$Outbound;
}

export function inputKafkaPqToJSON(inputKafkaPq: InputKafkaPq): string {
  return JSON.stringify(InputKafkaPq$outboundSchema.parse(inputKafkaPq));
}

export function inputKafkaPqFromJSON(
  jsonString: string,
): SafeParseResult<InputKafkaPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKafkaPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKafkaPq' from JSON`,
  );
}

/** @internal */
export const InputKafkaSchemaType$inboundSchema: z.ZodNativeEnum<
  typeof InputKafkaSchemaType
> = z.nativeEnum(InputKafkaSchemaType);

/** @internal */
export const InputKafkaSchemaType$outboundSchema: z.ZodNativeEnum<
  typeof InputKafkaSchemaType
> = InputKafkaSchemaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaSchemaType$ {
  /** @deprecated use `InputKafkaSchemaType$inboundSchema` instead. */
  export const inboundSchema = InputKafkaSchemaType$inboundSchema;
  /** @deprecated use `InputKafkaSchemaType$outboundSchema` instead. */
  export const outboundSchema = InputKafkaSchemaType$outboundSchema;
}

/** @internal */
export const InputKafkaAuth$inboundSchema: z.ZodType<
  InputKafkaAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  credentialsSecret: z.string().optional(),
});

/** @internal */
export type InputKafkaAuth$Outbound = {
  disabled: boolean;
  credentialsSecret?: string | undefined;
};

/** @internal */
export const InputKafkaAuth$outboundSchema: z.ZodType<
  InputKafkaAuth$Outbound,
  z.ZodTypeDef,
  InputKafkaAuth
> = z.object({
  disabled: z.boolean().default(true),
  credentialsSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaAuth$ {
  /** @deprecated use `InputKafkaAuth$inboundSchema` instead. */
  export const inboundSchema = InputKafkaAuth$inboundSchema;
  /** @deprecated use `InputKafkaAuth$outboundSchema` instead. */
  export const outboundSchema = InputKafkaAuth$outboundSchema;
  /** @deprecated use `InputKafkaAuth$Outbound` instead. */
  export type Outbound = InputKafkaAuth$Outbound;
}

export function inputKafkaAuthToJSON(inputKafkaAuth: InputKafkaAuth): string {
  return JSON.stringify(InputKafkaAuth$outboundSchema.parse(inputKafkaAuth));
}

export function inputKafkaAuthFromJSON(
  jsonString: string,
): SafeParseResult<InputKafkaAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKafkaAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKafkaAuth' from JSON`,
  );
}

/** @internal */
export const InputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema:
  z.ZodNativeEnum<typeof InputKafkaKafkaSchemaRegistryMinimumTLSVersion> = z
    .nativeEnum(InputKafkaKafkaSchemaRegistryMinimumTLSVersion);

/** @internal */
export const InputKafkaKafkaSchemaRegistryMinimumTLSVersion$outboundSchema:
  z.ZodNativeEnum<typeof InputKafkaKafkaSchemaRegistryMinimumTLSVersion> =
    InputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaKafkaSchemaRegistryMinimumTLSVersion$ {
  /** @deprecated use `InputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema =
    InputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputKafkaKafkaSchemaRegistryMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputKafkaKafkaSchemaRegistryMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema:
  z.ZodNativeEnum<typeof InputKafkaKafkaSchemaRegistryMaximumTLSVersion> = z
    .nativeEnum(InputKafkaKafkaSchemaRegistryMaximumTLSVersion);

/** @internal */
export const InputKafkaKafkaSchemaRegistryMaximumTLSVersion$outboundSchema:
  z.ZodNativeEnum<typeof InputKafkaKafkaSchemaRegistryMaximumTLSVersion> =
    InputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaKafkaSchemaRegistryMaximumTLSVersion$ {
  /** @deprecated use `InputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema =
    InputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputKafkaKafkaSchemaRegistryMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputKafkaKafkaSchemaRegistryMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema:
  z.ZodType<
    InputKafkaKafkaSchemaRegistryTLSSettingsClientSide,
    z.ZodTypeDef,
    unknown
  > = z.object({
    disabled: z.boolean().default(true),
    rejectUnauthorized: z.boolean().default(true),
    servername: z.string().optional(),
    certificateName: z.string().optional(),
    caPath: z.string().optional(),
    privKeyPath: z.string().optional(),
    certPath: z.string().optional(),
    passphrase: z.string().optional(),
    minVersion: InputKafkaKafkaSchemaRegistryMinimumTLSVersion$inboundSchema
      .optional(),
    maxVersion: InputKafkaKafkaSchemaRegistryMaximumTLSVersion$inboundSchema
      .optional(),
  });

/** @internal */
export type InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema:
  z.ZodType<
    InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound,
    z.ZodTypeDef,
    InputKafkaKafkaSchemaRegistryTLSSettingsClientSide
  > = z.object({
    disabled: z.boolean().default(true),
    rejectUnauthorized: z.boolean().default(true),
    servername: z.string().optional(),
    certificateName: z.string().optional(),
    caPath: z.string().optional(),
    privKeyPath: z.string().optional(),
    certPath: z.string().optional(),
    passphrase: z.string().optional(),
    minVersion: InputKafkaKafkaSchemaRegistryMinimumTLSVersion$outboundSchema
      .optional(),
    maxVersion: InputKafkaKafkaSchemaRegistryMaximumTLSVersion$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$ {
  /** @deprecated use `InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema =
    InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema =
    InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound` instead. */
  export type Outbound =
    InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound;
}

export function inputKafkaKafkaSchemaRegistryTLSSettingsClientSideToJSON(
  inputKafkaKafkaSchemaRegistryTLSSettingsClientSide:
    InputKafkaKafkaSchemaRegistryTLSSettingsClientSide,
): string {
  return JSON.stringify(
    InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema.parse(
      inputKafkaKafkaSchemaRegistryTLSSettingsClientSide,
    ),
  );
}

export function inputKafkaKafkaSchemaRegistryTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<
  InputKafkaKafkaSchemaRegistryTLSSettingsClientSide,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InputKafkaKafkaSchemaRegistryTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const InputKafkaKafkaSchemaRegistryAuthentication$inboundSchema:
  z.ZodType<
    InputKafkaKafkaSchemaRegistryAuthentication,
    z.ZodTypeDef,
    unknown
  > = z.object({
    disabled: z.boolean().default(true),
    schemaRegistryURL: z.string().default("http://localhost:8081"),
    schemaType: InputKafkaSchemaType$inboundSchema.default("avro"),
    connectionTimeout: z.number().default(30000),
    requestTimeout: z.number().default(30000),
    maxRetries: z.number().default(1),
    auth: z.lazy(() => InputKafkaAuth$inboundSchema).optional(),
    tls: z.lazy(() =>
      InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$inboundSchema
    ).optional(),
  });

/** @internal */
export type InputKafkaKafkaSchemaRegistryAuthentication$Outbound = {
  disabled: boolean;
  schemaRegistryURL: string;
  schemaType: string;
  connectionTimeout: number;
  requestTimeout: number;
  maxRetries: number;
  auth?: InputKafkaAuth$Outbound | undefined;
  tls?: InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$Outbound | undefined;
};

/** @internal */
export const InputKafkaKafkaSchemaRegistryAuthentication$outboundSchema:
  z.ZodType<
    InputKafkaKafkaSchemaRegistryAuthentication$Outbound,
    z.ZodTypeDef,
    InputKafkaKafkaSchemaRegistryAuthentication
  > = z.object({
    disabled: z.boolean().default(true),
    schemaRegistryURL: z.string().default("http://localhost:8081"),
    schemaType: InputKafkaSchemaType$outboundSchema.default("avro"),
    connectionTimeout: z.number().default(30000),
    requestTimeout: z.number().default(30000),
    maxRetries: z.number().default(1),
    auth: z.lazy(() => InputKafkaAuth$outboundSchema).optional(),
    tls: z.lazy(() =>
      InputKafkaKafkaSchemaRegistryTLSSettingsClientSide$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaKafkaSchemaRegistryAuthentication$ {
  /** @deprecated use `InputKafkaKafkaSchemaRegistryAuthentication$inboundSchema` instead. */
  export const inboundSchema =
    InputKafkaKafkaSchemaRegistryAuthentication$inboundSchema;
  /** @deprecated use `InputKafkaKafkaSchemaRegistryAuthentication$outboundSchema` instead. */
  export const outboundSchema =
    InputKafkaKafkaSchemaRegistryAuthentication$outboundSchema;
  /** @deprecated use `InputKafkaKafkaSchemaRegistryAuthentication$Outbound` instead. */
  export type Outbound = InputKafkaKafkaSchemaRegistryAuthentication$Outbound;
}

export function inputKafkaKafkaSchemaRegistryAuthenticationToJSON(
  inputKafkaKafkaSchemaRegistryAuthentication:
    InputKafkaKafkaSchemaRegistryAuthentication,
): string {
  return JSON.stringify(
    InputKafkaKafkaSchemaRegistryAuthentication$outboundSchema.parse(
      inputKafkaKafkaSchemaRegistryAuthentication,
    ),
  );
}

export function inputKafkaKafkaSchemaRegistryAuthenticationFromJSON(
  jsonString: string,
): SafeParseResult<
  InputKafkaKafkaSchemaRegistryAuthentication,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InputKafkaKafkaSchemaRegistryAuthentication$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InputKafkaKafkaSchemaRegistryAuthentication' from JSON`,
  );
}

/** @internal */
export const InputKafkaSASLMechanism$inboundSchema: z.ZodNativeEnum<
  typeof InputKafkaSASLMechanism
> = z.nativeEnum(InputKafkaSASLMechanism);

/** @internal */
export const InputKafkaSASLMechanism$outboundSchema: z.ZodNativeEnum<
  typeof InputKafkaSASLMechanism
> = InputKafkaSASLMechanism$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaSASLMechanism$ {
  /** @deprecated use `InputKafkaSASLMechanism$inboundSchema` instead. */
  export const inboundSchema = InputKafkaSASLMechanism$inboundSchema;
  /** @deprecated use `InputKafkaSASLMechanism$outboundSchema` instead. */
  export const outboundSchema = InputKafkaSASLMechanism$outboundSchema;
}

/** @internal */
export const InputKafkaAuthentication$inboundSchema: z.ZodType<
  InputKafkaAuthentication,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  mechanism: InputKafkaSASLMechanism$inboundSchema.default("plain"),
});

/** @internal */
export type InputKafkaAuthentication$Outbound = {
  disabled: boolean;
  mechanism: string;
};

/** @internal */
export const InputKafkaAuthentication$outboundSchema: z.ZodType<
  InputKafkaAuthentication$Outbound,
  z.ZodTypeDef,
  InputKafkaAuthentication
> = z.object({
  disabled: z.boolean().default(true),
  mechanism: InputKafkaSASLMechanism$outboundSchema.default("plain"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaAuthentication$ {
  /** @deprecated use `InputKafkaAuthentication$inboundSchema` instead. */
  export const inboundSchema = InputKafkaAuthentication$inboundSchema;
  /** @deprecated use `InputKafkaAuthentication$outboundSchema` instead. */
  export const outboundSchema = InputKafkaAuthentication$outboundSchema;
  /** @deprecated use `InputKafkaAuthentication$Outbound` instead. */
  export type Outbound = InputKafkaAuthentication$Outbound;
}

export function inputKafkaAuthenticationToJSON(
  inputKafkaAuthentication: InputKafkaAuthentication,
): string {
  return JSON.stringify(
    InputKafkaAuthentication$outboundSchema.parse(inputKafkaAuthentication),
  );
}

export function inputKafkaAuthenticationFromJSON(
  jsonString: string,
): SafeParseResult<InputKafkaAuthentication, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKafkaAuthentication$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKafkaAuthentication' from JSON`,
  );
}

/** @internal */
export const InputKafkaMinimumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputKafkaMinimumTLSVersion
> = z.nativeEnum(InputKafkaMinimumTLSVersion);

/** @internal */
export const InputKafkaMinimumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof InputKafkaMinimumTLSVersion
> = InputKafkaMinimumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaMinimumTLSVersion$ {
  /** @deprecated use `InputKafkaMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputKafkaMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputKafkaMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputKafkaMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputKafkaMaximumTLSVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputKafkaMaximumTLSVersion
> = z.nativeEnum(InputKafkaMaximumTLSVersion);

/** @internal */
export const InputKafkaMaximumTLSVersion$outboundSchema: z.ZodNativeEnum<
  typeof InputKafkaMaximumTLSVersion
> = InputKafkaMaximumTLSVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaMaximumTLSVersion$ {
  /** @deprecated use `InputKafkaMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputKafkaMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputKafkaMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputKafkaMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputKafkaTLSSettingsClientSide$inboundSchema: z.ZodType<
  InputKafkaTLSSettingsClientSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: InputKafkaMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputKafkaMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputKafkaTLSSettingsClientSide$Outbound = {
  disabled: boolean;
  rejectUnauthorized: boolean;
  servername?: string | undefined;
  certificateName?: string | undefined;
  caPath?: string | undefined;
  privKeyPath?: string | undefined;
  certPath?: string | undefined;
  passphrase?: string | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputKafkaTLSSettingsClientSide$outboundSchema: z.ZodType<
  InputKafkaTLSSettingsClientSide$Outbound,
  z.ZodTypeDef,
  InputKafkaTLSSettingsClientSide
> = z.object({
  disabled: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  servername: z.string().optional(),
  certificateName: z.string().optional(),
  caPath: z.string().optional(),
  privKeyPath: z.string().optional(),
  certPath: z.string().optional(),
  passphrase: z.string().optional(),
  minVersion: InputKafkaMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputKafkaMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaTLSSettingsClientSide$ {
  /** @deprecated use `InputKafkaTLSSettingsClientSide$inboundSchema` instead. */
  export const inboundSchema = InputKafkaTLSSettingsClientSide$inboundSchema;
  /** @deprecated use `InputKafkaTLSSettingsClientSide$outboundSchema` instead. */
  export const outboundSchema = InputKafkaTLSSettingsClientSide$outboundSchema;
  /** @deprecated use `InputKafkaTLSSettingsClientSide$Outbound` instead. */
  export type Outbound = InputKafkaTLSSettingsClientSide$Outbound;
}

export function inputKafkaTLSSettingsClientSideToJSON(
  inputKafkaTLSSettingsClientSide: InputKafkaTLSSettingsClientSide,
): string {
  return JSON.stringify(
    InputKafkaTLSSettingsClientSide$outboundSchema.parse(
      inputKafkaTLSSettingsClientSide,
    ),
  );
}

export function inputKafkaTLSSettingsClientSideFromJSON(
  jsonString: string,
): SafeParseResult<InputKafkaTLSSettingsClientSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKafkaTLSSettingsClientSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKafkaTLSSettingsClientSide' from JSON`,
  );
}

/** @internal */
export const InputKafkaMetadatum$inboundSchema: z.ZodType<
  InputKafkaMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputKafkaMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputKafkaMetadatum$outboundSchema: z.ZodType<
  InputKafkaMetadatum$Outbound,
  z.ZodTypeDef,
  InputKafkaMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafkaMetadatum$ {
  /** @deprecated use `InputKafkaMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputKafkaMetadatum$inboundSchema;
  /** @deprecated use `InputKafkaMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputKafkaMetadatum$outboundSchema;
  /** @deprecated use `InputKafkaMetadatum$Outbound` instead. */
  export type Outbound = InputKafkaMetadatum$Outbound;
}

export function inputKafkaMetadatumToJSON(
  inputKafkaMetadatum: InputKafkaMetadatum,
): string {
  return JSON.stringify(
    InputKafkaMetadatum$outboundSchema.parse(inputKafkaMetadatum),
  );
}

export function inputKafkaMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputKafkaMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKafkaMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKafkaMetadatum' from JSON`,
  );
}

/** @internal */
export const InputKafka$inboundSchema: z.ZodType<
  InputKafka,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputKafkaType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputKafkaConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputKafkaPq$inboundSchema).optional(),
  brokers: z.array(z.string()),
  topics: z.array(z.string()),
  groupId: z.string().default("Cribl"),
  fromBeginning: z.boolean().default(true),
  kafkaSchemaRegistry: z.lazy(() =>
    InputKafkaKafkaSchemaRegistryAuthentication$inboundSchema
  ).optional(),
  connectionTimeout: z.number().default(10000),
  requestTimeout: z.number().default(60000),
  maxRetries: z.number().default(5),
  maxBackOff: z.number().default(30000),
  initialBackoff: z.number().default(300),
  backoffRate: z.number().default(2),
  authenticationTimeout: z.number().default(10000),
  reauthenticationThreshold: z.number().default(10000),
  sasl: z.lazy(() => InputKafkaAuthentication$inboundSchema).optional(),
  tls: z.lazy(() => InputKafkaTLSSettingsClientSide$inboundSchema).optional(),
  sessionTimeout: z.number().default(30000),
  rebalanceTimeout: z.number().default(60000),
  heartbeatInterval: z.number().default(3000),
  autoCommitInterval: z.number().optional(),
  autoCommitThreshold: z.number().optional(),
  maxBytesPerPartition: z.number().default(1048576),
  maxBytes: z.number().default(10485760),
  maxSocketErrors: z.number().default(0),
  metadata: z.array(z.lazy(() => InputKafkaMetadatum$inboundSchema)).optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputKafka$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputKafkaConnection$Outbound> | undefined;
  pq?: InputKafkaPq$Outbound | undefined;
  brokers: Array<string>;
  topics: Array<string>;
  groupId: string;
  fromBeginning: boolean;
  kafkaSchemaRegistry?:
    | InputKafkaKafkaSchemaRegistryAuthentication$Outbound
    | undefined;
  connectionTimeout: number;
  requestTimeout: number;
  maxRetries: number;
  maxBackOff: number;
  initialBackoff: number;
  backoffRate: number;
  authenticationTimeout: number;
  reauthenticationThreshold: number;
  sasl?: InputKafkaAuthentication$Outbound | undefined;
  tls?: InputKafkaTLSSettingsClientSide$Outbound | undefined;
  sessionTimeout: number;
  rebalanceTimeout: number;
  heartbeatInterval: number;
  autoCommitInterval?: number | undefined;
  autoCommitThreshold?: number | undefined;
  maxBytesPerPartition: number;
  maxBytes: number;
  maxSocketErrors: number;
  metadata?: Array<InputKafkaMetadatum$Outbound> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputKafka$outboundSchema: z.ZodType<
  InputKafka$Outbound,
  z.ZodTypeDef,
  InputKafka
> = z.object({
  id: z.string().optional(),
  type: InputKafkaType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputKafkaConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputKafkaPq$outboundSchema).optional(),
  brokers: z.array(z.string()),
  topics: z.array(z.string()),
  groupId: z.string().default("Cribl"),
  fromBeginning: z.boolean().default(true),
  kafkaSchemaRegistry: z.lazy(() =>
    InputKafkaKafkaSchemaRegistryAuthentication$outboundSchema
  ).optional(),
  connectionTimeout: z.number().default(10000),
  requestTimeout: z.number().default(60000),
  maxRetries: z.number().default(5),
  maxBackOff: z.number().default(30000),
  initialBackoff: z.number().default(300),
  backoffRate: z.number().default(2),
  authenticationTimeout: z.number().default(10000),
  reauthenticationThreshold: z.number().default(10000),
  sasl: z.lazy(() => InputKafkaAuthentication$outboundSchema).optional(),
  tls: z.lazy(() => InputKafkaTLSSettingsClientSide$outboundSchema).optional(),
  sessionTimeout: z.number().default(30000),
  rebalanceTimeout: z.number().default(60000),
  heartbeatInterval: z.number().default(3000),
  autoCommitInterval: z.number().optional(),
  autoCommitThreshold: z.number().optional(),
  maxBytesPerPartition: z.number().default(1048576),
  maxBytes: z.number().default(10485760),
  maxSocketErrors: z.number().default(0),
  metadata: z.array(z.lazy(() => InputKafkaMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputKafka$ {
  /** @deprecated use `InputKafka$inboundSchema` instead. */
  export const inboundSchema = InputKafka$inboundSchema;
  /** @deprecated use `InputKafka$outboundSchema` instead. */
  export const outboundSchema = InputKafka$outboundSchema;
  /** @deprecated use `InputKafka$Outbound` instead. */
  export type Outbound = InputKafka$Outbound;
}

export function inputKafkaToJSON(inputKafka: InputKafka): string {
  return JSON.stringify(InputKafka$outboundSchema.parse(inputKafka));
}

export function inputKafkaFromJSON(
  jsonString: string,
): SafeParseResult<InputKafka, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputKafka$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputKafka' from JSON`,
  );
}
