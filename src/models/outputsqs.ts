/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSqsType = {
  Sqs: "sqs",
} as const;
export type OutputSqsType = OpenEnum<typeof OutputSqsType>;

/**
 * The queue type used (or created). Defaults to Standard.
 */
export const OutputSqsQueueType = {
  Standard: "standard",
  Fifo: "fifo",
} as const;
/**
 * The queue type used (or created). Defaults to Standard.
 */
export type OutputSqsQueueType = OpenEnum<typeof OutputSqsQueueType>;

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const OutputSqsAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type OutputSqsAuthenticationMethod = OpenEnum<
  typeof OutputSqsAuthenticationMethod
>;

/**
 * Signature version to use for signing SQS requests
 */
export const OutputSqsSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing SQS requests
 */
export type OutputSqsSignatureVersion = OpenEnum<
  typeof OutputSqsSignatureVersion
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSqsBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSqsBackpressureBehavior = OpenEnum<
  typeof OutputSqsBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputSqsCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputSqsCompression = OpenEnum<typeof OutputSqsCompression>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputSqsQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputSqsQueueFullBehavior = OpenEnum<
  typeof OutputSqsQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputSqsMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputSqsMode = OpenEnum<typeof OutputSqsMode>;

export type OutputSqsPqControls = {};

export type OutputSqs = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSqsType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The name, URL, or ARN of the SQS queue to send events to. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. Example: 'https://host:port/myQueueName'. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
   */
  queueName: string;
  /**
   * The queue type used (or created). Defaults to Standard.
   */
  queueType?: OutputSqsQueueType | undefined;
  /**
   * SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
   */
  awsAccountId?: string | undefined;
  /**
   * This parameter applies only to FIFO queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner. Use event field __messageGroupId to override this value.
   */
  messageGroupId?: string | undefined;
  /**
   * Create queue if it does not exist.
   */
  createQueue?: boolean | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: OutputSqsAuthenticationMethod | undefined;
  awsSecretKey?: string | undefined;
  /**
   * AWS Region where the SQS queue is located. Required, unless the Queue entry is a URL or ARN that includes a Region.
   */
  region?: string | undefined;
  /**
   * SQS service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to SQS-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing SQS requests
   */
  signatureVersion?: OutputSqsSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access SQS
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Maximum number of queued batches before blocking.
   */
  maxQueueSize?: number | undefined;
  /**
   * Maximum size (KB) of batches to send. Per the SQS spec, the max allowed value is 256 KB.
   */
  maxRecordSizeKB?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max record size.
   */
  flushPeriodSec?: number | undefined;
  /**
   * The maximum number of in-progress API requests before backpressure is applied.
   */
  maxInProgress?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSqsBackpressureBehavior | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputSqsCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputSqsQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputSqsMode | undefined;
  pqControls?: OutputSqsPqControls | undefined;
};

/** @internal */
export const OutputSqsType$inboundSchema: z.ZodType<
  OutputSqsType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSqsType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSqsType$outboundSchema: z.ZodType<
  OutputSqsType,
  z.ZodTypeDef,
  OutputSqsType
> = z.union([
  z.nativeEnum(OutputSqsType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqsType$ {
  /** @deprecated use `OutputSqsType$inboundSchema` instead. */
  export const inboundSchema = OutputSqsType$inboundSchema;
  /** @deprecated use `OutputSqsType$outboundSchema` instead. */
  export const outboundSchema = OutputSqsType$outboundSchema;
}

/** @internal */
export const OutputSqsQueueType$inboundSchema: z.ZodType<
  OutputSqsQueueType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSqsQueueType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSqsQueueType$outboundSchema: z.ZodType<
  OutputSqsQueueType,
  z.ZodTypeDef,
  OutputSqsQueueType
> = z.union([
  z.nativeEnum(OutputSqsQueueType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqsQueueType$ {
  /** @deprecated use `OutputSqsQueueType$inboundSchema` instead. */
  export const inboundSchema = OutputSqsQueueType$inboundSchema;
  /** @deprecated use `OutputSqsQueueType$outboundSchema` instead. */
  export const outboundSchema = OutputSqsQueueType$outboundSchema;
}

/** @internal */
export const OutputSqsAuthenticationMethod$inboundSchema: z.ZodType<
  OutputSqsAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSqsAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSqsAuthenticationMethod$outboundSchema: z.ZodType<
  OutputSqsAuthenticationMethod,
  z.ZodTypeDef,
  OutputSqsAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputSqsAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqsAuthenticationMethod$ {
  /** @deprecated use `OutputSqsAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputSqsAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputSqsAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = OutputSqsAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputSqsSignatureVersion$inboundSchema: z.ZodType<
  OutputSqsSignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSqsSignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSqsSignatureVersion$outboundSchema: z.ZodType<
  OutputSqsSignatureVersion,
  z.ZodTypeDef,
  OutputSqsSignatureVersion
> = z.union([
  z.nativeEnum(OutputSqsSignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqsSignatureVersion$ {
  /** @deprecated use `OutputSqsSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSqsSignatureVersion$inboundSchema;
  /** @deprecated use `OutputSqsSignatureVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSqsSignatureVersion$outboundSchema;
}

/** @internal */
export const OutputSqsBackpressureBehavior$inboundSchema: z.ZodType<
  OutputSqsBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSqsBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSqsBackpressureBehavior$outboundSchema: z.ZodType<
  OutputSqsBackpressureBehavior,
  z.ZodTypeDef,
  OutputSqsBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputSqsBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqsBackpressureBehavior$ {
  /** @deprecated use `OutputSqsBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSqsBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSqsBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSqsBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputSqsCompression$inboundSchema: z.ZodType<
  OutputSqsCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSqsCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSqsCompression$outboundSchema: z.ZodType<
  OutputSqsCompression,
  z.ZodTypeDef,
  OutputSqsCompression
> = z.union([
  z.nativeEnum(OutputSqsCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqsCompression$ {
  /** @deprecated use `OutputSqsCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSqsCompression$inboundSchema;
  /** @deprecated use `OutputSqsCompression$outboundSchema` instead. */
  export const outboundSchema = OutputSqsCompression$outboundSchema;
}

/** @internal */
export const OutputSqsQueueFullBehavior$inboundSchema: z.ZodType<
  OutputSqsQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSqsQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSqsQueueFullBehavior$outboundSchema: z.ZodType<
  OutputSqsQueueFullBehavior,
  z.ZodTypeDef,
  OutputSqsQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputSqsQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqsQueueFullBehavior$ {
  /** @deprecated use `OutputSqsQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSqsQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputSqsQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSqsQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputSqsMode$inboundSchema: z.ZodType<
  OutputSqsMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSqsMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSqsMode$outboundSchema: z.ZodType<
  OutputSqsMode,
  z.ZodTypeDef,
  OutputSqsMode
> = z.union([
  z.nativeEnum(OutputSqsMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqsMode$ {
  /** @deprecated use `OutputSqsMode$inboundSchema` instead. */
  export const inboundSchema = OutputSqsMode$inboundSchema;
  /** @deprecated use `OutputSqsMode$outboundSchema` instead. */
  export const outboundSchema = OutputSqsMode$outboundSchema;
}

/** @internal */
export const OutputSqsPqControls$inboundSchema: z.ZodType<
  OutputSqsPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSqsPqControls$Outbound = {};

/** @internal */
export const OutputSqsPqControls$outboundSchema: z.ZodType<
  OutputSqsPqControls$Outbound,
  z.ZodTypeDef,
  OutputSqsPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqsPqControls$ {
  /** @deprecated use `OutputSqsPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputSqsPqControls$inboundSchema;
  /** @deprecated use `OutputSqsPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputSqsPqControls$outboundSchema;
  /** @deprecated use `OutputSqsPqControls$Outbound` instead. */
  export type Outbound = OutputSqsPqControls$Outbound;
}

export function outputSqsPqControlsToJSON(
  outputSqsPqControls: OutputSqsPqControls,
): string {
  return JSON.stringify(
    OutputSqsPqControls$outboundSchema.parse(outputSqsPqControls),
  );
}

export function outputSqsPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSqsPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSqsPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSqsPqControls' from JSON`,
  );
}

/** @internal */
export const OutputSqs$inboundSchema: z.ZodType<
  OutputSqs,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSqsType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  queueName: z.string(),
  queueType: OutputSqsQueueType$inboundSchema.default("standard"),
  awsAccountId: z.string().optional(),
  messageGroupId: z.string().default("cribl"),
  createQueue: z.boolean().default(true),
  awsAuthenticationMethod: OutputSqsAuthenticationMethod$inboundSchema.default(
    "auto",
  ),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: OutputSqsSignatureVersion$inboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  maxQueueSize: z.number().default(100),
  maxRecordSizeKB: z.number().default(256),
  flushPeriodSec: z.number().default(1),
  maxInProgress: z.number().default(10),
  onBackpressure: OutputSqsBackpressureBehavior$inboundSchema.default("block"),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSqsCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputSqsQueueFullBehavior$inboundSchema.default("block"),
  pqMode: OutputSqsMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSqsPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputSqs$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  queueName: string;
  queueType: string;
  awsAccountId?: string | undefined;
  messageGroupId: string;
  createQueue: boolean;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region?: string | undefined;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  maxQueueSize: number;
  maxRecordSizeKB: number;
  flushPeriodSec: number;
  maxInProgress: number;
  onBackpressure: string;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputSqsPqControls$Outbound | undefined;
};

/** @internal */
export const OutputSqs$outboundSchema: z.ZodType<
  OutputSqs$Outbound,
  z.ZodTypeDef,
  OutputSqs
> = z.object({
  id: z.string().optional(),
  type: OutputSqsType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  queueName: z.string(),
  queueType: OutputSqsQueueType$outboundSchema.default("standard"),
  awsAccountId: z.string().optional(),
  messageGroupId: z.string().default("cribl"),
  createQueue: z.boolean().default(true),
  awsAuthenticationMethod: OutputSqsAuthenticationMethod$outboundSchema.default(
    "auto",
  ),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: OutputSqsSignatureVersion$outboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  maxQueueSize: z.number().default(100),
  maxRecordSizeKB: z.number().default(256),
  flushPeriodSec: z.number().default(1),
  maxInProgress: z.number().default(10),
  onBackpressure: OutputSqsBackpressureBehavior$outboundSchema.default("block"),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSqsCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputSqsQueueFullBehavior$outboundSchema.default("block"),
  pqMode: OutputSqsMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSqsPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSqs$ {
  /** @deprecated use `OutputSqs$inboundSchema` instead. */
  export const inboundSchema = OutputSqs$inboundSchema;
  /** @deprecated use `OutputSqs$outboundSchema` instead. */
  export const outboundSchema = OutputSqs$outboundSchema;
  /** @deprecated use `OutputSqs$Outbound` instead. */
  export type Outbound = OutputSqs$Outbound;
}

export function outputSqsToJSON(outputSqs: OutputSqs): string {
  return JSON.stringify(OutputSqs$outboundSchema.parse(outputSqs));
}

export function outputSqsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSqs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSqs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSqs' from JSON`,
  );
}
