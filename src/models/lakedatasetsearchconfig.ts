/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DatasetMetadata,
  DatasetMetadata$inboundSchema,
  DatasetMetadata$Outbound,
  DatasetMetadata$outboundSchema,
} from "./datasetmetadata.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type LakeDatasetSearchConfig = {
  datatypes?: Array<string> | undefined;
  metadata?: DatasetMetadata | undefined;
};

/** @internal */
export const LakeDatasetSearchConfig$inboundSchema: z.ZodType<
  LakeDatasetSearchConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  datatypes: z.array(z.string()).optional(),
  metadata: DatasetMetadata$inboundSchema.optional(),
});

/** @internal */
export type LakeDatasetSearchConfig$Outbound = {
  datatypes?: Array<string> | undefined;
  metadata?: DatasetMetadata$Outbound | undefined;
};

/** @internal */
export const LakeDatasetSearchConfig$outboundSchema: z.ZodType<
  LakeDatasetSearchConfig$Outbound,
  z.ZodTypeDef,
  LakeDatasetSearchConfig
> = z.object({
  datatypes: z.array(z.string()).optional(),
  metadata: DatasetMetadata$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LakeDatasetSearchConfig$ {
  /** @deprecated use `LakeDatasetSearchConfig$inboundSchema` instead. */
  export const inboundSchema = LakeDatasetSearchConfig$inboundSchema;
  /** @deprecated use `LakeDatasetSearchConfig$outboundSchema` instead. */
  export const outboundSchema = LakeDatasetSearchConfig$outboundSchema;
  /** @deprecated use `LakeDatasetSearchConfig$Outbound` instead. */
  export type Outbound = LakeDatasetSearchConfig$Outbound;
}

export function lakeDatasetSearchConfigToJSON(
  lakeDatasetSearchConfig: LakeDatasetSearchConfig,
): string {
  return JSON.stringify(
    LakeDatasetSearchConfig$outboundSchema.parse(lakeDatasetSearchConfig),
  );
}

export function lakeDatasetSearchConfigFromJSON(
  jsonString: string,
): SafeParseResult<LakeDatasetSearchConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LakeDatasetSearchConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LakeDatasetSearchConfig' from JSON`,
  );
}
