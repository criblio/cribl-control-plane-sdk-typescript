/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Commit = {
  authorEmail?: string | undefined;
  authorName?: string | undefined;
  date: string;
  hash: string;
  message: string;
  short: string;
};

/** @internal */
export const Commit$inboundSchema: z.ZodType<Commit, z.ZodTypeDef, unknown> = z
  .object({
    author_email: z.string().optional(),
    author_name: z.string().optional(),
    date: z.string(),
    hash: z.string(),
    message: z.string(),
    short: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "author_email": "authorEmail",
      "author_name": "authorName",
    });
  });

/** @internal */
export type Commit$Outbound = {
  author_email?: string | undefined;
  author_name?: string | undefined;
  date: string;
  hash: string;
  message: string;
  short: string;
};

/** @internal */
export const Commit$outboundSchema: z.ZodType<
  Commit$Outbound,
  z.ZodTypeDef,
  Commit
> = z.object({
  authorEmail: z.string().optional(),
  authorName: z.string().optional(),
  date: z.string(),
  hash: z.string(),
  message: z.string(),
  short: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorEmail: "author_email",
    authorName: "author_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Commit$ {
  /** @deprecated use `Commit$inboundSchema` instead. */
  export const inboundSchema = Commit$inboundSchema;
  /** @deprecated use `Commit$outboundSchema` instead. */
  export const outboundSchema = Commit$outboundSchema;
  /** @deprecated use `Commit$Outbound` instead. */
  export type Outbound = Commit$Outbound;
}

export function commitToJSON(commit: Commit): string {
  return JSON.stringify(Commit$outboundSchema.parse(commit));
}

export function commitFromJSON(
  jsonString: string,
): SafeParseResult<Commit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Commit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Commit' from JSON`,
  );
}
