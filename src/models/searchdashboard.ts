/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DashboardElementUnion,
  DashboardElementUnion$inboundSchema,
  DashboardElementUnion$Outbound,
  DashboardElementUnion$outboundSchema,
} from "./dashboardelementunion.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SavedQuerySchedule,
  SavedQuerySchedule$inboundSchema,
  SavedQuerySchedule$Outbound,
  SavedQuerySchedule$outboundSchema,
} from "./savedqueryschedule.js";

export type SearchDashboard = {
  cacheTTLSeconds?: number | undefined;
  category?: string | undefined;
  created: number;
  createdBy: string;
  description?: string | undefined;
  displayCreatedBy?: string | undefined;
  displayModifiedBy?: string | undefined;
  elements: Array<DashboardElementUnion>;
  groups?: any | undefined;
  id: string;
  modified: number;
  modifiedBy?: string | undefined;
  name: string;
  packId?: string | undefined;
  refreshRate?: number | undefined;
  resolvedDatasetIds?: Array<string> | undefined;
  schedule?: SavedQuerySchedule | undefined;
};

/** @internal */
export const SearchDashboard$inboundSchema: z.ZodType<
  SearchDashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  cacheTTLSeconds: z.number().optional(),
  category: z.string().optional(),
  created: z.number(),
  createdBy: z.string(),
  description: z.string().optional(),
  displayCreatedBy: z.string().optional(),
  displayModifiedBy: z.string().optional(),
  elements: z.array(DashboardElementUnion$inboundSchema),
  groups: z.any().optional(),
  id: z.string(),
  modified: z.number(),
  modifiedBy: z.string().optional(),
  name: z.string(),
  packId: z.string().optional(),
  refreshRate: z.number().optional(),
  resolvedDatasetIds: z.array(z.string()).optional(),
  schedule: SavedQuerySchedule$inboundSchema.optional(),
});

/** @internal */
export type SearchDashboard$Outbound = {
  cacheTTLSeconds?: number | undefined;
  category?: string | undefined;
  created: number;
  createdBy: string;
  description?: string | undefined;
  displayCreatedBy?: string | undefined;
  displayModifiedBy?: string | undefined;
  elements: Array<DashboardElementUnion$Outbound>;
  groups?: any | undefined;
  id: string;
  modified: number;
  modifiedBy?: string | undefined;
  name: string;
  packId?: string | undefined;
  refreshRate?: number | undefined;
  resolvedDatasetIds?: Array<string> | undefined;
  schedule?: SavedQuerySchedule$Outbound | undefined;
};

/** @internal */
export const SearchDashboard$outboundSchema: z.ZodType<
  SearchDashboard$Outbound,
  z.ZodTypeDef,
  SearchDashboard
> = z.object({
  cacheTTLSeconds: z.number().optional(),
  category: z.string().optional(),
  created: z.number(),
  createdBy: z.string(),
  description: z.string().optional(),
  displayCreatedBy: z.string().optional(),
  displayModifiedBy: z.string().optional(),
  elements: z.array(DashboardElementUnion$outboundSchema),
  groups: z.any().optional(),
  id: z.string(),
  modified: z.number(),
  modifiedBy: z.string().optional(),
  name: z.string(),
  packId: z.string().optional(),
  refreshRate: z.number().optional(),
  resolvedDatasetIds: z.array(z.string()).optional(),
  schedule: SavedQuerySchedule$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDashboard$ {
  /** @deprecated use `SearchDashboard$inboundSchema` instead. */
  export const inboundSchema = SearchDashboard$inboundSchema;
  /** @deprecated use `SearchDashboard$outboundSchema` instead. */
  export const outboundSchema = SearchDashboard$outboundSchema;
  /** @deprecated use `SearchDashboard$Outbound` instead. */
  export type Outbound = SearchDashboard$Outbound;
}

export function searchDashboardToJSON(
  searchDashboard: SearchDashboard,
): string {
  return JSON.stringify(SearchDashboard$outboundSchema.parse(searchDashboard));
}

export function searchDashboardFromJSON(
  jsonString: string,
): SafeParseResult<SearchDashboard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchDashboard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchDashboard' from JSON`,
  );
}
