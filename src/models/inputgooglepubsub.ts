/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputGooglePubsubType = {
  GooglePubsub: "google_pubsub",
} as const;
export type InputGooglePubsubType = ClosedEnum<typeof InputGooglePubsubType>;

export type InputGooglePubsubConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputGooglePubsubMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputGooglePubsubMode = OpenEnum<typeof InputGooglePubsubMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputGooglePubsubCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputGooglePubsubCompression = OpenEnum<
  typeof InputGooglePubsubCompression
>;

export type InputGooglePubsubPqControls = {};

export type InputGooglePubsubPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputGooglePubsubMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputGooglePubsubCompression | undefined;
  pqControls?: InputGooglePubsubPqControls | undefined;
};

/**
 * Choose Auto to use Google Application Default Credentials (ADC), Manual to enter Google service account credentials directly, or Secret to select or create a stored secret that references Google service account credentials.
 */
export const InputGooglePubsubGoogleAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Choose Auto to use Google Application Default Credentials (ADC), Manual to enter Google service account credentials directly, or Secret to select or create a stored secret that references Google service account credentials.
 */
export type InputGooglePubsubGoogleAuthenticationMethod = OpenEnum<
  typeof InputGooglePubsubGoogleAuthenticationMethod
>;

export type InputGooglePubsubMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputGooglePubsub = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputGooglePubsubType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputGooglePubsubConnection> | undefined;
  pq?: InputGooglePubsubPq | undefined;
  /**
   * ID of the topic to receive events from. When Monitor subscription is enabled, any value may be entered.
   */
  topicName?: string | undefined;
  /**
   * ID of the subscription to use when receiving events. When Monitor subscription is enabled, the fully qualified subscription name must be entered. Example: projects/myProject/subscriptions/mySubscription
   */
  subscriptionName: string;
  /**
   * Use when the subscription is not created by this Source and topic is not known
   */
  monitorSubscription?: boolean | undefined;
  /**
   * Create topic if it does not exist
   */
  createTopic?: boolean | undefined;
  /**
   * Create subscription if it does not exist
   */
  createSubscription?: boolean | undefined;
  /**
   * Region to retrieve messages from. Select 'default' to allow Google to auto-select the nearest region. When using ordered delivery, the selected region must be allowed by message storage policy.
   */
  region?: string | undefined;
  /**
   * Choose Auto to use Google Application Default Credentials (ADC), Manual to enter Google service account credentials directly, or Secret to select or create a stored secret that references Google service account credentials.
   */
  googleAuthMethod?: InputGooglePubsubGoogleAuthenticationMethod | undefined;
  /**
   * Contents of service account credentials (JSON keys) file downloaded from Google Cloud. To upload a file, click the upload button at this field's upper right.
   */
  serviceAccountCredentials?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  secret?: string | undefined;
  /**
   * If Destination exerts backpressure, this setting limits how many inbound events Stream will queue for processing before it stops retrieving events
   */
  maxBacklog?: number | undefined;
  /**
   * How many streams to pull messages from at one time. Doubling the value doubles the number of messages this Source pulls from the topic (if available), while consuming more CPU and memory. Defaults to 5.
   */
  concurrency?: number | undefined;
  /**
   * Pull request timeout, in milliseconds
   */
  requestTimeout?: number | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputGooglePubsubMetadatum> | undefined;
  description?: string | undefined;
  /**
   * Receive events in the order they were added to the queue. The process sending events must have ordering enabled.
   */
  orderedDelivery?: boolean | undefined;
};

/** @internal */
export const InputGooglePubsubType$inboundSchema: z.ZodNativeEnum<
  typeof InputGooglePubsubType
> = z.nativeEnum(InputGooglePubsubType);

/** @internal */
export const InputGooglePubsubType$outboundSchema: z.ZodNativeEnum<
  typeof InputGooglePubsubType
> = InputGooglePubsubType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGooglePubsubType$ {
  /** @deprecated use `InputGooglePubsubType$inboundSchema` instead. */
  export const inboundSchema = InputGooglePubsubType$inboundSchema;
  /** @deprecated use `InputGooglePubsubType$outboundSchema` instead. */
  export const outboundSchema = InputGooglePubsubType$outboundSchema;
}

/** @internal */
export const InputGooglePubsubConnection$inboundSchema: z.ZodType<
  InputGooglePubsubConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputGooglePubsubConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputGooglePubsubConnection$outboundSchema: z.ZodType<
  InputGooglePubsubConnection$Outbound,
  z.ZodTypeDef,
  InputGooglePubsubConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGooglePubsubConnection$ {
  /** @deprecated use `InputGooglePubsubConnection$inboundSchema` instead. */
  export const inboundSchema = InputGooglePubsubConnection$inboundSchema;
  /** @deprecated use `InputGooglePubsubConnection$outboundSchema` instead. */
  export const outboundSchema = InputGooglePubsubConnection$outboundSchema;
  /** @deprecated use `InputGooglePubsubConnection$Outbound` instead. */
  export type Outbound = InputGooglePubsubConnection$Outbound;
}

export function inputGooglePubsubConnectionToJSON(
  inputGooglePubsubConnection: InputGooglePubsubConnection,
): string {
  return JSON.stringify(
    InputGooglePubsubConnection$outboundSchema.parse(
      inputGooglePubsubConnection,
    ),
  );
}

export function inputGooglePubsubConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputGooglePubsubConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGooglePubsubConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGooglePubsubConnection' from JSON`,
  );
}

/** @internal */
export const InputGooglePubsubMode$inboundSchema: z.ZodType<
  InputGooglePubsubMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGooglePubsubMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGooglePubsubMode$outboundSchema: z.ZodType<
  InputGooglePubsubMode,
  z.ZodTypeDef,
  InputGooglePubsubMode
> = z.union([
  z.nativeEnum(InputGooglePubsubMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGooglePubsubMode$ {
  /** @deprecated use `InputGooglePubsubMode$inboundSchema` instead. */
  export const inboundSchema = InputGooglePubsubMode$inboundSchema;
  /** @deprecated use `InputGooglePubsubMode$outboundSchema` instead. */
  export const outboundSchema = InputGooglePubsubMode$outboundSchema;
}

/** @internal */
export const InputGooglePubsubCompression$inboundSchema: z.ZodType<
  InputGooglePubsubCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputGooglePubsubCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputGooglePubsubCompression$outboundSchema: z.ZodType<
  InputGooglePubsubCompression,
  z.ZodTypeDef,
  InputGooglePubsubCompression
> = z.union([
  z.nativeEnum(InputGooglePubsubCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGooglePubsubCompression$ {
  /** @deprecated use `InputGooglePubsubCompression$inboundSchema` instead. */
  export const inboundSchema = InputGooglePubsubCompression$inboundSchema;
  /** @deprecated use `InputGooglePubsubCompression$outboundSchema` instead. */
  export const outboundSchema = InputGooglePubsubCompression$outboundSchema;
}

/** @internal */
export const InputGooglePubsubPqControls$inboundSchema: z.ZodType<
  InputGooglePubsubPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputGooglePubsubPqControls$Outbound = {};

/** @internal */
export const InputGooglePubsubPqControls$outboundSchema: z.ZodType<
  InputGooglePubsubPqControls$Outbound,
  z.ZodTypeDef,
  InputGooglePubsubPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGooglePubsubPqControls$ {
  /** @deprecated use `InputGooglePubsubPqControls$inboundSchema` instead. */
  export const inboundSchema = InputGooglePubsubPqControls$inboundSchema;
  /** @deprecated use `InputGooglePubsubPqControls$outboundSchema` instead. */
  export const outboundSchema = InputGooglePubsubPqControls$outboundSchema;
  /** @deprecated use `InputGooglePubsubPqControls$Outbound` instead. */
  export type Outbound = InputGooglePubsubPqControls$Outbound;
}

export function inputGooglePubsubPqControlsToJSON(
  inputGooglePubsubPqControls: InputGooglePubsubPqControls,
): string {
  return JSON.stringify(
    InputGooglePubsubPqControls$outboundSchema.parse(
      inputGooglePubsubPqControls,
    ),
  );
}

export function inputGooglePubsubPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputGooglePubsubPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGooglePubsubPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGooglePubsubPqControls' from JSON`,
  );
}

/** @internal */
export const InputGooglePubsubPq$inboundSchema: z.ZodType<
  InputGooglePubsubPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputGooglePubsubMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputGooglePubsubCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputGooglePubsubPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type InputGooglePubsubPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputGooglePubsubPqControls$Outbound | undefined;
};

/** @internal */
export const InputGooglePubsubPq$outboundSchema: z.ZodType<
  InputGooglePubsubPq$Outbound,
  z.ZodTypeDef,
  InputGooglePubsubPq
> = z.object({
  mode: InputGooglePubsubMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputGooglePubsubCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputGooglePubsubPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGooglePubsubPq$ {
  /** @deprecated use `InputGooglePubsubPq$inboundSchema` instead. */
  export const inboundSchema = InputGooglePubsubPq$inboundSchema;
  /** @deprecated use `InputGooglePubsubPq$outboundSchema` instead. */
  export const outboundSchema = InputGooglePubsubPq$outboundSchema;
  /** @deprecated use `InputGooglePubsubPq$Outbound` instead. */
  export type Outbound = InputGooglePubsubPq$Outbound;
}

export function inputGooglePubsubPqToJSON(
  inputGooglePubsubPq: InputGooglePubsubPq,
): string {
  return JSON.stringify(
    InputGooglePubsubPq$outboundSchema.parse(inputGooglePubsubPq),
  );
}

export function inputGooglePubsubPqFromJSON(
  jsonString: string,
): SafeParseResult<InputGooglePubsubPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGooglePubsubPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGooglePubsubPq' from JSON`,
  );
}

/** @internal */
export const InputGooglePubsubGoogleAuthenticationMethod$inboundSchema:
  z.ZodType<
    InputGooglePubsubGoogleAuthenticationMethod,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(InputGooglePubsubGoogleAuthenticationMethod),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const InputGooglePubsubGoogleAuthenticationMethod$outboundSchema:
  z.ZodType<
    InputGooglePubsubGoogleAuthenticationMethod,
    z.ZodTypeDef,
    InputGooglePubsubGoogleAuthenticationMethod
  > = z.union([
    z.nativeEnum(InputGooglePubsubGoogleAuthenticationMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGooglePubsubGoogleAuthenticationMethod$ {
  /** @deprecated use `InputGooglePubsubGoogleAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    InputGooglePubsubGoogleAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputGooglePubsubGoogleAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    InputGooglePubsubGoogleAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputGooglePubsubMetadatum$inboundSchema: z.ZodType<
  InputGooglePubsubMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputGooglePubsubMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputGooglePubsubMetadatum$outboundSchema: z.ZodType<
  InputGooglePubsubMetadatum$Outbound,
  z.ZodTypeDef,
  InputGooglePubsubMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGooglePubsubMetadatum$ {
  /** @deprecated use `InputGooglePubsubMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputGooglePubsubMetadatum$inboundSchema;
  /** @deprecated use `InputGooglePubsubMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputGooglePubsubMetadatum$outboundSchema;
  /** @deprecated use `InputGooglePubsubMetadatum$Outbound` instead. */
  export type Outbound = InputGooglePubsubMetadatum$Outbound;
}

export function inputGooglePubsubMetadatumToJSON(
  inputGooglePubsubMetadatum: InputGooglePubsubMetadatum,
): string {
  return JSON.stringify(
    InputGooglePubsubMetadatum$outboundSchema.parse(inputGooglePubsubMetadatum),
  );
}

export function inputGooglePubsubMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputGooglePubsubMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGooglePubsubMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGooglePubsubMetadatum' from JSON`,
  );
}

/** @internal */
export const InputGooglePubsub$inboundSchema: z.ZodType<
  InputGooglePubsub,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputGooglePubsubType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputGooglePubsubConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputGooglePubsubPq$inboundSchema).optional(),
  topicName: z.string().default("cribl"),
  subscriptionName: z.string(),
  monitorSubscription: z.boolean().default(false),
  createTopic: z.boolean().default(false),
  createSubscription: z.boolean().default(true),
  region: z.string().optional(),
  googleAuthMethod: InputGooglePubsubGoogleAuthenticationMethod$inboundSchema
    .default("manual"),
  serviceAccountCredentials: z.string().optional(),
  secret: z.string().optional(),
  maxBacklog: z.number().default(1000),
  concurrency: z.number().default(5),
  requestTimeout: z.number().default(60000),
  metadata: z.array(z.lazy(() => InputGooglePubsubMetadatum$inboundSchema))
    .optional(),
  description: z.string().optional(),
  orderedDelivery: z.boolean().default(false),
});

/** @internal */
export type InputGooglePubsub$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputGooglePubsubConnection$Outbound> | undefined;
  pq?: InputGooglePubsubPq$Outbound | undefined;
  topicName: string;
  subscriptionName: string;
  monitorSubscription: boolean;
  createTopic: boolean;
  createSubscription: boolean;
  region?: string | undefined;
  googleAuthMethod: string;
  serviceAccountCredentials?: string | undefined;
  secret?: string | undefined;
  maxBacklog: number;
  concurrency: number;
  requestTimeout: number;
  metadata?: Array<InputGooglePubsubMetadatum$Outbound> | undefined;
  description?: string | undefined;
  orderedDelivery: boolean;
};

/** @internal */
export const InputGooglePubsub$outboundSchema: z.ZodType<
  InputGooglePubsub$Outbound,
  z.ZodTypeDef,
  InputGooglePubsub
> = z.object({
  id: z.string().optional(),
  type: InputGooglePubsubType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputGooglePubsubConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputGooglePubsubPq$outboundSchema).optional(),
  topicName: z.string().default("cribl"),
  subscriptionName: z.string(),
  monitorSubscription: z.boolean().default(false),
  createTopic: z.boolean().default(false),
  createSubscription: z.boolean().default(true),
  region: z.string().optional(),
  googleAuthMethod: InputGooglePubsubGoogleAuthenticationMethod$outboundSchema
    .default("manual"),
  serviceAccountCredentials: z.string().optional(),
  secret: z.string().optional(),
  maxBacklog: z.number().default(1000),
  concurrency: z.number().default(5),
  requestTimeout: z.number().default(60000),
  metadata: z.array(z.lazy(() => InputGooglePubsubMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
  orderedDelivery: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputGooglePubsub$ {
  /** @deprecated use `InputGooglePubsub$inboundSchema` instead. */
  export const inboundSchema = InputGooglePubsub$inboundSchema;
  /** @deprecated use `InputGooglePubsub$outboundSchema` instead. */
  export const outboundSchema = InputGooglePubsub$outboundSchema;
  /** @deprecated use `InputGooglePubsub$Outbound` instead. */
  export type Outbound = InputGooglePubsub$Outbound;
}

export function inputGooglePubsubToJSON(
  inputGooglePubsub: InputGooglePubsub,
): string {
  return JSON.stringify(
    InputGooglePubsub$outboundSchema.parse(inputGooglePubsub),
  );
}

export function inputGooglePubsubFromJSON(
  jsonString: string,
): SafeParseResult<InputGooglePubsub, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputGooglePubsub$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputGooglePubsub' from JSON`,
  );
}
