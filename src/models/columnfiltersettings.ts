/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ColumnFilterSettings = {
  contains: { [k: string]: any };
};

/** @internal */
export const ColumnFilterSettings$inboundSchema: z.ZodType<
  ColumnFilterSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  contains: z.record(z.any()),
});

/** @internal */
export type ColumnFilterSettings$Outbound = {
  contains: { [k: string]: any };
};

/** @internal */
export const ColumnFilterSettings$outboundSchema: z.ZodType<
  ColumnFilterSettings$Outbound,
  z.ZodTypeDef,
  ColumnFilterSettings
> = z.object({
  contains: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ColumnFilterSettings$ {
  /** @deprecated use `ColumnFilterSettings$inboundSchema` instead. */
  export const inboundSchema = ColumnFilterSettings$inboundSchema;
  /** @deprecated use `ColumnFilterSettings$outboundSchema` instead. */
  export const outboundSchema = ColumnFilterSettings$outboundSchema;
  /** @deprecated use `ColumnFilterSettings$Outbound` instead. */
  export type Outbound = ColumnFilterSettings$Outbound;
}

export function columnFilterSettingsToJSON(
  columnFilterSettings: ColumnFilterSettings,
): string {
  return JSON.stringify(
    ColumnFilterSettings$outboundSchema.parse(columnFilterSettings),
  );
}

export function columnFilterSettingsFromJSON(
  jsonString: string,
): SafeParseResult<ColumnFilterSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ColumnFilterSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ColumnFilterSettings' from JSON`,
  );
}
