/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputElasticType = {
  Elastic: "elastic",
} as const;
export type InputElasticType = ClosedEnum<typeof InputElasticType>;

export type InputElasticConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputElasticMode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputElasticMode = OpenEnum<typeof InputElasticMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputElasticCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputElasticCompression = OpenEnum<typeof InputElasticCompression>;

export type InputElasticPqControls = {};

export type InputElasticPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputElasticMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputElasticCompression | undefined;
  pqControls?: InputElasticPqControls | undefined;
};

export const InputElasticMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputElasticMinimumTLSVersion = OpenEnum<
  typeof InputElasticMinimumTLSVersion
>;

export const InputElasticMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputElasticMaximumTLSVersion = OpenEnum<
  typeof InputElasticMaximumTLSVersion
>;

export type InputElasticTLSSettingsServerSide = {
  disabled?: boolean | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: InputElasticMinimumTLSVersion | undefined;
  maxVersion?: InputElasticMaximumTLSVersion | undefined;
};

export const InputElasticAuthenticationType = {
  /**
   * None
   */
  None: "none",
  /**
   * Basic
   */
  Basic: "basic",
  /**
   * Basic (credentials secret)
   */
  CredentialsSecret: "credentialsSecret",
  /**
   * Auth Tokens
   */
  AuthTokens: "authTokens",
} as const;
export type InputElasticAuthenticationType = OpenEnum<
  typeof InputElasticAuthenticationType
>;

/**
 * The API version to use for communicating with the server
 */
export const InputElasticAPIVersion = {
  /**
   * 6.8.4
   */
  SixDot8Dot4: "6.8.4",
  /**
   * 8.3.2
   */
  EightDot3Dot2: "8.3.2",
  /**
   * Custom
   */
  Custom: "custom",
} as const;
/**
 * The API version to use for communicating with the server
 */
export type InputElasticAPIVersion = OpenEnum<typeof InputElasticAPIVersion>;

export type InputElasticExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

export type InputElasticMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

/**
 * Enter credentials directly, or select a stored secret
 */
export const InputElasticAuthenticationMethod = {
  None: "none",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * Enter credentials directly, or select a stored secret
 */
export type InputElasticAuthenticationMethod = OpenEnum<
  typeof InputElasticAuthenticationMethod
>;

export type InputElasticProxyMode = {
  /**
   * Enable proxying of non-bulk API requests to an external Elastic server. Enable this only if you understand the implications. See [Cribl Docs](https://docs.cribl.io/stream/sources-elastic/#proxy-mode) for more details.
   */
  enabled?: boolean | undefined;
  /**
   * URL of the Elastic server to proxy non-bulk requests to, such as http://elastic:9200
   */
  url?: string | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA (such as self-signed certificates)
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * List of headers to remove from the request to proxy
   */
  removeHeaders?: Array<string> | undefined;
  /**
   * Amount of time, in seconds, to wait for a proxy request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Enter credentials directly, or select a stored secret
   */
  authType?: InputElasticAuthenticationMethod | undefined;
};

export type InputElastic = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputElasticType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputElasticConnection> | undefined;
  pq?: InputElasticPq | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  tls?: InputElasticTLSSettingsServerSide | undefined;
  /**
   * Maximum number of active requests allowed per Worker Process. Set to 0 for unlimited. Caution: Increasing the limit above the default value, or setting it to unlimited, may degrade performance and reduce throughput.
   */
  maxActiveReq?: number | undefined;
  /**
   * Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
   */
  maxRequestsPerSocket?: number | undefined;
  /**
   * Extract the client IP and port from PROXY protocol v1/v2. When enabled, the X-Forwarded-For header is ignored. Disable to use the X-Forwarded-For header for client IP extraction.
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Add request headers to events, in the __headers field
   */
  captureHeaders?: boolean | undefined;
  /**
   * How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
   */
  activityLogSampleRate?: number | undefined;
  /**
   * How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
   */
  requestTimeout?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
   */
  socketTimeout?: number | undefined;
  /**
   * After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 second, maximum 600 seconds (10 minutes).
   */
  keepAliveTimeout?: number | undefined;
  /**
   * Expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
   */
  enableHealthCheck?: boolean | undefined;
  /**
   * Messages from matched IP addresses will be processed, unless also matched by the denylist
   */
  ipAllowlistRegex?: string | undefined;
  /**
   * Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
   */
  ipDenylistRegex?: string | undefined;
  /**
   * Absolute path on which to listen for Elasticsearch API requests. Defaults to /. _bulk will be appended automatically. For example, /myPath becomes /myPath/_bulk. Requests can then be made to either /myPath/_bulk or /myPath/<myIndexName>/_bulk. Other entries are faked as success.
   */
  elasticAPI?: string | undefined;
  authType?: InputElasticAuthenticationType | undefined;
  /**
   * The API version to use for communicating with the server
   */
  apiVersion?: InputElasticAPIVersion | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<InputElasticExtraHttpHeader> | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputElasticMetadatum> | undefined;
  proxyMode?: InputElasticProxyMode | undefined;
  description?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Bearer tokens to include in the authorization header
   */
  authTokens?: Array<string> | undefined;
  /**
   * Custom version information to respond to requests
   */
  customAPIVersion?: string | undefined;
};

/** @internal */
export const InputElasticType$inboundSchema: z.ZodNativeEnum<
  typeof InputElasticType
> = z.nativeEnum(InputElasticType);

/** @internal */
export const InputElasticType$outboundSchema: z.ZodNativeEnum<
  typeof InputElasticType
> = InputElasticType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticType$ {
  /** @deprecated use `InputElasticType$inboundSchema` instead. */
  export const inboundSchema = InputElasticType$inboundSchema;
  /** @deprecated use `InputElasticType$outboundSchema` instead. */
  export const outboundSchema = InputElasticType$outboundSchema;
}

/** @internal */
export const InputElasticConnection$inboundSchema: z.ZodType<
  InputElasticConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputElasticConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputElasticConnection$outboundSchema: z.ZodType<
  InputElasticConnection$Outbound,
  z.ZodTypeDef,
  InputElasticConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticConnection$ {
  /** @deprecated use `InputElasticConnection$inboundSchema` instead. */
  export const inboundSchema = InputElasticConnection$inboundSchema;
  /** @deprecated use `InputElasticConnection$outboundSchema` instead. */
  export const outboundSchema = InputElasticConnection$outboundSchema;
  /** @deprecated use `InputElasticConnection$Outbound` instead. */
  export type Outbound = InputElasticConnection$Outbound;
}

export function inputElasticConnectionToJSON(
  inputElasticConnection: InputElasticConnection,
): string {
  return JSON.stringify(
    InputElasticConnection$outboundSchema.parse(inputElasticConnection),
  );
}

export function inputElasticConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputElasticConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputElasticConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputElasticConnection' from JSON`,
  );
}

/** @internal */
export const InputElasticMode$inboundSchema: z.ZodType<
  InputElasticMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputElasticMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputElasticMode$outboundSchema: z.ZodType<
  InputElasticMode,
  z.ZodTypeDef,
  InputElasticMode
> = z.union([
  z.nativeEnum(InputElasticMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticMode$ {
  /** @deprecated use `InputElasticMode$inboundSchema` instead. */
  export const inboundSchema = InputElasticMode$inboundSchema;
  /** @deprecated use `InputElasticMode$outboundSchema` instead. */
  export const outboundSchema = InputElasticMode$outboundSchema;
}

/** @internal */
export const InputElasticCompression$inboundSchema: z.ZodType<
  InputElasticCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputElasticCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputElasticCompression$outboundSchema: z.ZodType<
  InputElasticCompression,
  z.ZodTypeDef,
  InputElasticCompression
> = z.union([
  z.nativeEnum(InputElasticCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticCompression$ {
  /** @deprecated use `InputElasticCompression$inboundSchema` instead. */
  export const inboundSchema = InputElasticCompression$inboundSchema;
  /** @deprecated use `InputElasticCompression$outboundSchema` instead. */
  export const outboundSchema = InputElasticCompression$outboundSchema;
}

/** @internal */
export const InputElasticPqControls$inboundSchema: z.ZodType<
  InputElasticPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputElasticPqControls$Outbound = {};

/** @internal */
export const InputElasticPqControls$outboundSchema: z.ZodType<
  InputElasticPqControls$Outbound,
  z.ZodTypeDef,
  InputElasticPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticPqControls$ {
  /** @deprecated use `InputElasticPqControls$inboundSchema` instead. */
  export const inboundSchema = InputElasticPqControls$inboundSchema;
  /** @deprecated use `InputElasticPqControls$outboundSchema` instead. */
  export const outboundSchema = InputElasticPqControls$outboundSchema;
  /** @deprecated use `InputElasticPqControls$Outbound` instead. */
  export type Outbound = InputElasticPqControls$Outbound;
}

export function inputElasticPqControlsToJSON(
  inputElasticPqControls: InputElasticPqControls,
): string {
  return JSON.stringify(
    InputElasticPqControls$outboundSchema.parse(inputElasticPqControls),
  );
}

export function inputElasticPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputElasticPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputElasticPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputElasticPqControls' from JSON`,
  );
}

/** @internal */
export const InputElasticPq$inboundSchema: z.ZodType<
  InputElasticPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputElasticMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputElasticCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputElasticPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputElasticPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputElasticPqControls$Outbound | undefined;
};

/** @internal */
export const InputElasticPq$outboundSchema: z.ZodType<
  InputElasticPq$Outbound,
  z.ZodTypeDef,
  InputElasticPq
> = z.object({
  mode: InputElasticMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputElasticCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputElasticPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticPq$ {
  /** @deprecated use `InputElasticPq$inboundSchema` instead. */
  export const inboundSchema = InputElasticPq$inboundSchema;
  /** @deprecated use `InputElasticPq$outboundSchema` instead. */
  export const outboundSchema = InputElasticPq$outboundSchema;
  /** @deprecated use `InputElasticPq$Outbound` instead. */
  export type Outbound = InputElasticPq$Outbound;
}

export function inputElasticPqToJSON(inputElasticPq: InputElasticPq): string {
  return JSON.stringify(InputElasticPq$outboundSchema.parse(inputElasticPq));
}

export function inputElasticPqFromJSON(
  jsonString: string,
): SafeParseResult<InputElasticPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputElasticPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputElasticPq' from JSON`,
  );
}

/** @internal */
export const InputElasticMinimumTLSVersion$inboundSchema: z.ZodType<
  InputElasticMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputElasticMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputElasticMinimumTLSVersion$outboundSchema: z.ZodType<
  InputElasticMinimumTLSVersion,
  z.ZodTypeDef,
  InputElasticMinimumTLSVersion
> = z.union([
  z.nativeEnum(InputElasticMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticMinimumTLSVersion$ {
  /** @deprecated use `InputElasticMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputElasticMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputElasticMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputElasticMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputElasticMaximumTLSVersion$inboundSchema: z.ZodType<
  InputElasticMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputElasticMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputElasticMaximumTLSVersion$outboundSchema: z.ZodType<
  InputElasticMaximumTLSVersion,
  z.ZodTypeDef,
  InputElasticMaximumTLSVersion
> = z.union([
  z.nativeEnum(InputElasticMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticMaximumTLSVersion$ {
  /** @deprecated use `InputElasticMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputElasticMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputElasticMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputElasticMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputElasticTLSSettingsServerSide$inboundSchema: z.ZodType<
  InputElasticTLSSettingsServerSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputElasticMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputElasticMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputElasticTLSSettingsServerSide$Outbound = {
  disabled: boolean;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  requestCert: boolean;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputElasticTLSSettingsServerSide$outboundSchema: z.ZodType<
  InputElasticTLSSettingsServerSide$Outbound,
  z.ZodTypeDef,
  InputElasticTLSSettingsServerSide
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputElasticMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputElasticMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticTLSSettingsServerSide$ {
  /** @deprecated use `InputElasticTLSSettingsServerSide$inboundSchema` instead. */
  export const inboundSchema = InputElasticTLSSettingsServerSide$inboundSchema;
  /** @deprecated use `InputElasticTLSSettingsServerSide$outboundSchema` instead. */
  export const outboundSchema =
    InputElasticTLSSettingsServerSide$outboundSchema;
  /** @deprecated use `InputElasticTLSSettingsServerSide$Outbound` instead. */
  export type Outbound = InputElasticTLSSettingsServerSide$Outbound;
}

export function inputElasticTLSSettingsServerSideToJSON(
  inputElasticTLSSettingsServerSide: InputElasticTLSSettingsServerSide,
): string {
  return JSON.stringify(
    InputElasticTLSSettingsServerSide$outboundSchema.parse(
      inputElasticTLSSettingsServerSide,
    ),
  );
}

export function inputElasticTLSSettingsServerSideFromJSON(
  jsonString: string,
): SafeParseResult<InputElasticTLSSettingsServerSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputElasticTLSSettingsServerSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputElasticTLSSettingsServerSide' from JSON`,
  );
}

/** @internal */
export const InputElasticAuthenticationType$inboundSchema: z.ZodType<
  InputElasticAuthenticationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputElasticAuthenticationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputElasticAuthenticationType$outboundSchema: z.ZodType<
  InputElasticAuthenticationType,
  z.ZodTypeDef,
  InputElasticAuthenticationType
> = z.union([
  z.nativeEnum(InputElasticAuthenticationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticAuthenticationType$ {
  /** @deprecated use `InputElasticAuthenticationType$inboundSchema` instead. */
  export const inboundSchema = InputElasticAuthenticationType$inboundSchema;
  /** @deprecated use `InputElasticAuthenticationType$outboundSchema` instead. */
  export const outboundSchema = InputElasticAuthenticationType$outboundSchema;
}

/** @internal */
export const InputElasticAPIVersion$inboundSchema: z.ZodType<
  InputElasticAPIVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputElasticAPIVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputElasticAPIVersion$outboundSchema: z.ZodType<
  InputElasticAPIVersion,
  z.ZodTypeDef,
  InputElasticAPIVersion
> = z.union([
  z.nativeEnum(InputElasticAPIVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticAPIVersion$ {
  /** @deprecated use `InputElasticAPIVersion$inboundSchema` instead. */
  export const inboundSchema = InputElasticAPIVersion$inboundSchema;
  /** @deprecated use `InputElasticAPIVersion$outboundSchema` instead. */
  export const outboundSchema = InputElasticAPIVersion$outboundSchema;
}

/** @internal */
export const InputElasticExtraHttpHeader$inboundSchema: z.ZodType<
  InputElasticExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type InputElasticExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const InputElasticExtraHttpHeader$outboundSchema: z.ZodType<
  InputElasticExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  InputElasticExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticExtraHttpHeader$ {
  /** @deprecated use `InputElasticExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = InputElasticExtraHttpHeader$inboundSchema;
  /** @deprecated use `InputElasticExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = InputElasticExtraHttpHeader$outboundSchema;
  /** @deprecated use `InputElasticExtraHttpHeader$Outbound` instead. */
  export type Outbound = InputElasticExtraHttpHeader$Outbound;
}

export function inputElasticExtraHttpHeaderToJSON(
  inputElasticExtraHttpHeader: InputElasticExtraHttpHeader,
): string {
  return JSON.stringify(
    InputElasticExtraHttpHeader$outboundSchema.parse(
      inputElasticExtraHttpHeader,
    ),
  );
}

export function inputElasticExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<InputElasticExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputElasticExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputElasticExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const InputElasticMetadatum$inboundSchema: z.ZodType<
  InputElasticMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputElasticMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputElasticMetadatum$outboundSchema: z.ZodType<
  InputElasticMetadatum$Outbound,
  z.ZodTypeDef,
  InputElasticMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticMetadatum$ {
  /** @deprecated use `InputElasticMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputElasticMetadatum$inboundSchema;
  /** @deprecated use `InputElasticMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputElasticMetadatum$outboundSchema;
  /** @deprecated use `InputElasticMetadatum$Outbound` instead. */
  export type Outbound = InputElasticMetadatum$Outbound;
}

export function inputElasticMetadatumToJSON(
  inputElasticMetadatum: InputElasticMetadatum,
): string {
  return JSON.stringify(
    InputElasticMetadatum$outboundSchema.parse(inputElasticMetadatum),
  );
}

export function inputElasticMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputElasticMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputElasticMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputElasticMetadatum' from JSON`,
  );
}

/** @internal */
export const InputElasticAuthenticationMethod$inboundSchema: z.ZodType<
  InputElasticAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputElasticAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputElasticAuthenticationMethod$outboundSchema: z.ZodType<
  InputElasticAuthenticationMethod,
  z.ZodTypeDef,
  InputElasticAuthenticationMethod
> = z.union([
  z.nativeEnum(InputElasticAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticAuthenticationMethod$ {
  /** @deprecated use `InputElasticAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = InputElasticAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputElasticAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = InputElasticAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputElasticProxyMode$inboundSchema: z.ZodType<
  InputElasticProxyMode,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().default(false),
  url: z.string().optional(),
  rejectUnauthorized: z.boolean().default(false),
  removeHeaders: z.array(z.string()).optional(),
  timeoutSec: z.number().default(60),
  authType: InputElasticAuthenticationMethod$inboundSchema.default("none"),
});

/** @internal */
export type InputElasticProxyMode$Outbound = {
  enabled: boolean;
  url?: string | undefined;
  rejectUnauthorized: boolean;
  removeHeaders?: Array<string> | undefined;
  timeoutSec: number;
  authType: string;
};

/** @internal */
export const InputElasticProxyMode$outboundSchema: z.ZodType<
  InputElasticProxyMode$Outbound,
  z.ZodTypeDef,
  InputElasticProxyMode
> = z.object({
  enabled: z.boolean().default(false),
  url: z.string().optional(),
  rejectUnauthorized: z.boolean().default(false),
  removeHeaders: z.array(z.string()).optional(),
  timeoutSec: z.number().default(60),
  authType: InputElasticAuthenticationMethod$outboundSchema.default("none"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElasticProxyMode$ {
  /** @deprecated use `InputElasticProxyMode$inboundSchema` instead. */
  export const inboundSchema = InputElasticProxyMode$inboundSchema;
  /** @deprecated use `InputElasticProxyMode$outboundSchema` instead. */
  export const outboundSchema = InputElasticProxyMode$outboundSchema;
  /** @deprecated use `InputElasticProxyMode$Outbound` instead. */
  export type Outbound = InputElasticProxyMode$Outbound;
}

export function inputElasticProxyModeToJSON(
  inputElasticProxyMode: InputElasticProxyMode,
): string {
  return JSON.stringify(
    InputElasticProxyMode$outboundSchema.parse(inputElasticProxyMode),
  );
}

export function inputElasticProxyModeFromJSON(
  jsonString: string,
): SafeParseResult<InputElasticProxyMode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputElasticProxyMode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputElasticProxyMode' from JSON`,
  );
}

/** @internal */
export const InputElastic$inboundSchema: z.ZodType<
  InputElastic,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputElasticType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputElasticConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputElasticPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputElasticTLSSettingsServerSide$inboundSchema).optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  elasticAPI: z.string().default("/"),
  authType: InputElasticAuthenticationType$inboundSchema.default("none"),
  apiVersion: InputElasticAPIVersion$inboundSchema.default("8.3.2"),
  extraHttpHeaders: z.array(
    z.lazy(() => InputElasticExtraHttpHeader$inboundSchema),
  ).optional(),
  metadata: z.array(z.lazy(() => InputElasticMetadatum$inboundSchema))
    .optional(),
  proxyMode: z.lazy(() => InputElasticProxyMode$inboundSchema).optional(),
  description: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
  authTokens: z.array(z.string()).optional(),
  customAPIVersion: z.string().default(
    "{\n    \"name\": \"AzU84iL\",\n    \"cluster_name\": \"cribl\",\n    \"cluster_uuid\": \"Js6_Z2VKS3KbfRSxPmPbaw\",\n    \"version\": {\n        \"number\": \"8.3.2\",\n        \"build_type\": \"tar\",\n        \"build_hash\": \"bca0c8d\",\n        \"build_date\": \"2019-10-16T06:19:49.319352Z\",\n        \"build_snapshot\": false,\n        \"lucene_version\": \"9.7.2\",\n        \"minimum_wire_compatibility_version\": \"7.17.0\",\n        \"minimum_index_compatibility_version\": \"7.0.0\"\n    },\n    \"tagline\": \"You Know, for Search\"\n}",
  ),
});

/** @internal */
export type InputElastic$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputElasticConnection$Outbound> | undefined;
  pq?: InputElasticPq$Outbound | undefined;
  host: string;
  port: number;
  tls?: InputElasticTLSSettingsServerSide$Outbound | undefined;
  maxActiveReq: number;
  maxRequestsPerSocket: number;
  enableProxyHeader: boolean;
  captureHeaders: boolean;
  activityLogSampleRate: number;
  requestTimeout: number;
  socketTimeout: number;
  keepAliveTimeout: number;
  enableHealthCheck: boolean;
  ipAllowlistRegex: string;
  ipDenylistRegex: string;
  elasticAPI: string;
  authType: string;
  apiVersion: string;
  extraHttpHeaders?: Array<InputElasticExtraHttpHeader$Outbound> | undefined;
  metadata?: Array<InputElasticMetadatum$Outbound> | undefined;
  proxyMode?: InputElasticProxyMode$Outbound | undefined;
  description?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  credentialsSecret?: string | undefined;
  authTokens?: Array<string> | undefined;
  customAPIVersion: string;
};

/** @internal */
export const InputElastic$outboundSchema: z.ZodType<
  InputElastic$Outbound,
  z.ZodTypeDef,
  InputElastic
> = z.object({
  id: z.string().optional(),
  type: InputElasticType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputElasticConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputElasticPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputElasticTLSSettingsServerSide$outboundSchema)
    .optional(),
  maxActiveReq: z.number().default(256),
  maxRequestsPerSocket: z.number().int().default(0),
  enableProxyHeader: z.boolean().default(false),
  captureHeaders: z.boolean().default(false),
  activityLogSampleRate: z.number().default(100),
  requestTimeout: z.number().default(0),
  socketTimeout: z.number().default(0),
  keepAliveTimeout: z.number().default(5),
  enableHealthCheck: z.boolean().default(false),
  ipAllowlistRegex: z.string().default("/.*/"),
  ipDenylistRegex: z.string().default("/^$/"),
  elasticAPI: z.string().default("/"),
  authType: InputElasticAuthenticationType$outboundSchema.default("none"),
  apiVersion: InputElasticAPIVersion$outboundSchema.default("8.3.2"),
  extraHttpHeaders: z.array(
    z.lazy(() => InputElasticExtraHttpHeader$outboundSchema),
  ).optional(),
  metadata: z.array(z.lazy(() => InputElasticMetadatum$outboundSchema))
    .optional(),
  proxyMode: z.lazy(() => InputElasticProxyMode$outboundSchema).optional(),
  description: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  credentialsSecret: z.string().optional(),
  authTokens: z.array(z.string()).optional(),
  customAPIVersion: z.string().default(
    "{\n    \"name\": \"AzU84iL\",\n    \"cluster_name\": \"cribl\",\n    \"cluster_uuid\": \"Js6_Z2VKS3KbfRSxPmPbaw\",\n    \"version\": {\n        \"number\": \"8.3.2\",\n        \"build_type\": \"tar\",\n        \"build_hash\": \"bca0c8d\",\n        \"build_date\": \"2019-10-16T06:19:49.319352Z\",\n        \"build_snapshot\": false,\n        \"lucene_version\": \"9.7.2\",\n        \"minimum_wire_compatibility_version\": \"7.17.0\",\n        \"minimum_index_compatibility_version\": \"7.0.0\"\n    },\n    \"tagline\": \"You Know, for Search\"\n}",
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputElastic$ {
  /** @deprecated use `InputElastic$inboundSchema` instead. */
  export const inboundSchema = InputElastic$inboundSchema;
  /** @deprecated use `InputElastic$outboundSchema` instead. */
  export const outboundSchema = InputElastic$outboundSchema;
  /** @deprecated use `InputElastic$Outbound` instead. */
  export type Outbound = InputElastic$Outbound;
}

export function inputElasticToJSON(inputElastic: InputElastic): string {
  return JSON.stringify(InputElastic$outboundSchema.parse(inputElastic));
}

export function inputElasticFromJSON(
  jsonString: string,
): SafeParseResult<InputElastic, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputElastic$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputElastic' from JSON`,
  );
}
