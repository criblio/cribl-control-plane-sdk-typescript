/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputCrowdstrikeType = {
  Crowdstrike: "crowdstrike",
} as const;
export type InputCrowdstrikeType = ClosedEnum<typeof InputCrowdstrikeType>;

export type InputCrowdstrikeConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputCrowdstrikeMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputCrowdstrikeMode = ClosedEnum<typeof InputCrowdstrikeMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputCrowdstrikeCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputCrowdstrikeCompression = ClosedEnum<
  typeof InputCrowdstrikeCompression
>;

export type InputCrowdstrikePqControls = {};

export type InputCrowdstrikePq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputCrowdstrikeMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputCrowdstrikeCompression | undefined;
  pqControls?: InputCrowdstrikePqControls | undefined;
};

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const InputCrowdstrikeAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type InputCrowdstrikeAuthenticationMethod = ClosedEnum<
  typeof InputCrowdstrikeAuthenticationMethod
>;

/**
 * Signature version to use for signing S3 requests
 */
export const InputCrowdstrikeSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing S3 requests
 */
export type InputCrowdstrikeSignatureVersion = ClosedEnum<
  typeof InputCrowdstrikeSignatureVersion
>;

export type InputCrowdstrikePreprocess = {
  disabled?: boolean | undefined;
  /**
   * Command to feed the data through (via stdin) and process its output (stdout)
   */
  command?: string | undefined;
  /**
   * Arguments to be added to the custom command
   */
  args?: Array<string> | undefined;
};

export type InputCrowdstrikeMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputCrowdstrikeCheckpointing = {
  /**
   * Resume processing files after an interruption
   */
  enabled?: boolean | undefined;
  /**
   * The number of times to retry processing when a processing error occurs. If Skip file on error is enabled, this setting is ignored.
   */
  retries?: number | undefined;
};

export const InputCrowdstrikeTagAfterProcessing = {
  False: "false",
  True: "true",
} as const;
export type InputCrowdstrikeTagAfterProcessing = ClosedEnum<
  typeof InputCrowdstrikeTagAfterProcessing
>;

export type InputCrowdstrike = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputCrowdstrikeType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputCrowdstrikeConnection> | undefined;
  pq?: InputCrowdstrikePq | undefined;
  /**
   * The name, URL, or ARN of the SQS queue to read notifications from. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. Example: 'https://host:port/myQueueName'. Value must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
   */
  queueName: string;
  /**
   * Regex matching file names to download and process. Defaults to: .*
   */
  fileFilter?: string | undefined;
  /**
   * SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
   */
  awsAccountId?: string | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: InputCrowdstrikeAuthenticationMethod | undefined;
  awsSecretKey?: string | undefined;
  /**
   * AWS Region where the S3 bucket and SQS queue are located. Required, unless the Queue entry is a URL or ARN that includes a Region.
   */
  region?: string | undefined;
  /**
   * S3 service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to S3-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing S3 requests
   */
  signatureVersion?: InputCrowdstrikeSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * A list of event-breaking rulesets that will be applied, in order, to the input data stream
   */
  breakerRulesets?: Array<string> | undefined;
  /**
   * How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
   */
  staleChannelFlushMs?: number | undefined;
  /**
   * The maximum number of messages SQS should return in a poll request. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10.
   */
  maxMessages?: number | undefined;
  /**
   * After messages are retrieved by a ReceiveMessage request, @{product} will hide them from subsequent retrieve requests for at least this duration. You can set this as high as 43200 sec. (12 hours).
   */
  visibilityTimeout?: number | undefined;
  /**
   * How many receiver processes to run. The higher the number, the better the throughput - at the expense of CPU overhead.
   */
  numReceivers?: number | undefined;
  /**
   * Socket inactivity timeout (in seconds). Increase this value if timeouts occur due to backpressure.
   */
  socketTimeout?: number | undefined;
  /**
   * Skip files that trigger a processing error. Disabled by default, which allows retries after processing errors.
   */
  skipOnError?: boolean | undefined;
  /**
   * Attach SQS notification metadata to a __sqsMetadata field on each event
   */
  includeSqsMetadata?: boolean | undefined;
  /**
   * Use Assume Role credentials to access Amazon S3
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Use Assume Role credentials when accessing Amazon SQS
   */
  enableSQSAssumeRole?: boolean | undefined;
  preprocess?: InputCrowdstrikePreprocess | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputCrowdstrikeMetadatum> | undefined;
  checkpointing?: InputCrowdstrikeCheckpointing | undefined;
  /**
   * How long to wait for events before trying polling again. The lower the number the higher the AWS bill. The higher the number the longer it will take for the source to react to configuration changes and system restarts.
   */
  pollTimeout?: number | undefined;
  /**
   * Character encoding to use when parsing ingested data. When not set, @{product} will default to UTF-8 but may incorrectly interpret multi-byte characters.
   */
  encoding?: string | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  tagAfterProcessing?: InputCrowdstrikeTagAfterProcessing | undefined;
  /**
   * The key for the S3 object tag applied after processing. This field accepts an expression for dynamic generation.
   */
  processedTagKey?: string | undefined;
  /**
   * The value for the S3 object tag applied after processing. This field accepts an expression for dynamic generation.
   */
  processedTagValue?: string | undefined;
};

/** @internal */
export const InputCrowdstrikeType$inboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeType
> = z.nativeEnum(InputCrowdstrikeType);

/** @internal */
export const InputCrowdstrikeType$outboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeType
> = InputCrowdstrikeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikeType$ {
  /** @deprecated use `InputCrowdstrikeType$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikeType$inboundSchema;
  /** @deprecated use `InputCrowdstrikeType$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikeType$outboundSchema;
}

/** @internal */
export const InputCrowdstrikeConnection$inboundSchema: z.ZodType<
  InputCrowdstrikeConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputCrowdstrikeConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputCrowdstrikeConnection$outboundSchema: z.ZodType<
  InputCrowdstrikeConnection$Outbound,
  z.ZodTypeDef,
  InputCrowdstrikeConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikeConnection$ {
  /** @deprecated use `InputCrowdstrikeConnection$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikeConnection$inboundSchema;
  /** @deprecated use `InputCrowdstrikeConnection$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikeConnection$outboundSchema;
  /** @deprecated use `InputCrowdstrikeConnection$Outbound` instead. */
  export type Outbound = InputCrowdstrikeConnection$Outbound;
}

export function inputCrowdstrikeConnectionToJSON(
  inputCrowdstrikeConnection: InputCrowdstrikeConnection,
): string {
  return JSON.stringify(
    InputCrowdstrikeConnection$outboundSchema.parse(inputCrowdstrikeConnection),
  );
}

export function inputCrowdstrikeConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputCrowdstrikeConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCrowdstrikeConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCrowdstrikeConnection' from JSON`,
  );
}

/** @internal */
export const InputCrowdstrikeMode$inboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeMode
> = z.nativeEnum(InputCrowdstrikeMode);

/** @internal */
export const InputCrowdstrikeMode$outboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeMode
> = InputCrowdstrikeMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikeMode$ {
  /** @deprecated use `InputCrowdstrikeMode$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikeMode$inboundSchema;
  /** @deprecated use `InputCrowdstrikeMode$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikeMode$outboundSchema;
}

/** @internal */
export const InputCrowdstrikeCompression$inboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeCompression
> = z.nativeEnum(InputCrowdstrikeCompression);

/** @internal */
export const InputCrowdstrikeCompression$outboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeCompression
> = InputCrowdstrikeCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikeCompression$ {
  /** @deprecated use `InputCrowdstrikeCompression$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikeCompression$inboundSchema;
  /** @deprecated use `InputCrowdstrikeCompression$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikeCompression$outboundSchema;
}

/** @internal */
export const InputCrowdstrikePqControls$inboundSchema: z.ZodType<
  InputCrowdstrikePqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputCrowdstrikePqControls$Outbound = {};

/** @internal */
export const InputCrowdstrikePqControls$outboundSchema: z.ZodType<
  InputCrowdstrikePqControls$Outbound,
  z.ZodTypeDef,
  InputCrowdstrikePqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikePqControls$ {
  /** @deprecated use `InputCrowdstrikePqControls$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikePqControls$inboundSchema;
  /** @deprecated use `InputCrowdstrikePqControls$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikePqControls$outboundSchema;
  /** @deprecated use `InputCrowdstrikePqControls$Outbound` instead. */
  export type Outbound = InputCrowdstrikePqControls$Outbound;
}

export function inputCrowdstrikePqControlsToJSON(
  inputCrowdstrikePqControls: InputCrowdstrikePqControls,
): string {
  return JSON.stringify(
    InputCrowdstrikePqControls$outboundSchema.parse(inputCrowdstrikePqControls),
  );
}

export function inputCrowdstrikePqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputCrowdstrikePqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCrowdstrikePqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCrowdstrikePqControls' from JSON`,
  );
}

/** @internal */
export const InputCrowdstrikePq$inboundSchema: z.ZodType<
  InputCrowdstrikePq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputCrowdstrikeMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputCrowdstrikeCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputCrowdstrikePqControls$inboundSchema).optional(),
});

/** @internal */
export type InputCrowdstrikePq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputCrowdstrikePqControls$Outbound | undefined;
};

/** @internal */
export const InputCrowdstrikePq$outboundSchema: z.ZodType<
  InputCrowdstrikePq$Outbound,
  z.ZodTypeDef,
  InputCrowdstrikePq
> = z.object({
  mode: InputCrowdstrikeMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputCrowdstrikeCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputCrowdstrikePqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikePq$ {
  /** @deprecated use `InputCrowdstrikePq$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikePq$inboundSchema;
  /** @deprecated use `InputCrowdstrikePq$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikePq$outboundSchema;
  /** @deprecated use `InputCrowdstrikePq$Outbound` instead. */
  export type Outbound = InputCrowdstrikePq$Outbound;
}

export function inputCrowdstrikePqToJSON(
  inputCrowdstrikePq: InputCrowdstrikePq,
): string {
  return JSON.stringify(
    InputCrowdstrikePq$outboundSchema.parse(inputCrowdstrikePq),
  );
}

export function inputCrowdstrikePqFromJSON(
  jsonString: string,
): SafeParseResult<InputCrowdstrikePq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCrowdstrikePq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCrowdstrikePq' from JSON`,
  );
}

/** @internal */
export const InputCrowdstrikeAuthenticationMethod$inboundSchema:
  z.ZodNativeEnum<typeof InputCrowdstrikeAuthenticationMethod> = z.nativeEnum(
    InputCrowdstrikeAuthenticationMethod,
  );

/** @internal */
export const InputCrowdstrikeAuthenticationMethod$outboundSchema:
  z.ZodNativeEnum<typeof InputCrowdstrikeAuthenticationMethod> =
    InputCrowdstrikeAuthenticationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikeAuthenticationMethod$ {
  /** @deprecated use `InputCrowdstrikeAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    InputCrowdstrikeAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputCrowdstrikeAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    InputCrowdstrikeAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputCrowdstrikeSignatureVersion$inboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeSignatureVersion
> = z.nativeEnum(InputCrowdstrikeSignatureVersion);

/** @internal */
export const InputCrowdstrikeSignatureVersion$outboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeSignatureVersion
> = InputCrowdstrikeSignatureVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikeSignatureVersion$ {
  /** @deprecated use `InputCrowdstrikeSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikeSignatureVersion$inboundSchema;
  /** @deprecated use `InputCrowdstrikeSignatureVersion$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikeSignatureVersion$outboundSchema;
}

/** @internal */
export const InputCrowdstrikePreprocess$inboundSchema: z.ZodType<
  InputCrowdstrikePreprocess,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  command: z.string().optional(),
  args: z.array(z.string()).optional(),
});

/** @internal */
export type InputCrowdstrikePreprocess$Outbound = {
  disabled: boolean;
  command?: string | undefined;
  args?: Array<string> | undefined;
};

/** @internal */
export const InputCrowdstrikePreprocess$outboundSchema: z.ZodType<
  InputCrowdstrikePreprocess$Outbound,
  z.ZodTypeDef,
  InputCrowdstrikePreprocess
> = z.object({
  disabled: z.boolean().default(true),
  command: z.string().optional(),
  args: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikePreprocess$ {
  /** @deprecated use `InputCrowdstrikePreprocess$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikePreprocess$inboundSchema;
  /** @deprecated use `InputCrowdstrikePreprocess$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikePreprocess$outboundSchema;
  /** @deprecated use `InputCrowdstrikePreprocess$Outbound` instead. */
  export type Outbound = InputCrowdstrikePreprocess$Outbound;
}

export function inputCrowdstrikePreprocessToJSON(
  inputCrowdstrikePreprocess: InputCrowdstrikePreprocess,
): string {
  return JSON.stringify(
    InputCrowdstrikePreprocess$outboundSchema.parse(inputCrowdstrikePreprocess),
  );
}

export function inputCrowdstrikePreprocessFromJSON(
  jsonString: string,
): SafeParseResult<InputCrowdstrikePreprocess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCrowdstrikePreprocess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCrowdstrikePreprocess' from JSON`,
  );
}

/** @internal */
export const InputCrowdstrikeMetadatum$inboundSchema: z.ZodType<
  InputCrowdstrikeMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputCrowdstrikeMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputCrowdstrikeMetadatum$outboundSchema: z.ZodType<
  InputCrowdstrikeMetadatum$Outbound,
  z.ZodTypeDef,
  InputCrowdstrikeMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikeMetadatum$ {
  /** @deprecated use `InputCrowdstrikeMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikeMetadatum$inboundSchema;
  /** @deprecated use `InputCrowdstrikeMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikeMetadatum$outboundSchema;
  /** @deprecated use `InputCrowdstrikeMetadatum$Outbound` instead. */
  export type Outbound = InputCrowdstrikeMetadatum$Outbound;
}

export function inputCrowdstrikeMetadatumToJSON(
  inputCrowdstrikeMetadatum: InputCrowdstrikeMetadatum,
): string {
  return JSON.stringify(
    InputCrowdstrikeMetadatum$outboundSchema.parse(inputCrowdstrikeMetadatum),
  );
}

export function inputCrowdstrikeMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputCrowdstrikeMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCrowdstrikeMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCrowdstrikeMetadatum' from JSON`,
  );
}

/** @internal */
export const InputCrowdstrikeCheckpointing$inboundSchema: z.ZodType<
  InputCrowdstrikeCheckpointing,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().default(false),
  retries: z.number().default(5),
});

/** @internal */
export type InputCrowdstrikeCheckpointing$Outbound = {
  enabled: boolean;
  retries: number;
};

/** @internal */
export const InputCrowdstrikeCheckpointing$outboundSchema: z.ZodType<
  InputCrowdstrikeCheckpointing$Outbound,
  z.ZodTypeDef,
  InputCrowdstrikeCheckpointing
> = z.object({
  enabled: z.boolean().default(false),
  retries: z.number().default(5),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikeCheckpointing$ {
  /** @deprecated use `InputCrowdstrikeCheckpointing$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikeCheckpointing$inboundSchema;
  /** @deprecated use `InputCrowdstrikeCheckpointing$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrikeCheckpointing$outboundSchema;
  /** @deprecated use `InputCrowdstrikeCheckpointing$Outbound` instead. */
  export type Outbound = InputCrowdstrikeCheckpointing$Outbound;
}

export function inputCrowdstrikeCheckpointingToJSON(
  inputCrowdstrikeCheckpointing: InputCrowdstrikeCheckpointing,
): string {
  return JSON.stringify(
    InputCrowdstrikeCheckpointing$outboundSchema.parse(
      inputCrowdstrikeCheckpointing,
    ),
  );
}

export function inputCrowdstrikeCheckpointingFromJSON(
  jsonString: string,
): SafeParseResult<InputCrowdstrikeCheckpointing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCrowdstrikeCheckpointing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCrowdstrikeCheckpointing' from JSON`,
  );
}

/** @internal */
export const InputCrowdstrikeTagAfterProcessing$inboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeTagAfterProcessing
> = z.nativeEnum(InputCrowdstrikeTagAfterProcessing);

/** @internal */
export const InputCrowdstrikeTagAfterProcessing$outboundSchema: z.ZodNativeEnum<
  typeof InputCrowdstrikeTagAfterProcessing
> = InputCrowdstrikeTagAfterProcessing$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrikeTagAfterProcessing$ {
  /** @deprecated use `InputCrowdstrikeTagAfterProcessing$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrikeTagAfterProcessing$inboundSchema;
  /** @deprecated use `InputCrowdstrikeTagAfterProcessing$outboundSchema` instead. */
  export const outboundSchema =
    InputCrowdstrikeTagAfterProcessing$outboundSchema;
}

/** @internal */
export const InputCrowdstrike$inboundSchema: z.ZodType<
  InputCrowdstrike,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputCrowdstrikeType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputCrowdstrikeConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputCrowdstrikePq$inboundSchema).optional(),
  queueName: z.string(),
  fileFilter: z.string().default("/.*/"),
  awsAccountId: z.string().optional(),
  awsAuthenticationMethod: InputCrowdstrikeAuthenticationMethod$inboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputCrowdstrikeSignatureVersion$inboundSchema.default(
    "v4",
  ),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  maxMessages: z.number().default(1),
  visibilityTimeout: z.number().default(21600),
  numReceivers: z.number().default(1),
  socketTimeout: z.number().default(300),
  skipOnError: z.boolean().default(false),
  includeSqsMetadata: z.boolean().default(false),
  enableAssumeRole: z.boolean().default(true),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  enableSQSAssumeRole: z.boolean().default(false),
  preprocess: z.lazy(() => InputCrowdstrikePreprocess$inboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputCrowdstrikeMetadatum$inboundSchema))
    .optional(),
  checkpointing: z.lazy(() => InputCrowdstrikeCheckpointing$inboundSchema)
    .optional(),
  pollTimeout: z.number().default(10),
  encoding: z.string().optional(),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  tagAfterProcessing: InputCrowdstrikeTagAfterProcessing$inboundSchema
    .optional(),
  processedTagKey: z.string().optional(),
  processedTagValue: z.string().optional(),
});

/** @internal */
export type InputCrowdstrike$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputCrowdstrikeConnection$Outbound> | undefined;
  pq?: InputCrowdstrikePq$Outbound | undefined;
  queueName: string;
  fileFilter: string;
  awsAccountId?: string | undefined;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region?: string | undefined;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  breakerRulesets?: Array<string> | undefined;
  staleChannelFlushMs: number;
  maxMessages: number;
  visibilityTimeout: number;
  numReceivers: number;
  socketTimeout: number;
  skipOnError: boolean;
  includeSqsMetadata: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  enableSQSAssumeRole: boolean;
  preprocess?: InputCrowdstrikePreprocess$Outbound | undefined;
  metadata?: Array<InputCrowdstrikeMetadatum$Outbound> | undefined;
  checkpointing?: InputCrowdstrikeCheckpointing$Outbound | undefined;
  pollTimeout: number;
  encoding?: string | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  tagAfterProcessing?: string | undefined;
  processedTagKey?: string | undefined;
  processedTagValue?: string | undefined;
};

/** @internal */
export const InputCrowdstrike$outboundSchema: z.ZodType<
  InputCrowdstrike$Outbound,
  z.ZodTypeDef,
  InputCrowdstrike
> = z.object({
  id: z.string().optional(),
  type: InputCrowdstrikeType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputCrowdstrikeConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputCrowdstrikePq$outboundSchema).optional(),
  queueName: z.string(),
  fileFilter: z.string().default("/.*/"),
  awsAccountId: z.string().optional(),
  awsAuthenticationMethod: InputCrowdstrikeAuthenticationMethod$outboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputCrowdstrikeSignatureVersion$outboundSchema.default(
    "v4",
  ),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  maxMessages: z.number().default(1),
  visibilityTimeout: z.number().default(21600),
  numReceivers: z.number().default(1),
  socketTimeout: z.number().default(300),
  skipOnError: z.boolean().default(false),
  includeSqsMetadata: z.boolean().default(false),
  enableAssumeRole: z.boolean().default(true),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  enableSQSAssumeRole: z.boolean().default(false),
  preprocess: z.lazy(() => InputCrowdstrikePreprocess$outboundSchema)
    .optional(),
  metadata: z.array(z.lazy(() => InputCrowdstrikeMetadatum$outboundSchema))
    .optional(),
  checkpointing: z.lazy(() => InputCrowdstrikeCheckpointing$outboundSchema)
    .optional(),
  pollTimeout: z.number().default(10),
  encoding: z.string().optional(),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  tagAfterProcessing: InputCrowdstrikeTagAfterProcessing$outboundSchema
    .optional(),
  processedTagKey: z.string().optional(),
  processedTagValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCrowdstrike$ {
  /** @deprecated use `InputCrowdstrike$inboundSchema` instead. */
  export const inboundSchema = InputCrowdstrike$inboundSchema;
  /** @deprecated use `InputCrowdstrike$outboundSchema` instead. */
  export const outboundSchema = InputCrowdstrike$outboundSchema;
  /** @deprecated use `InputCrowdstrike$Outbound` instead. */
  export type Outbound = InputCrowdstrike$Outbound;
}

export function inputCrowdstrikeToJSON(
  inputCrowdstrike: InputCrowdstrike,
): string {
  return JSON.stringify(
    InputCrowdstrike$outboundSchema.parse(inputCrowdstrike),
  );
}

export function inputCrowdstrikeFromJSON(
  jsonString: string,
): SafeParseResult<InputCrowdstrike, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCrowdstrike$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCrowdstrike' from JSON`,
  );
}
