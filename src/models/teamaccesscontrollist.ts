/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResourcePolicy,
  ResourcePolicy$inboundSchema,
  ResourcePolicy$Outbound,
  ResourcePolicy$outboundSchema,
} from "./resourcepolicy.js";

export type TeamAccessControlList = {
  perms: Array<ResourcePolicy>;
  team: string;
};

/** @internal */
export const TeamAccessControlList$inboundSchema: z.ZodType<
  TeamAccessControlList,
  z.ZodTypeDef,
  unknown
> = z.object({
  perms: z.array(ResourcePolicy$inboundSchema),
  team: z.string(),
});

/** @internal */
export type TeamAccessControlList$Outbound = {
  perms: Array<ResourcePolicy$Outbound>;
  team: string;
};

/** @internal */
export const TeamAccessControlList$outboundSchema: z.ZodType<
  TeamAccessControlList$Outbound,
  z.ZodTypeDef,
  TeamAccessControlList
> = z.object({
  perms: z.array(ResourcePolicy$outboundSchema),
  team: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamAccessControlList$ {
  /** @deprecated use `TeamAccessControlList$inboundSchema` instead. */
  export const inboundSchema = TeamAccessControlList$inboundSchema;
  /** @deprecated use `TeamAccessControlList$outboundSchema` instead. */
  export const outboundSchema = TeamAccessControlList$outboundSchema;
  /** @deprecated use `TeamAccessControlList$Outbound` instead. */
  export type Outbound = TeamAccessControlList$Outbound;
}

export function teamAccessControlListToJSON(
  teamAccessControlList: TeamAccessControlList,
): string {
  return JSON.stringify(
    TeamAccessControlList$outboundSchema.parse(teamAccessControlList),
  );
}

export function teamAccessControlListFromJSON(
  jsonString: string,
): SafeParseResult<TeamAccessControlList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamAccessControlList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamAccessControlList' from JSON`,
  );
}
