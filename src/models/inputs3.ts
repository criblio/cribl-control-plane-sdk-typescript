/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputS3Type = {
  S3: "s3",
} as const;
export type InputS3Type = ClosedEnum<typeof InputS3Type>;

export type InputS3Connection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputS3Mode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputS3Mode = OpenEnum<typeof InputS3Mode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputS3Compression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputS3Compression = OpenEnum<typeof InputS3Compression>;

export type InputS3PqControls = {};

export type InputS3Pq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputS3Mode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputS3Compression | undefined;
  pqControls?: InputS3PqControls | undefined;
};

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const InputS3AuthenticationMethod = {
  /**
   * Auto
   */
  Auto: "auto",
  /**
   * Manual
   */
  Manual: "manual",
  /**
   * Secret Key pair
   */
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type InputS3AuthenticationMethod = OpenEnum<
  typeof InputS3AuthenticationMethod
>;

/**
 * Signature version to use for signing S3 requests
 */
export const InputS3SignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing S3 requests
 */
export type InputS3SignatureVersion = OpenEnum<typeof InputS3SignatureVersion>;

export type InputS3Preprocess = {
  disabled?: boolean | undefined;
  /**
   * Command to feed the data through (via stdin) and process its output (stdout)
   */
  command?: string | undefined;
  /**
   * Arguments to be added to the custom command
   */
  args?: Array<string> | undefined;
};

export type InputS3Metadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputS3Checkpointing = {
  /**
   * Resume processing files after an interruption
   */
  enabled?: boolean | undefined;
  /**
   * The number of times to retry processing when a processing error occurs. If Skip file on error is enabled, this setting is ignored.
   */
  retries?: number | undefined;
};

export type InputS3 = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputS3Type;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputS3Connection> | undefined;
  pq?: InputS3Pq | undefined;
  /**
   * The name, URL, or ARN of the SQS queue to read notifications from. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. Example: 'https://host:port/myQueueName'. Value must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
   */
  queueName: string;
  /**
   * Regex matching file names to download and process. Defaults to: .*
   */
  fileFilter?: string | undefined;
  /**
   * SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
   */
  awsAccountId?: string | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: InputS3AuthenticationMethod | undefined;
  awsSecretKey?: string | undefined;
  /**
   * AWS Region where the S3 bucket and SQS queue are located. Required, unless the Queue entry is a URL or ARN that includes a Region.
   */
  region?: string | undefined;
  /**
   * S3 service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to S3-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing S3 requests
   */
  signatureVersion?: InputS3SignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * A list of event-breaking rulesets that will be applied, in order, to the input data stream
   */
  breakerRulesets?: Array<string> | undefined;
  /**
   * How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
   */
  staleChannelFlushMs?: number | undefined;
  /**
   * The maximum number of messages SQS should return in a poll request. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10.
   */
  maxMessages?: number | undefined;
  /**
   * After messages are retrieved by a ReceiveMessage request, @{product} will hide them from subsequent retrieve requests for at least this duration. You can set this as high as 43200 sec. (12 hours).
   */
  visibilityTimeout?: number | undefined;
  /**
   * How many receiver processes to run. The higher the number, the better the throughput - at the expense of CPU overhead.
   */
  numReceivers?: number | undefined;
  /**
   * Socket inactivity timeout (in seconds). Increase this value if timeouts occur due to backpressure.
   */
  socketTimeout?: number | undefined;
  /**
   * Skip files that trigger a processing error. Disabled by default, which allows retries after processing errors.
   */
  skipOnError?: boolean | undefined;
  /**
   * Attach SQS notification metadata to a __sqsMetadata field on each event
   */
  includeSqsMetadata?: boolean | undefined;
  /**
   * Use Assume Role credentials to access Amazon S3
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Use Assume Role credentials when accessing Amazon SQS
   */
  enableSQSAssumeRole?: boolean | undefined;
  preprocess?: InputS3Preprocess | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputS3Metadatum> | undefined;
  /**
   * Maximum file size for each Parquet chunk
   */
  parquetChunkSizeMB?: number | undefined;
  /**
   * The maximum time allowed for downloading a Parquet chunk. Processing will stop if a chunk cannot be downloaded within the time specified.
   */
  parquetChunkDownloadTimeout?: number | undefined;
  checkpointing?: InputS3Checkpointing | undefined;
  /**
   * How long to wait for events before trying polling again. The lower the number the higher the AWS bill. The higher the number the longer it will take for the source to react to configuration changes and system restarts.
   */
  pollTimeout?: number | undefined;
  /**
   * Character encoding to use when parsing ingested data. When not set, @{product} will default to UTF-8 but may incorrectly interpret multi-byte characters.
   */
  encoding?: string | undefined;
  /**
   * Add a tag to processed S3 objects. Requires s3:GetObjectTagging and s3:PutObjectTagging AWS permissions.
   */
  tagAfterProcessing?: boolean | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  /**
   * The key for the S3 object tag applied after processing. This field accepts an expression for dynamic generation.
   */
  processedTagKey?: string | undefined;
  /**
   * The value for the S3 object tag applied after processing. This field accepts an expression for dynamic generation.
   */
  processedTagValue?: string | undefined;
};

/** @internal */
export const InputS3Type$inboundSchema: z.ZodNativeEnum<typeof InputS3Type> = z
  .nativeEnum(InputS3Type);

/** @internal */
export const InputS3Type$outboundSchema: z.ZodNativeEnum<typeof InputS3Type> =
  InputS3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3Type$ {
  /** @deprecated use `InputS3Type$inboundSchema` instead. */
  export const inboundSchema = InputS3Type$inboundSchema;
  /** @deprecated use `InputS3Type$outboundSchema` instead. */
  export const outboundSchema = InputS3Type$outboundSchema;
}

/** @internal */
export const InputS3Connection$inboundSchema: z.ZodType<
  InputS3Connection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputS3Connection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputS3Connection$outboundSchema: z.ZodType<
  InputS3Connection$Outbound,
  z.ZodTypeDef,
  InputS3Connection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3Connection$ {
  /** @deprecated use `InputS3Connection$inboundSchema` instead. */
  export const inboundSchema = InputS3Connection$inboundSchema;
  /** @deprecated use `InputS3Connection$outboundSchema` instead. */
  export const outboundSchema = InputS3Connection$outboundSchema;
  /** @deprecated use `InputS3Connection$Outbound` instead. */
  export type Outbound = InputS3Connection$Outbound;
}

export function inputS3ConnectionToJSON(
  inputS3Connection: InputS3Connection,
): string {
  return JSON.stringify(
    InputS3Connection$outboundSchema.parse(inputS3Connection),
  );
}

export function inputS3ConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputS3Connection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputS3Connection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputS3Connection' from JSON`,
  );
}

/** @internal */
export const InputS3Mode$inboundSchema: z.ZodType<
  InputS3Mode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputS3Mode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputS3Mode$outboundSchema: z.ZodType<
  InputS3Mode,
  z.ZodTypeDef,
  InputS3Mode
> = z.union([
  z.nativeEnum(InputS3Mode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3Mode$ {
  /** @deprecated use `InputS3Mode$inboundSchema` instead. */
  export const inboundSchema = InputS3Mode$inboundSchema;
  /** @deprecated use `InputS3Mode$outboundSchema` instead. */
  export const outboundSchema = InputS3Mode$outboundSchema;
}

/** @internal */
export const InputS3Compression$inboundSchema: z.ZodType<
  InputS3Compression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputS3Compression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputS3Compression$outboundSchema: z.ZodType<
  InputS3Compression,
  z.ZodTypeDef,
  InputS3Compression
> = z.union([
  z.nativeEnum(InputS3Compression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3Compression$ {
  /** @deprecated use `InputS3Compression$inboundSchema` instead. */
  export const inboundSchema = InputS3Compression$inboundSchema;
  /** @deprecated use `InputS3Compression$outboundSchema` instead. */
  export const outboundSchema = InputS3Compression$outboundSchema;
}

/** @internal */
export const InputS3PqControls$inboundSchema: z.ZodType<
  InputS3PqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputS3PqControls$Outbound = {};

/** @internal */
export const InputS3PqControls$outboundSchema: z.ZodType<
  InputS3PqControls$Outbound,
  z.ZodTypeDef,
  InputS3PqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3PqControls$ {
  /** @deprecated use `InputS3PqControls$inboundSchema` instead. */
  export const inboundSchema = InputS3PqControls$inboundSchema;
  /** @deprecated use `InputS3PqControls$outboundSchema` instead. */
  export const outboundSchema = InputS3PqControls$outboundSchema;
  /** @deprecated use `InputS3PqControls$Outbound` instead. */
  export type Outbound = InputS3PqControls$Outbound;
}

export function inputS3PqControlsToJSON(
  inputS3PqControls: InputS3PqControls,
): string {
  return JSON.stringify(
    InputS3PqControls$outboundSchema.parse(inputS3PqControls),
  );
}

export function inputS3PqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputS3PqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputS3PqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputS3PqControls' from JSON`,
  );
}

/** @internal */
export const InputS3Pq$inboundSchema: z.ZodType<
  InputS3Pq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputS3Mode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputS3Compression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputS3PqControls$inboundSchema).optional(),
});

/** @internal */
export type InputS3Pq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputS3PqControls$Outbound | undefined;
};

/** @internal */
export const InputS3Pq$outboundSchema: z.ZodType<
  InputS3Pq$Outbound,
  z.ZodTypeDef,
  InputS3Pq
> = z.object({
  mode: InputS3Mode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputS3Compression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputS3PqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3Pq$ {
  /** @deprecated use `InputS3Pq$inboundSchema` instead. */
  export const inboundSchema = InputS3Pq$inboundSchema;
  /** @deprecated use `InputS3Pq$outboundSchema` instead. */
  export const outboundSchema = InputS3Pq$outboundSchema;
  /** @deprecated use `InputS3Pq$Outbound` instead. */
  export type Outbound = InputS3Pq$Outbound;
}

export function inputS3PqToJSON(inputS3Pq: InputS3Pq): string {
  return JSON.stringify(InputS3Pq$outboundSchema.parse(inputS3Pq));
}

export function inputS3PqFromJSON(
  jsonString: string,
): SafeParseResult<InputS3Pq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputS3Pq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputS3Pq' from JSON`,
  );
}

/** @internal */
export const InputS3AuthenticationMethod$inboundSchema: z.ZodType<
  InputS3AuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputS3AuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputS3AuthenticationMethod$outboundSchema: z.ZodType<
  InputS3AuthenticationMethod,
  z.ZodTypeDef,
  InputS3AuthenticationMethod
> = z.union([
  z.nativeEnum(InputS3AuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3AuthenticationMethod$ {
  /** @deprecated use `InputS3AuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = InputS3AuthenticationMethod$inboundSchema;
  /** @deprecated use `InputS3AuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = InputS3AuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputS3SignatureVersion$inboundSchema: z.ZodType<
  InputS3SignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputS3SignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputS3SignatureVersion$outboundSchema: z.ZodType<
  InputS3SignatureVersion,
  z.ZodTypeDef,
  InputS3SignatureVersion
> = z.union([
  z.nativeEnum(InputS3SignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3SignatureVersion$ {
  /** @deprecated use `InputS3SignatureVersion$inboundSchema` instead. */
  export const inboundSchema = InputS3SignatureVersion$inboundSchema;
  /** @deprecated use `InputS3SignatureVersion$outboundSchema` instead. */
  export const outboundSchema = InputS3SignatureVersion$outboundSchema;
}

/** @internal */
export const InputS3Preprocess$inboundSchema: z.ZodType<
  InputS3Preprocess,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  command: z.string().optional(),
  args: z.array(z.string()).optional(),
});

/** @internal */
export type InputS3Preprocess$Outbound = {
  disabled: boolean;
  command?: string | undefined;
  args?: Array<string> | undefined;
};

/** @internal */
export const InputS3Preprocess$outboundSchema: z.ZodType<
  InputS3Preprocess$Outbound,
  z.ZodTypeDef,
  InputS3Preprocess
> = z.object({
  disabled: z.boolean().default(true),
  command: z.string().optional(),
  args: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3Preprocess$ {
  /** @deprecated use `InputS3Preprocess$inboundSchema` instead. */
  export const inboundSchema = InputS3Preprocess$inboundSchema;
  /** @deprecated use `InputS3Preprocess$outboundSchema` instead. */
  export const outboundSchema = InputS3Preprocess$outboundSchema;
  /** @deprecated use `InputS3Preprocess$Outbound` instead. */
  export type Outbound = InputS3Preprocess$Outbound;
}

export function inputS3PreprocessToJSON(
  inputS3Preprocess: InputS3Preprocess,
): string {
  return JSON.stringify(
    InputS3Preprocess$outboundSchema.parse(inputS3Preprocess),
  );
}

export function inputS3PreprocessFromJSON(
  jsonString: string,
): SafeParseResult<InputS3Preprocess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputS3Preprocess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputS3Preprocess' from JSON`,
  );
}

/** @internal */
export const InputS3Metadatum$inboundSchema: z.ZodType<
  InputS3Metadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputS3Metadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputS3Metadatum$outboundSchema: z.ZodType<
  InputS3Metadatum$Outbound,
  z.ZodTypeDef,
  InputS3Metadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3Metadatum$ {
  /** @deprecated use `InputS3Metadatum$inboundSchema` instead. */
  export const inboundSchema = InputS3Metadatum$inboundSchema;
  /** @deprecated use `InputS3Metadatum$outboundSchema` instead. */
  export const outboundSchema = InputS3Metadatum$outboundSchema;
  /** @deprecated use `InputS3Metadatum$Outbound` instead. */
  export type Outbound = InputS3Metadatum$Outbound;
}

export function inputS3MetadatumToJSON(
  inputS3Metadatum: InputS3Metadatum,
): string {
  return JSON.stringify(
    InputS3Metadatum$outboundSchema.parse(inputS3Metadatum),
  );
}

export function inputS3MetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputS3Metadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputS3Metadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputS3Metadatum' from JSON`,
  );
}

/** @internal */
export const InputS3Checkpointing$inboundSchema: z.ZodType<
  InputS3Checkpointing,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().default(false),
  retries: z.number().default(5),
});

/** @internal */
export type InputS3Checkpointing$Outbound = {
  enabled: boolean;
  retries: number;
};

/** @internal */
export const InputS3Checkpointing$outboundSchema: z.ZodType<
  InputS3Checkpointing$Outbound,
  z.ZodTypeDef,
  InputS3Checkpointing
> = z.object({
  enabled: z.boolean().default(false),
  retries: z.number().default(5),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3Checkpointing$ {
  /** @deprecated use `InputS3Checkpointing$inboundSchema` instead. */
  export const inboundSchema = InputS3Checkpointing$inboundSchema;
  /** @deprecated use `InputS3Checkpointing$outboundSchema` instead. */
  export const outboundSchema = InputS3Checkpointing$outboundSchema;
  /** @deprecated use `InputS3Checkpointing$Outbound` instead. */
  export type Outbound = InputS3Checkpointing$Outbound;
}

export function inputS3CheckpointingToJSON(
  inputS3Checkpointing: InputS3Checkpointing,
): string {
  return JSON.stringify(
    InputS3Checkpointing$outboundSchema.parse(inputS3Checkpointing),
  );
}

export function inputS3CheckpointingFromJSON(
  jsonString: string,
): SafeParseResult<InputS3Checkpointing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputS3Checkpointing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputS3Checkpointing' from JSON`,
  );
}

/** @internal */
export const InputS3$inboundSchema: z.ZodType<InputS3, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    type: InputS3Type$inboundSchema,
    disabled: z.boolean().default(false),
    pipeline: z.string().optional(),
    sendToRoutes: z.boolean().default(true),
    environment: z.string().optional(),
    pqEnabled: z.boolean().default(false),
    streamtags: z.array(z.string()).optional(),
    connections: z.array(z.lazy(() => InputS3Connection$inboundSchema))
      .optional(),
    pq: z.lazy(() => InputS3Pq$inboundSchema).optional(),
    queueName: z.string(),
    fileFilter: z.string().default("/.*/"),
    awsAccountId: z.string().optional(),
    awsAuthenticationMethod: InputS3AuthenticationMethod$inboundSchema.default(
      "auto",
    ),
    awsSecretKey: z.string().optional(),
    region: z.string().optional(),
    endpoint: z.string().optional(),
    signatureVersion: InputS3SignatureVersion$inboundSchema.default("v4"),
    reuseConnections: z.boolean().default(true),
    rejectUnauthorized: z.boolean().default(true),
    breakerRulesets: z.array(z.string()).optional(),
    staleChannelFlushMs: z.number().default(10000),
    maxMessages: z.number().default(1),
    visibilityTimeout: z.number().default(600),
    numReceivers: z.number().default(1),
    socketTimeout: z.number().default(300),
    skipOnError: z.boolean().default(false),
    includeSqsMetadata: z.boolean().default(false),
    enableAssumeRole: z.boolean().default(true),
    assumeRoleArn: z.string().optional(),
    assumeRoleExternalId: z.string().optional(),
    durationSeconds: z.number().default(3600),
    enableSQSAssumeRole: z.boolean().default(false),
    preprocess: z.lazy(() => InputS3Preprocess$inboundSchema).optional(),
    metadata: z.array(z.lazy(() => InputS3Metadatum$inboundSchema)).optional(),
    parquetChunkSizeMB: z.number().default(5),
    parquetChunkDownloadTimeout: z.number().default(600),
    checkpointing: z.lazy(() => InputS3Checkpointing$inboundSchema).optional(),
    pollTimeout: z.number().default(10),
    encoding: z.string().optional(),
    tagAfterProcessing: z.boolean().default(false),
    description: z.string().optional(),
    awsApiKey: z.string().optional(),
    awsSecret: z.string().optional(),
    processedTagKey: z.string().optional(),
    processedTagValue: z.string().optional(),
  });

/** @internal */
export type InputS3$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputS3Connection$Outbound> | undefined;
  pq?: InputS3Pq$Outbound | undefined;
  queueName: string;
  fileFilter: string;
  awsAccountId?: string | undefined;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region?: string | undefined;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  breakerRulesets?: Array<string> | undefined;
  staleChannelFlushMs: number;
  maxMessages: number;
  visibilityTimeout: number;
  numReceivers: number;
  socketTimeout: number;
  skipOnError: boolean;
  includeSqsMetadata: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  enableSQSAssumeRole: boolean;
  preprocess?: InputS3Preprocess$Outbound | undefined;
  metadata?: Array<InputS3Metadatum$Outbound> | undefined;
  parquetChunkSizeMB: number;
  parquetChunkDownloadTimeout: number;
  checkpointing?: InputS3Checkpointing$Outbound | undefined;
  pollTimeout: number;
  encoding?: string | undefined;
  tagAfterProcessing: boolean;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  processedTagKey?: string | undefined;
  processedTagValue?: string | undefined;
};

/** @internal */
export const InputS3$outboundSchema: z.ZodType<
  InputS3$Outbound,
  z.ZodTypeDef,
  InputS3
> = z.object({
  id: z.string().optional(),
  type: InputS3Type$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputS3Connection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputS3Pq$outboundSchema).optional(),
  queueName: z.string(),
  fileFilter: z.string().default("/.*/"),
  awsAccountId: z.string().optional(),
  awsAuthenticationMethod: InputS3AuthenticationMethod$outboundSchema.default(
    "auto",
  ),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputS3SignatureVersion$outboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  maxMessages: z.number().default(1),
  visibilityTimeout: z.number().default(600),
  numReceivers: z.number().default(1),
  socketTimeout: z.number().default(300),
  skipOnError: z.boolean().default(false),
  includeSqsMetadata: z.boolean().default(false),
  enableAssumeRole: z.boolean().default(true),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  enableSQSAssumeRole: z.boolean().default(false),
  preprocess: z.lazy(() => InputS3Preprocess$outboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputS3Metadatum$outboundSchema)).optional(),
  parquetChunkSizeMB: z.number().default(5),
  parquetChunkDownloadTimeout: z.number().default(600),
  checkpointing: z.lazy(() => InputS3Checkpointing$outboundSchema).optional(),
  pollTimeout: z.number().default(10),
  encoding: z.string().optional(),
  tagAfterProcessing: z.boolean().default(false),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  processedTagKey: z.string().optional(),
  processedTagValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputS3$ {
  /** @deprecated use `InputS3$inboundSchema` instead. */
  export const inboundSchema = InputS3$inboundSchema;
  /** @deprecated use `InputS3$outboundSchema` instead. */
  export const outboundSchema = InputS3$outboundSchema;
  /** @deprecated use `InputS3$Outbound` instead. */
  export type Outbound = InputS3$Outbound;
}

export function inputS3ToJSON(inputS3: InputS3): string {
  return JSON.stringify(InputS3$outboundSchema.parse(inputS3));
}

export function inputS3FromJSON(
  jsonString: string,
): SafeParseResult<InputS3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputS3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputS3' from JSON`,
  );
}
