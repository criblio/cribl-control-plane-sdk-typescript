/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RulesetId = {
  id: string;
};

/** @internal */
export const RulesetId$inboundSchema: z.ZodType<
  RulesetId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type RulesetId$Outbound = {
  id: string;
};

/** @internal */
export const RulesetId$outboundSchema: z.ZodType<
  RulesetId$Outbound,
  z.ZodTypeDef,
  RulesetId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RulesetId$ {
  /** @deprecated use `RulesetId$inboundSchema` instead. */
  export const inboundSchema = RulesetId$inboundSchema;
  /** @deprecated use `RulesetId$outboundSchema` instead. */
  export const outboundSchema = RulesetId$outboundSchema;
  /** @deprecated use `RulesetId$Outbound` instead. */
  export type Outbound = RulesetId$Outbound;
}

export function rulesetIdToJSON(rulesetId: RulesetId): string {
  return JSON.stringify(RulesetId$outboundSchema.parse(rulesetId));
}

export function rulesetIdFromJSON(
  jsonString: string,
): SafeParseResult<RulesetId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RulesetId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RulesetId' from JSON`,
  );
}
