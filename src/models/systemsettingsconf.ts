/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  UpgradeGroupSettings,
  UpgradeGroupSettings$inboundSchema,
  UpgradeGroupSettings$Outbound,
  UpgradeGroupSettings$outboundSchema,
} from "./upgradegroupsettings.js";
import {
  UpgradeSettings,
  UpgradeSettings$inboundSchema,
  UpgradeSettings$Outbound,
  UpgradeSettings$outboundSchema,
} from "./upgradesettings.js";

export type SystemSettingsConfHeaders = {};

export type SystemSettingsConfSsl = {
  caPath?: string | undefined;
  certPath: string;
  disabled: boolean;
  passphrase: string;
  privKeyPath: string;
};

export type SystemSettingsConfApi = {
  baseUrl?: string | undefined;
  disableApiCache?: boolean | undefined;
  disabled: boolean;
  headers?: SystemSettingsConfHeaders | undefined;
  host: string;
  idleSessionTTL?: number | undefined;
  listenOnPort?: boolean | undefined;
  loginRateLimit?: string | undefined;
  port: number;
  protocol: string;
  scripts?: boolean | undefined;
  sensitiveFields?: Array<string> | undefined;
  ssl: SystemSettingsConfSsl;
  ssoRateLimit?: string | undefined;
  workerRemoteAccess: boolean;
};

export type SystemSettingsConfBackups = {
  backupPersistence: string;
  backupsDirectory: string;
};

export type SystemSettingsConfCustomLogo = {
  enabled: boolean;
  logoDescription: string;
  logoImage: string;
};

export type SystemSettingsConfPii = {
  enablePiiDetection: boolean;
};

export type SystemSettingsConfProxy = {
  useEnvVars: boolean;
};

export type SystemSettingsConfRollback = {
  rollbackEnabled: boolean;
  rollbackRetries?: number | undefined;
  rollbackTimeout?: number | undefined;
};

export type SystemSettingsConfShutdown = {
  drainTimeout: number;
};

export type SystemSettingsConfSni = {
  disableSNIRouting: boolean;
};

export type SystemSettingsConfSockets = {
  directory?: string | undefined;
};

export const SystemSettingsConfUpgrade = {
  False: "false",
  Api: "api",
} as const;
export type SystemSettingsConfUpgrade = ClosedEnum<
  typeof SystemSettingsConfUpgrade
>;

export type SystemSettingsConfSystem = {
  intercom: boolean;
  upgrade: SystemSettingsConfUpgrade;
};

export type SystemSettingsConfTls = {
  defaultCipherList: string;
  defaultEcdhCurve: string;
  maxVersion: string;
  minVersion: string;
  rejectUnauthorized: boolean;
};

export type SystemSettingsConfWorkers = {
  count: number;
  enableHeapSnapshots?: boolean | undefined;
  loadThrottlePerc?: number | undefined;
  memory: number;
  minimum: number;
  startupMaxConns?: number | undefined;
  startupThrottleTimeout?: number | undefined;
  v8SingleThread?: boolean | undefined;
};

export type SystemSettingsConf = {
  api: SystemSettingsConfApi;
  backups: SystemSettingsConfBackups;
  customLogo: SystemSettingsConfCustomLogo;
  pii: SystemSettingsConfPii;
  proxy: SystemSettingsConfProxy;
  rollback: SystemSettingsConfRollback;
  shutdown: SystemSettingsConfShutdown;
  sni: SystemSettingsConfSni;
  sockets?: SystemSettingsConfSockets | undefined;
  system: SystemSettingsConfSystem;
  tls: SystemSettingsConfTls;
  upgradeGroupSettings: UpgradeGroupSettings;
  upgradeSettings: UpgradeSettings;
  workers: SystemSettingsConfWorkers;
};

/** @internal */
export const SystemSettingsConfHeaders$inboundSchema: z.ZodType<
  SystemSettingsConfHeaders,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SystemSettingsConfHeaders$Outbound = {};

/** @internal */
export const SystemSettingsConfHeaders$outboundSchema: z.ZodType<
  SystemSettingsConfHeaders$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfHeaders
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfHeaders$ {
  /** @deprecated use `SystemSettingsConfHeaders$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfHeaders$inboundSchema;
  /** @deprecated use `SystemSettingsConfHeaders$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfHeaders$outboundSchema;
  /** @deprecated use `SystemSettingsConfHeaders$Outbound` instead. */
  export type Outbound = SystemSettingsConfHeaders$Outbound;
}

export function systemSettingsConfHeadersToJSON(
  systemSettingsConfHeaders: SystemSettingsConfHeaders,
): string {
  return JSON.stringify(
    SystemSettingsConfHeaders$outboundSchema.parse(systemSettingsConfHeaders),
  );
}

export function systemSettingsConfHeadersFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfHeaders, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfHeaders$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfHeaders' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfSsl$inboundSchema: z.ZodType<
  SystemSettingsConfSsl,
  z.ZodTypeDef,
  unknown
> = z.object({
  caPath: z.string().optional(),
  certPath: z.string(),
  disabled: z.boolean(),
  passphrase: z.string(),
  privKeyPath: z.string(),
});

/** @internal */
export type SystemSettingsConfSsl$Outbound = {
  caPath?: string | undefined;
  certPath: string;
  disabled: boolean;
  passphrase: string;
  privKeyPath: string;
};

/** @internal */
export const SystemSettingsConfSsl$outboundSchema: z.ZodType<
  SystemSettingsConfSsl$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfSsl
> = z.object({
  caPath: z.string().optional(),
  certPath: z.string(),
  disabled: z.boolean(),
  passphrase: z.string(),
  privKeyPath: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfSsl$ {
  /** @deprecated use `SystemSettingsConfSsl$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfSsl$inboundSchema;
  /** @deprecated use `SystemSettingsConfSsl$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfSsl$outboundSchema;
  /** @deprecated use `SystemSettingsConfSsl$Outbound` instead. */
  export type Outbound = SystemSettingsConfSsl$Outbound;
}

export function systemSettingsConfSslToJSON(
  systemSettingsConfSsl: SystemSettingsConfSsl,
): string {
  return JSON.stringify(
    SystemSettingsConfSsl$outboundSchema.parse(systemSettingsConfSsl),
  );
}

export function systemSettingsConfSslFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfSsl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfSsl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfSsl' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfApi$inboundSchema: z.ZodType<
  SystemSettingsConfApi,
  z.ZodTypeDef,
  unknown
> = z.object({
  baseUrl: z.string().optional(),
  disableApiCache: z.boolean().optional(),
  disabled: z.boolean(),
  headers: z.lazy(() => SystemSettingsConfHeaders$inboundSchema).optional(),
  host: z.string(),
  idleSessionTTL: z.number().optional(),
  listenOnPort: z.boolean().optional(),
  loginRateLimit: z.string().optional(),
  port: z.number(),
  protocol: z.string(),
  scripts: z.boolean().optional(),
  sensitiveFields: z.array(z.string()).optional(),
  ssl: z.lazy(() => SystemSettingsConfSsl$inboundSchema),
  ssoRateLimit: z.string().optional(),
  workerRemoteAccess: z.boolean(),
});

/** @internal */
export type SystemSettingsConfApi$Outbound = {
  baseUrl?: string | undefined;
  disableApiCache?: boolean | undefined;
  disabled: boolean;
  headers?: SystemSettingsConfHeaders$Outbound | undefined;
  host: string;
  idleSessionTTL?: number | undefined;
  listenOnPort?: boolean | undefined;
  loginRateLimit?: string | undefined;
  port: number;
  protocol: string;
  scripts?: boolean | undefined;
  sensitiveFields?: Array<string> | undefined;
  ssl: SystemSettingsConfSsl$Outbound;
  ssoRateLimit?: string | undefined;
  workerRemoteAccess: boolean;
};

/** @internal */
export const SystemSettingsConfApi$outboundSchema: z.ZodType<
  SystemSettingsConfApi$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfApi
> = z.object({
  baseUrl: z.string().optional(),
  disableApiCache: z.boolean().optional(),
  disabled: z.boolean(),
  headers: z.lazy(() => SystemSettingsConfHeaders$outboundSchema).optional(),
  host: z.string(),
  idleSessionTTL: z.number().optional(),
  listenOnPort: z.boolean().optional(),
  loginRateLimit: z.string().optional(),
  port: z.number(),
  protocol: z.string(),
  scripts: z.boolean().optional(),
  sensitiveFields: z.array(z.string()).optional(),
  ssl: z.lazy(() => SystemSettingsConfSsl$outboundSchema),
  ssoRateLimit: z.string().optional(),
  workerRemoteAccess: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfApi$ {
  /** @deprecated use `SystemSettingsConfApi$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfApi$inboundSchema;
  /** @deprecated use `SystemSettingsConfApi$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfApi$outboundSchema;
  /** @deprecated use `SystemSettingsConfApi$Outbound` instead. */
  export type Outbound = SystemSettingsConfApi$Outbound;
}

export function systemSettingsConfApiToJSON(
  systemSettingsConfApi: SystemSettingsConfApi,
): string {
  return JSON.stringify(
    SystemSettingsConfApi$outboundSchema.parse(systemSettingsConfApi),
  );
}

export function systemSettingsConfApiFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfApi, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfApi$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfApi' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfBackups$inboundSchema: z.ZodType<
  SystemSettingsConfBackups,
  z.ZodTypeDef,
  unknown
> = z.object({
  backupPersistence: z.string(),
  backupsDirectory: z.string(),
});

/** @internal */
export type SystemSettingsConfBackups$Outbound = {
  backupPersistence: string;
  backupsDirectory: string;
};

/** @internal */
export const SystemSettingsConfBackups$outboundSchema: z.ZodType<
  SystemSettingsConfBackups$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfBackups
> = z.object({
  backupPersistence: z.string(),
  backupsDirectory: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfBackups$ {
  /** @deprecated use `SystemSettingsConfBackups$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfBackups$inboundSchema;
  /** @deprecated use `SystemSettingsConfBackups$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfBackups$outboundSchema;
  /** @deprecated use `SystemSettingsConfBackups$Outbound` instead. */
  export type Outbound = SystemSettingsConfBackups$Outbound;
}

export function systemSettingsConfBackupsToJSON(
  systemSettingsConfBackups: SystemSettingsConfBackups,
): string {
  return JSON.stringify(
    SystemSettingsConfBackups$outboundSchema.parse(systemSettingsConfBackups),
  );
}

export function systemSettingsConfBackupsFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfBackups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfBackups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfBackups' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfCustomLogo$inboundSchema: z.ZodType<
  SystemSettingsConfCustomLogo,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean(),
  logoDescription: z.string(),
  logoImage: z.string(),
});

/** @internal */
export type SystemSettingsConfCustomLogo$Outbound = {
  enabled: boolean;
  logoDescription: string;
  logoImage: string;
};

/** @internal */
export const SystemSettingsConfCustomLogo$outboundSchema: z.ZodType<
  SystemSettingsConfCustomLogo$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfCustomLogo
> = z.object({
  enabled: z.boolean(),
  logoDescription: z.string(),
  logoImage: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfCustomLogo$ {
  /** @deprecated use `SystemSettingsConfCustomLogo$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfCustomLogo$inboundSchema;
  /** @deprecated use `SystemSettingsConfCustomLogo$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfCustomLogo$outboundSchema;
  /** @deprecated use `SystemSettingsConfCustomLogo$Outbound` instead. */
  export type Outbound = SystemSettingsConfCustomLogo$Outbound;
}

export function systemSettingsConfCustomLogoToJSON(
  systemSettingsConfCustomLogo: SystemSettingsConfCustomLogo,
): string {
  return JSON.stringify(
    SystemSettingsConfCustomLogo$outboundSchema.parse(
      systemSettingsConfCustomLogo,
    ),
  );
}

export function systemSettingsConfCustomLogoFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfCustomLogo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfCustomLogo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfCustomLogo' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfPii$inboundSchema: z.ZodType<
  SystemSettingsConfPii,
  z.ZodTypeDef,
  unknown
> = z.object({
  enablePiiDetection: z.boolean(),
});

/** @internal */
export type SystemSettingsConfPii$Outbound = {
  enablePiiDetection: boolean;
};

/** @internal */
export const SystemSettingsConfPii$outboundSchema: z.ZodType<
  SystemSettingsConfPii$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfPii
> = z.object({
  enablePiiDetection: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfPii$ {
  /** @deprecated use `SystemSettingsConfPii$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfPii$inboundSchema;
  /** @deprecated use `SystemSettingsConfPii$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfPii$outboundSchema;
  /** @deprecated use `SystemSettingsConfPii$Outbound` instead. */
  export type Outbound = SystemSettingsConfPii$Outbound;
}

export function systemSettingsConfPiiToJSON(
  systemSettingsConfPii: SystemSettingsConfPii,
): string {
  return JSON.stringify(
    SystemSettingsConfPii$outboundSchema.parse(systemSettingsConfPii),
  );
}

export function systemSettingsConfPiiFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfPii, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfPii$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfPii' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfProxy$inboundSchema: z.ZodType<
  SystemSettingsConfProxy,
  z.ZodTypeDef,
  unknown
> = z.object({
  useEnvVars: z.boolean(),
});

/** @internal */
export type SystemSettingsConfProxy$Outbound = {
  useEnvVars: boolean;
};

/** @internal */
export const SystemSettingsConfProxy$outboundSchema: z.ZodType<
  SystemSettingsConfProxy$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfProxy
> = z.object({
  useEnvVars: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfProxy$ {
  /** @deprecated use `SystemSettingsConfProxy$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfProxy$inboundSchema;
  /** @deprecated use `SystemSettingsConfProxy$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfProxy$outboundSchema;
  /** @deprecated use `SystemSettingsConfProxy$Outbound` instead. */
  export type Outbound = SystemSettingsConfProxy$Outbound;
}

export function systemSettingsConfProxyToJSON(
  systemSettingsConfProxy: SystemSettingsConfProxy,
): string {
  return JSON.stringify(
    SystemSettingsConfProxy$outboundSchema.parse(systemSettingsConfProxy),
  );
}

export function systemSettingsConfProxyFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfProxy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfProxy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfProxy' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfRollback$inboundSchema: z.ZodType<
  SystemSettingsConfRollback,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollbackEnabled: z.boolean(),
  rollbackRetries: z.number().optional(),
  rollbackTimeout: z.number().optional(),
});

/** @internal */
export type SystemSettingsConfRollback$Outbound = {
  rollbackEnabled: boolean;
  rollbackRetries?: number | undefined;
  rollbackTimeout?: number | undefined;
};

/** @internal */
export const SystemSettingsConfRollback$outboundSchema: z.ZodType<
  SystemSettingsConfRollback$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfRollback
> = z.object({
  rollbackEnabled: z.boolean(),
  rollbackRetries: z.number().optional(),
  rollbackTimeout: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfRollback$ {
  /** @deprecated use `SystemSettingsConfRollback$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfRollback$inboundSchema;
  /** @deprecated use `SystemSettingsConfRollback$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfRollback$outboundSchema;
  /** @deprecated use `SystemSettingsConfRollback$Outbound` instead. */
  export type Outbound = SystemSettingsConfRollback$Outbound;
}

export function systemSettingsConfRollbackToJSON(
  systemSettingsConfRollback: SystemSettingsConfRollback,
): string {
  return JSON.stringify(
    SystemSettingsConfRollback$outboundSchema.parse(systemSettingsConfRollback),
  );
}

export function systemSettingsConfRollbackFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfRollback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfRollback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfRollback' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfShutdown$inboundSchema: z.ZodType<
  SystemSettingsConfShutdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  drainTimeout: z.number(),
});

/** @internal */
export type SystemSettingsConfShutdown$Outbound = {
  drainTimeout: number;
};

/** @internal */
export const SystemSettingsConfShutdown$outboundSchema: z.ZodType<
  SystemSettingsConfShutdown$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfShutdown
> = z.object({
  drainTimeout: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfShutdown$ {
  /** @deprecated use `SystemSettingsConfShutdown$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfShutdown$inboundSchema;
  /** @deprecated use `SystemSettingsConfShutdown$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfShutdown$outboundSchema;
  /** @deprecated use `SystemSettingsConfShutdown$Outbound` instead. */
  export type Outbound = SystemSettingsConfShutdown$Outbound;
}

export function systemSettingsConfShutdownToJSON(
  systemSettingsConfShutdown: SystemSettingsConfShutdown,
): string {
  return JSON.stringify(
    SystemSettingsConfShutdown$outboundSchema.parse(systemSettingsConfShutdown),
  );
}

export function systemSettingsConfShutdownFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfShutdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfShutdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfShutdown' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfSni$inboundSchema: z.ZodType<
  SystemSettingsConfSni,
  z.ZodTypeDef,
  unknown
> = z.object({
  disableSNIRouting: z.boolean(),
});

/** @internal */
export type SystemSettingsConfSni$Outbound = {
  disableSNIRouting: boolean;
};

/** @internal */
export const SystemSettingsConfSni$outboundSchema: z.ZodType<
  SystemSettingsConfSni$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfSni
> = z.object({
  disableSNIRouting: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfSni$ {
  /** @deprecated use `SystemSettingsConfSni$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfSni$inboundSchema;
  /** @deprecated use `SystemSettingsConfSni$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfSni$outboundSchema;
  /** @deprecated use `SystemSettingsConfSni$Outbound` instead. */
  export type Outbound = SystemSettingsConfSni$Outbound;
}

export function systemSettingsConfSniToJSON(
  systemSettingsConfSni: SystemSettingsConfSni,
): string {
  return JSON.stringify(
    SystemSettingsConfSni$outboundSchema.parse(systemSettingsConfSni),
  );
}

export function systemSettingsConfSniFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfSni, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfSni$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfSni' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfSockets$inboundSchema: z.ZodType<
  SystemSettingsConfSockets,
  z.ZodTypeDef,
  unknown
> = z.object({
  directory: z.string().optional(),
});

/** @internal */
export type SystemSettingsConfSockets$Outbound = {
  directory?: string | undefined;
};

/** @internal */
export const SystemSettingsConfSockets$outboundSchema: z.ZodType<
  SystemSettingsConfSockets$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfSockets
> = z.object({
  directory: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfSockets$ {
  /** @deprecated use `SystemSettingsConfSockets$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfSockets$inboundSchema;
  /** @deprecated use `SystemSettingsConfSockets$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfSockets$outboundSchema;
  /** @deprecated use `SystemSettingsConfSockets$Outbound` instead. */
  export type Outbound = SystemSettingsConfSockets$Outbound;
}

export function systemSettingsConfSocketsToJSON(
  systemSettingsConfSockets: SystemSettingsConfSockets,
): string {
  return JSON.stringify(
    SystemSettingsConfSockets$outboundSchema.parse(systemSettingsConfSockets),
  );
}

export function systemSettingsConfSocketsFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfSockets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfSockets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfSockets' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfUpgrade$inboundSchema: z.ZodNativeEnum<
  typeof SystemSettingsConfUpgrade
> = z.nativeEnum(SystemSettingsConfUpgrade);

/** @internal */
export const SystemSettingsConfUpgrade$outboundSchema: z.ZodNativeEnum<
  typeof SystemSettingsConfUpgrade
> = SystemSettingsConfUpgrade$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfUpgrade$ {
  /** @deprecated use `SystemSettingsConfUpgrade$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfUpgrade$inboundSchema;
  /** @deprecated use `SystemSettingsConfUpgrade$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfUpgrade$outboundSchema;
}

/** @internal */
export const SystemSettingsConfSystem$inboundSchema: z.ZodType<
  SystemSettingsConfSystem,
  z.ZodTypeDef,
  unknown
> = z.object({
  intercom: z.boolean(),
  upgrade: SystemSettingsConfUpgrade$inboundSchema,
});

/** @internal */
export type SystemSettingsConfSystem$Outbound = {
  intercom: boolean;
  upgrade: string;
};

/** @internal */
export const SystemSettingsConfSystem$outboundSchema: z.ZodType<
  SystemSettingsConfSystem$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfSystem
> = z.object({
  intercom: z.boolean(),
  upgrade: SystemSettingsConfUpgrade$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfSystem$ {
  /** @deprecated use `SystemSettingsConfSystem$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfSystem$inboundSchema;
  /** @deprecated use `SystemSettingsConfSystem$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfSystem$outboundSchema;
  /** @deprecated use `SystemSettingsConfSystem$Outbound` instead. */
  export type Outbound = SystemSettingsConfSystem$Outbound;
}

export function systemSettingsConfSystemToJSON(
  systemSettingsConfSystem: SystemSettingsConfSystem,
): string {
  return JSON.stringify(
    SystemSettingsConfSystem$outboundSchema.parse(systemSettingsConfSystem),
  );
}

export function systemSettingsConfSystemFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfSystem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfSystem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfSystem' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfTls$inboundSchema: z.ZodType<
  SystemSettingsConfTls,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultCipherList: z.string(),
  defaultEcdhCurve: z.string(),
  maxVersion: z.string(),
  minVersion: z.string(),
  rejectUnauthorized: z.boolean(),
});

/** @internal */
export type SystemSettingsConfTls$Outbound = {
  defaultCipherList: string;
  defaultEcdhCurve: string;
  maxVersion: string;
  minVersion: string;
  rejectUnauthorized: boolean;
};

/** @internal */
export const SystemSettingsConfTls$outboundSchema: z.ZodType<
  SystemSettingsConfTls$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfTls
> = z.object({
  defaultCipherList: z.string(),
  defaultEcdhCurve: z.string(),
  maxVersion: z.string(),
  minVersion: z.string(),
  rejectUnauthorized: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfTls$ {
  /** @deprecated use `SystemSettingsConfTls$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfTls$inboundSchema;
  /** @deprecated use `SystemSettingsConfTls$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfTls$outboundSchema;
  /** @deprecated use `SystemSettingsConfTls$Outbound` instead. */
  export type Outbound = SystemSettingsConfTls$Outbound;
}

export function systemSettingsConfTlsToJSON(
  systemSettingsConfTls: SystemSettingsConfTls,
): string {
  return JSON.stringify(
    SystemSettingsConfTls$outboundSchema.parse(systemSettingsConfTls),
  );
}

export function systemSettingsConfTlsFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfTls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfTls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfTls' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConfWorkers$inboundSchema: z.ZodType<
  SystemSettingsConfWorkers,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
  enableHeapSnapshots: z.boolean().optional(),
  loadThrottlePerc: z.number().optional(),
  memory: z.number(),
  minimum: z.number(),
  startupMaxConns: z.number().optional(),
  startupThrottleTimeout: z.number().optional(),
  v8SingleThread: z.boolean().optional(),
});

/** @internal */
export type SystemSettingsConfWorkers$Outbound = {
  count: number;
  enableHeapSnapshots?: boolean | undefined;
  loadThrottlePerc?: number | undefined;
  memory: number;
  minimum: number;
  startupMaxConns?: number | undefined;
  startupThrottleTimeout?: number | undefined;
  v8SingleThread?: boolean | undefined;
};

/** @internal */
export const SystemSettingsConfWorkers$outboundSchema: z.ZodType<
  SystemSettingsConfWorkers$Outbound,
  z.ZodTypeDef,
  SystemSettingsConfWorkers
> = z.object({
  count: z.number(),
  enableHeapSnapshots: z.boolean().optional(),
  loadThrottlePerc: z.number().optional(),
  memory: z.number(),
  minimum: z.number(),
  startupMaxConns: z.number().optional(),
  startupThrottleTimeout: z.number().optional(),
  v8SingleThread: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConfWorkers$ {
  /** @deprecated use `SystemSettingsConfWorkers$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConfWorkers$inboundSchema;
  /** @deprecated use `SystemSettingsConfWorkers$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConfWorkers$outboundSchema;
  /** @deprecated use `SystemSettingsConfWorkers$Outbound` instead. */
  export type Outbound = SystemSettingsConfWorkers$Outbound;
}

export function systemSettingsConfWorkersToJSON(
  systemSettingsConfWorkers: SystemSettingsConfWorkers,
): string {
  return JSON.stringify(
    SystemSettingsConfWorkers$outboundSchema.parse(systemSettingsConfWorkers),
  );
}

export function systemSettingsConfWorkersFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConfWorkers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConfWorkers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConfWorkers' from JSON`,
  );
}

/** @internal */
export const SystemSettingsConf$inboundSchema: z.ZodType<
  SystemSettingsConf,
  z.ZodTypeDef,
  unknown
> = z.object({
  api: z.lazy(() => SystemSettingsConfApi$inboundSchema),
  backups: z.lazy(() => SystemSettingsConfBackups$inboundSchema),
  customLogo: z.lazy(() => SystemSettingsConfCustomLogo$inboundSchema),
  pii: z.lazy(() => SystemSettingsConfPii$inboundSchema),
  proxy: z.lazy(() => SystemSettingsConfProxy$inboundSchema),
  rollback: z.lazy(() => SystemSettingsConfRollback$inboundSchema),
  shutdown: z.lazy(() => SystemSettingsConfShutdown$inboundSchema),
  sni: z.lazy(() => SystemSettingsConfSni$inboundSchema),
  sockets: z.lazy(() => SystemSettingsConfSockets$inboundSchema).optional(),
  system: z.lazy(() => SystemSettingsConfSystem$inboundSchema),
  tls: z.lazy(() => SystemSettingsConfTls$inboundSchema),
  upgradeGroupSettings: UpgradeGroupSettings$inboundSchema,
  upgradeSettings: UpgradeSettings$inboundSchema,
  workers: z.lazy(() => SystemSettingsConfWorkers$inboundSchema),
});

/** @internal */
export type SystemSettingsConf$Outbound = {
  api: SystemSettingsConfApi$Outbound;
  backups: SystemSettingsConfBackups$Outbound;
  customLogo: SystemSettingsConfCustomLogo$Outbound;
  pii: SystemSettingsConfPii$Outbound;
  proxy: SystemSettingsConfProxy$Outbound;
  rollback: SystemSettingsConfRollback$Outbound;
  shutdown: SystemSettingsConfShutdown$Outbound;
  sni: SystemSettingsConfSni$Outbound;
  sockets?: SystemSettingsConfSockets$Outbound | undefined;
  system: SystemSettingsConfSystem$Outbound;
  tls: SystemSettingsConfTls$Outbound;
  upgradeGroupSettings: UpgradeGroupSettings$Outbound;
  upgradeSettings: UpgradeSettings$Outbound;
  workers: SystemSettingsConfWorkers$Outbound;
};

/** @internal */
export const SystemSettingsConf$outboundSchema: z.ZodType<
  SystemSettingsConf$Outbound,
  z.ZodTypeDef,
  SystemSettingsConf
> = z.object({
  api: z.lazy(() => SystemSettingsConfApi$outboundSchema),
  backups: z.lazy(() => SystemSettingsConfBackups$outboundSchema),
  customLogo: z.lazy(() => SystemSettingsConfCustomLogo$outboundSchema),
  pii: z.lazy(() => SystemSettingsConfPii$outboundSchema),
  proxy: z.lazy(() => SystemSettingsConfProxy$outboundSchema),
  rollback: z.lazy(() => SystemSettingsConfRollback$outboundSchema),
  shutdown: z.lazy(() => SystemSettingsConfShutdown$outboundSchema),
  sni: z.lazy(() => SystemSettingsConfSni$outboundSchema),
  sockets: z.lazy(() => SystemSettingsConfSockets$outboundSchema).optional(),
  system: z.lazy(() => SystemSettingsConfSystem$outboundSchema),
  tls: z.lazy(() => SystemSettingsConfTls$outboundSchema),
  upgradeGroupSettings: UpgradeGroupSettings$outboundSchema,
  upgradeSettings: UpgradeSettings$outboundSchema,
  workers: z.lazy(() => SystemSettingsConfWorkers$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemSettingsConf$ {
  /** @deprecated use `SystemSettingsConf$inboundSchema` instead. */
  export const inboundSchema = SystemSettingsConf$inboundSchema;
  /** @deprecated use `SystemSettingsConf$outboundSchema` instead. */
  export const outboundSchema = SystemSettingsConf$outboundSchema;
  /** @deprecated use `SystemSettingsConf$Outbound` instead. */
  export type Outbound = SystemSettingsConf$Outbound;
}

export function systemSettingsConfToJSON(
  systemSettingsConf: SystemSettingsConf,
): string {
  return JSON.stringify(
    SystemSettingsConf$outboundSchema.parse(systemSettingsConf),
  );
}

export function systemSettingsConfFromJSON(
  jsonString: string,
): SafeParseResult<SystemSettingsConf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemSettingsConf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemSettingsConf' from JSON`,
  );
}
