/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CacheConnectionBackfillStatus,
  CacheConnectionBackfillStatus$inboundSchema,
  CacheConnectionBackfillStatus$outboundSchema,
} from "./cacheconnectionbackfillstatus.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LakehouseConnectionType,
  LakehouseConnectionType$inboundSchema,
  LakehouseConnectionType$outboundSchema,
} from "./lakehouseconnectiontype.js";

export type CacheConnection = {
  acceleratedFields?: Array<string> | undefined;
  backfillStatus?: CacheConnectionBackfillStatus | undefined;
  cacheRef: string;
  createdAt: number;
  lakehouseConnectionType?: LakehouseConnectionType | undefined;
  migrationQueryId?: string | undefined;
  retentionInDays: number;
};

/** @internal */
export const CacheConnection$inboundSchema: z.ZodType<
  CacheConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  acceleratedFields: z.array(z.string()).optional(),
  backfillStatus: CacheConnectionBackfillStatus$inboundSchema.optional(),
  cacheRef: z.string(),
  createdAt: z.number(),
  lakehouseConnectionType: LakehouseConnectionType$inboundSchema.optional(),
  migrationQueryId: z.string().optional(),
  retentionInDays: z.number(),
});

/** @internal */
export type CacheConnection$Outbound = {
  acceleratedFields?: Array<string> | undefined;
  backfillStatus?: string | undefined;
  cacheRef: string;
  createdAt: number;
  lakehouseConnectionType?: string | undefined;
  migrationQueryId?: string | undefined;
  retentionInDays: number;
};

/** @internal */
export const CacheConnection$outboundSchema: z.ZodType<
  CacheConnection$Outbound,
  z.ZodTypeDef,
  CacheConnection
> = z.object({
  acceleratedFields: z.array(z.string()).optional(),
  backfillStatus: CacheConnectionBackfillStatus$outboundSchema.optional(),
  cacheRef: z.string(),
  createdAt: z.number(),
  lakehouseConnectionType: LakehouseConnectionType$outboundSchema.optional(),
  migrationQueryId: z.string().optional(),
  retentionInDays: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConnection$ {
  /** @deprecated use `CacheConnection$inboundSchema` instead. */
  export const inboundSchema = CacheConnection$inboundSchema;
  /** @deprecated use `CacheConnection$outboundSchema` instead. */
  export const outboundSchema = CacheConnection$outboundSchema;
  /** @deprecated use `CacheConnection$Outbound` instead. */
  export type Outbound = CacheConnection$Outbound;
}

export function cacheConnectionToJSON(
  cacheConnection: CacheConnection,
): string {
  return JSON.stringify(CacheConnection$outboundSchema.parse(cacheConnection));
}

export function cacheConnectionFromJSON(
  jsonString: string,
): SafeParseResult<CacheConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheConnection' from JSON`,
  );
}
