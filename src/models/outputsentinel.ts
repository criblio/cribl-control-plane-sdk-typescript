/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSentinelType = {
  Sentinel: "sentinel",
} as const;
export type OutputSentinelType = ClosedEnum<typeof OutputSentinelType>;

export type OutputSentinelExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputSentinelFailedRequestLoggingMode = {
  Payload: "payload",
  PayloadAndHeaders: "payloadAndHeaders",
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputSentinelFailedRequestLoggingMode = OpenEnum<
  typeof OutputSentinelFailedRequestLoggingMode
>;

export type OutputSentinelResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputSentinelTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSentinelBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSentinelBackpressureBehavior = OpenEnum<
  typeof OutputSentinelBackpressureBehavior
>;

export const AuthType = {
  Oauth: "oauth",
} as const;
export type AuthType = OpenEnum<typeof AuthType>;

/**
 * Enter the data collection endpoint URL or the individual ID
 */
export const EndpointConfiguration = {
  Url: "url",
  Id: "ID",
} as const;
/**
 * Enter the data collection endpoint URL or the individual ID
 */
export type EndpointConfiguration = OpenEnum<typeof EndpointConfiguration>;

export const OutputSentinelFormat = {
  Ndjson: "ndjson",
  JsonArray: "json_array",
  Custom: "custom",
  Advanced: "advanced",
} as const;
export type OutputSentinelFormat = OpenEnum<typeof OutputSentinelFormat>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputSentinelCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputSentinelCompression = OpenEnum<
  typeof OutputSentinelCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputSentinelQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputSentinelQueueFullBehavior = OpenEnum<
  typeof OutputSentinelQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputSentinelMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputSentinelMode = OpenEnum<typeof OutputSentinelMode>;

export type OutputSentinelPqControls = {};

export type OutputSentinel = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSentinelType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Disable to close the connection immediately after sending the outgoing request
   */
  keepAlive?: boolean | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size (KB) of the request body (defaults to the API's maximum limit of 1000 KB)
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Compress the payload body before sending
   */
  compress?: boolean | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events. You can also add headers dynamically on a per-event basis in the __headers field, as explained in [Cribl Docs](https://docs.cribl.io/stream/destinations-webhook/#internal-fields).
   */
  extraHttpHeaders?: Array<OutputSentinelExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?: OutputSentinelFailedRequestLoggingMode | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?: Array<OutputSentinelResponseRetrySetting> | undefined;
  timeoutRetrySettings?: OutputSentinelTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSentinelBackpressureBehavior | undefined;
  authType?: AuthType | undefined;
  /**
   * URL for OAuth
   */
  loginUrl: string;
  /**
   * Secret parameter value to pass in request body
   */
  secret: string;
  /**
   * JavaScript expression to compute the Client ID for the Azure application. Can be a constant.
   */
  clientId: string;
  /**
   * Scope to pass in the OAuth request
   */
  scope?: string | undefined;
  /**
   * Enter the data collection endpoint URL or the individual ID
   */
  endpointURLConfiguration?: EndpointConfiguration | undefined;
  /**
   * Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced.
   */
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  format?: OutputSentinelFormat | undefined;
  /**
   * Expression to evaluate on events to generate output. Example: `raw=${_raw}`. See [Cribl Docs](https://docs.cribl.io/stream/destinations-webhook#custom-format) for other examples. If empty, the full event is sent as stringified JSON.
   */
  customSourceExpression?: string | undefined;
  /**
   * Whether to drop events when the source expression evaluates to null
   */
  customDropWhenNull?: boolean | undefined;
  /**
   * Delimiter string to insert between individual events. Defaults to newline character.
   */
  customEventDelimiter?: string | undefined;
  /**
   * Content type to use for request. Defaults to application/x-ndjson. Any content types set in Advanced Settings > Extra HTTP headers will override this entry.
   */
  customContentType?: string | undefined;
  /**
   * Expression specifying how to format the payload for each batch. To reference the events to send, use the `${events}` variable. Example expression: `{ "items" : [${events}] }` would send the batch inside a JSON object.
   */
  customPayloadExpression?: string | undefined;
  /**
   * HTTP content-type header value
   */
  advancedContentType?: string | undefined;
  /**
   * Custom JavaScript code to format incoming event data accessible through the __e variable. The formatted content is added to (__e['__eventOut']) if available. Otherwise, the original event is serialized as JSON. Caution: This function is evaluated in an unprotected context, allowing you to execute almost any JavaScript code.
   */
  formatEventCode?: string | undefined;
  /**
   * Optional JavaScript code to format the payload sent to the Destination. The payload, containing a batch of formatted events, is accessible through the __e['payload'] variable. The formatted payload is returned in the __e['__payloadOut'] variable. Caution: This function is evaluated in an unprotected context, allowing you to execute almost any JavaScript code.
   */
  formatPayloadCode?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputSentinelCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputSentinelQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputSentinelMode | undefined;
  pqControls?: OutputSentinelPqControls | undefined;
  /**
   * URL to send events to. Can be overwritten by an event's __url field.
   */
  url?: string | undefined;
  /**
   * Immutable ID for the Data Collection Rule (DCR)
   */
  dcrID?: string | undefined;
  /**
   * Data collection endpoint (DCE) URL. In the format: `https://<Endpoint-Name>-<Identifier>.<Region>.ingest.monitor.azure.com`
   */
  dceEndpoint?: string | undefined;
  /**
   * The name of the stream (Sentinel table) in which to store the events
   */
  streamName?: string | undefined;
};

/** @internal */
export const OutputSentinelType$inboundSchema: z.ZodNativeEnum<
  typeof OutputSentinelType
> = z.nativeEnum(OutputSentinelType);

/** @internal */
export const OutputSentinelType$outboundSchema: z.ZodNativeEnum<
  typeof OutputSentinelType
> = OutputSentinelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelType$ {
  /** @deprecated use `OutputSentinelType$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelType$inboundSchema;
  /** @deprecated use `OutputSentinelType$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelType$outboundSchema;
}

/** @internal */
export const OutputSentinelExtraHttpHeader$inboundSchema: z.ZodType<
  OutputSentinelExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputSentinelExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputSentinelExtraHttpHeader$outboundSchema: z.ZodType<
  OutputSentinelExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputSentinelExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelExtraHttpHeader$ {
  /** @deprecated use `OutputSentinelExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputSentinelExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputSentinelExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputSentinelExtraHttpHeader$Outbound;
}

export function outputSentinelExtraHttpHeaderToJSON(
  outputSentinelExtraHttpHeader: OutputSentinelExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputSentinelExtraHttpHeader$outboundSchema.parse(
      outputSentinelExtraHttpHeader,
    ),
  );
}

export function outputSentinelExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputSentinelExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSentinelExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSentinelExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputSentinelFailedRequestLoggingMode$inboundSchema: z.ZodType<
  OutputSentinelFailedRequestLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelFailedRequestLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelFailedRequestLoggingMode$outboundSchema: z.ZodType<
  OutputSentinelFailedRequestLoggingMode,
  z.ZodTypeDef,
  OutputSentinelFailedRequestLoggingMode
> = z.union([
  z.nativeEnum(OutputSentinelFailedRequestLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelFailedRequestLoggingMode$ {
  /** @deprecated use `OutputSentinelFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputSentinelFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputSentinelFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputSentinelResponseRetrySetting$inboundSchema: z.ZodType<
  OutputSentinelResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputSentinelResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputSentinelResponseRetrySetting$outboundSchema: z.ZodType<
  OutputSentinelResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputSentinelResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelResponseRetrySetting$ {
  /** @deprecated use `OutputSentinelResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputSentinelResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputSentinelResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputSentinelResponseRetrySetting$Outbound;
}

export function outputSentinelResponseRetrySettingToJSON(
  outputSentinelResponseRetrySetting: OutputSentinelResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputSentinelResponseRetrySetting$outboundSchema.parse(
      outputSentinelResponseRetrySetting,
    ),
  );
}

export function outputSentinelResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputSentinelResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSentinelResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSentinelResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputSentinelTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputSentinelTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputSentinelTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputSentinelTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputSentinelTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputSentinelTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelTimeoutRetrySettings$ {
  /** @deprecated use `OutputSentinelTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputSentinelTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputSentinelTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputSentinelTimeoutRetrySettings$Outbound;
}

export function outputSentinelTimeoutRetrySettingsToJSON(
  outputSentinelTimeoutRetrySettings: OutputSentinelTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputSentinelTimeoutRetrySettings$outboundSchema.parse(
      outputSentinelTimeoutRetrySettings,
    ),
  );
}

export function outputSentinelTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSentinelTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputSentinelTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSentinelTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputSentinelBackpressureBehavior$inboundSchema: z.ZodType<
  OutputSentinelBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelBackpressureBehavior$outboundSchema: z.ZodType<
  OutputSentinelBackpressureBehavior,
  z.ZodTypeDef,
  OutputSentinelBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputSentinelBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelBackpressureBehavior$ {
  /** @deprecated use `OutputSentinelBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSentinelBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputSentinelBackpressureBehavior$outboundSchema;
}

/** @internal */
export const AuthType$inboundSchema: z.ZodType<
  AuthType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AuthType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AuthType$outboundSchema: z.ZodType<
  AuthType,
  z.ZodTypeDef,
  AuthType
> = z.union([
  z.nativeEnum(AuthType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthType$ {
  /** @deprecated use `AuthType$inboundSchema` instead. */
  export const inboundSchema = AuthType$inboundSchema;
  /** @deprecated use `AuthType$outboundSchema` instead. */
  export const outboundSchema = AuthType$outboundSchema;
}

/** @internal */
export const EndpointConfiguration$inboundSchema: z.ZodType<
  EndpointConfiguration,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EndpointConfiguration),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EndpointConfiguration$outboundSchema: z.ZodType<
  EndpointConfiguration,
  z.ZodTypeDef,
  EndpointConfiguration
> = z.union([
  z.nativeEnum(EndpointConfiguration),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointConfiguration$ {
  /** @deprecated use `EndpointConfiguration$inboundSchema` instead. */
  export const inboundSchema = EndpointConfiguration$inboundSchema;
  /** @deprecated use `EndpointConfiguration$outboundSchema` instead. */
  export const outboundSchema = EndpointConfiguration$outboundSchema;
}

/** @internal */
export const OutputSentinelFormat$inboundSchema: z.ZodType<
  OutputSentinelFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelFormat$outboundSchema: z.ZodType<
  OutputSentinelFormat,
  z.ZodTypeDef,
  OutputSentinelFormat
> = z.union([
  z.nativeEnum(OutputSentinelFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelFormat$ {
  /** @deprecated use `OutputSentinelFormat$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelFormat$inboundSchema;
  /** @deprecated use `OutputSentinelFormat$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelFormat$outboundSchema;
}

/** @internal */
export const OutputSentinelCompression$inboundSchema: z.ZodType<
  OutputSentinelCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelCompression$outboundSchema: z.ZodType<
  OutputSentinelCompression,
  z.ZodTypeDef,
  OutputSentinelCompression
> = z.union([
  z.nativeEnum(OutputSentinelCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelCompression$ {
  /** @deprecated use `OutputSentinelCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelCompression$inboundSchema;
  /** @deprecated use `OutputSentinelCompression$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelCompression$outboundSchema;
}

/** @internal */
export const OutputSentinelQueueFullBehavior$inboundSchema: z.ZodType<
  OutputSentinelQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelQueueFullBehavior$outboundSchema: z.ZodType<
  OutputSentinelQueueFullBehavior,
  z.ZodTypeDef,
  OutputSentinelQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputSentinelQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelQueueFullBehavior$ {
  /** @deprecated use `OutputSentinelQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputSentinelQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputSentinelMode$inboundSchema: z.ZodType<
  OutputSentinelMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSentinelMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSentinelMode$outboundSchema: z.ZodType<
  OutputSentinelMode,
  z.ZodTypeDef,
  OutputSentinelMode
> = z.union([
  z.nativeEnum(OutputSentinelMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelMode$ {
  /** @deprecated use `OutputSentinelMode$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelMode$inboundSchema;
  /** @deprecated use `OutputSentinelMode$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelMode$outboundSchema;
}

/** @internal */
export const OutputSentinelPqControls$inboundSchema: z.ZodType<
  OutputSentinelPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSentinelPqControls$Outbound = {};

/** @internal */
export const OutputSentinelPqControls$outboundSchema: z.ZodType<
  OutputSentinelPqControls$Outbound,
  z.ZodTypeDef,
  OutputSentinelPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinelPqControls$ {
  /** @deprecated use `OutputSentinelPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputSentinelPqControls$inboundSchema;
  /** @deprecated use `OutputSentinelPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputSentinelPqControls$outboundSchema;
  /** @deprecated use `OutputSentinelPqControls$Outbound` instead. */
  export type Outbound = OutputSentinelPqControls$Outbound;
}

export function outputSentinelPqControlsToJSON(
  outputSentinelPqControls: OutputSentinelPqControls,
): string {
  return JSON.stringify(
    OutputSentinelPqControls$outboundSchema.parse(outputSentinelPqControls),
  );
}

export function outputSentinelPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSentinelPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSentinelPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSentinelPqControls' from JSON`,
  );
}

/** @internal */
export const OutputSentinel$inboundSchema: z.ZodType<
  OutputSentinel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSentinelType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  keepAlive: z.boolean().default(true),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(1000),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputSentinelExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode: OutputSentinelFailedRequestLoggingMode$inboundSchema
    .default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputSentinelResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputSentinelTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputSentinelBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  authType: AuthType$inboundSchema.optional(),
  loginUrl: z.string(),
  secret: z.string(),
  client_id: z.string(),
  scope: z.string().default("https://monitor.azure.com/.default"),
  endpointURLConfiguration: EndpointConfiguration$inboundSchema.default("url"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  format: OutputSentinelFormat$inboundSchema.optional(),
  customSourceExpression: z.string().default("__httpOut"),
  customDropWhenNull: z.boolean().default(false),
  customEventDelimiter: z.string().default("\\n"),
  customContentType: z.string().default("application/x-ndjson"),
  customPayloadExpression: z.string().default("`${events}`"),
  advancedContentType: z.string().default("application/json"),
  formatEventCode: z.string().optional(),
  formatPayloadCode: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSentinelCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputSentinelQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputSentinelMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSentinelPqControls$inboundSchema).optional(),
  url: z.string().optional(),
  dcrID: z.string().optional(),
  dceEndpoint: z.string().optional(),
  streamName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
  });
});

/** @internal */
export type OutputSentinel$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  keepAlive: boolean;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  compress: boolean;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?: Array<OutputSentinelExtraHttpHeader$Outbound> | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputSentinelResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputSentinelTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  authType?: string | undefined;
  loginUrl: string;
  secret: string;
  client_id: string;
  scope: string;
  endpointURLConfiguration: string;
  totalMemoryLimitKB?: number | undefined;
  description?: string | undefined;
  format?: string | undefined;
  customSourceExpression: string;
  customDropWhenNull: boolean;
  customEventDelimiter: string;
  customContentType: string;
  customPayloadExpression: string;
  advancedContentType: string;
  formatEventCode?: string | undefined;
  formatPayloadCode?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputSentinelPqControls$Outbound | undefined;
  url?: string | undefined;
  dcrID?: string | undefined;
  dceEndpoint?: string | undefined;
  streamName?: string | undefined;
};

/** @internal */
export const OutputSentinel$outboundSchema: z.ZodType<
  OutputSentinel$Outbound,
  z.ZodTypeDef,
  OutputSentinel
> = z.object({
  id: z.string().optional(),
  type: OutputSentinelType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  keepAlive: z.boolean().default(true),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(1000),
  maxPayloadEvents: z.number().default(0),
  compress: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputSentinelExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputSentinelFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputSentinelResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputSentinelTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(false),
  onBackpressure: OutputSentinelBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  authType: AuthType$outboundSchema.optional(),
  loginUrl: z.string(),
  secret: z.string(),
  clientId: z.string(),
  scope: z.string().default("https://monitor.azure.com/.default"),
  endpointURLConfiguration: EndpointConfiguration$outboundSchema.default("url"),
  totalMemoryLimitKB: z.number().optional(),
  description: z.string().optional(),
  format: OutputSentinelFormat$outboundSchema.optional(),
  customSourceExpression: z.string().default("__httpOut"),
  customDropWhenNull: z.boolean().default(false),
  customEventDelimiter: z.string().default("\\n"),
  customContentType: z.string().default("application/x-ndjson"),
  customPayloadExpression: z.string().default("`${events}`"),
  advancedContentType: z.string().default("application/json"),
  formatEventCode: z.string().optional(),
  formatPayloadCode: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSentinelCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputSentinelQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputSentinelMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSentinelPqControls$outboundSchema).optional(),
  url: z.string().optional(),
  dcrID: z.string().optional(),
  dceEndpoint: z.string().optional(),
  streamName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSentinel$ {
  /** @deprecated use `OutputSentinel$inboundSchema` instead. */
  export const inboundSchema = OutputSentinel$inboundSchema;
  /** @deprecated use `OutputSentinel$outboundSchema` instead. */
  export const outboundSchema = OutputSentinel$outboundSchema;
  /** @deprecated use `OutputSentinel$Outbound` instead. */
  export type Outbound = OutputSentinel$Outbound;
}

export function outputSentinelToJSON(outputSentinel: OutputSentinel): string {
  return JSON.stringify(OutputSentinel$outboundSchema.parse(outputSentinel));
}

export function outputSentinelFromJSON(
  jsonString: string,
): SafeParseResult<OutputSentinel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSentinel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSentinel' from JSON`,
  );
}
