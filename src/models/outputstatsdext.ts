/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputStatsdExtType = {
  StatsdExt: "statsd_ext",
} as const;
export type OutputStatsdExtType = ClosedEnum<typeof OutputStatsdExtType>;

/**
 * Protocol to use when communicating with the destination.
 */
export const OutputStatsdExtDestinationProtocol = {
  /**
   * UDP
   */
  Udp: "udp",
  /**
   * TCP
   */
  Tcp: "tcp",
} as const;
/**
 * Protocol to use when communicating with the destination.
 */
export type OutputStatsdExtDestinationProtocol = OpenEnum<
  typeof OutputStatsdExtDestinationProtocol
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputStatsdExtBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputStatsdExtBackpressureBehavior = OpenEnum<
  typeof OutputStatsdExtBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputStatsdExtCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputStatsdExtCompression = OpenEnum<
  typeof OutputStatsdExtCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputStatsdExtQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputStatsdExtQueueFullBehavior = OpenEnum<
  typeof OutputStatsdExtQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputStatsdExtMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Backpressure: "backpressure",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputStatsdExtMode = OpenEnum<typeof OutputStatsdExtMode>;

export type OutputStatsdExtPqControls = {};

export type OutputStatsdExt = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputStatsdExtType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Protocol to use when communicating with the destination.
   */
  protocol?: OutputStatsdExtDestinationProtocol | undefined;
  /**
   * The hostname of the destination.
   */
  host: string;
  /**
   * Destination port.
   */
  port?: number | undefined;
  /**
   * When protocol is UDP, specifies the maximum size of packets sent to the destination. Also known as the MTU for the network path to the destination system.
   */
  mtu?: number | undefined;
  /**
   * When protocol is TCP, specifies how often buffers should be flushed, resulting in records sent to the destination.
   */
  flushPeriodSec?: number | undefined;
  /**
   * How often to resolve the destination hostname to an IP address. Ignored if the destination is an IP address. A value of 0 means every batch sent will incur a DNS lookup.
   */
  dnsResolvePeriodSec?: number | undefined;
  description?: string | undefined;
  /**
   * Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
   */
  throttleRatePerSec?: string | undefined;
  /**
   * Amount of time (milliseconds) to wait for the connection to establish before retrying
   */
  connectionTimeout?: number | undefined;
  /**
   * Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
   */
  writeTimeout?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputStatsdExtBackpressureBehavior | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputStatsdExtCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputStatsdExtQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputStatsdExtMode | undefined;
  pqControls?: OutputStatsdExtPqControls | undefined;
};

/** @internal */
export const OutputStatsdExtType$inboundSchema: z.ZodNativeEnum<
  typeof OutputStatsdExtType
> = z.nativeEnum(OutputStatsdExtType);

/** @internal */
export const OutputStatsdExtType$outboundSchema: z.ZodNativeEnum<
  typeof OutputStatsdExtType
> = OutputStatsdExtType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdExtType$ {
  /** @deprecated use `OutputStatsdExtType$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdExtType$inboundSchema;
  /** @deprecated use `OutputStatsdExtType$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdExtType$outboundSchema;
}

/** @internal */
export const OutputStatsdExtDestinationProtocol$inboundSchema: z.ZodType<
  OutputStatsdExtDestinationProtocol,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdExtDestinationProtocol),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdExtDestinationProtocol$outboundSchema: z.ZodType<
  OutputStatsdExtDestinationProtocol,
  z.ZodTypeDef,
  OutputStatsdExtDestinationProtocol
> = z.union([
  z.nativeEnum(OutputStatsdExtDestinationProtocol),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdExtDestinationProtocol$ {
  /** @deprecated use `OutputStatsdExtDestinationProtocol$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdExtDestinationProtocol$inboundSchema;
  /** @deprecated use `OutputStatsdExtDestinationProtocol$outboundSchema` instead. */
  export const outboundSchema =
    OutputStatsdExtDestinationProtocol$outboundSchema;
}

/** @internal */
export const OutputStatsdExtBackpressureBehavior$inboundSchema: z.ZodType<
  OutputStatsdExtBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdExtBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdExtBackpressureBehavior$outboundSchema: z.ZodType<
  OutputStatsdExtBackpressureBehavior,
  z.ZodTypeDef,
  OutputStatsdExtBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputStatsdExtBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdExtBackpressureBehavior$ {
  /** @deprecated use `OutputStatsdExtBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputStatsdExtBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputStatsdExtBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputStatsdExtBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputStatsdExtCompression$inboundSchema: z.ZodType<
  OutputStatsdExtCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdExtCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdExtCompression$outboundSchema: z.ZodType<
  OutputStatsdExtCompression,
  z.ZodTypeDef,
  OutputStatsdExtCompression
> = z.union([
  z.nativeEnum(OutputStatsdExtCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdExtCompression$ {
  /** @deprecated use `OutputStatsdExtCompression$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdExtCompression$inboundSchema;
  /** @deprecated use `OutputStatsdExtCompression$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdExtCompression$outboundSchema;
}

/** @internal */
export const OutputStatsdExtQueueFullBehavior$inboundSchema: z.ZodType<
  OutputStatsdExtQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdExtQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdExtQueueFullBehavior$outboundSchema: z.ZodType<
  OutputStatsdExtQueueFullBehavior,
  z.ZodTypeDef,
  OutputStatsdExtQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputStatsdExtQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdExtQueueFullBehavior$ {
  /** @deprecated use `OutputStatsdExtQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdExtQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputStatsdExtQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdExtQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputStatsdExtMode$inboundSchema: z.ZodType<
  OutputStatsdExtMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputStatsdExtMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputStatsdExtMode$outboundSchema: z.ZodType<
  OutputStatsdExtMode,
  z.ZodTypeDef,
  OutputStatsdExtMode
> = z.union([
  z.nativeEnum(OutputStatsdExtMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdExtMode$ {
  /** @deprecated use `OutputStatsdExtMode$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdExtMode$inboundSchema;
  /** @deprecated use `OutputStatsdExtMode$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdExtMode$outboundSchema;
}

/** @internal */
export const OutputStatsdExtPqControls$inboundSchema: z.ZodType<
  OutputStatsdExtPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputStatsdExtPqControls$Outbound = {};

/** @internal */
export const OutputStatsdExtPqControls$outboundSchema: z.ZodType<
  OutputStatsdExtPqControls$Outbound,
  z.ZodTypeDef,
  OutputStatsdExtPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdExtPqControls$ {
  /** @deprecated use `OutputStatsdExtPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdExtPqControls$inboundSchema;
  /** @deprecated use `OutputStatsdExtPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdExtPqControls$outboundSchema;
  /** @deprecated use `OutputStatsdExtPqControls$Outbound` instead. */
  export type Outbound = OutputStatsdExtPqControls$Outbound;
}

export function outputStatsdExtPqControlsToJSON(
  outputStatsdExtPqControls: OutputStatsdExtPqControls,
): string {
  return JSON.stringify(
    OutputStatsdExtPqControls$outboundSchema.parse(outputStatsdExtPqControls),
  );
}

export function outputStatsdExtPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputStatsdExtPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputStatsdExtPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputStatsdExtPqControls' from JSON`,
  );
}

/** @internal */
export const OutputStatsdExt$inboundSchema: z.ZodType<
  OutputStatsdExt,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputStatsdExtType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  protocol: OutputStatsdExtDestinationProtocol$inboundSchema.default("udp"),
  host: z.string(),
  port: z.number().default(8125),
  mtu: z.number().default(512),
  flushPeriodSec: z.number().default(1),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  onBackpressure: OutputStatsdExtBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputStatsdExtCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputStatsdExtQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputStatsdExtMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputStatsdExtPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputStatsdExt$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  protocol: string;
  host: string;
  port: number;
  mtu: number;
  flushPeriodSec: number;
  dnsResolvePeriodSec: number;
  description?: string | undefined;
  throttleRatePerSec: string;
  connectionTimeout: number;
  writeTimeout: number;
  onBackpressure: string;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputStatsdExtPqControls$Outbound | undefined;
};

/** @internal */
export const OutputStatsdExt$outboundSchema: z.ZodType<
  OutputStatsdExt$Outbound,
  z.ZodTypeDef,
  OutputStatsdExt
> = z.object({
  id: z.string().optional(),
  type: OutputStatsdExtType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  protocol: OutputStatsdExtDestinationProtocol$outboundSchema.default("udp"),
  host: z.string(),
  port: z.number().default(8125),
  mtu: z.number().default(512),
  flushPeriodSec: z.number().default(1),
  dnsResolvePeriodSec: z.number().default(0),
  description: z.string().optional(),
  throttleRatePerSec: z.string().default("0"),
  connectionTimeout: z.number().default(10000),
  writeTimeout: z.number().default(60000),
  onBackpressure: OutputStatsdExtBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputStatsdExtCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputStatsdExtQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputStatsdExtMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputStatsdExtPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatsdExt$ {
  /** @deprecated use `OutputStatsdExt$inboundSchema` instead. */
  export const inboundSchema = OutputStatsdExt$inboundSchema;
  /** @deprecated use `OutputStatsdExt$outboundSchema` instead. */
  export const outboundSchema = OutputStatsdExt$outboundSchema;
  /** @deprecated use `OutputStatsdExt$Outbound` instead. */
  export type Outbound = OutputStatsdExt$Outbound;
}

export function outputStatsdExtToJSON(
  outputStatsdExt: OutputStatsdExt,
): string {
  return JSON.stringify(OutputStatsdExt$outboundSchema.parse(outputStatsdExt));
}

export function outputStatsdExtFromJSON(
  jsonString: string,
): SafeParseResult<OutputStatsdExt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputStatsdExt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputStatsdExt' from JSON`,
  );
}
