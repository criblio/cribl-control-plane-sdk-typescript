/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const WarmPoolSizeEnum = {
  Auto: "auto",
} as const;
export type WarmPoolSizeEnum = ClosedEnum<typeof WarmPoolSizeEnum>;

export type WarmPoolSize = number | WarmPoolSizeEnum;

export type SearchSettings = {
  compressObjectCacheArtifacts: boolean;
  fieldSummaryMaxFields: number;
  fieldSummaryMaxNestedDepth: number;
  maxConcurrentSearches: number;
  maxExecutorsPerSearch: number;
  maxResultsPerSearch: number;
  searchHistoryMaxJobs: number;
  searchQueueLength: number;
  warmPoolSize: number | WarmPoolSizeEnum;
  writeOnlyProviderSecrets: boolean;
};

/** @internal */
export const WarmPoolSizeEnum$inboundSchema: z.ZodNativeEnum<
  typeof WarmPoolSizeEnum
> = z.nativeEnum(WarmPoolSizeEnum);

/** @internal */
export const WarmPoolSizeEnum$outboundSchema: z.ZodNativeEnum<
  typeof WarmPoolSizeEnum
> = WarmPoolSizeEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WarmPoolSizeEnum$ {
  /** @deprecated use `WarmPoolSizeEnum$inboundSchema` instead. */
  export const inboundSchema = WarmPoolSizeEnum$inboundSchema;
  /** @deprecated use `WarmPoolSizeEnum$outboundSchema` instead. */
  export const outboundSchema = WarmPoolSizeEnum$outboundSchema;
}

/** @internal */
export const WarmPoolSize$inboundSchema: z.ZodType<
  WarmPoolSize,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), WarmPoolSizeEnum$inboundSchema]);

/** @internal */
export type WarmPoolSize$Outbound = number | string;

/** @internal */
export const WarmPoolSize$outboundSchema: z.ZodType<
  WarmPoolSize$Outbound,
  z.ZodTypeDef,
  WarmPoolSize
> = z.union([z.number(), WarmPoolSizeEnum$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WarmPoolSize$ {
  /** @deprecated use `WarmPoolSize$inboundSchema` instead. */
  export const inboundSchema = WarmPoolSize$inboundSchema;
  /** @deprecated use `WarmPoolSize$outboundSchema` instead. */
  export const outboundSchema = WarmPoolSize$outboundSchema;
  /** @deprecated use `WarmPoolSize$Outbound` instead. */
  export type Outbound = WarmPoolSize$Outbound;
}

export function warmPoolSizeToJSON(warmPoolSize: WarmPoolSize): string {
  return JSON.stringify(WarmPoolSize$outboundSchema.parse(warmPoolSize));
}

export function warmPoolSizeFromJSON(
  jsonString: string,
): SafeParseResult<WarmPoolSize, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WarmPoolSize$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WarmPoolSize' from JSON`,
  );
}

/** @internal */
export const SearchSettings$inboundSchema: z.ZodType<
  SearchSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  compressObjectCacheArtifacts: z.boolean(),
  fieldSummaryMaxFields: z.number(),
  fieldSummaryMaxNestedDepth: z.number(),
  maxConcurrentSearches: z.number(),
  maxExecutorsPerSearch: z.number(),
  maxResultsPerSearch: z.number(),
  searchHistoryMaxJobs: z.number(),
  searchQueueLength: z.number(),
  warmPoolSize: z.union([z.number(), WarmPoolSizeEnum$inboundSchema]),
  writeOnlyProviderSecrets: z.boolean(),
});

/** @internal */
export type SearchSettings$Outbound = {
  compressObjectCacheArtifacts: boolean;
  fieldSummaryMaxFields: number;
  fieldSummaryMaxNestedDepth: number;
  maxConcurrentSearches: number;
  maxExecutorsPerSearch: number;
  maxResultsPerSearch: number;
  searchHistoryMaxJobs: number;
  searchQueueLength: number;
  warmPoolSize: number | string;
  writeOnlyProviderSecrets: boolean;
};

/** @internal */
export const SearchSettings$outboundSchema: z.ZodType<
  SearchSettings$Outbound,
  z.ZodTypeDef,
  SearchSettings
> = z.object({
  compressObjectCacheArtifacts: z.boolean(),
  fieldSummaryMaxFields: z.number(),
  fieldSummaryMaxNestedDepth: z.number(),
  maxConcurrentSearches: z.number(),
  maxExecutorsPerSearch: z.number(),
  maxResultsPerSearch: z.number(),
  searchHistoryMaxJobs: z.number(),
  searchQueueLength: z.number(),
  warmPoolSize: z.union([z.number(), WarmPoolSizeEnum$outboundSchema]),
  writeOnlyProviderSecrets: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSettings$ {
  /** @deprecated use `SearchSettings$inboundSchema` instead. */
  export const inboundSchema = SearchSettings$inboundSchema;
  /** @deprecated use `SearchSettings$outboundSchema` instead. */
  export const outboundSchema = SearchSettings$outboundSchema;
  /** @deprecated use `SearchSettings$Outbound` instead. */
  export type Outbound = SearchSettings$Outbound;
}

export function searchSettingsToJSON(searchSettings: SearchSettings): string {
  return JSON.stringify(SearchSettings$outboundSchema.parse(searchSettings));
}

export function searchSettingsFromJSON(
  jsonString: string,
): SafeParseResult<SearchSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchSettings' from JSON`,
  );
}
