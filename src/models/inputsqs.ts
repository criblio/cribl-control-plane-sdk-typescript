/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputSqsType = {
  Sqs: "sqs",
} as const;
export type InputSqsType = ClosedEnum<typeof InputSqsType>;

export type InputSqsConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputSqsMode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputSqsMode = OpenEnum<typeof InputSqsMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputSqsCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputSqsCompression = OpenEnum<typeof InputSqsCompression>;

export type InputSqsPqControls = {};

export type InputSqsPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputSqsMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputSqsCompression | undefined;
  pqControls?: InputSqsPqControls | undefined;
};

/**
 * The queue type used (or created)
 */
export const InputSqsQueueType = {
  /**
   * Standard
   */
  Standard: "standard",
  /**
   * FIFO
   */
  Fifo: "fifo",
} as const;
/**
 * The queue type used (or created)
 */
export type InputSqsQueueType = OpenEnum<typeof InputSqsQueueType>;

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const InputSqsAuthenticationMethod = {
  /**
   * Auto
   */
  Auto: "auto",
  /**
   * Manual
   */
  Manual: "manual",
  /**
   * Secret Key pair
   */
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type InputSqsAuthenticationMethod = OpenEnum<
  typeof InputSqsAuthenticationMethod
>;

/**
 * Signature version to use for signing SQS requests
 */
export const InputSqsSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing SQS requests
 */
export type InputSqsSignatureVersion = OpenEnum<
  typeof InputSqsSignatureVersion
>;

export type InputSqsMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputSqs = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputSqsType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputSqsConnection> | undefined;
  pq?: InputSqsPq | undefined;
  /**
   * The name, URL, or ARN of the SQS queue to read events from. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. Example: 'https://host:port/myQueueName'. Value must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can only be evaluated at init time. Example referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
   */
  queueName: string;
  /**
   * The queue type used (or created)
   */
  queueType: InputSqsQueueType;
  /**
   * SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
   */
  awsAccountId?: string | undefined;
  /**
   * Create queue if it does not exist
   */
  createQueue?: boolean | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: InputSqsAuthenticationMethod | undefined;
  awsSecretKey?: string | undefined;
  /**
   * AWS Region where the SQS queue is located. Required, unless the Queue entry is a URL or ARN that includes a Region.
   */
  region?: string | undefined;
  /**
   * SQS service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to SQS-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing SQS requests
   */
  signatureVersion?: InputSqsSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access SQS
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * The maximum number of messages SQS should return in a poll request. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10.
   */
  maxMessages?: number | undefined;
  /**
   * After messages are retrieved by a ReceiveMessage request, @{product} will hide them from subsequent retrieve requests for at least this duration. You can set this as high as 43200 sec. (12 hours).
   */
  visibilityTimeout?: number | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputSqsMetadatum> | undefined;
  /**
   * How long to wait for events before trying polling again. The lower the number the higher the AWS bill. The higher the number the longer it will take for the source to react to configuration changes and system restarts.
   */
  pollTimeout?: number | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  /**
   * How many receiver processes to run. The higher the number, the better the throughput - at the expense of CPU overhead.
   */
  numReceivers?: number | undefined;
};

/** @internal */
export const InputSqsType$inboundSchema: z.ZodNativeEnum<typeof InputSqsType> =
  z.nativeEnum(InputSqsType);

/** @internal */
export const InputSqsType$outboundSchema: z.ZodNativeEnum<typeof InputSqsType> =
  InputSqsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsType$ {
  /** @deprecated use `InputSqsType$inboundSchema` instead. */
  export const inboundSchema = InputSqsType$inboundSchema;
  /** @deprecated use `InputSqsType$outboundSchema` instead. */
  export const outboundSchema = InputSqsType$outboundSchema;
}

/** @internal */
export const InputSqsConnection$inboundSchema: z.ZodType<
  InputSqsConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputSqsConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputSqsConnection$outboundSchema: z.ZodType<
  InputSqsConnection$Outbound,
  z.ZodTypeDef,
  InputSqsConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsConnection$ {
  /** @deprecated use `InputSqsConnection$inboundSchema` instead. */
  export const inboundSchema = InputSqsConnection$inboundSchema;
  /** @deprecated use `InputSqsConnection$outboundSchema` instead. */
  export const outboundSchema = InputSqsConnection$outboundSchema;
  /** @deprecated use `InputSqsConnection$Outbound` instead. */
  export type Outbound = InputSqsConnection$Outbound;
}

export function inputSqsConnectionToJSON(
  inputSqsConnection: InputSqsConnection,
): string {
  return JSON.stringify(
    InputSqsConnection$outboundSchema.parse(inputSqsConnection),
  );
}

export function inputSqsConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputSqsConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSqsConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSqsConnection' from JSON`,
  );
}

/** @internal */
export const InputSqsMode$inboundSchema: z.ZodType<
  InputSqsMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSqsMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSqsMode$outboundSchema: z.ZodType<
  InputSqsMode,
  z.ZodTypeDef,
  InputSqsMode
> = z.union([
  z.nativeEnum(InputSqsMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsMode$ {
  /** @deprecated use `InputSqsMode$inboundSchema` instead. */
  export const inboundSchema = InputSqsMode$inboundSchema;
  /** @deprecated use `InputSqsMode$outboundSchema` instead. */
  export const outboundSchema = InputSqsMode$outboundSchema;
}

/** @internal */
export const InputSqsCompression$inboundSchema: z.ZodType<
  InputSqsCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSqsCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSqsCompression$outboundSchema: z.ZodType<
  InputSqsCompression,
  z.ZodTypeDef,
  InputSqsCompression
> = z.union([
  z.nativeEnum(InputSqsCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsCompression$ {
  /** @deprecated use `InputSqsCompression$inboundSchema` instead. */
  export const inboundSchema = InputSqsCompression$inboundSchema;
  /** @deprecated use `InputSqsCompression$outboundSchema` instead. */
  export const outboundSchema = InputSqsCompression$outboundSchema;
}

/** @internal */
export const InputSqsPqControls$inboundSchema: z.ZodType<
  InputSqsPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputSqsPqControls$Outbound = {};

/** @internal */
export const InputSqsPqControls$outboundSchema: z.ZodType<
  InputSqsPqControls$Outbound,
  z.ZodTypeDef,
  InputSqsPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsPqControls$ {
  /** @deprecated use `InputSqsPqControls$inboundSchema` instead. */
  export const inboundSchema = InputSqsPqControls$inboundSchema;
  /** @deprecated use `InputSqsPqControls$outboundSchema` instead. */
  export const outboundSchema = InputSqsPqControls$outboundSchema;
  /** @deprecated use `InputSqsPqControls$Outbound` instead. */
  export type Outbound = InputSqsPqControls$Outbound;
}

export function inputSqsPqControlsToJSON(
  inputSqsPqControls: InputSqsPqControls,
): string {
  return JSON.stringify(
    InputSqsPqControls$outboundSchema.parse(inputSqsPqControls),
  );
}

export function inputSqsPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputSqsPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSqsPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSqsPqControls' from JSON`,
  );
}

/** @internal */
export const InputSqsPq$inboundSchema: z.ZodType<
  InputSqsPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSqsMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSqsCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputSqsPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputSqsPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputSqsPqControls$Outbound | undefined;
};

/** @internal */
export const InputSqsPq$outboundSchema: z.ZodType<
  InputSqsPq$Outbound,
  z.ZodTypeDef,
  InputSqsPq
> = z.object({
  mode: InputSqsMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSqsCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputSqsPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsPq$ {
  /** @deprecated use `InputSqsPq$inboundSchema` instead. */
  export const inboundSchema = InputSqsPq$inboundSchema;
  /** @deprecated use `InputSqsPq$outboundSchema` instead. */
  export const outboundSchema = InputSqsPq$outboundSchema;
  /** @deprecated use `InputSqsPq$Outbound` instead. */
  export type Outbound = InputSqsPq$Outbound;
}

export function inputSqsPqToJSON(inputSqsPq: InputSqsPq): string {
  return JSON.stringify(InputSqsPq$outboundSchema.parse(inputSqsPq));
}

export function inputSqsPqFromJSON(
  jsonString: string,
): SafeParseResult<InputSqsPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSqsPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSqsPq' from JSON`,
  );
}

/** @internal */
export const InputSqsQueueType$inboundSchema: z.ZodType<
  InputSqsQueueType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSqsQueueType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSqsQueueType$outboundSchema: z.ZodType<
  InputSqsQueueType,
  z.ZodTypeDef,
  InputSqsQueueType
> = z.union([
  z.nativeEnum(InputSqsQueueType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsQueueType$ {
  /** @deprecated use `InputSqsQueueType$inboundSchema` instead. */
  export const inboundSchema = InputSqsQueueType$inboundSchema;
  /** @deprecated use `InputSqsQueueType$outboundSchema` instead. */
  export const outboundSchema = InputSqsQueueType$outboundSchema;
}

/** @internal */
export const InputSqsAuthenticationMethod$inboundSchema: z.ZodType<
  InputSqsAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSqsAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSqsAuthenticationMethod$outboundSchema: z.ZodType<
  InputSqsAuthenticationMethod,
  z.ZodTypeDef,
  InputSqsAuthenticationMethod
> = z.union([
  z.nativeEnum(InputSqsAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsAuthenticationMethod$ {
  /** @deprecated use `InputSqsAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = InputSqsAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputSqsAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = InputSqsAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputSqsSignatureVersion$inboundSchema: z.ZodType<
  InputSqsSignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSqsSignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSqsSignatureVersion$outboundSchema: z.ZodType<
  InputSqsSignatureVersion,
  z.ZodTypeDef,
  InputSqsSignatureVersion
> = z.union([
  z.nativeEnum(InputSqsSignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsSignatureVersion$ {
  /** @deprecated use `InputSqsSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = InputSqsSignatureVersion$inboundSchema;
  /** @deprecated use `InputSqsSignatureVersion$outboundSchema` instead. */
  export const outboundSchema = InputSqsSignatureVersion$outboundSchema;
}

/** @internal */
export const InputSqsMetadatum$inboundSchema: z.ZodType<
  InputSqsMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputSqsMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputSqsMetadatum$outboundSchema: z.ZodType<
  InputSqsMetadatum$Outbound,
  z.ZodTypeDef,
  InputSqsMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqsMetadatum$ {
  /** @deprecated use `InputSqsMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputSqsMetadatum$inboundSchema;
  /** @deprecated use `InputSqsMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputSqsMetadatum$outboundSchema;
  /** @deprecated use `InputSqsMetadatum$Outbound` instead. */
  export type Outbound = InputSqsMetadatum$Outbound;
}

export function inputSqsMetadatumToJSON(
  inputSqsMetadatum: InputSqsMetadatum,
): string {
  return JSON.stringify(
    InputSqsMetadatum$outboundSchema.parse(inputSqsMetadatum),
  );
}

export function inputSqsMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputSqsMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSqsMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSqsMetadatum' from JSON`,
  );
}

/** @internal */
export const InputSqs$inboundSchema: z.ZodType<
  InputSqs,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputSqsType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSqsConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputSqsPq$inboundSchema).optional(),
  queueName: z.string(),
  queueType: InputSqsQueueType$inboundSchema,
  awsAccountId: z.string().optional(),
  createQueue: z.boolean().default(false),
  awsAuthenticationMethod: InputSqsAuthenticationMethod$inboundSchema.default(
    "auto",
  ),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputSqsSignatureVersion$inboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  maxMessages: z.number().default(10),
  visibilityTimeout: z.number().default(600),
  metadata: z.array(z.lazy(() => InputSqsMetadatum$inboundSchema)).optional(),
  pollTimeout: z.number().default(10),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  numReceivers: z.number().default(3),
});

/** @internal */
export type InputSqs$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputSqsConnection$Outbound> | undefined;
  pq?: InputSqsPq$Outbound | undefined;
  queueName: string;
  queueType: string;
  awsAccountId?: string | undefined;
  createQueue: boolean;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region?: string | undefined;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  maxMessages: number;
  visibilityTimeout: number;
  metadata?: Array<InputSqsMetadatum$Outbound> | undefined;
  pollTimeout: number;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  numReceivers: number;
};

/** @internal */
export const InputSqs$outboundSchema: z.ZodType<
  InputSqs$Outbound,
  z.ZodTypeDef,
  InputSqs
> = z.object({
  id: z.string().optional(),
  type: InputSqsType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSqsConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputSqsPq$outboundSchema).optional(),
  queueName: z.string(),
  queueType: InputSqsQueueType$outboundSchema,
  awsAccountId: z.string().optional(),
  createQueue: z.boolean().default(false),
  awsAuthenticationMethod: InputSqsAuthenticationMethod$outboundSchema.default(
    "auto",
  ),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputSqsSignatureVersion$outboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  maxMessages: z.number().default(10),
  visibilityTimeout: z.number().default(600),
  metadata: z.array(z.lazy(() => InputSqsMetadatum$outboundSchema)).optional(),
  pollTimeout: z.number().default(10),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  numReceivers: z.number().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSqs$ {
  /** @deprecated use `InputSqs$inboundSchema` instead. */
  export const inboundSchema = InputSqs$inboundSchema;
  /** @deprecated use `InputSqs$outboundSchema` instead. */
  export const outboundSchema = InputSqs$outboundSchema;
  /** @deprecated use `InputSqs$Outbound` instead. */
  export type Outbound = InputSqs$Outbound;
}

export function inputSqsToJSON(inputSqs: InputSqs): string {
  return JSON.stringify(InputSqs$outboundSchema.parse(inputSqs));
}

export function inputSqsFromJSON(
  jsonString: string,
): SafeParseResult<InputSqs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSqs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSqs' from JSON`,
  );
}
