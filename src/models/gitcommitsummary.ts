/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Author = {
  email: string;
  name: string;
};

export type GitCommitSummaryFiles = {
  created?: Array<string> | undefined;
  deleted?: Array<string> | undefined;
  modified?: Array<string> | undefined;
  renamed?: Array<string> | undefined;
};

export type Summary = {
  changes: number;
  deletions: number;
  insertions: number;
};

export type GitCommitSummary = {
  author?: Author | undefined;
  branch: string;
  commit: string;
  files: GitCommitSummaryFiles;
  summary: Summary;
};

/** @internal */
export const Author$inboundSchema: z.ZodType<Author, z.ZodTypeDef, unknown> = z
  .object({
    email: z.string(),
    name: z.string(),
  });

/** @internal */
export type Author$Outbound = {
  email: string;
  name: string;
};

/** @internal */
export const Author$outboundSchema: z.ZodType<
  Author$Outbound,
  z.ZodTypeDef,
  Author
> = z.object({
  email: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Author$ {
  /** @deprecated use `Author$inboundSchema` instead. */
  export const inboundSchema = Author$inboundSchema;
  /** @deprecated use `Author$outboundSchema` instead. */
  export const outboundSchema = Author$outboundSchema;
  /** @deprecated use `Author$Outbound` instead. */
  export type Outbound = Author$Outbound;
}

export function authorToJSON(author: Author): string {
  return JSON.stringify(Author$outboundSchema.parse(author));
}

export function authorFromJSON(
  jsonString: string,
): SafeParseResult<Author, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Author$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Author' from JSON`,
  );
}

/** @internal */
export const GitCommitSummaryFiles$inboundSchema: z.ZodType<
  GitCommitSummaryFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.array(z.string()).optional(),
  deleted: z.array(z.string()).optional(),
  modified: z.array(z.string()).optional(),
  renamed: z.array(z.string()).optional(),
});

/** @internal */
export type GitCommitSummaryFiles$Outbound = {
  created?: Array<string> | undefined;
  deleted?: Array<string> | undefined;
  modified?: Array<string> | undefined;
  renamed?: Array<string> | undefined;
};

/** @internal */
export const GitCommitSummaryFiles$outboundSchema: z.ZodType<
  GitCommitSummaryFiles$Outbound,
  z.ZodTypeDef,
  GitCommitSummaryFiles
> = z.object({
  created: z.array(z.string()).optional(),
  deleted: z.array(z.string()).optional(),
  modified: z.array(z.string()).optional(),
  renamed: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitCommitSummaryFiles$ {
  /** @deprecated use `GitCommitSummaryFiles$inboundSchema` instead. */
  export const inboundSchema = GitCommitSummaryFiles$inboundSchema;
  /** @deprecated use `GitCommitSummaryFiles$outboundSchema` instead. */
  export const outboundSchema = GitCommitSummaryFiles$outboundSchema;
  /** @deprecated use `GitCommitSummaryFiles$Outbound` instead. */
  export type Outbound = GitCommitSummaryFiles$Outbound;
}

export function gitCommitSummaryFilesToJSON(
  gitCommitSummaryFiles: GitCommitSummaryFiles,
): string {
  return JSON.stringify(
    GitCommitSummaryFiles$outboundSchema.parse(gitCommitSummaryFiles),
  );
}

export function gitCommitSummaryFilesFromJSON(
  jsonString: string,
): SafeParseResult<GitCommitSummaryFiles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitCommitSummaryFiles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitCommitSummaryFiles' from JSON`,
  );
}

/** @internal */
export const Summary$inboundSchema: z.ZodType<Summary, z.ZodTypeDef, unknown> =
  z.object({
    changes: z.number(),
    deletions: z.number(),
    insertions: z.number(),
  });

/** @internal */
export type Summary$Outbound = {
  changes: number;
  deletions: number;
  insertions: number;
};

/** @internal */
export const Summary$outboundSchema: z.ZodType<
  Summary$Outbound,
  z.ZodTypeDef,
  Summary
> = z.object({
  changes: z.number(),
  deletions: z.number(),
  insertions: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Summary$ {
  /** @deprecated use `Summary$inboundSchema` instead. */
  export const inboundSchema = Summary$inboundSchema;
  /** @deprecated use `Summary$outboundSchema` instead. */
  export const outboundSchema = Summary$outboundSchema;
  /** @deprecated use `Summary$Outbound` instead. */
  export type Outbound = Summary$Outbound;
}

export function summaryToJSON(summary: Summary): string {
  return JSON.stringify(Summary$outboundSchema.parse(summary));
}

export function summaryFromJSON(
  jsonString: string,
): SafeParseResult<Summary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Summary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Summary' from JSON`,
  );
}

/** @internal */
export const GitCommitSummary$inboundSchema: z.ZodType<
  GitCommitSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  author: z.lazy(() => Author$inboundSchema).optional(),
  branch: z.string(),
  commit: z.string(),
  files: z.lazy(() => GitCommitSummaryFiles$inboundSchema),
  summary: z.lazy(() => Summary$inboundSchema),
});

/** @internal */
export type GitCommitSummary$Outbound = {
  author?: Author$Outbound | undefined;
  branch: string;
  commit: string;
  files: GitCommitSummaryFiles$Outbound;
  summary: Summary$Outbound;
};

/** @internal */
export const GitCommitSummary$outboundSchema: z.ZodType<
  GitCommitSummary$Outbound,
  z.ZodTypeDef,
  GitCommitSummary
> = z.object({
  author: z.lazy(() => Author$outboundSchema).optional(),
  branch: z.string(),
  commit: z.string(),
  files: z.lazy(() => GitCommitSummaryFiles$outboundSchema),
  summary: z.lazy(() => Summary$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitCommitSummary$ {
  /** @deprecated use `GitCommitSummary$inboundSchema` instead. */
  export const inboundSchema = GitCommitSummary$inboundSchema;
  /** @deprecated use `GitCommitSummary$outboundSchema` instead. */
  export const outboundSchema = GitCommitSummary$outboundSchema;
  /** @deprecated use `GitCommitSummary$Outbound` instead. */
  export type Outbound = GitCommitSummary$Outbound;
}

export function gitCommitSummaryToJSON(
  gitCommitSummary: GitCommitSummary,
): string {
  return JSON.stringify(
    GitCommitSummary$outboundSchema.parse(gitCommitSummary),
  );
}

export function gitCommitSummaryFromJSON(
  jsonString: string,
): SafeParseResult<GitCommitSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitCommitSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitCommitSummary' from JSON`,
  );
}
