/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputPrometheusType = {
  Prometheus: "prometheus",
} as const;
export type OutputPrometheusType = ClosedEnum<typeof OutputPrometheusType>;

export type OutputPrometheusExtraHttpHeader = {
  name?: string | undefined;
  value: string;
};

/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export const OutputPrometheusFailedRequestLoggingMode = {
  /**
   * Payload
   */
  Payload: "payload",
  /**
   * Payload + Headers
   */
  PayloadAndHeaders: "payloadAndHeaders",
  /**
   * None
   */
  None: "none",
} as const;
/**
 * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
 */
export type OutputPrometheusFailedRequestLoggingMode = OpenEnum<
  typeof OutputPrometheusFailedRequestLoggingMode
>;

export type OutputPrometheusResponseRetrySetting = {
  /**
   * The HTTP response status code that will trigger retries
   */
  httpStatus: number;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

export type OutputPrometheusTimeoutRetrySettings = {
  timeoutRetry?: boolean | undefined;
  /**
   * How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
   */
  initialBackoff?: number | undefined;
  /**
   * Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
   */
  backoffRate?: number | undefined;
  /**
   * The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
   */
  maxBackoff?: number | undefined;
};

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputPrometheusBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
  /**
   * Persistent Queue
   */
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputPrometheusBackpressureBehavior = OpenEnum<
  typeof OutputPrometheusBackpressureBehavior
>;

/**
 * Remote Write authentication type
 */
export const OutputPrometheusAuthenticationType = {
  None: "none",
  Basic: "basic",
  CredentialsSecret: "credentialsSecret",
  Token: "token",
  TextSecret: "textSecret",
  Oauth: "oauth",
} as const;
/**
 * Remote Write authentication type
 */
export type OutputPrometheusAuthenticationType = OpenEnum<
  typeof OutputPrometheusAuthenticationType
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputPrometheusCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputPrometheusCompression = OpenEnum<
  typeof OutputPrometheusCompression
>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputPrometheusQueueFullBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop new data
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputPrometheusQueueFullBehavior = OpenEnum<
  typeof OutputPrometheusQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputPrometheusMode = {
  /**
   * Error
   */
  Error: "error",
  /**
   * Backpressure
   */
  Backpressure: "backpressure",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputPrometheusMode = OpenEnum<typeof OutputPrometheusMode>;

export type OutputPrometheusPqControls = {};

export type OutputPrometheusOauthParam = {
  /**
   * OAuth parameter name
   */
  name: string;
  /**
   * OAuth parameter value
   */
  value: string;
};

export type OutputPrometheusOauthHeader = {
  /**
   * OAuth header name
   */
  name: string;
  /**
   * OAuth header value
   */
  value: string;
};

export type OutputPrometheus = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputPrometheusType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions to generated metrics.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The endpoint to send metrics to
   */
  url: string;
  /**
   * JavaScript expression that can be used to rename metrics. For example, name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name. You can access event fields' values via __e.<fieldName>.
   */
  metricRenameExpr?: string | undefined;
  /**
   * Generate and send metadata (`type` and `metricFamilyName`) requests
   */
  sendMetadata?: boolean | undefined;
  /**
   * Maximum number of ongoing requests before blocking
   */
  concurrency?: number | undefined;
  /**
   * Maximum size, in KB, of the request body
   */
  maxPayloadSizeKB?: number | undefined;
  /**
   * Maximum number of events to include in the request body. Default is 0 (unlimited).
   */
  maxPayloadEvents?: number | undefined;
  /**
   * Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
   *
   * @remarks
   *         Enabled by default. When this setting is also present in TLS Settings (Client Side),
   *         that value will take precedence.
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Amount of time, in seconds, to wait for a request to complete before canceling it
   */
  timeoutSec?: number | undefined;
  /**
   * Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit.
   */
  flushPeriodSec?: number | undefined;
  /**
   * Headers to add to all events
   */
  extraHttpHeaders?: Array<OutputPrometheusExtraHttpHeader> | undefined;
  /**
   * Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
   */
  useRoundRobinDns?: boolean | undefined;
  /**
   * Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
   */
  failedRequestLoggingMode?:
    | OutputPrometheusFailedRequestLoggingMode
    | undefined;
  /**
   * List of headers that are safe to log in plain text
   */
  safeHeaders?: Array<string> | undefined;
  /**
   * Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
   */
  responseRetrySettings?:
    | Array<OutputPrometheusResponseRetrySetting>
    | undefined;
  timeoutRetrySettings?: OutputPrometheusTimeoutRetrySettings | undefined;
  /**
   * Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
   */
  responseHonorRetryAfterHeader?: boolean | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputPrometheusBackpressureBehavior | undefined;
  /**
   * Remote Write authentication type
   */
  authType?: OutputPrometheusAuthenticationType | undefined;
  description?: string | undefined;
  /**
   * How frequently metrics metadata is sent out. Value cannot be smaller than the base Flush period set above.
   */
  metricsFlushPeriodSec?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputPrometheusCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputPrometheusQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputPrometheusMode | undefined;
  pqControls?: OutputPrometheusPqControls | undefined;
  username?: string | undefined;
  password?: string | undefined;
  /**
   * Bearer token to include in the authorization header
   */
  token?: string | undefined;
  /**
   * Select or create a secret that references your credentials
   */
  credentialsSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  textSecret?: string | undefined;
  /**
   * URL for OAuth
   */
  loginUrl?: string | undefined;
  /**
   * Secret parameter name to pass in request body
   */
  secretParamName?: string | undefined;
  /**
   * Secret parameter value to pass in request body
   */
  secret?: string | undefined;
  /**
   * Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
   */
  tokenAttributeName?: string | undefined;
  /**
   * JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
   */
  authHeaderExpr?: string | undefined;
  /**
   * How often the OAuth token should be refreshed.
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthParams?: Array<OutputPrometheusOauthParam> | undefined;
  /**
   * Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
   */
  oauthHeaders?: Array<OutputPrometheusOauthHeader> | undefined;
};

/** @internal */
export const OutputPrometheusType$inboundSchema: z.ZodNativeEnum<
  typeof OutputPrometheusType
> = z.nativeEnum(OutputPrometheusType);

/** @internal */
export const OutputPrometheusType$outboundSchema: z.ZodNativeEnum<
  typeof OutputPrometheusType
> = OutputPrometheusType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusType$ {
  /** @deprecated use `OutputPrometheusType$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheusType$inboundSchema;
  /** @deprecated use `OutputPrometheusType$outboundSchema` instead. */
  export const outboundSchema = OutputPrometheusType$outboundSchema;
}

/** @internal */
export const OutputPrometheusExtraHttpHeader$inboundSchema: z.ZodType<
  OutputPrometheusExtraHttpHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/** @internal */
export type OutputPrometheusExtraHttpHeader$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const OutputPrometheusExtraHttpHeader$outboundSchema: z.ZodType<
  OutputPrometheusExtraHttpHeader$Outbound,
  z.ZodTypeDef,
  OutputPrometheusExtraHttpHeader
> = z.object({
  name: z.string().optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusExtraHttpHeader$ {
  /** @deprecated use `OutputPrometheusExtraHttpHeader$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheusExtraHttpHeader$inboundSchema;
  /** @deprecated use `OutputPrometheusExtraHttpHeader$outboundSchema` instead. */
  export const outboundSchema = OutputPrometheusExtraHttpHeader$outboundSchema;
  /** @deprecated use `OutputPrometheusExtraHttpHeader$Outbound` instead. */
  export type Outbound = OutputPrometheusExtraHttpHeader$Outbound;
}

export function outputPrometheusExtraHttpHeaderToJSON(
  outputPrometheusExtraHttpHeader: OutputPrometheusExtraHttpHeader,
): string {
  return JSON.stringify(
    OutputPrometheusExtraHttpHeader$outboundSchema.parse(
      outputPrometheusExtraHttpHeader,
    ),
  );
}

export function outputPrometheusExtraHttpHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputPrometheusExtraHttpHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputPrometheusExtraHttpHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputPrometheusExtraHttpHeader' from JSON`,
  );
}

/** @internal */
export const OutputPrometheusFailedRequestLoggingMode$inboundSchema: z.ZodType<
  OutputPrometheusFailedRequestLoggingMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputPrometheusFailedRequestLoggingMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputPrometheusFailedRequestLoggingMode$outboundSchema: z.ZodType<
  OutputPrometheusFailedRequestLoggingMode,
  z.ZodTypeDef,
  OutputPrometheusFailedRequestLoggingMode
> = z.union([
  z.nativeEnum(OutputPrometheusFailedRequestLoggingMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusFailedRequestLoggingMode$ {
  /** @deprecated use `OutputPrometheusFailedRequestLoggingMode$inboundSchema` instead. */
  export const inboundSchema =
    OutputPrometheusFailedRequestLoggingMode$inboundSchema;
  /** @deprecated use `OutputPrometheusFailedRequestLoggingMode$outboundSchema` instead. */
  export const outboundSchema =
    OutputPrometheusFailedRequestLoggingMode$outboundSchema;
}

/** @internal */
export const OutputPrometheusResponseRetrySetting$inboundSchema: z.ZodType<
  OutputPrometheusResponseRetrySetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputPrometheusResponseRetrySetting$Outbound = {
  httpStatus: number;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputPrometheusResponseRetrySetting$outboundSchema: z.ZodType<
  OutputPrometheusResponseRetrySetting$Outbound,
  z.ZodTypeDef,
  OutputPrometheusResponseRetrySetting
> = z.object({
  httpStatus: z.number(),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusResponseRetrySetting$ {
  /** @deprecated use `OutputPrometheusResponseRetrySetting$inboundSchema` instead. */
  export const inboundSchema =
    OutputPrometheusResponseRetrySetting$inboundSchema;
  /** @deprecated use `OutputPrometheusResponseRetrySetting$outboundSchema` instead. */
  export const outboundSchema =
    OutputPrometheusResponseRetrySetting$outboundSchema;
  /** @deprecated use `OutputPrometheusResponseRetrySetting$Outbound` instead. */
  export type Outbound = OutputPrometheusResponseRetrySetting$Outbound;
}

export function outputPrometheusResponseRetrySettingToJSON(
  outputPrometheusResponseRetrySetting: OutputPrometheusResponseRetrySetting,
): string {
  return JSON.stringify(
    OutputPrometheusResponseRetrySetting$outboundSchema.parse(
      outputPrometheusResponseRetrySetting,
    ),
  );
}

export function outputPrometheusResponseRetrySettingFromJSON(
  jsonString: string,
): SafeParseResult<OutputPrometheusResponseRetrySetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputPrometheusResponseRetrySetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputPrometheusResponseRetrySetting' from JSON`,
  );
}

/** @internal */
export const OutputPrometheusTimeoutRetrySettings$inboundSchema: z.ZodType<
  OutputPrometheusTimeoutRetrySettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/** @internal */
export type OutputPrometheusTimeoutRetrySettings$Outbound = {
  timeoutRetry: boolean;
  initialBackoff: number;
  backoffRate: number;
  maxBackoff: number;
};

/** @internal */
export const OutputPrometheusTimeoutRetrySettings$outboundSchema: z.ZodType<
  OutputPrometheusTimeoutRetrySettings$Outbound,
  z.ZodTypeDef,
  OutputPrometheusTimeoutRetrySettings
> = z.object({
  timeoutRetry: z.boolean().default(false),
  initialBackoff: z.number().default(1000),
  backoffRate: z.number().default(2),
  maxBackoff: z.number().default(10000),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusTimeoutRetrySettings$ {
  /** @deprecated use `OutputPrometheusTimeoutRetrySettings$inboundSchema` instead. */
  export const inboundSchema =
    OutputPrometheusTimeoutRetrySettings$inboundSchema;
  /** @deprecated use `OutputPrometheusTimeoutRetrySettings$outboundSchema` instead. */
  export const outboundSchema =
    OutputPrometheusTimeoutRetrySettings$outboundSchema;
  /** @deprecated use `OutputPrometheusTimeoutRetrySettings$Outbound` instead. */
  export type Outbound = OutputPrometheusTimeoutRetrySettings$Outbound;
}

export function outputPrometheusTimeoutRetrySettingsToJSON(
  outputPrometheusTimeoutRetrySettings: OutputPrometheusTimeoutRetrySettings,
): string {
  return JSON.stringify(
    OutputPrometheusTimeoutRetrySettings$outboundSchema.parse(
      outputPrometheusTimeoutRetrySettings,
    ),
  );
}

export function outputPrometheusTimeoutRetrySettingsFromJSON(
  jsonString: string,
): SafeParseResult<OutputPrometheusTimeoutRetrySettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OutputPrometheusTimeoutRetrySettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputPrometheusTimeoutRetrySettings' from JSON`,
  );
}

/** @internal */
export const OutputPrometheusBackpressureBehavior$inboundSchema: z.ZodType<
  OutputPrometheusBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputPrometheusBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputPrometheusBackpressureBehavior$outboundSchema: z.ZodType<
  OutputPrometheusBackpressureBehavior,
  z.ZodTypeDef,
  OutputPrometheusBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputPrometheusBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusBackpressureBehavior$ {
  /** @deprecated use `OutputPrometheusBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputPrometheusBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputPrometheusBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputPrometheusBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputPrometheusAuthenticationType$inboundSchema: z.ZodType<
  OutputPrometheusAuthenticationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputPrometheusAuthenticationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputPrometheusAuthenticationType$outboundSchema: z.ZodType<
  OutputPrometheusAuthenticationType,
  z.ZodTypeDef,
  OutputPrometheusAuthenticationType
> = z.union([
  z.nativeEnum(OutputPrometheusAuthenticationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusAuthenticationType$ {
  /** @deprecated use `OutputPrometheusAuthenticationType$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheusAuthenticationType$inboundSchema;
  /** @deprecated use `OutputPrometheusAuthenticationType$outboundSchema` instead. */
  export const outboundSchema =
    OutputPrometheusAuthenticationType$outboundSchema;
}

/** @internal */
export const OutputPrometheusCompression$inboundSchema: z.ZodType<
  OutputPrometheusCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputPrometheusCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputPrometheusCompression$outboundSchema: z.ZodType<
  OutputPrometheusCompression,
  z.ZodTypeDef,
  OutputPrometheusCompression
> = z.union([
  z.nativeEnum(OutputPrometheusCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusCompression$ {
  /** @deprecated use `OutputPrometheusCompression$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheusCompression$inboundSchema;
  /** @deprecated use `OutputPrometheusCompression$outboundSchema` instead. */
  export const outboundSchema = OutputPrometheusCompression$outboundSchema;
}

/** @internal */
export const OutputPrometheusQueueFullBehavior$inboundSchema: z.ZodType<
  OutputPrometheusQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputPrometheusQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputPrometheusQueueFullBehavior$outboundSchema: z.ZodType<
  OutputPrometheusQueueFullBehavior,
  z.ZodTypeDef,
  OutputPrometheusQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputPrometheusQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusQueueFullBehavior$ {
  /** @deprecated use `OutputPrometheusQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheusQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputPrometheusQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputPrometheusQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputPrometheusMode$inboundSchema: z.ZodType<
  OutputPrometheusMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputPrometheusMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputPrometheusMode$outboundSchema: z.ZodType<
  OutputPrometheusMode,
  z.ZodTypeDef,
  OutputPrometheusMode
> = z.union([
  z.nativeEnum(OutputPrometheusMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusMode$ {
  /** @deprecated use `OutputPrometheusMode$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheusMode$inboundSchema;
  /** @deprecated use `OutputPrometheusMode$outboundSchema` instead. */
  export const outboundSchema = OutputPrometheusMode$outboundSchema;
}

/** @internal */
export const OutputPrometheusPqControls$inboundSchema: z.ZodType<
  OutputPrometheusPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputPrometheusPqControls$Outbound = {};

/** @internal */
export const OutputPrometheusPqControls$outboundSchema: z.ZodType<
  OutputPrometheusPqControls$Outbound,
  z.ZodTypeDef,
  OutputPrometheusPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusPqControls$ {
  /** @deprecated use `OutputPrometheusPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheusPqControls$inboundSchema;
  /** @deprecated use `OutputPrometheusPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputPrometheusPqControls$outboundSchema;
  /** @deprecated use `OutputPrometheusPqControls$Outbound` instead. */
  export type Outbound = OutputPrometheusPqControls$Outbound;
}

export function outputPrometheusPqControlsToJSON(
  outputPrometheusPqControls: OutputPrometheusPqControls,
): string {
  return JSON.stringify(
    OutputPrometheusPqControls$outboundSchema.parse(outputPrometheusPqControls),
  );
}

export function outputPrometheusPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputPrometheusPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputPrometheusPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputPrometheusPqControls' from JSON`,
  );
}

/** @internal */
export const OutputPrometheusOauthParam$inboundSchema: z.ZodType<
  OutputPrometheusOauthParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type OutputPrometheusOauthParam$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputPrometheusOauthParam$outboundSchema: z.ZodType<
  OutputPrometheusOauthParam$Outbound,
  z.ZodTypeDef,
  OutputPrometheusOauthParam
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusOauthParam$ {
  /** @deprecated use `OutputPrometheusOauthParam$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheusOauthParam$inboundSchema;
  /** @deprecated use `OutputPrometheusOauthParam$outboundSchema` instead. */
  export const outboundSchema = OutputPrometheusOauthParam$outboundSchema;
  /** @deprecated use `OutputPrometheusOauthParam$Outbound` instead. */
  export type Outbound = OutputPrometheusOauthParam$Outbound;
}

export function outputPrometheusOauthParamToJSON(
  outputPrometheusOauthParam: OutputPrometheusOauthParam,
): string {
  return JSON.stringify(
    OutputPrometheusOauthParam$outboundSchema.parse(outputPrometheusOauthParam),
  );
}

export function outputPrometheusOauthParamFromJSON(
  jsonString: string,
): SafeParseResult<OutputPrometheusOauthParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputPrometheusOauthParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputPrometheusOauthParam' from JSON`,
  );
}

/** @internal */
export const OutputPrometheusOauthHeader$inboundSchema: z.ZodType<
  OutputPrometheusOauthHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type OutputPrometheusOauthHeader$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const OutputPrometheusOauthHeader$outboundSchema: z.ZodType<
  OutputPrometheusOauthHeader$Outbound,
  z.ZodTypeDef,
  OutputPrometheusOauthHeader
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheusOauthHeader$ {
  /** @deprecated use `OutputPrometheusOauthHeader$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheusOauthHeader$inboundSchema;
  /** @deprecated use `OutputPrometheusOauthHeader$outboundSchema` instead. */
  export const outboundSchema = OutputPrometheusOauthHeader$outboundSchema;
  /** @deprecated use `OutputPrometheusOauthHeader$Outbound` instead. */
  export type Outbound = OutputPrometheusOauthHeader$Outbound;
}

export function outputPrometheusOauthHeaderToJSON(
  outputPrometheusOauthHeader: OutputPrometheusOauthHeader,
): string {
  return JSON.stringify(
    OutputPrometheusOauthHeader$outboundSchema.parse(
      outputPrometheusOauthHeader,
    ),
  );
}

export function outputPrometheusOauthHeaderFromJSON(
  jsonString: string,
): SafeParseResult<OutputPrometheusOauthHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputPrometheusOauthHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputPrometheusOauthHeader' from JSON`,
  );
}

/** @internal */
export const OutputPrometheus$inboundSchema: z.ZodType<
  OutputPrometheus,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputPrometheusType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  metricRenameExpr: z.string().default("name.replace(/[^a-zA-Z0-9_]/g, '_')"),
  sendMetadata: z.boolean().default(true),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputPrometheusExtraHttpHeader$inboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputPrometheusFailedRequestLoggingMode$inboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputPrometheusResponseRetrySetting$inboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputPrometheusTimeoutRetrySettings$inboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputPrometheusBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  authType: OutputPrometheusAuthenticationType$inboundSchema.default("none"),
  description: z.string().optional(),
  metricsFlushPeriodSec: z.number().default(60),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputPrometheusCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputPrometheusQueueFullBehavior$inboundSchema.default(
    "block",
  ),
  pqMode: OutputPrometheusMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputPrometheusPqControls$inboundSchema).optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => OutputPrometheusOauthParam$inboundSchema))
    .optional(),
  oauthHeaders: z.array(z.lazy(() => OutputPrometheusOauthHeader$inboundSchema))
    .optional(),
});

/** @internal */
export type OutputPrometheus$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  url: string;
  metricRenameExpr: string;
  sendMetadata: boolean;
  concurrency: number;
  maxPayloadSizeKB: number;
  maxPayloadEvents: number;
  rejectUnauthorized: boolean;
  timeoutSec: number;
  flushPeriodSec: number;
  extraHttpHeaders?:
    | Array<OutputPrometheusExtraHttpHeader$Outbound>
    | undefined;
  useRoundRobinDns: boolean;
  failedRequestLoggingMode: string;
  safeHeaders?: Array<string> | undefined;
  responseRetrySettings?:
    | Array<OutputPrometheusResponseRetrySetting$Outbound>
    | undefined;
  timeoutRetrySettings?:
    | OutputPrometheusTimeoutRetrySettings$Outbound
    | undefined;
  responseHonorRetryAfterHeader: boolean;
  onBackpressure: string;
  authType: string;
  description?: string | undefined;
  metricsFlushPeriodSec: number;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputPrometheusPqControls$Outbound | undefined;
  username?: string | undefined;
  password?: string | undefined;
  token?: string | undefined;
  credentialsSecret?: string | undefined;
  textSecret?: string | undefined;
  loginUrl?: string | undefined;
  secretParamName?: string | undefined;
  secret?: string | undefined;
  tokenAttributeName?: string | undefined;
  authHeaderExpr: string;
  tokenTimeoutSecs: number;
  oauthParams?: Array<OutputPrometheusOauthParam$Outbound> | undefined;
  oauthHeaders?: Array<OutputPrometheusOauthHeader$Outbound> | undefined;
};

/** @internal */
export const OutputPrometheus$outboundSchema: z.ZodType<
  OutputPrometheus$Outbound,
  z.ZodTypeDef,
  OutputPrometheus
> = z.object({
  id: z.string().optional(),
  type: OutputPrometheusType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  url: z.string(),
  metricRenameExpr: z.string().default("name.replace(/[^a-zA-Z0-9_]/g, '_')"),
  sendMetadata: z.boolean().default(true),
  concurrency: z.number().default(5),
  maxPayloadSizeKB: z.number().default(4096),
  maxPayloadEvents: z.number().default(0),
  rejectUnauthorized: z.boolean().default(true),
  timeoutSec: z.number().default(30),
  flushPeriodSec: z.number().default(1),
  extraHttpHeaders: z.array(
    z.lazy(() => OutputPrometheusExtraHttpHeader$outboundSchema),
  ).optional(),
  useRoundRobinDns: z.boolean().default(false),
  failedRequestLoggingMode:
    OutputPrometheusFailedRequestLoggingMode$outboundSchema.default("none"),
  safeHeaders: z.array(z.string()).optional(),
  responseRetrySettings: z.array(
    z.lazy(() => OutputPrometheusResponseRetrySetting$outboundSchema),
  ).optional(),
  timeoutRetrySettings: z.lazy(() =>
    OutputPrometheusTimeoutRetrySettings$outboundSchema
  ).optional(),
  responseHonorRetryAfterHeader: z.boolean().default(true),
  onBackpressure: OutputPrometheusBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  authType: OutputPrometheusAuthenticationType$outboundSchema.default("none"),
  description: z.string().optional(),
  metricsFlushPeriodSec: z.number().default(60),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputPrometheusCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputPrometheusQueueFullBehavior$outboundSchema.default(
    "block",
  ),
  pqMode: OutputPrometheusMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputPrometheusPqControls$outboundSchema)
    .optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  token: z.string().optional(),
  credentialsSecret: z.string().optional(),
  textSecret: z.string().optional(),
  loginUrl: z.string().optional(),
  secretParamName: z.string().optional(),
  secret: z.string().optional(),
  tokenAttributeName: z.string().optional(),
  authHeaderExpr: z.string().default("`Bearer ${token}`"),
  tokenTimeoutSecs: z.number().default(3600),
  oauthParams: z.array(z.lazy(() => OutputPrometheusOauthParam$outboundSchema))
    .optional(),
  oauthHeaders: z.array(
    z.lazy(() => OutputPrometheusOauthHeader$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputPrometheus$ {
  /** @deprecated use `OutputPrometheus$inboundSchema` instead. */
  export const inboundSchema = OutputPrometheus$inboundSchema;
  /** @deprecated use `OutputPrometheus$outboundSchema` instead. */
  export const outboundSchema = OutputPrometheus$outboundSchema;
  /** @deprecated use `OutputPrometheus$Outbound` instead. */
  export type Outbound = OutputPrometheus$Outbound;
}

export function outputPrometheusToJSON(
  outputPrometheus: OutputPrometheus,
): string {
  return JSON.stringify(
    OutputPrometheus$outboundSchema.parse(outputPrometheus),
  );
}

export function outputPrometheusFromJSON(
  jsonString: string,
): SafeParseResult<OutputPrometheus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputPrometheus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputPrometheus' from JSON`,
  );
}
