/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FileT = {
  index: string;
  path: string;
  workingDir: string;
};

export type Renamed = {
  from: string;
  to: string;
};

export type GitStatusResult = {
  ahead: number;
  behind: number;
  conflicted: Array<string>;
  created: Array<string>;
  current: string;
  deleted: Array<string>;
  files: Array<FileT>;
  modified: Array<string>;
  notAdded: Array<string>;
  renamed: Array<Renamed>;
  staged: Array<string>;
};

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z
  .object({
    index: z.string(),
    path: z.string(),
    working_dir: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "working_dir": "workingDir",
    });
  });

/** @internal */
export type FileT$Outbound = {
  index: string;
  path: string;
  working_dir: string;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<
  FileT$Outbound,
  z.ZodTypeDef,
  FileT
> = z.object({
  index: z.string(),
  path: z.string(),
  workingDir: z.string(),
}).transform((v) => {
  return remap$(v, {
    workingDir: "working_dir",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
  /** @deprecated use `FileT$inboundSchema` instead. */
  export const inboundSchema = FileT$inboundSchema;
  /** @deprecated use `FileT$outboundSchema` instead. */
  export const outboundSchema = FileT$outboundSchema;
  /** @deprecated use `FileT$Outbound` instead. */
  export type Outbound = FileT$Outbound;
}

export function fileToJSON(fileT: FileT): string {
  return JSON.stringify(FileT$outboundSchema.parse(fileT));
}

export function fileFromJSON(
  jsonString: string,
): SafeParseResult<FileT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileT' from JSON`,
  );
}

/** @internal */
export const Renamed$inboundSchema: z.ZodType<Renamed, z.ZodTypeDef, unknown> =
  z.object({
    from: z.string(),
    to: z.string(),
  });

/** @internal */
export type Renamed$Outbound = {
  from: string;
  to: string;
};

/** @internal */
export const Renamed$outboundSchema: z.ZodType<
  Renamed$Outbound,
  z.ZodTypeDef,
  Renamed
> = z.object({
  from: z.string(),
  to: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Renamed$ {
  /** @deprecated use `Renamed$inboundSchema` instead. */
  export const inboundSchema = Renamed$inboundSchema;
  /** @deprecated use `Renamed$outboundSchema` instead. */
  export const outboundSchema = Renamed$outboundSchema;
  /** @deprecated use `Renamed$Outbound` instead. */
  export type Outbound = Renamed$Outbound;
}

export function renamedToJSON(renamed: Renamed): string {
  return JSON.stringify(Renamed$outboundSchema.parse(renamed));
}

export function renamedFromJSON(
  jsonString: string,
): SafeParseResult<Renamed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Renamed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Renamed' from JSON`,
  );
}

/** @internal */
export const GitStatusResult$inboundSchema: z.ZodType<
  GitStatusResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  ahead: z.number(),
  behind: z.number(),
  conflicted: z.array(z.string()),
  created: z.array(z.string()),
  current: z.string(),
  deleted: z.array(z.string()),
  files: z.array(z.lazy(() => FileT$inboundSchema)),
  modified: z.array(z.string()),
  not_added: z.array(z.string()),
  renamed: z.array(z.lazy(() => Renamed$inboundSchema)),
  staged: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "not_added": "notAdded",
  });
});

/** @internal */
export type GitStatusResult$Outbound = {
  ahead: number;
  behind: number;
  conflicted: Array<string>;
  created: Array<string>;
  current: string;
  deleted: Array<string>;
  files: Array<FileT$Outbound>;
  modified: Array<string>;
  not_added: Array<string>;
  renamed: Array<Renamed$Outbound>;
  staged: Array<string>;
};

/** @internal */
export const GitStatusResult$outboundSchema: z.ZodType<
  GitStatusResult$Outbound,
  z.ZodTypeDef,
  GitStatusResult
> = z.object({
  ahead: z.number(),
  behind: z.number(),
  conflicted: z.array(z.string()),
  created: z.array(z.string()),
  current: z.string(),
  deleted: z.array(z.string()),
  files: z.array(z.lazy(() => FileT$outboundSchema)),
  modified: z.array(z.string()),
  notAdded: z.array(z.string()),
  renamed: z.array(z.lazy(() => Renamed$outboundSchema)),
  staged: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    notAdded: "not_added",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitStatusResult$ {
  /** @deprecated use `GitStatusResult$inboundSchema` instead. */
  export const inboundSchema = GitStatusResult$inboundSchema;
  /** @deprecated use `GitStatusResult$outboundSchema` instead. */
  export const outboundSchema = GitStatusResult$outboundSchema;
  /** @deprecated use `GitStatusResult$Outbound` instead. */
  export type Outbound = GitStatusResult$Outbound;
}

export function gitStatusResultToJSON(
  gitStatusResult: GitStatusResult,
): string {
  return JSON.stringify(GitStatusResult$outboundSchema.parse(gitStatusResult));
}

export function gitStatusResultFromJSON(
  jsonString: string,
): SafeParseResult<GitStatusResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitStatusResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitStatusResult' from JSON`,
  );
}
