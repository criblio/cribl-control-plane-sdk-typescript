/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Notification,
  Notification$inboundSchema,
  Notification$Outbound,
  Notification$outboundSchema,
} from "./notification.js";

export type Notifications = {
  disabled: boolean;
  items?: Array<Notification> | undefined;
};

export type SavedQuerySchedule = {
  cronSchedule: string;
  enabled: boolean;
  keepLastN: number;
  notifications?: Notifications | undefined;
  resumeMissed?: boolean | undefined;
  resumeOnBoot?: boolean | undefined;
  tz: string;
};

/** @internal */
export const Notifications$inboundSchema: z.ZodType<
  Notifications,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean(),
  items: z.array(Notification$inboundSchema).optional(),
});

/** @internal */
export type Notifications$Outbound = {
  disabled: boolean;
  items?: Array<Notification$Outbound> | undefined;
};

/** @internal */
export const Notifications$outboundSchema: z.ZodType<
  Notifications$Outbound,
  z.ZodTypeDef,
  Notifications
> = z.object({
  disabled: z.boolean(),
  items: z.array(Notification$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Notifications$ {
  /** @deprecated use `Notifications$inboundSchema` instead. */
  export const inboundSchema = Notifications$inboundSchema;
  /** @deprecated use `Notifications$outboundSchema` instead. */
  export const outboundSchema = Notifications$outboundSchema;
  /** @deprecated use `Notifications$Outbound` instead. */
  export type Outbound = Notifications$Outbound;
}

export function notificationsToJSON(notifications: Notifications): string {
  return JSON.stringify(Notifications$outboundSchema.parse(notifications));
}

export function notificationsFromJSON(
  jsonString: string,
): SafeParseResult<Notifications, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Notifications$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Notifications' from JSON`,
  );
}

/** @internal */
export const SavedQuerySchedule$inboundSchema: z.ZodType<
  SavedQuerySchedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  cronSchedule: z.string(),
  enabled: z.boolean(),
  keepLastN: z.number(),
  notifications: z.lazy(() => Notifications$inboundSchema).optional(),
  resumeMissed: z.boolean().optional(),
  resumeOnBoot: z.boolean().optional(),
  tz: z.string(),
});

/** @internal */
export type SavedQuerySchedule$Outbound = {
  cronSchedule: string;
  enabled: boolean;
  keepLastN: number;
  notifications?: Notifications$Outbound | undefined;
  resumeMissed?: boolean | undefined;
  resumeOnBoot?: boolean | undefined;
  tz: string;
};

/** @internal */
export const SavedQuerySchedule$outboundSchema: z.ZodType<
  SavedQuerySchedule$Outbound,
  z.ZodTypeDef,
  SavedQuerySchedule
> = z.object({
  cronSchedule: z.string(),
  enabled: z.boolean(),
  keepLastN: z.number(),
  notifications: z.lazy(() => Notifications$outboundSchema).optional(),
  resumeMissed: z.boolean().optional(),
  resumeOnBoot: z.boolean().optional(),
  tz: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SavedQuerySchedule$ {
  /** @deprecated use `SavedQuerySchedule$inboundSchema` instead. */
  export const inboundSchema = SavedQuerySchedule$inboundSchema;
  /** @deprecated use `SavedQuerySchedule$outboundSchema` instead. */
  export const outboundSchema = SavedQuerySchedule$outboundSchema;
  /** @deprecated use `SavedQuerySchedule$Outbound` instead. */
  export type Outbound = SavedQuerySchedule$Outbound;
}

export function savedQueryScheduleToJSON(
  savedQuerySchedule: SavedQuerySchedule,
): string {
  return JSON.stringify(
    SavedQuerySchedule$outboundSchema.parse(savedQuerySchedule),
  );
}

export function savedQueryScheduleFromJSON(
  jsonString: string,
): SafeParseResult<SavedQuerySchedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SavedQuerySchedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SavedQuerySchedule' from JSON`,
  );
}
