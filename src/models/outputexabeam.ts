/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputExabeamType = {
  Exabeam: "exabeam",
} as const;
export type OutputExabeamType = ClosedEnum<typeof OutputExabeamType>;

/**
 * Signature version to use for signing Google Cloud Storage requests
 */
export const OutputExabeamSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing Google Cloud Storage requests
 */
export type OutputExabeamSignatureVersion = ClosedEnum<
  typeof OutputExabeamSignatureVersion
>;

/**
 * Object ACL to assign to uploaded objects
 */
export const OutputExabeamObjectACL = {
  Private: "private",
  BucketOwnerRead: "bucket-owner-read",
  BucketOwnerFullControl: "bucket-owner-full-control",
  ProjectPrivate: "project-private",
  AuthenticatedRead: "authenticated-read",
  PublicRead: "public-read",
} as const;
/**
 * Object ACL to assign to uploaded objects
 */
export type OutputExabeamObjectACL = ClosedEnum<typeof OutputExabeamObjectACL>;

/**
 * Storage class to select for uploaded objects
 */
export const OutputExabeamStorageClass = {
  Standard: "STANDARD",
  Nearline: "NEARLINE",
  Coldline: "COLDLINE",
  Archive: "ARCHIVE",
} as const;
/**
 * Storage class to select for uploaded objects
 */
export type OutputExabeamStorageClass = ClosedEnum<
  typeof OutputExabeamStorageClass
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputExabeamBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputExabeamBackpressureBehavior = ClosedEnum<
  typeof OutputExabeamBackpressureBehavior
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputExabeamDiskSpaceProtection = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputExabeamDiskSpaceProtection = ClosedEnum<
  typeof OutputExabeamDiskSpaceProtection
>;

export type OutputExabeam = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputExabeamType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Name of the destination bucket. A constant or a JavaScript expression that can only be evaluated at init time. Example of referencing a JavaScript Global Variable: `myBucket-${C.vars.myVar}`.
   */
  bucket: string;
  /**
   * Region where the bucket is located
   */
  region: string;
  /**
   * Filesystem location in which to buffer files, before compressing and moving to final destination. Use performant and stable storage.
   */
  stagePath?: string | undefined;
  /**
   * Google Cloud Storage service endpoint
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing Google Cloud Storage requests
   */
  signatureVersion?: OutputExabeamSignatureVersion | undefined;
  /**
   * Object ACL to assign to uploaded objects
   */
  objectACL?: OutputExabeamObjectACL | undefined;
  /**
   * Storage class to select for uploaded objects
   */
  storageClass?: OutputExabeamStorageClass | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputExabeamBackpressureBehavior | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?: OutputExabeamDiskSpaceProtection | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Enter an encoded string containing Exabeam configurations
   */
  encodedConfiguration?: string | undefined;
  /**
   * ID of the Exabeam Collector where data should be sent. Example: 11112222-3333-4444-5555-666677778888
   *
   * @remarks
   */
  collectorInstanceId: string;
  /**
   * Constant or JavaScript expression to create an Exabeam site name. Values that aren't successfully evaluated will be treated as string constants.
   */
  siteName?: string | undefined;
  /**
   * Exabeam site ID. If left blank, @{product} will use the value of the Exabeam site name.
   */
  siteId?: string | undefined;
  timezoneOffset?: string | undefined;
  /**
   * HMAC access key. Can be a constant or a JavaScript expression, such as `${C.env.GCS_ACCESS_KEY}`.
   */
  awsApiKey?: string | undefined;
  /**
   * HMAC secret. Can be a constant or a JavaScript expression, such as `${C.env.GCS_SECRET}`.
   */
  awsSecretKey?: string | undefined;
  description?: string | undefined;
  /**
   * How frequently, in seconds, to clean up empty directories
   */
  emptyDirCleanupSec?: number | undefined;
  /**
   * Storage location for files that fail to reach their final destination after maximum retries are exceeded
   */
  deadletterPath?: string | undefined;
  /**
   * The maximum number of times a file will attempt to move to its final destination before being dead-lettered
   */
  maxRetryNum?: number | undefined;
};

/** @internal */
export const OutputExabeamType$inboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamType
> = z.nativeEnum(OutputExabeamType);

/** @internal */
export const OutputExabeamType$outboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamType
> = OutputExabeamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputExabeamType$ {
  /** @deprecated use `OutputExabeamType$inboundSchema` instead. */
  export const inboundSchema = OutputExabeamType$inboundSchema;
  /** @deprecated use `OutputExabeamType$outboundSchema` instead. */
  export const outboundSchema = OutputExabeamType$outboundSchema;
}

/** @internal */
export const OutputExabeamSignatureVersion$inboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamSignatureVersion
> = z.nativeEnum(OutputExabeamSignatureVersion);

/** @internal */
export const OutputExabeamSignatureVersion$outboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamSignatureVersion
> = OutputExabeamSignatureVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputExabeamSignatureVersion$ {
  /** @deprecated use `OutputExabeamSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = OutputExabeamSignatureVersion$inboundSchema;
  /** @deprecated use `OutputExabeamSignatureVersion$outboundSchema` instead. */
  export const outboundSchema = OutputExabeamSignatureVersion$outboundSchema;
}

/** @internal */
export const OutputExabeamObjectACL$inboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamObjectACL
> = z.nativeEnum(OutputExabeamObjectACL);

/** @internal */
export const OutputExabeamObjectACL$outboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamObjectACL
> = OutputExabeamObjectACL$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputExabeamObjectACL$ {
  /** @deprecated use `OutputExabeamObjectACL$inboundSchema` instead. */
  export const inboundSchema = OutputExabeamObjectACL$inboundSchema;
  /** @deprecated use `OutputExabeamObjectACL$outboundSchema` instead. */
  export const outboundSchema = OutputExabeamObjectACL$outboundSchema;
}

/** @internal */
export const OutputExabeamStorageClass$inboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamStorageClass
> = z.nativeEnum(OutputExabeamStorageClass);

/** @internal */
export const OutputExabeamStorageClass$outboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamStorageClass
> = OutputExabeamStorageClass$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputExabeamStorageClass$ {
  /** @deprecated use `OutputExabeamStorageClass$inboundSchema` instead. */
  export const inboundSchema = OutputExabeamStorageClass$inboundSchema;
  /** @deprecated use `OutputExabeamStorageClass$outboundSchema` instead. */
  export const outboundSchema = OutputExabeamStorageClass$outboundSchema;
}

/** @internal */
export const OutputExabeamBackpressureBehavior$inboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamBackpressureBehavior
> = z.nativeEnum(OutputExabeamBackpressureBehavior);

/** @internal */
export const OutputExabeamBackpressureBehavior$outboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamBackpressureBehavior
> = OutputExabeamBackpressureBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputExabeamBackpressureBehavior$ {
  /** @deprecated use `OutputExabeamBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputExabeamBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputExabeamBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputExabeamBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputExabeamDiskSpaceProtection$inboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamDiskSpaceProtection
> = z.nativeEnum(OutputExabeamDiskSpaceProtection);

/** @internal */
export const OutputExabeamDiskSpaceProtection$outboundSchema: z.ZodNativeEnum<
  typeof OutputExabeamDiskSpaceProtection
> = OutputExabeamDiskSpaceProtection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputExabeamDiskSpaceProtection$ {
  /** @deprecated use `OutputExabeamDiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema = OutputExabeamDiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputExabeamDiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema = OutputExabeamDiskSpaceProtection$outboundSchema;
}

/** @internal */
export const OutputExabeam$inboundSchema: z.ZodType<
  OutputExabeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputExabeamType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string(),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  endpoint: z.string().default("https://storage.googleapis.com"),
  signatureVersion: OutputExabeamSignatureVersion$inboundSchema.default("v4"),
  objectACL: OutputExabeamObjectACL$inboundSchema.default("private"),
  storageClass: OutputExabeamStorageClass$inboundSchema.optional(),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  onBackpressure: OutputExabeamBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputExabeamDiskSpaceProtection$inboundSchema
    .default("block"),
  maxFileSizeMB: z.number().default(10),
  encodedConfiguration: z.string().optional(),
  collectorInstanceId: z.string(),
  siteName: z.string().optional(),
  siteId: z.string().optional(),
  timezoneOffset: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecretKey: z.string().optional(),
  description: z.string().optional(),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/** @internal */
export type OutputExabeam$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  bucket: string;
  region: string;
  stagePath: string;
  endpoint: string;
  signatureVersion: string;
  objectACL: string;
  storageClass?: string | undefined;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  addIdToStagePath: boolean;
  removeEmptyDirs: boolean;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxOpenFiles: number;
  onBackpressure: string;
  deadletterEnabled: boolean;
  onDiskFullBackpressure: string;
  maxFileSizeMB: number;
  encodedConfiguration?: string | undefined;
  collectorInstanceId: string;
  siteName?: string | undefined;
  siteId?: string | undefined;
  timezoneOffset?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecretKey?: string | undefined;
  description?: string | undefined;
  emptyDirCleanupSec: number;
  deadletterPath: string;
  maxRetryNum: number;
};

/** @internal */
export const OutputExabeam$outboundSchema: z.ZodType<
  OutputExabeam$Outbound,
  z.ZodTypeDef,
  OutputExabeam
> = z.object({
  id: z.string().optional(),
  type: OutputExabeamType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string(),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  endpoint: z.string().default("https://storage.googleapis.com"),
  signatureVersion: OutputExabeamSignatureVersion$outboundSchema.default("v4"),
  objectACL: OutputExabeamObjectACL$outboundSchema.default("private"),
  storageClass: OutputExabeamStorageClass$outboundSchema.optional(),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  onBackpressure: OutputExabeamBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputExabeamDiskSpaceProtection$outboundSchema
    .default("block"),
  maxFileSizeMB: z.number().default(10),
  encodedConfiguration: z.string().optional(),
  collectorInstanceId: z.string(),
  siteName: z.string().optional(),
  siteId: z.string().optional(),
  timezoneOffset: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecretKey: z.string().optional(),
  description: z.string().optional(),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputExabeam$ {
  /** @deprecated use `OutputExabeam$inboundSchema` instead. */
  export const inboundSchema = OutputExabeam$inboundSchema;
  /** @deprecated use `OutputExabeam$outboundSchema` instead. */
  export const outboundSchema = OutputExabeam$outboundSchema;
  /** @deprecated use `OutputExabeam$Outbound` instead. */
  export type Outbound = OutputExabeam$Outbound;
}

export function outputExabeamToJSON(outputExabeam: OutputExabeam): string {
  return JSON.stringify(OutputExabeam$outboundSchema.parse(outputExabeam));
}

export function outputExabeamFromJSON(
  jsonString: string,
): SafeParseResult<OutputExabeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputExabeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputExabeam' from JSON`,
  );
}
