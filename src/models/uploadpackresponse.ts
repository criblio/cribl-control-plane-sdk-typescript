/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UploadPackResponse = {
  source: string;
};

/** @internal */
export const UploadPackResponse$inboundSchema: z.ZodType<
  UploadPackResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
});

/** @internal */
export type UploadPackResponse$Outbound = {
  source: string;
};

/** @internal */
export const UploadPackResponse$outboundSchema: z.ZodType<
  UploadPackResponse$Outbound,
  z.ZodTypeDef,
  UploadPackResponse
> = z.object({
  source: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadPackResponse$ {
  /** @deprecated use `UploadPackResponse$inboundSchema` instead. */
  export const inboundSchema = UploadPackResponse$inboundSchema;
  /** @deprecated use `UploadPackResponse$outboundSchema` instead. */
  export const outboundSchema = UploadPackResponse$outboundSchema;
  /** @deprecated use `UploadPackResponse$Outbound` instead. */
  export type Outbound = UploadPackResponse$Outbound;
}

export function uploadPackResponseToJSON(
  uploadPackResponse: UploadPackResponse,
): string {
  return JSON.stringify(
    UploadPackResponse$outboundSchema.parse(uploadPackResponse),
  );
}

export function uploadPackResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadPackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadPackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadPackResponse' from JSON`,
  );
}
