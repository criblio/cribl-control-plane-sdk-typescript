/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  GitOpsType,
  GitOpsType$inboundSchema,
  GitOpsType$outboundSchema,
} from "./gitopstype.js";

export type GitSettings = {
  authType?: string | undefined;
  autoAction?: string | undefined;
  autoActionMessage?: string | undefined;
  autoActionSchedule?: string | undefined;
  branch?: string | undefined;
  commitDeploySingleAction?: boolean | undefined;
  copilotAutoGitCommitMessages?: boolean | undefined;
  defaultCommitMessage?: string | undefined;
  gitOps?: GitOpsType | undefined;
  password?: string | undefined;
  remote?: string | undefined;
  sshKey?: string | undefined;
  strictHostKeyChecking?: boolean | undefined;
  timeout?: number | undefined;
  user?: string | undefined;
};

/** @internal */
export const GitSettings$inboundSchema: z.ZodType<
  GitSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  authType: z.string().optional(),
  autoAction: z.string().optional(),
  autoActionMessage: z.string().optional(),
  autoActionSchedule: z.string().optional(),
  branch: z.string().optional(),
  commitDeploySingleAction: z.boolean().optional(),
  copilotAutoGitCommitMessages: z.boolean().optional(),
  defaultCommitMessage: z.string().optional(),
  gitOps: GitOpsType$inboundSchema.optional(),
  password: z.string().optional(),
  remote: z.string().optional(),
  sshKey: z.string().optional(),
  strictHostKeyChecking: z.boolean().optional(),
  timeout: z.number().optional(),
  user: z.string().optional(),
});

/** @internal */
export type GitSettings$Outbound = {
  authType?: string | undefined;
  autoAction?: string | undefined;
  autoActionMessage?: string | undefined;
  autoActionSchedule?: string | undefined;
  branch?: string | undefined;
  commitDeploySingleAction?: boolean | undefined;
  copilotAutoGitCommitMessages?: boolean | undefined;
  defaultCommitMessage?: string | undefined;
  gitOps?: string | undefined;
  password?: string | undefined;
  remote?: string | undefined;
  sshKey?: string | undefined;
  strictHostKeyChecking?: boolean | undefined;
  timeout?: number | undefined;
  user?: string | undefined;
};

/** @internal */
export const GitSettings$outboundSchema: z.ZodType<
  GitSettings$Outbound,
  z.ZodTypeDef,
  GitSettings
> = z.object({
  authType: z.string().optional(),
  autoAction: z.string().optional(),
  autoActionMessage: z.string().optional(),
  autoActionSchedule: z.string().optional(),
  branch: z.string().optional(),
  commitDeploySingleAction: z.boolean().optional(),
  copilotAutoGitCommitMessages: z.boolean().optional(),
  defaultCommitMessage: z.string().optional(),
  gitOps: GitOpsType$outboundSchema.optional(),
  password: z.string().optional(),
  remote: z.string().optional(),
  sshKey: z.string().optional(),
  strictHostKeyChecking: z.boolean().optional(),
  timeout: z.number().optional(),
  user: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitSettings$ {
  /** @deprecated use `GitSettings$inboundSchema` instead. */
  export const inboundSchema = GitSettings$inboundSchema;
  /** @deprecated use `GitSettings$outboundSchema` instead. */
  export const outboundSchema = GitSettings$outboundSchema;
  /** @deprecated use `GitSettings$Outbound` instead. */
  export type Outbound = GitSettings$Outbound;
}

export function gitSettingsToJSON(gitSettings: GitSettings): string {
  return JSON.stringify(GitSettings$outboundSchema.parse(gitSettings));
}

export function gitSettingsFromJSON(
  jsonString: string,
): SafeParseResult<GitSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitSettings' from JSON`,
  );
}
