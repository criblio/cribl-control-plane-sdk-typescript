/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputS3Type = {
  S3: "s3",
} as const;
export type OutputS3Type = ClosedEnum<typeof OutputS3Type>;

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const OutputS3AuthenticationMethod = {
  /**
   * Auto
   */
  Auto: "auto",
  /**
   * Manual
   */
  Manual: "manual",
  /**
   * Secret Key pair
   */
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type OutputS3AuthenticationMethod = OpenEnum<
  typeof OutputS3AuthenticationMethod
>;

/**
 * Signature version to use for signing S3 requests
 */
export const OutputS3SignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing S3 requests
 */
export type OutputS3SignatureVersion = OpenEnum<
  typeof OutputS3SignatureVersion
>;

/**
 * Object ACL to assign to uploaded objects
 */
export const OutputS3ObjectACL = {
  /**
   * Private
   */
  Private: "private",
  /**
   * Public Read Only
   */
  PublicRead: "public-read",
  /**
   * Public Read/Write
   */
  PublicReadWrite: "public-read-write",
  /**
   * Authenticated Read Only
   */
  AuthenticatedRead: "authenticated-read",
  /**
   * AWS EC2 AMI Read Only
   */
  AwsExecRead: "aws-exec-read",
  /**
   * Bucket Owner Read Only
   */
  BucketOwnerRead: "bucket-owner-read",
  /**
   * Bucket Owner Full Control
   */
  BucketOwnerFullControl: "bucket-owner-full-control",
} as const;
/**
 * Object ACL to assign to uploaded objects
 */
export type OutputS3ObjectACL = OpenEnum<typeof OutputS3ObjectACL>;

/**
 * Storage class to select for uploaded objects
 */
export const OutputS3StorageClass = {
  /**
   * Standard
   */
  Standard: "STANDARD",
  /**
   * Reduced Redundancy Storage
   */
  ReducedRedundancy: "REDUCED_REDUNDANCY",
  /**
   * Standard, Infrequent Access
   */
  StandardIa: "STANDARD_IA",
  /**
   * One Zone, Infrequent Access
   */
  OnezoneIa: "ONEZONE_IA",
  /**
   * Intelligent Tiering
   */
  IntelligentTiering: "INTELLIGENT_TIERING",
  /**
   * Glacier Flexible Retrieval
   */
  Glacier: "GLACIER",
  /**
   * Glacier Instant Retrieval
   */
  GlacierIr: "GLACIER_IR",
  /**
   * Glacier Deep Archive
   */
  DeepArchive: "DEEP_ARCHIVE",
} as const;
/**
 * Storage class to select for uploaded objects
 */
export type OutputS3StorageClass = OpenEnum<typeof OutputS3StorageClass>;

export const OutputS3ServerSideEncryptionForUploadedObjects = {
  /**
   * Amazon S3 Managed Key
   */
  Aes256: "AES256",
  /**
   * AWS KMS Managed Key
   */
  AwsKms: "aws:kms",
} as const;
export type OutputS3ServerSideEncryptionForUploadedObjects = OpenEnum<
  typeof OutputS3ServerSideEncryptionForUploadedObjects
>;

/**
 * Format of the output data
 */
export const OutputS3DataFormat = {
  /**
   * JSON
   */
  Json: "json",
  /**
   * Raw
   */
  Raw: "raw",
  /**
   * Parquet
   */
  Parquet: "parquet",
} as const;
/**
 * Format of the output data
 */
export type OutputS3DataFormat = OpenEnum<typeof OutputS3DataFormat>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputS3BackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputS3BackpressureBehavior = OpenEnum<
  typeof OutputS3BackpressureBehavior
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputS3DiskSpaceProtection = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputS3DiskSpaceProtection = OpenEnum<
  typeof OutputS3DiskSpaceProtection
>;

/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export const OutputS3Compression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Data compression format to apply to HTTP content before it is delivered
 */
export type OutputS3Compression = OpenEnum<typeof OutputS3Compression>;

/**
 * Compression level to apply before moving files to final destination
 */
export const OutputS3CompressionLevel = {
  /**
   * Best Speed
   */
  BestSpeed: "best_speed",
  /**
   * Normal
   */
  Normal: "normal",
  /**
   * Best Compression
   */
  BestCompression: "best_compression",
} as const;
/**
 * Compression level to apply before moving files to final destination
 */
export type OutputS3CompressionLevel = OpenEnum<
  typeof OutputS3CompressionLevel
>;

/**
 * Determines which data types are supported and how they are represented
 */
export const OutputS3ParquetVersion = {
  /**
   * 1.0
   */
  Parquet10: "PARQUET_1_0",
  /**
   * 2.4
   */
  Parquet24: "PARQUET_2_4",
  /**
   * 2.6
   */
  Parquet26: "PARQUET_2_6",
} as const;
/**
 * Determines which data types are supported and how they are represented
 */
export type OutputS3ParquetVersion = OpenEnum<typeof OutputS3ParquetVersion>;

/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export const OutputS3DataPageVersion = {
  /**
   * V1
   */
  DataPageV1: "DATA_PAGE_V1",
  /**
   * V2
   */
  DataPageV2: "DATA_PAGE_V2",
} as const;
/**
 * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
 */
export type OutputS3DataPageVersion = OpenEnum<typeof OutputS3DataPageVersion>;

export type OutputS3KeyValueMetadatum = {
  key?: string | undefined;
  value: string;
};

export type OutputS3 = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputS3Type;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Name of the destination S3 bucket. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at initialization time. Example referencing a Global Variable: `myBucket-${C.vars.myVar}`
   */
  bucket: string;
  /**
   * Region where the S3 bucket is located
   */
  region?: string | undefined;
  /**
   * Secret key. This value can be a constant or a JavaScript expression. Example: `${C.env.SOME_SECRET}`)
   */
  awsSecretKey?: string | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: OutputS3AuthenticationMethod | undefined;
  /**
   * S3 service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to S3-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing S3 requests
   */
  signatureVersion?: OutputS3SignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access S3
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Filesystem location in which to buffer files, before compressing and moving to final destination. Use performant and stable storage.
   */
  stagePath?: string | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Prefix to prepend to files before uploading. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `myKeyPrefix-${C.vars.myVar}`
   */
  destPath?: string | undefined;
  /**
   * Object ACL to assign to uploaded objects
   */
  objectACL?: OutputS3ObjectACL | undefined;
  /**
   * Storage class to select for uploaded objects
   */
  storageClass?: OutputS3StorageClass | undefined;
  serverSideEncryption?:
    | OutputS3ServerSideEncryptionForUploadedObjects
    | undefined;
  /**
   * ID or ARN of the KMS customer-managed key to use for encryption
   */
  kmsKeyId?: string | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * JavaScript expression defining how files are partitioned and organized. Default is date-based. If blank, Stream will fall back to the event's __partition field value – if present – otherwise to each location's root directory.
   */
  partitionExpr?: string | undefined;
  /**
   * Format of the output data
   */
  format?: OutputS3DataFormat | undefined;
  /**
   * JavaScript expression to define the output filename prefix (can be constant)
   */
  baseFileName?: string | undefined;
  /**
   * JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`).
   */
  fileNameSuffix?: string | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * If set, this line will be written to the beginning of each output file
   */
  headerLine?: string | undefined;
  /**
   * Buffer size used to write to a file
   */
  writeHighWaterMark?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputS3BackpressureBehavior | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?: OutputS3DiskSpaceProtection | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of parts to upload in parallel per file. Minimum part size is 5MB.
   */
  maxConcurrentFileParts?: number | undefined;
  /**
   * Disable if you can access files within the bucket but not the bucket itself
   */
  verifyPermissions?: boolean | undefined;
  /**
   * Maximum number of files that can be waiting for upload before backpressure is applied
   */
  maxClosingFilesToBackpressure?: number | undefined;
  description?: string | undefined;
  /**
   * This value can be a constant or a JavaScript expression (`${C.env.SOME_ACCESS_KEY}`)
   */
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  /**
   * Data compression format to apply to HTTP content before it is delivered
   */
  compress?: OutputS3Compression | undefined;
  /**
   * Compression level to apply before moving files to final destination
   */
  compressionLevel?: OutputS3CompressionLevel | undefined;
  /**
   * Automatically calculate the schema based on the events of each Parquet file generated
   */
  automaticSchema?: boolean | undefined;
  /**
   * Determines which data types are supported and how they are represented
   */
  parquetVersion?: OutputS3ParquetVersion | undefined;
  /**
   * Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
   */
  parquetDataPageVersion?: OutputS3DataPageVersion | undefined;
  /**
   * The number of rows that every group will contain. The final group can contain a smaller number of rows.
   */
  parquetRowGroupLength?: number | undefined;
  /**
   * Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression.
   */
  parquetPageSize?: string | undefined;
  /**
   * Log up to 3 rows that @{product} skips due to data mismatch
   */
  shouldLogInvalidRows?: boolean | undefined;
  /**
   * The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: "key":"OCSF Event Class", "value":"9001"
   */
  keyValueMetadata?: Array<OutputS3KeyValueMetadatum> | undefined;
  /**
   * Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics.
   */
  enableStatistics?: boolean | undefined;
  /**
   * One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping.
   */
  enableWritePageIndex?: boolean | undefined;
  /**
   * Parquet tools can use the checksum of a Parquet page to verify data integrity
   */
  enablePageChecksum?: boolean | undefined;
  /**
   * How frequently, in seconds, to clean up empty directories
   */
  emptyDirCleanupSec?: number | undefined;
  /**
   * Storage location for files that fail to reach their final destination after maximum retries are exceeded
   */
  deadletterPath?: string | undefined;
  /**
   * The maximum number of times a file will attempt to move to its final destination before being dead-lettered
   */
  maxRetryNum?: number | undefined;
};

/** @internal */
export const OutputS3Type$inboundSchema: z.ZodNativeEnum<typeof OutputS3Type> =
  z.nativeEnum(OutputS3Type);

/** @internal */
export const OutputS3Type$outboundSchema: z.ZodNativeEnum<typeof OutputS3Type> =
  OutputS3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3Type$ {
  /** @deprecated use `OutputS3Type$inboundSchema` instead. */
  export const inboundSchema = OutputS3Type$inboundSchema;
  /** @deprecated use `OutputS3Type$outboundSchema` instead. */
  export const outboundSchema = OutputS3Type$outboundSchema;
}

/** @internal */
export const OutputS3AuthenticationMethod$inboundSchema: z.ZodType<
  OutputS3AuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3AuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3AuthenticationMethod$outboundSchema: z.ZodType<
  OutputS3AuthenticationMethod,
  z.ZodTypeDef,
  OutputS3AuthenticationMethod
> = z.union([
  z.nativeEnum(OutputS3AuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3AuthenticationMethod$ {
  /** @deprecated use `OutputS3AuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputS3AuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputS3AuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = OutputS3AuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputS3SignatureVersion$inboundSchema: z.ZodType<
  OutputS3SignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3SignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3SignatureVersion$outboundSchema: z.ZodType<
  OutputS3SignatureVersion,
  z.ZodTypeDef,
  OutputS3SignatureVersion
> = z.union([
  z.nativeEnum(OutputS3SignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3SignatureVersion$ {
  /** @deprecated use `OutputS3SignatureVersion$inboundSchema` instead. */
  export const inboundSchema = OutputS3SignatureVersion$inboundSchema;
  /** @deprecated use `OutputS3SignatureVersion$outboundSchema` instead. */
  export const outboundSchema = OutputS3SignatureVersion$outboundSchema;
}

/** @internal */
export const OutputS3ObjectACL$inboundSchema: z.ZodType<
  OutputS3ObjectACL,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3ObjectACL),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3ObjectACL$outboundSchema: z.ZodType<
  OutputS3ObjectACL,
  z.ZodTypeDef,
  OutputS3ObjectACL
> = z.union([
  z.nativeEnum(OutputS3ObjectACL),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3ObjectACL$ {
  /** @deprecated use `OutputS3ObjectACL$inboundSchema` instead. */
  export const inboundSchema = OutputS3ObjectACL$inboundSchema;
  /** @deprecated use `OutputS3ObjectACL$outboundSchema` instead. */
  export const outboundSchema = OutputS3ObjectACL$outboundSchema;
}

/** @internal */
export const OutputS3StorageClass$inboundSchema: z.ZodType<
  OutputS3StorageClass,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3StorageClass),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3StorageClass$outboundSchema: z.ZodType<
  OutputS3StorageClass,
  z.ZodTypeDef,
  OutputS3StorageClass
> = z.union([
  z.nativeEnum(OutputS3StorageClass),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3StorageClass$ {
  /** @deprecated use `OutputS3StorageClass$inboundSchema` instead. */
  export const inboundSchema = OutputS3StorageClass$inboundSchema;
  /** @deprecated use `OutputS3StorageClass$outboundSchema` instead. */
  export const outboundSchema = OutputS3StorageClass$outboundSchema;
}

/** @internal */
export const OutputS3ServerSideEncryptionForUploadedObjects$inboundSchema:
  z.ZodType<
    OutputS3ServerSideEncryptionForUploadedObjects,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(OutputS3ServerSideEncryptionForUploadedObjects),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const OutputS3ServerSideEncryptionForUploadedObjects$outboundSchema:
  z.ZodType<
    OutputS3ServerSideEncryptionForUploadedObjects,
    z.ZodTypeDef,
    OutputS3ServerSideEncryptionForUploadedObjects
  > = z.union([
    z.nativeEnum(OutputS3ServerSideEncryptionForUploadedObjects),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3ServerSideEncryptionForUploadedObjects$ {
  /** @deprecated use `OutputS3ServerSideEncryptionForUploadedObjects$inboundSchema` instead. */
  export const inboundSchema =
    OutputS3ServerSideEncryptionForUploadedObjects$inboundSchema;
  /** @deprecated use `OutputS3ServerSideEncryptionForUploadedObjects$outboundSchema` instead. */
  export const outboundSchema =
    OutputS3ServerSideEncryptionForUploadedObjects$outboundSchema;
}

/** @internal */
export const OutputS3DataFormat$inboundSchema: z.ZodType<
  OutputS3DataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3DataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3DataFormat$outboundSchema: z.ZodType<
  OutputS3DataFormat,
  z.ZodTypeDef,
  OutputS3DataFormat
> = z.union([
  z.nativeEnum(OutputS3DataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3DataFormat$ {
  /** @deprecated use `OutputS3DataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputS3DataFormat$inboundSchema;
  /** @deprecated use `OutputS3DataFormat$outboundSchema` instead. */
  export const outboundSchema = OutputS3DataFormat$outboundSchema;
}

/** @internal */
export const OutputS3BackpressureBehavior$inboundSchema: z.ZodType<
  OutputS3BackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3BackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3BackpressureBehavior$outboundSchema: z.ZodType<
  OutputS3BackpressureBehavior,
  z.ZodTypeDef,
  OutputS3BackpressureBehavior
> = z.union([
  z.nativeEnum(OutputS3BackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3BackpressureBehavior$ {
  /** @deprecated use `OutputS3BackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputS3BackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputS3BackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputS3BackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputS3DiskSpaceProtection$inboundSchema: z.ZodType<
  OutputS3DiskSpaceProtection,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3DiskSpaceProtection),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3DiskSpaceProtection$outboundSchema: z.ZodType<
  OutputS3DiskSpaceProtection,
  z.ZodTypeDef,
  OutputS3DiskSpaceProtection
> = z.union([
  z.nativeEnum(OutputS3DiskSpaceProtection),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3DiskSpaceProtection$ {
  /** @deprecated use `OutputS3DiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema = OutputS3DiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputS3DiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema = OutputS3DiskSpaceProtection$outboundSchema;
}

/** @internal */
export const OutputS3Compression$inboundSchema: z.ZodType<
  OutputS3Compression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3Compression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3Compression$outboundSchema: z.ZodType<
  OutputS3Compression,
  z.ZodTypeDef,
  OutputS3Compression
> = z.union([
  z.nativeEnum(OutputS3Compression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3Compression$ {
  /** @deprecated use `OutputS3Compression$inboundSchema` instead. */
  export const inboundSchema = OutputS3Compression$inboundSchema;
  /** @deprecated use `OutputS3Compression$outboundSchema` instead. */
  export const outboundSchema = OutputS3Compression$outboundSchema;
}

/** @internal */
export const OutputS3CompressionLevel$inboundSchema: z.ZodType<
  OutputS3CompressionLevel,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3CompressionLevel),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3CompressionLevel$outboundSchema: z.ZodType<
  OutputS3CompressionLevel,
  z.ZodTypeDef,
  OutputS3CompressionLevel
> = z.union([
  z.nativeEnum(OutputS3CompressionLevel),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3CompressionLevel$ {
  /** @deprecated use `OutputS3CompressionLevel$inboundSchema` instead. */
  export const inboundSchema = OutputS3CompressionLevel$inboundSchema;
  /** @deprecated use `OutputS3CompressionLevel$outboundSchema` instead. */
  export const outboundSchema = OutputS3CompressionLevel$outboundSchema;
}

/** @internal */
export const OutputS3ParquetVersion$inboundSchema: z.ZodType<
  OutputS3ParquetVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3ParquetVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3ParquetVersion$outboundSchema: z.ZodType<
  OutputS3ParquetVersion,
  z.ZodTypeDef,
  OutputS3ParquetVersion
> = z.union([
  z.nativeEnum(OutputS3ParquetVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3ParquetVersion$ {
  /** @deprecated use `OutputS3ParquetVersion$inboundSchema` instead. */
  export const inboundSchema = OutputS3ParquetVersion$inboundSchema;
  /** @deprecated use `OutputS3ParquetVersion$outboundSchema` instead. */
  export const outboundSchema = OutputS3ParquetVersion$outboundSchema;
}

/** @internal */
export const OutputS3DataPageVersion$inboundSchema: z.ZodType<
  OutputS3DataPageVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputS3DataPageVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputS3DataPageVersion$outboundSchema: z.ZodType<
  OutputS3DataPageVersion,
  z.ZodTypeDef,
  OutputS3DataPageVersion
> = z.union([
  z.nativeEnum(OutputS3DataPageVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3DataPageVersion$ {
  /** @deprecated use `OutputS3DataPageVersion$inboundSchema` instead. */
  export const inboundSchema = OutputS3DataPageVersion$inboundSchema;
  /** @deprecated use `OutputS3DataPageVersion$outboundSchema` instead. */
  export const outboundSchema = OutputS3DataPageVersion$outboundSchema;
}

/** @internal */
export const OutputS3KeyValueMetadatum$inboundSchema: z.ZodType<
  OutputS3KeyValueMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/** @internal */
export type OutputS3KeyValueMetadatum$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const OutputS3KeyValueMetadatum$outboundSchema: z.ZodType<
  OutputS3KeyValueMetadatum$Outbound,
  z.ZodTypeDef,
  OutputS3KeyValueMetadatum
> = z.object({
  key: z.string().default(""),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3KeyValueMetadatum$ {
  /** @deprecated use `OutputS3KeyValueMetadatum$inboundSchema` instead. */
  export const inboundSchema = OutputS3KeyValueMetadatum$inboundSchema;
  /** @deprecated use `OutputS3KeyValueMetadatum$outboundSchema` instead. */
  export const outboundSchema = OutputS3KeyValueMetadatum$outboundSchema;
  /** @deprecated use `OutputS3KeyValueMetadatum$Outbound` instead. */
  export type Outbound = OutputS3KeyValueMetadatum$Outbound;
}

export function outputS3KeyValueMetadatumToJSON(
  outputS3KeyValueMetadatum: OutputS3KeyValueMetadatum,
): string {
  return JSON.stringify(
    OutputS3KeyValueMetadatum$outboundSchema.parse(outputS3KeyValueMetadatum),
  );
}

export function outputS3KeyValueMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<OutputS3KeyValueMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputS3KeyValueMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputS3KeyValueMetadatum' from JSON`,
  );
}

/** @internal */
export const OutputS3$inboundSchema: z.ZodType<
  OutputS3,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputS3Type$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string().optional(),
  awsSecretKey: z.string().optional(),
  awsAuthenticationMethod: OutputS3AuthenticationMethod$inboundSchema.default(
    "auto",
  ),
  endpoint: z.string().optional(),
  signatureVersion: OutputS3SignatureVersion$inboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  destPath: z.string().default(""),
  objectACL: OutputS3ObjectACL$inboundSchema.default("private"),
  storageClass: OutputS3StorageClass$inboundSchema.optional(),
  serverSideEncryption:
    OutputS3ServerSideEncryptionForUploadedObjects$inboundSchema.optional(),
  kmsKeyId: z.string().optional(),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputS3DataFormat$inboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputS3BackpressureBehavior$inboundSchema.default("block"),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputS3DiskSpaceProtection$inboundSchema.default(
    "block",
  ),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxConcurrentFileParts: z.number().default(4),
  verifyPermissions: z.boolean().default(true),
  maxClosingFilesToBackpressure: z.number().default(100),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  compress: OutputS3Compression$inboundSchema.default("gzip"),
  compressionLevel: OutputS3CompressionLevel$inboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputS3ParquetVersion$inboundSchema.default("PARQUET_2_6"),
  parquetDataPageVersion: OutputS3DataPageVersion$inboundSchema.default(
    "DATA_PAGE_V2",
  ),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputS3KeyValueMetadatum$inboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/** @internal */
export type OutputS3$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  bucket: string;
  region?: string | undefined;
  awsSecretKey?: string | undefined;
  awsAuthenticationMethod: string;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  stagePath: string;
  addIdToStagePath: boolean;
  destPath: string;
  objectACL: string;
  storageClass?: string | undefined;
  serverSideEncryption?: string | undefined;
  kmsKeyId?: string | undefined;
  removeEmptyDirs: boolean;
  partitionExpr: string;
  format: string;
  baseFileName: string;
  fileNameSuffix: string;
  maxFileSizeMB: number;
  maxOpenFiles: number;
  headerLine: string;
  writeHighWaterMark: number;
  onBackpressure: string;
  deadletterEnabled: boolean;
  onDiskFullBackpressure: string;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxConcurrentFileParts: number;
  verifyPermissions: boolean;
  maxClosingFilesToBackpressure: number;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  compress: string;
  compressionLevel: string;
  automaticSchema: boolean;
  parquetVersion: string;
  parquetDataPageVersion: string;
  parquetRowGroupLength: number;
  parquetPageSize: string;
  shouldLogInvalidRows?: boolean | undefined;
  keyValueMetadata?: Array<OutputS3KeyValueMetadatum$Outbound> | undefined;
  enableStatistics: boolean;
  enableWritePageIndex: boolean;
  enablePageChecksum: boolean;
  emptyDirCleanupSec: number;
  deadletterPath: string;
  maxRetryNum: number;
};

/** @internal */
export const OutputS3$outboundSchema: z.ZodType<
  OutputS3$Outbound,
  z.ZodTypeDef,
  OutputS3
> = z.object({
  id: z.string().optional(),
  type: OutputS3Type$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  bucket: z.string(),
  region: z.string().optional(),
  awsSecretKey: z.string().optional(),
  awsAuthenticationMethod: OutputS3AuthenticationMethod$outboundSchema.default(
    "auto",
  ),
  endpoint: z.string().optional(),
  signatureVersion: OutputS3SignatureVersion$outboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  destPath: z.string().default(""),
  objectACL: OutputS3ObjectACL$outboundSchema.default("private"),
  storageClass: OutputS3StorageClass$outboundSchema.optional(),
  serverSideEncryption:
    OutputS3ServerSideEncryptionForUploadedObjects$outboundSchema.optional(),
  kmsKeyId: z.string().optional(),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputS3DataFormat$outboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputS3BackpressureBehavior$outboundSchema.default("block"),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputS3DiskSpaceProtection$outboundSchema.default(
    "block",
  ),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxConcurrentFileParts: z.number().default(4),
  verifyPermissions: z.boolean().default(true),
  maxClosingFilesToBackpressure: z.number().default(100),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  compress: OutputS3Compression$outboundSchema.default("gzip"),
  compressionLevel: OutputS3CompressionLevel$outboundSchema.default(
    "best_speed",
  ),
  automaticSchema: z.boolean().default(false),
  parquetVersion: OutputS3ParquetVersion$outboundSchema.default("PARQUET_2_6"),
  parquetDataPageVersion: OutputS3DataPageVersion$outboundSchema.default(
    "DATA_PAGE_V2",
  ),
  parquetRowGroupLength: z.number().default(10000),
  parquetPageSize: z.string().default("1MB"),
  shouldLogInvalidRows: z.boolean().optional(),
  keyValueMetadata: z.array(
    z.lazy(() => OutputS3KeyValueMetadatum$outboundSchema),
  ).optional(),
  enableStatistics: z.boolean().default(true),
  enableWritePageIndex: z.boolean().default(true),
  enablePageChecksum: z.boolean().default(false),
  emptyDirCleanupSec: z.number().default(300),
  deadletterPath: z.string().default("$CRIBL_HOME/state/outputs/dead-letter"),
  maxRetryNum: z.number().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputS3$ {
  /** @deprecated use `OutputS3$inboundSchema` instead. */
  export const inboundSchema = OutputS3$inboundSchema;
  /** @deprecated use `OutputS3$outboundSchema` instead. */
  export const outboundSchema = OutputS3$outboundSchema;
  /** @deprecated use `OutputS3$Outbound` instead. */
  export type Outbound = OutputS3$Outbound;
}

export function outputS3ToJSON(outputS3: OutputS3): string {
  return JSON.stringify(OutputS3$outboundSchema.parse(outputS3));
}

export function outputS3FromJSON(
  jsonString: string,
): SafeParseResult<OutputS3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputS3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputS3' from JSON`,
  );
}
