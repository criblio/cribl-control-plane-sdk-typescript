/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputDefaultType = {
  Default: "default",
} as const;
export type OutputDefaultType = OpenEnum<typeof OutputDefaultType>;

export type OutputDefault = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputDefaultType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * ID of the default output. This will be used whenever a nonexistent/deleted output is referenced.
   */
  defaultId: string;
};

/** @internal */
export const OutputDefaultType$inboundSchema: z.ZodType<
  OutputDefaultType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDefaultType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDefaultType$outboundSchema: z.ZodType<
  OutputDefaultType,
  z.ZodTypeDef,
  OutputDefaultType
> = z.union([
  z.nativeEnum(OutputDefaultType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDefaultType$ {
  /** @deprecated use `OutputDefaultType$inboundSchema` instead. */
  export const inboundSchema = OutputDefaultType$inboundSchema;
  /** @deprecated use `OutputDefaultType$outboundSchema` instead. */
  export const outboundSchema = OutputDefaultType$outboundSchema;
}

/** @internal */
export const OutputDefault$inboundSchema: z.ZodType<
  OutputDefault,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputDefaultType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  defaultId: z.string(),
});

/** @internal */
export type OutputDefault$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  defaultId: string;
};

/** @internal */
export const OutputDefault$outboundSchema: z.ZodType<
  OutputDefault$Outbound,
  z.ZodTypeDef,
  OutputDefault
> = z.object({
  id: z.string().optional(),
  type: OutputDefaultType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  defaultId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDefault$ {
  /** @deprecated use `OutputDefault$inboundSchema` instead. */
  export const inboundSchema = OutputDefault$inboundSchema;
  /** @deprecated use `OutputDefault$outboundSchema` instead. */
  export const outboundSchema = OutputDefault$outboundSchema;
  /** @deprecated use `OutputDefault$Outbound` instead. */
  export type Outbound = OutputDefault$Outbound;
}

export function outputDefaultToJSON(outputDefault: OutputDefault): string {
  return JSON.stringify(OutputDefault$outboundSchema.parse(outputDefault));
}

export function outputDefaultFromJSON(
  jsonString: string,
): SafeParseResult<OutputDefault, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputDefault$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputDefault' from JSON`,
  );
}
