/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputSnsType = {
  Sns: "sns",
} as const;
export type OutputSnsType = OpenEnum<typeof OutputSnsType>;

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const OutputSnsAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type OutputSnsAuthenticationMethod = OpenEnum<
  typeof OutputSnsAuthenticationMethod
>;

/**
 * Signature version to use for signing SNS requests
 */
export const OutputSnsSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing SNS requests
 */
export type OutputSnsSignatureVersion = OpenEnum<
  typeof OutputSnsSignatureVersion
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputSnsBackpressureBehavior = {
  Block: "block",
  Drop: "drop",
  Queue: "queue",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputSnsBackpressureBehavior = OpenEnum<
  typeof OutputSnsBackpressureBehavior
>;

/**
 * Codec to use to compress the persisted data
 */
export const OutputSnsCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type OutputSnsCompression = OpenEnum<typeof OutputSnsCompression>;

/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export const OutputSnsQueueFullBehavior = {
  Block: "block",
  Drop: "drop",
} as const;
/**
 * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
 */
export type OutputSnsQueueFullBehavior = OpenEnum<
  typeof OutputSnsQueueFullBehavior
>;

/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export const OutputSnsMode = {
  Error: "error",
  Backpressure: "backpressure",
  Always: "always",
} as const;
/**
 * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
 */
export type OutputSnsMode = OpenEnum<typeof OutputSnsMode>;

export type OutputSnsPqControls = {};

export type OutputSns = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputSnsType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * The ARN of the SNS topic to send events to. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. E.g., 'https://host:port/myQueueName'. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at initialization time. Example referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`
   */
  topicArn: string;
  /**
   * Messages in the same group are processed in a FIFO manner. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
   */
  messageGroupId: string;
  /**
   * Maximum number of retries before the output returns an error. Note that not all errors are retryable. The retries use an exponential backoff policy.
   */
  maxRetries?: number | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: OutputSnsAuthenticationMethod | undefined;
  awsSecretKey?: string | undefined;
  /**
   * Region where the SNS is located
   */
  region?: string | undefined;
  /**
   * SNS service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to SNS-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing SNS requests
   */
  signatureVersion?: OutputSnsSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * Use Assume Role credentials to access SNS
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputSnsBackpressureBehavior | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
   */
  pqMaxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  pqMaxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
   */
  pqPath?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  pqCompress?: OutputSnsCompression | undefined;
  /**
   * How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
   */
  pqOnBackpressure?: OutputSnsQueueFullBehavior | undefined;
  /**
   * In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
   */
  pqMode?: OutputSnsMode | undefined;
  pqControls?: OutputSnsPqControls | undefined;
};

/** @internal */
export const OutputSnsType$inboundSchema: z.ZodType<
  OutputSnsType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSnsType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSnsType$outboundSchema: z.ZodType<
  OutputSnsType,
  z.ZodTypeDef,
  OutputSnsType
> = z.union([
  z.nativeEnum(OutputSnsType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnsType$ {
  /** @deprecated use `OutputSnsType$inboundSchema` instead. */
  export const inboundSchema = OutputSnsType$inboundSchema;
  /** @deprecated use `OutputSnsType$outboundSchema` instead. */
  export const outboundSchema = OutputSnsType$outboundSchema;
}

/** @internal */
export const OutputSnsAuthenticationMethod$inboundSchema: z.ZodType<
  OutputSnsAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSnsAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSnsAuthenticationMethod$outboundSchema: z.ZodType<
  OutputSnsAuthenticationMethod,
  z.ZodTypeDef,
  OutputSnsAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputSnsAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnsAuthenticationMethod$ {
  /** @deprecated use `OutputSnsAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema = OutputSnsAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputSnsAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema = OutputSnsAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputSnsSignatureVersion$inboundSchema: z.ZodType<
  OutputSnsSignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSnsSignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSnsSignatureVersion$outboundSchema: z.ZodType<
  OutputSnsSignatureVersion,
  z.ZodTypeDef,
  OutputSnsSignatureVersion
> = z.union([
  z.nativeEnum(OutputSnsSignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnsSignatureVersion$ {
  /** @deprecated use `OutputSnsSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = OutputSnsSignatureVersion$inboundSchema;
  /** @deprecated use `OutputSnsSignatureVersion$outboundSchema` instead. */
  export const outboundSchema = OutputSnsSignatureVersion$outboundSchema;
}

/** @internal */
export const OutputSnsBackpressureBehavior$inboundSchema: z.ZodType<
  OutputSnsBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSnsBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSnsBackpressureBehavior$outboundSchema: z.ZodType<
  OutputSnsBackpressureBehavior,
  z.ZodTypeDef,
  OutputSnsBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputSnsBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnsBackpressureBehavior$ {
  /** @deprecated use `OutputSnsBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSnsBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputSnsBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSnsBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputSnsCompression$inboundSchema: z.ZodType<
  OutputSnsCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSnsCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSnsCompression$outboundSchema: z.ZodType<
  OutputSnsCompression,
  z.ZodTypeDef,
  OutputSnsCompression
> = z.union([
  z.nativeEnum(OutputSnsCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnsCompression$ {
  /** @deprecated use `OutputSnsCompression$inboundSchema` instead. */
  export const inboundSchema = OutputSnsCompression$inboundSchema;
  /** @deprecated use `OutputSnsCompression$outboundSchema` instead. */
  export const outboundSchema = OutputSnsCompression$outboundSchema;
}

/** @internal */
export const OutputSnsQueueFullBehavior$inboundSchema: z.ZodType<
  OutputSnsQueueFullBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSnsQueueFullBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSnsQueueFullBehavior$outboundSchema: z.ZodType<
  OutputSnsQueueFullBehavior,
  z.ZodTypeDef,
  OutputSnsQueueFullBehavior
> = z.union([
  z.nativeEnum(OutputSnsQueueFullBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnsQueueFullBehavior$ {
  /** @deprecated use `OutputSnsQueueFullBehavior$inboundSchema` instead. */
  export const inboundSchema = OutputSnsQueueFullBehavior$inboundSchema;
  /** @deprecated use `OutputSnsQueueFullBehavior$outboundSchema` instead. */
  export const outboundSchema = OutputSnsQueueFullBehavior$outboundSchema;
}

/** @internal */
export const OutputSnsMode$inboundSchema: z.ZodType<
  OutputSnsMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputSnsMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputSnsMode$outboundSchema: z.ZodType<
  OutputSnsMode,
  z.ZodTypeDef,
  OutputSnsMode
> = z.union([
  z.nativeEnum(OutputSnsMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnsMode$ {
  /** @deprecated use `OutputSnsMode$inboundSchema` instead. */
  export const inboundSchema = OutputSnsMode$inboundSchema;
  /** @deprecated use `OutputSnsMode$outboundSchema` instead. */
  export const outboundSchema = OutputSnsMode$outboundSchema;
}

/** @internal */
export const OutputSnsPqControls$inboundSchema: z.ZodType<
  OutputSnsPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSnsPqControls$Outbound = {};

/** @internal */
export const OutputSnsPqControls$outboundSchema: z.ZodType<
  OutputSnsPqControls$Outbound,
  z.ZodTypeDef,
  OutputSnsPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSnsPqControls$ {
  /** @deprecated use `OutputSnsPqControls$inboundSchema` instead. */
  export const inboundSchema = OutputSnsPqControls$inboundSchema;
  /** @deprecated use `OutputSnsPqControls$outboundSchema` instead. */
  export const outboundSchema = OutputSnsPqControls$outboundSchema;
  /** @deprecated use `OutputSnsPqControls$Outbound` instead. */
  export type Outbound = OutputSnsPqControls$Outbound;
}

export function outputSnsPqControlsToJSON(
  outputSnsPqControls: OutputSnsPqControls,
): string {
  return JSON.stringify(
    OutputSnsPqControls$outboundSchema.parse(outputSnsPqControls),
  );
}

export function outputSnsPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSnsPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSnsPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSnsPqControls' from JSON`,
  );
}

/** @internal */
export const OutputSns$inboundSchema: z.ZodType<
  OutputSns,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputSnsType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  topicArn: z.string(),
  messageGroupId: z.string(),
  maxRetries: z.number().optional(),
  awsAuthenticationMethod: OutputSnsAuthenticationMethod$inboundSchema.default(
    "auto",
  ),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: OutputSnsSignatureVersion$inboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  onBackpressure: OutputSnsBackpressureBehavior$inboundSchema.default("block"),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSnsCompression$inboundSchema.default("none"),
  pqOnBackpressure: OutputSnsQueueFullBehavior$inboundSchema.default("block"),
  pqMode: OutputSnsMode$inboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSnsPqControls$inboundSchema).optional(),
});

/** @internal */
export type OutputSns$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  topicArn: string;
  messageGroupId: string;
  maxRetries?: number | undefined;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region?: string | undefined;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  onBackpressure: string;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  pqMaxFileSize: string;
  pqMaxSize: string;
  pqPath: string;
  pqCompress: string;
  pqOnBackpressure: string;
  pqMode: string;
  pqControls?: OutputSnsPqControls$Outbound | undefined;
};

/** @internal */
export const OutputSns$outboundSchema: z.ZodType<
  OutputSns$Outbound,
  z.ZodTypeDef,
  OutputSns
> = z.object({
  id: z.string().optional(),
  type: OutputSnsType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  topicArn: z.string(),
  messageGroupId: z.string(),
  maxRetries: z.number().optional(),
  awsAuthenticationMethod: OutputSnsAuthenticationMethod$outboundSchema.default(
    "auto",
  ),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: OutputSnsSignatureVersion$outboundSchema.default("v4"),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  enableAssumeRole: z.boolean().default(false),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  onBackpressure: OutputSnsBackpressureBehavior$outboundSchema.default("block"),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  pqMaxFileSize: z.string().default("1 MB"),
  pqMaxSize: z.string().default("5GB"),
  pqPath: z.string().default("$CRIBL_HOME/state/queues"),
  pqCompress: OutputSnsCompression$outboundSchema.default("none"),
  pqOnBackpressure: OutputSnsQueueFullBehavior$outboundSchema.default("block"),
  pqMode: OutputSnsMode$outboundSchema.default("error"),
  pqControls: z.lazy(() => OutputSnsPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSns$ {
  /** @deprecated use `OutputSns$inboundSchema` instead. */
  export const inboundSchema = OutputSns$inboundSchema;
  /** @deprecated use `OutputSns$outboundSchema` instead. */
  export const outboundSchema = OutputSns$outboundSchema;
  /** @deprecated use `OutputSns$Outbound` instead. */
  export type Outbound = OutputSns$Outbound;
}

export function outputSnsToJSON(outputSns: OutputSns): string {
  return JSON.stringify(OutputSns$outboundSchema.parse(outputSns));
}

export function outputSnsFromJSON(
  jsonString: string,
): SafeParseResult<OutputSns, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSns$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSns' from JSON`,
  );
}
