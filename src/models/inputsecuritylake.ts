/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputSecurityLakeType = {
  SecurityLake: "security_lake",
} as const;
export type InputSecurityLakeType = OpenEnum<typeof InputSecurityLakeType>;

export type InputSecurityLakeConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputSecurityLakeMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputSecurityLakeMode = OpenEnum<typeof InputSecurityLakeMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputSecurityLakeCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputSecurityLakeCompression = OpenEnum<
  typeof InputSecurityLakeCompression
>;

export type InputSecurityLakePqControls = {};

export type InputSecurityLakePq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputSecurityLakeMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputSecurityLakeCompression | undefined;
  pqControls?: InputSecurityLakePqControls | undefined;
};

/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export const InputSecurityLakeAuthenticationMethod = {
  Auto: "auto",
  Manual: "manual",
  Secret: "secret",
} as const;
/**
 * AWS authentication method. Choose Auto to use IAM roles.
 */
export type InputSecurityLakeAuthenticationMethod = OpenEnum<
  typeof InputSecurityLakeAuthenticationMethod
>;

/**
 * Signature version to use for signing S3 requests
 */
export const InputSecurityLakeSignatureVersion = {
  V2: "v2",
  V4: "v4",
} as const;
/**
 * Signature version to use for signing S3 requests
 */
export type InputSecurityLakeSignatureVersion = OpenEnum<
  typeof InputSecurityLakeSignatureVersion
>;

export type InputSecurityLakePreprocess = {
  disabled?: boolean | undefined;
  /**
   * Command to feed the data through (via stdin) and process its output (stdout)
   */
  command?: string | undefined;
  /**
   * Arguments to be added to the custom command
   */
  args?: Array<string> | undefined;
};

export type InputSecurityLakeMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputSecurityLakeCheckpointing = {
  /**
   * Resume processing files after an interruption
   */
  enabled?: boolean | undefined;
  /**
   * The number of times to retry processing when a processing error occurs. If Skip file on error is enabled, this setting is ignored.
   */
  retries?: number | undefined;
};

export const InputSecurityLakeTagAfterProcessing = {
  False: "false",
  True: "true",
} as const;
export type InputSecurityLakeTagAfterProcessing = OpenEnum<
  typeof InputSecurityLakeTagAfterProcessing
>;

export type InputSecurityLake = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputSecurityLakeType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputSecurityLakeConnection> | undefined;
  pq?: InputSecurityLakePq | undefined;
  /**
   * The name, URL, or ARN of the SQS queue to read notifications from. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. Example: 'https://host:port/myQueueName'. Value must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
   */
  queueName: string;
  /**
   * Regex matching file names to download and process. Defaults to: .*
   */
  fileFilter?: string | undefined;
  /**
   * SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
   */
  awsAccountId?: string | undefined;
  /**
   * AWS authentication method. Choose Auto to use IAM roles.
   */
  awsAuthenticationMethod?: InputSecurityLakeAuthenticationMethod | undefined;
  awsSecretKey?: string | undefined;
  /**
   * AWS Region where the S3 bucket and SQS queue are located. Required, unless the Queue entry is a URL or ARN that includes a Region.
   */
  region?: string | undefined;
  /**
   * S3 service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to S3-compatible endpoint.
   */
  endpoint?: string | undefined;
  /**
   * Signature version to use for signing S3 requests
   */
  signatureVersion?: InputSecurityLakeSignatureVersion | undefined;
  /**
   * Reuse connections between requests, which can improve performance
   */
  reuseConnections?: boolean | undefined;
  /**
   * Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
   */
  rejectUnauthorized?: boolean | undefined;
  /**
   * A list of event-breaking rulesets that will be applied, in order, to the input data stream
   */
  breakerRulesets?: Array<string> | undefined;
  /**
   * How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
   */
  staleChannelFlushMs?: number | undefined;
  /**
   * The maximum number of messages SQS should return in a poll request. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10.
   */
  maxMessages?: number | undefined;
  /**
   * After messages are retrieved by a ReceiveMessage request, @{product} will hide them from subsequent retrieve requests for at least this duration. You can set this as high as 43200 sec. (12 hours).
   */
  visibilityTimeout?: number | undefined;
  /**
   * How many receiver processes to run. The higher the number, the better the throughput - at the expense of CPU overhead.
   */
  numReceivers?: number | undefined;
  /**
   * Socket inactivity timeout (in seconds). Increase this value if timeouts occur due to backpressure.
   */
  socketTimeout?: number | undefined;
  /**
   * Skip files that trigger a processing error. Disabled by default, which allows retries after processing errors.
   */
  skipOnError?: boolean | undefined;
  /**
   * Attach SQS notification metadata to a __sqsMetadata field on each event
   */
  includeSqsMetadata?: boolean | undefined;
  /**
   * Use Assume Role credentials to access Amazon S3
   */
  enableAssumeRole?: boolean | undefined;
  /**
   * Amazon Resource Name (ARN) of the role to assume
   */
  assumeRoleArn?: string | undefined;
  /**
   * External ID to use when assuming role
   */
  assumeRoleExternalId?: string | undefined;
  /**
   * Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
   */
  durationSeconds?: number | undefined;
  /**
   * Use Assume Role credentials when accessing Amazon SQS
   */
  enableSQSAssumeRole?: boolean | undefined;
  preprocess?: InputSecurityLakePreprocess | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputSecurityLakeMetadatum> | undefined;
  /**
   * Maximum file size for each Parquet chunk
   */
  parquetChunkSizeMB?: number | undefined;
  /**
   * The maximum time allowed for downloading a Parquet chunk. Processing will stop if a chunk cannot be downloaded within the time specified.
   */
  parquetChunkDownloadTimeout?: number | undefined;
  checkpointing?: InputSecurityLakeCheckpointing | undefined;
  /**
   * How long to wait for events before trying polling again. The lower the number the higher the AWS bill. The higher the number the longer it will take for the source to react to configuration changes and system restarts.
   */
  pollTimeout?: number | undefined;
  /**
   * Character encoding to use when parsing ingested data. When not set, @{product} will default to UTF-8 but may incorrectly interpret multi-byte characters.
   */
  encoding?: string | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  /**
   * Select or create a stored secret that references your access key and secret key
   */
  awsSecret?: string | undefined;
  tagAfterProcessing?: InputSecurityLakeTagAfterProcessing | undefined;
  /**
   * The key for the S3 object tag applied after processing. This field accepts an expression for dynamic generation.
   */
  processedTagKey?: string | undefined;
  /**
   * The value for the S3 object tag applied after processing. This field accepts an expression for dynamic generation.
   */
  processedTagValue?: string | undefined;
};

/** @internal */
export const InputSecurityLakeType$inboundSchema: z.ZodType<
  InputSecurityLakeType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSecurityLakeType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSecurityLakeType$outboundSchema: z.ZodType<
  InputSecurityLakeType,
  z.ZodTypeDef,
  InputSecurityLakeType
> = z.union([
  z.nativeEnum(InputSecurityLakeType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakeType$ {
  /** @deprecated use `InputSecurityLakeType$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakeType$inboundSchema;
  /** @deprecated use `InputSecurityLakeType$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLakeType$outboundSchema;
}

/** @internal */
export const InputSecurityLakeConnection$inboundSchema: z.ZodType<
  InputSecurityLakeConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputSecurityLakeConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputSecurityLakeConnection$outboundSchema: z.ZodType<
  InputSecurityLakeConnection$Outbound,
  z.ZodTypeDef,
  InputSecurityLakeConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakeConnection$ {
  /** @deprecated use `InputSecurityLakeConnection$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakeConnection$inboundSchema;
  /** @deprecated use `InputSecurityLakeConnection$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLakeConnection$outboundSchema;
  /** @deprecated use `InputSecurityLakeConnection$Outbound` instead. */
  export type Outbound = InputSecurityLakeConnection$Outbound;
}

export function inputSecurityLakeConnectionToJSON(
  inputSecurityLakeConnection: InputSecurityLakeConnection,
): string {
  return JSON.stringify(
    InputSecurityLakeConnection$outboundSchema.parse(
      inputSecurityLakeConnection,
    ),
  );
}

export function inputSecurityLakeConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputSecurityLakeConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSecurityLakeConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSecurityLakeConnection' from JSON`,
  );
}

/** @internal */
export const InputSecurityLakeMode$inboundSchema: z.ZodType<
  InputSecurityLakeMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSecurityLakeMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSecurityLakeMode$outboundSchema: z.ZodType<
  InputSecurityLakeMode,
  z.ZodTypeDef,
  InputSecurityLakeMode
> = z.union([
  z.nativeEnum(InputSecurityLakeMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakeMode$ {
  /** @deprecated use `InputSecurityLakeMode$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakeMode$inboundSchema;
  /** @deprecated use `InputSecurityLakeMode$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLakeMode$outboundSchema;
}

/** @internal */
export const InputSecurityLakeCompression$inboundSchema: z.ZodType<
  InputSecurityLakeCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSecurityLakeCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSecurityLakeCompression$outboundSchema: z.ZodType<
  InputSecurityLakeCompression,
  z.ZodTypeDef,
  InputSecurityLakeCompression
> = z.union([
  z.nativeEnum(InputSecurityLakeCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakeCompression$ {
  /** @deprecated use `InputSecurityLakeCompression$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakeCompression$inboundSchema;
  /** @deprecated use `InputSecurityLakeCompression$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLakeCompression$outboundSchema;
}

/** @internal */
export const InputSecurityLakePqControls$inboundSchema: z.ZodType<
  InputSecurityLakePqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputSecurityLakePqControls$Outbound = {};

/** @internal */
export const InputSecurityLakePqControls$outboundSchema: z.ZodType<
  InputSecurityLakePqControls$Outbound,
  z.ZodTypeDef,
  InputSecurityLakePqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakePqControls$ {
  /** @deprecated use `InputSecurityLakePqControls$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakePqControls$inboundSchema;
  /** @deprecated use `InputSecurityLakePqControls$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLakePqControls$outboundSchema;
  /** @deprecated use `InputSecurityLakePqControls$Outbound` instead. */
  export type Outbound = InputSecurityLakePqControls$Outbound;
}

export function inputSecurityLakePqControlsToJSON(
  inputSecurityLakePqControls: InputSecurityLakePqControls,
): string {
  return JSON.stringify(
    InputSecurityLakePqControls$outboundSchema.parse(
      inputSecurityLakePqControls,
    ),
  );
}

export function inputSecurityLakePqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputSecurityLakePqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSecurityLakePqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSecurityLakePqControls' from JSON`,
  );
}

/** @internal */
export const InputSecurityLakePq$inboundSchema: z.ZodType<
  InputSecurityLakePq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSecurityLakeMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSecurityLakeCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputSecurityLakePqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type InputSecurityLakePq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputSecurityLakePqControls$Outbound | undefined;
};

/** @internal */
export const InputSecurityLakePq$outboundSchema: z.ZodType<
  InputSecurityLakePq$Outbound,
  z.ZodTypeDef,
  InputSecurityLakePq
> = z.object({
  mode: InputSecurityLakeMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSecurityLakeCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputSecurityLakePqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakePq$ {
  /** @deprecated use `InputSecurityLakePq$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakePq$inboundSchema;
  /** @deprecated use `InputSecurityLakePq$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLakePq$outboundSchema;
  /** @deprecated use `InputSecurityLakePq$Outbound` instead. */
  export type Outbound = InputSecurityLakePq$Outbound;
}

export function inputSecurityLakePqToJSON(
  inputSecurityLakePq: InputSecurityLakePq,
): string {
  return JSON.stringify(
    InputSecurityLakePq$outboundSchema.parse(inputSecurityLakePq),
  );
}

export function inputSecurityLakePqFromJSON(
  jsonString: string,
): SafeParseResult<InputSecurityLakePq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSecurityLakePq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSecurityLakePq' from JSON`,
  );
}

/** @internal */
export const InputSecurityLakeAuthenticationMethod$inboundSchema: z.ZodType<
  InputSecurityLakeAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSecurityLakeAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSecurityLakeAuthenticationMethod$outboundSchema: z.ZodType<
  InputSecurityLakeAuthenticationMethod,
  z.ZodTypeDef,
  InputSecurityLakeAuthenticationMethod
> = z.union([
  z.nativeEnum(InputSecurityLakeAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakeAuthenticationMethod$ {
  /** @deprecated use `InputSecurityLakeAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    InputSecurityLakeAuthenticationMethod$inboundSchema;
  /** @deprecated use `InputSecurityLakeAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    InputSecurityLakeAuthenticationMethod$outboundSchema;
}

/** @internal */
export const InputSecurityLakeSignatureVersion$inboundSchema: z.ZodType<
  InputSecurityLakeSignatureVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSecurityLakeSignatureVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSecurityLakeSignatureVersion$outboundSchema: z.ZodType<
  InputSecurityLakeSignatureVersion,
  z.ZodTypeDef,
  InputSecurityLakeSignatureVersion
> = z.union([
  z.nativeEnum(InputSecurityLakeSignatureVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakeSignatureVersion$ {
  /** @deprecated use `InputSecurityLakeSignatureVersion$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakeSignatureVersion$inboundSchema;
  /** @deprecated use `InputSecurityLakeSignatureVersion$outboundSchema` instead. */
  export const outboundSchema =
    InputSecurityLakeSignatureVersion$outboundSchema;
}

/** @internal */
export const InputSecurityLakePreprocess$inboundSchema: z.ZodType<
  InputSecurityLakePreprocess,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  command: z.string().optional(),
  args: z.array(z.string()).optional(),
});

/** @internal */
export type InputSecurityLakePreprocess$Outbound = {
  disabled: boolean;
  command?: string | undefined;
  args?: Array<string> | undefined;
};

/** @internal */
export const InputSecurityLakePreprocess$outboundSchema: z.ZodType<
  InputSecurityLakePreprocess$Outbound,
  z.ZodTypeDef,
  InputSecurityLakePreprocess
> = z.object({
  disabled: z.boolean().default(true),
  command: z.string().optional(),
  args: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakePreprocess$ {
  /** @deprecated use `InputSecurityLakePreprocess$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakePreprocess$inboundSchema;
  /** @deprecated use `InputSecurityLakePreprocess$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLakePreprocess$outboundSchema;
  /** @deprecated use `InputSecurityLakePreprocess$Outbound` instead. */
  export type Outbound = InputSecurityLakePreprocess$Outbound;
}

export function inputSecurityLakePreprocessToJSON(
  inputSecurityLakePreprocess: InputSecurityLakePreprocess,
): string {
  return JSON.stringify(
    InputSecurityLakePreprocess$outboundSchema.parse(
      inputSecurityLakePreprocess,
    ),
  );
}

export function inputSecurityLakePreprocessFromJSON(
  jsonString: string,
): SafeParseResult<InputSecurityLakePreprocess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSecurityLakePreprocess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSecurityLakePreprocess' from JSON`,
  );
}

/** @internal */
export const InputSecurityLakeMetadatum$inboundSchema: z.ZodType<
  InputSecurityLakeMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputSecurityLakeMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputSecurityLakeMetadatum$outboundSchema: z.ZodType<
  InputSecurityLakeMetadatum$Outbound,
  z.ZodTypeDef,
  InputSecurityLakeMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakeMetadatum$ {
  /** @deprecated use `InputSecurityLakeMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakeMetadatum$inboundSchema;
  /** @deprecated use `InputSecurityLakeMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLakeMetadatum$outboundSchema;
  /** @deprecated use `InputSecurityLakeMetadatum$Outbound` instead. */
  export type Outbound = InputSecurityLakeMetadatum$Outbound;
}

export function inputSecurityLakeMetadatumToJSON(
  inputSecurityLakeMetadatum: InputSecurityLakeMetadatum,
): string {
  return JSON.stringify(
    InputSecurityLakeMetadatum$outboundSchema.parse(inputSecurityLakeMetadatum),
  );
}

export function inputSecurityLakeMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputSecurityLakeMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSecurityLakeMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSecurityLakeMetadatum' from JSON`,
  );
}

/** @internal */
export const InputSecurityLakeCheckpointing$inboundSchema: z.ZodType<
  InputSecurityLakeCheckpointing,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().default(false),
  retries: z.number().default(5),
});

/** @internal */
export type InputSecurityLakeCheckpointing$Outbound = {
  enabled: boolean;
  retries: number;
};

/** @internal */
export const InputSecurityLakeCheckpointing$outboundSchema: z.ZodType<
  InputSecurityLakeCheckpointing$Outbound,
  z.ZodTypeDef,
  InputSecurityLakeCheckpointing
> = z.object({
  enabled: z.boolean().default(false),
  retries: z.number().default(5),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakeCheckpointing$ {
  /** @deprecated use `InputSecurityLakeCheckpointing$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLakeCheckpointing$inboundSchema;
  /** @deprecated use `InputSecurityLakeCheckpointing$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLakeCheckpointing$outboundSchema;
  /** @deprecated use `InputSecurityLakeCheckpointing$Outbound` instead. */
  export type Outbound = InputSecurityLakeCheckpointing$Outbound;
}

export function inputSecurityLakeCheckpointingToJSON(
  inputSecurityLakeCheckpointing: InputSecurityLakeCheckpointing,
): string {
  return JSON.stringify(
    InputSecurityLakeCheckpointing$outboundSchema.parse(
      inputSecurityLakeCheckpointing,
    ),
  );
}

export function inputSecurityLakeCheckpointingFromJSON(
  jsonString: string,
): SafeParseResult<InputSecurityLakeCheckpointing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSecurityLakeCheckpointing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSecurityLakeCheckpointing' from JSON`,
  );
}

/** @internal */
export const InputSecurityLakeTagAfterProcessing$inboundSchema: z.ZodType<
  InputSecurityLakeTagAfterProcessing,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSecurityLakeTagAfterProcessing),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSecurityLakeTagAfterProcessing$outboundSchema: z.ZodType<
  InputSecurityLakeTagAfterProcessing,
  z.ZodTypeDef,
  InputSecurityLakeTagAfterProcessing
> = z.union([
  z.nativeEnum(InputSecurityLakeTagAfterProcessing),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLakeTagAfterProcessing$ {
  /** @deprecated use `InputSecurityLakeTagAfterProcessing$inboundSchema` instead. */
  export const inboundSchema =
    InputSecurityLakeTagAfterProcessing$inboundSchema;
  /** @deprecated use `InputSecurityLakeTagAfterProcessing$outboundSchema` instead. */
  export const outboundSchema =
    InputSecurityLakeTagAfterProcessing$outboundSchema;
}

/** @internal */
export const InputSecurityLake$inboundSchema: z.ZodType<
  InputSecurityLake,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputSecurityLakeType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSecurityLakeConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputSecurityLakePq$inboundSchema).optional(),
  queueName: z.string(),
  fileFilter: z.string().default("/.*/"),
  awsAccountId: z.string().optional(),
  awsAuthenticationMethod: InputSecurityLakeAuthenticationMethod$inboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputSecurityLakeSignatureVersion$inboundSchema.default(
    "v4",
  ),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  maxMessages: z.number().default(1),
  visibilityTimeout: z.number().default(600),
  numReceivers: z.number().default(1),
  socketTimeout: z.number().default(300),
  skipOnError: z.boolean().default(false),
  includeSqsMetadata: z.boolean().default(false),
  enableAssumeRole: z.boolean().default(true),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  enableSQSAssumeRole: z.boolean().default(false),
  preprocess: z.lazy(() => InputSecurityLakePreprocess$inboundSchema)
    .optional(),
  metadata: z.array(z.lazy(() => InputSecurityLakeMetadatum$inboundSchema))
    .optional(),
  parquetChunkSizeMB: z.number().default(5),
  parquetChunkDownloadTimeout: z.number().default(600),
  checkpointing: z.lazy(() => InputSecurityLakeCheckpointing$inboundSchema)
    .optional(),
  pollTimeout: z.number().default(10),
  encoding: z.string().optional(),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  tagAfterProcessing: InputSecurityLakeTagAfterProcessing$inboundSchema
    .optional(),
  processedTagKey: z.string().optional(),
  processedTagValue: z.string().optional(),
});

/** @internal */
export type InputSecurityLake$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputSecurityLakeConnection$Outbound> | undefined;
  pq?: InputSecurityLakePq$Outbound | undefined;
  queueName: string;
  fileFilter: string;
  awsAccountId?: string | undefined;
  awsAuthenticationMethod: string;
  awsSecretKey?: string | undefined;
  region?: string | undefined;
  endpoint?: string | undefined;
  signatureVersion: string;
  reuseConnections: boolean;
  rejectUnauthorized: boolean;
  breakerRulesets?: Array<string> | undefined;
  staleChannelFlushMs: number;
  maxMessages: number;
  visibilityTimeout: number;
  numReceivers: number;
  socketTimeout: number;
  skipOnError: boolean;
  includeSqsMetadata: boolean;
  enableAssumeRole: boolean;
  assumeRoleArn?: string | undefined;
  assumeRoleExternalId?: string | undefined;
  durationSeconds: number;
  enableSQSAssumeRole: boolean;
  preprocess?: InputSecurityLakePreprocess$Outbound | undefined;
  metadata?: Array<InputSecurityLakeMetadatum$Outbound> | undefined;
  parquetChunkSizeMB: number;
  parquetChunkDownloadTimeout: number;
  checkpointing?: InputSecurityLakeCheckpointing$Outbound | undefined;
  pollTimeout: number;
  encoding?: string | undefined;
  description?: string | undefined;
  awsApiKey?: string | undefined;
  awsSecret?: string | undefined;
  tagAfterProcessing?: string | undefined;
  processedTagKey?: string | undefined;
  processedTagValue?: string | undefined;
};

/** @internal */
export const InputSecurityLake$outboundSchema: z.ZodType<
  InputSecurityLake$Outbound,
  z.ZodTypeDef,
  InputSecurityLake
> = z.object({
  id: z.string().optional(),
  type: InputSecurityLakeType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSecurityLakeConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputSecurityLakePq$outboundSchema).optional(),
  queueName: z.string(),
  fileFilter: z.string().default("/.*/"),
  awsAccountId: z.string().optional(),
  awsAuthenticationMethod: InputSecurityLakeAuthenticationMethod$outboundSchema
    .default("auto"),
  awsSecretKey: z.string().optional(),
  region: z.string().optional(),
  endpoint: z.string().optional(),
  signatureVersion: InputSecurityLakeSignatureVersion$outboundSchema.default(
    "v4",
  ),
  reuseConnections: z.boolean().default(true),
  rejectUnauthorized: z.boolean().default(true),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  maxMessages: z.number().default(1),
  visibilityTimeout: z.number().default(600),
  numReceivers: z.number().default(1),
  socketTimeout: z.number().default(300),
  skipOnError: z.boolean().default(false),
  includeSqsMetadata: z.boolean().default(false),
  enableAssumeRole: z.boolean().default(true),
  assumeRoleArn: z.string().optional(),
  assumeRoleExternalId: z.string().optional(),
  durationSeconds: z.number().default(3600),
  enableSQSAssumeRole: z.boolean().default(false),
  preprocess: z.lazy(() => InputSecurityLakePreprocess$outboundSchema)
    .optional(),
  metadata: z.array(z.lazy(() => InputSecurityLakeMetadatum$outboundSchema))
    .optional(),
  parquetChunkSizeMB: z.number().default(5),
  parquetChunkDownloadTimeout: z.number().default(600),
  checkpointing: z.lazy(() => InputSecurityLakeCheckpointing$outboundSchema)
    .optional(),
  pollTimeout: z.number().default(10),
  encoding: z.string().optional(),
  description: z.string().optional(),
  awsApiKey: z.string().optional(),
  awsSecret: z.string().optional(),
  tagAfterProcessing: InputSecurityLakeTagAfterProcessing$outboundSchema
    .optional(),
  processedTagKey: z.string().optional(),
  processedTagValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSecurityLake$ {
  /** @deprecated use `InputSecurityLake$inboundSchema` instead. */
  export const inboundSchema = InputSecurityLake$inboundSchema;
  /** @deprecated use `InputSecurityLake$outboundSchema` instead. */
  export const outboundSchema = InputSecurityLake$outboundSchema;
  /** @deprecated use `InputSecurityLake$Outbound` instead. */
  export type Outbound = InputSecurityLake$Outbound;
}

export function inputSecurityLakeToJSON(
  inputSecurityLake: InputSecurityLake,
): string {
  return JSON.stringify(
    InputSecurityLake$outboundSchema.parse(inputSecurityLake),
  );
}

export function inputSecurityLakeFromJSON(
  jsonString: string,
): SafeParseResult<InputSecurityLake, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSecurityLake$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSecurityLake' from JSON`,
  );
}
