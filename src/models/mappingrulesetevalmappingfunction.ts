/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Unique function identifier.
 */
export const Id = {
  Eval: "eval",
} as const;
/**
 * Unique function identifier.
 */
export type Id = OpenEnum<typeof Id>;

export type Add = {
  name?: string | undefined;
  /**
   * JavaScript expression to compute the value (can be constant)
   */
  value: string;
};

export type MappingRulesetEvalMappingFunctionConf = {
  /**
   * Set of key-value pairs to evaluate and add/set
   */
  add?: Array<Add> | undefined;
};

export type MappingRulesetEvalMappingFunction = {
  /**
   * Unique function identifier.
   */
  id: Id;
  /**
   * Filter expression controlling when this function runs
   */
  filter?: string | undefined;
  /**
   * Optional function description
   */
  description?: string | undefined;
  /**
   * Indicates whether the function is disabled
   */
  disabled?: boolean | undefined;
  final?: boolean | undefined;
  conf?: MappingRulesetEvalMappingFunctionConf | undefined;
};

/** @internal */
export const Id$inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Id),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Id$outboundSchema: z.ZodType<Id, z.ZodTypeDef, Id> = z.union([
  z.nativeEnum(Id),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
  /** @deprecated use `Id$inboundSchema` instead. */
  export const inboundSchema = Id$inboundSchema;
  /** @deprecated use `Id$outboundSchema` instead. */
  export const outboundSchema = Id$outboundSchema;
}

/** @internal */
export const Add$inboundSchema: z.ZodType<Add, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string().optional(),
    value: z.string(),
  });

/** @internal */
export type Add$Outbound = {
  name?: string | undefined;
  value: string;
};

/** @internal */
export const Add$outboundSchema: z.ZodType<Add$Outbound, z.ZodTypeDef, Add> = z
  .object({
    name: z.string().optional(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Add$ {
  /** @deprecated use `Add$inboundSchema` instead. */
  export const inboundSchema = Add$inboundSchema;
  /** @deprecated use `Add$outboundSchema` instead. */
  export const outboundSchema = Add$outboundSchema;
  /** @deprecated use `Add$Outbound` instead. */
  export type Outbound = Add$Outbound;
}

export function addToJSON(add: Add): string {
  return JSON.stringify(Add$outboundSchema.parse(add));
}

export function addFromJSON(
  jsonString: string,
): SafeParseResult<Add, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Add$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Add' from JSON`,
  );
}

/** @internal */
export const MappingRulesetEvalMappingFunctionConf$inboundSchema: z.ZodType<
  MappingRulesetEvalMappingFunctionConf,
  z.ZodTypeDef,
  unknown
> = z.object({
  add: z.array(z.lazy(() => Add$inboundSchema)).optional(),
});

/** @internal */
export type MappingRulesetEvalMappingFunctionConf$Outbound = {
  add?: Array<Add$Outbound> | undefined;
};

/** @internal */
export const MappingRulesetEvalMappingFunctionConf$outboundSchema: z.ZodType<
  MappingRulesetEvalMappingFunctionConf$Outbound,
  z.ZodTypeDef,
  MappingRulesetEvalMappingFunctionConf
> = z.object({
  add: z.array(z.lazy(() => Add$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingRulesetEvalMappingFunctionConf$ {
  /** @deprecated use `MappingRulesetEvalMappingFunctionConf$inboundSchema` instead. */
  export const inboundSchema =
    MappingRulesetEvalMappingFunctionConf$inboundSchema;
  /** @deprecated use `MappingRulesetEvalMappingFunctionConf$outboundSchema` instead. */
  export const outboundSchema =
    MappingRulesetEvalMappingFunctionConf$outboundSchema;
  /** @deprecated use `MappingRulesetEvalMappingFunctionConf$Outbound` instead. */
  export type Outbound = MappingRulesetEvalMappingFunctionConf$Outbound;
}

export function mappingRulesetEvalMappingFunctionConfToJSON(
  mappingRulesetEvalMappingFunctionConf: MappingRulesetEvalMappingFunctionConf,
): string {
  return JSON.stringify(
    MappingRulesetEvalMappingFunctionConf$outboundSchema.parse(
      mappingRulesetEvalMappingFunctionConf,
    ),
  );
}

export function mappingRulesetEvalMappingFunctionConfFromJSON(
  jsonString: string,
): SafeParseResult<MappingRulesetEvalMappingFunctionConf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MappingRulesetEvalMappingFunctionConf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MappingRulesetEvalMappingFunctionConf' from JSON`,
  );
}

/** @internal */
export const MappingRulesetEvalMappingFunction$inboundSchema: z.ZodType<
  MappingRulesetEvalMappingFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: Id$inboundSchema,
  filter: z.string().optional(),
  description: z.string().optional(),
  disabled: z.boolean().optional(),
  final: z.boolean().optional(),
  conf: z.lazy(() => MappingRulesetEvalMappingFunctionConf$inboundSchema)
    .optional(),
});

/** @internal */
export type MappingRulesetEvalMappingFunction$Outbound = {
  id: string;
  filter?: string | undefined;
  description?: string | undefined;
  disabled?: boolean | undefined;
  final?: boolean | undefined;
  conf?: MappingRulesetEvalMappingFunctionConf$Outbound | undefined;
};

/** @internal */
export const MappingRulesetEvalMappingFunction$outboundSchema: z.ZodType<
  MappingRulesetEvalMappingFunction$Outbound,
  z.ZodTypeDef,
  MappingRulesetEvalMappingFunction
> = z.object({
  id: Id$outboundSchema,
  filter: z.string().optional(),
  description: z.string().optional(),
  disabled: z.boolean().optional(),
  final: z.boolean().optional(),
  conf: z.lazy(() => MappingRulesetEvalMappingFunctionConf$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingRulesetEvalMappingFunction$ {
  /** @deprecated use `MappingRulesetEvalMappingFunction$inboundSchema` instead. */
  export const inboundSchema = MappingRulesetEvalMappingFunction$inboundSchema;
  /** @deprecated use `MappingRulesetEvalMappingFunction$outboundSchema` instead. */
  export const outboundSchema =
    MappingRulesetEvalMappingFunction$outboundSchema;
  /** @deprecated use `MappingRulesetEvalMappingFunction$Outbound` instead. */
  export type Outbound = MappingRulesetEvalMappingFunction$Outbound;
}

export function mappingRulesetEvalMappingFunctionToJSON(
  mappingRulesetEvalMappingFunction: MappingRulesetEvalMappingFunction,
): string {
  return JSON.stringify(
    MappingRulesetEvalMappingFunction$outboundSchema.parse(
      mappingRulesetEvalMappingFunction,
    ),
  );
}

export function mappingRulesetEvalMappingFunctionFromJSON(
  jsonString: string,
): SafeParseResult<MappingRulesetEvalMappingFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MappingRulesetEvalMappingFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MappingRulesetEvalMappingFunction' from JSON`,
  );
}
