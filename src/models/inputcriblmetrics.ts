/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputCriblmetricsType = {
  Criblmetrics: "criblmetrics",
} as const;
export type InputCriblmetricsType = ClosedEnum<typeof InputCriblmetricsType>;

export type InputCriblmetricsConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputCriblmetricsMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputCriblmetricsMode = ClosedEnum<typeof InputCriblmetricsMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputCriblmetricsCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputCriblmetricsCompression = ClosedEnum<
  typeof InputCriblmetricsCompression
>;

export type InputCriblmetricsPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputCriblmetricsMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputCriblmetricsCompression | undefined;
};

export type InputCriblmetricsMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputCriblmetrics = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputCriblmetricsType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputCriblmetricsConnection> | undefined;
  pq?: InputCriblmetricsPq | undefined;
  /**
   * A prefix that is applied to the metrics provided by Cribl Stream
   */
  prefix?: string | undefined;
  /**
   * Include granular metrics. Disabling this will drop the following metrics events: `cribl.logstream.host.(in_bytes,in_events,out_bytes,out_events)`, `cribl.logstream.index.(in_bytes,in_events,out_bytes,out_events)`, `cribl.logstream.source.(in_bytes,in_events,out_bytes,out_events)`, `cribl.logstream.sourcetype.(in_bytes,in_events,out_bytes,out_events)`.
   */
  fullFidelity?: boolean | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputCriblmetricsMetadatum> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputCriblmetricsType$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblmetricsType
> = z.nativeEnum(InputCriblmetricsType);

/** @internal */
export const InputCriblmetricsType$outboundSchema: z.ZodNativeEnum<
  typeof InputCriblmetricsType
> = InputCriblmetricsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblmetricsType$ {
  /** @deprecated use `InputCriblmetricsType$inboundSchema` instead. */
  export const inboundSchema = InputCriblmetricsType$inboundSchema;
  /** @deprecated use `InputCriblmetricsType$outboundSchema` instead. */
  export const outboundSchema = InputCriblmetricsType$outboundSchema;
}

/** @internal */
export const InputCriblmetricsConnection$inboundSchema: z.ZodType<
  InputCriblmetricsConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputCriblmetricsConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputCriblmetricsConnection$outboundSchema: z.ZodType<
  InputCriblmetricsConnection$Outbound,
  z.ZodTypeDef,
  InputCriblmetricsConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblmetricsConnection$ {
  /** @deprecated use `InputCriblmetricsConnection$inboundSchema` instead. */
  export const inboundSchema = InputCriblmetricsConnection$inboundSchema;
  /** @deprecated use `InputCriblmetricsConnection$outboundSchema` instead. */
  export const outboundSchema = InputCriblmetricsConnection$outboundSchema;
  /** @deprecated use `InputCriblmetricsConnection$Outbound` instead. */
  export type Outbound = InputCriblmetricsConnection$Outbound;
}

export function inputCriblmetricsConnectionToJSON(
  inputCriblmetricsConnection: InputCriblmetricsConnection,
): string {
  return JSON.stringify(
    InputCriblmetricsConnection$outboundSchema.parse(
      inputCriblmetricsConnection,
    ),
  );
}

export function inputCriblmetricsConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblmetricsConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblmetricsConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblmetricsConnection' from JSON`,
  );
}

/** @internal */
export const InputCriblmetricsMode$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblmetricsMode
> = z.nativeEnum(InputCriblmetricsMode);

/** @internal */
export const InputCriblmetricsMode$outboundSchema: z.ZodNativeEnum<
  typeof InputCriblmetricsMode
> = InputCriblmetricsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblmetricsMode$ {
  /** @deprecated use `InputCriblmetricsMode$inboundSchema` instead. */
  export const inboundSchema = InputCriblmetricsMode$inboundSchema;
  /** @deprecated use `InputCriblmetricsMode$outboundSchema` instead. */
  export const outboundSchema = InputCriblmetricsMode$outboundSchema;
}

/** @internal */
export const InputCriblmetricsCompression$inboundSchema: z.ZodNativeEnum<
  typeof InputCriblmetricsCompression
> = z.nativeEnum(InputCriblmetricsCompression);

/** @internal */
export const InputCriblmetricsCompression$outboundSchema: z.ZodNativeEnum<
  typeof InputCriblmetricsCompression
> = InputCriblmetricsCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblmetricsCompression$ {
  /** @deprecated use `InputCriblmetricsCompression$inboundSchema` instead. */
  export const inboundSchema = InputCriblmetricsCompression$inboundSchema;
  /** @deprecated use `InputCriblmetricsCompression$outboundSchema` instead. */
  export const outboundSchema = InputCriblmetricsCompression$outboundSchema;
}

/** @internal */
export const InputCriblmetricsPq$inboundSchema: z.ZodType<
  InputCriblmetricsPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputCriblmetricsMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputCriblmetricsCompression$inboundSchema.default("none"),
});

/** @internal */
export type InputCriblmetricsPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
};

/** @internal */
export const InputCriblmetricsPq$outboundSchema: z.ZodType<
  InputCriblmetricsPq$Outbound,
  z.ZodTypeDef,
  InputCriblmetricsPq
> = z.object({
  mode: InputCriblmetricsMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputCriblmetricsCompression$outboundSchema.default("none"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblmetricsPq$ {
  /** @deprecated use `InputCriblmetricsPq$inboundSchema` instead. */
  export const inboundSchema = InputCriblmetricsPq$inboundSchema;
  /** @deprecated use `InputCriblmetricsPq$outboundSchema` instead. */
  export const outboundSchema = InputCriblmetricsPq$outboundSchema;
  /** @deprecated use `InputCriblmetricsPq$Outbound` instead. */
  export type Outbound = InputCriblmetricsPq$Outbound;
}

export function inputCriblmetricsPqToJSON(
  inputCriblmetricsPq: InputCriblmetricsPq,
): string {
  return JSON.stringify(
    InputCriblmetricsPq$outboundSchema.parse(inputCriblmetricsPq),
  );
}

export function inputCriblmetricsPqFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblmetricsPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblmetricsPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblmetricsPq' from JSON`,
  );
}

/** @internal */
export const InputCriblmetricsMetadatum$inboundSchema: z.ZodType<
  InputCriblmetricsMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputCriblmetricsMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputCriblmetricsMetadatum$outboundSchema: z.ZodType<
  InputCriblmetricsMetadatum$Outbound,
  z.ZodTypeDef,
  InputCriblmetricsMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblmetricsMetadatum$ {
  /** @deprecated use `InputCriblmetricsMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputCriblmetricsMetadatum$inboundSchema;
  /** @deprecated use `InputCriblmetricsMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputCriblmetricsMetadatum$outboundSchema;
  /** @deprecated use `InputCriblmetricsMetadatum$Outbound` instead. */
  export type Outbound = InputCriblmetricsMetadatum$Outbound;
}

export function inputCriblmetricsMetadatumToJSON(
  inputCriblmetricsMetadatum: InputCriblmetricsMetadatum,
): string {
  return JSON.stringify(
    InputCriblmetricsMetadatum$outboundSchema.parse(inputCriblmetricsMetadatum),
  );
}

export function inputCriblmetricsMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblmetricsMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblmetricsMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblmetricsMetadatum' from JSON`,
  );
}

/** @internal */
export const InputCriblmetrics$inboundSchema: z.ZodType<
  InputCriblmetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputCriblmetricsType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputCriblmetricsConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputCriblmetricsPq$inboundSchema).optional(),
  prefix: z.string().default("cribl.logstream."),
  fullFidelity: z.boolean().default(true),
  metadata: z.array(z.lazy(() => InputCriblmetricsMetadatum$inboundSchema))
    .optional(),
  description: z.string().optional(),
});

/** @internal */
export type InputCriblmetrics$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputCriblmetricsConnection$Outbound> | undefined;
  pq?: InputCriblmetricsPq$Outbound | undefined;
  prefix: string;
  fullFidelity: boolean;
  metadata?: Array<InputCriblmetricsMetadatum$Outbound> | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputCriblmetrics$outboundSchema: z.ZodType<
  InputCriblmetrics$Outbound,
  z.ZodTypeDef,
  InputCriblmetrics
> = z.object({
  id: z.string().optional(),
  type: InputCriblmetricsType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputCriblmetricsConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputCriblmetricsPq$outboundSchema).optional(),
  prefix: z.string().default("cribl.logstream."),
  fullFidelity: z.boolean().default(true),
  metadata: z.array(z.lazy(() => InputCriblmetricsMetadatum$outboundSchema))
    .optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputCriblmetrics$ {
  /** @deprecated use `InputCriblmetrics$inboundSchema` instead. */
  export const inboundSchema = InputCriblmetrics$inboundSchema;
  /** @deprecated use `InputCriblmetrics$outboundSchema` instead. */
  export const outboundSchema = InputCriblmetrics$outboundSchema;
  /** @deprecated use `InputCriblmetrics$Outbound` instead. */
  export type Outbound = InputCriblmetrics$Outbound;
}

export function inputCriblmetricsToJSON(
  inputCriblmetrics: InputCriblmetrics,
): string {
  return JSON.stringify(
    InputCriblmetrics$outboundSchema.parse(inputCriblmetrics),
  );
}

export function inputCriblmetricsFromJSON(
  jsonString: string,
): SafeParseResult<InputCriblmetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputCriblmetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputCriblmetrics' from JSON`,
  );
}
