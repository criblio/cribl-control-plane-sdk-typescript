/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OutputDatabricksType = {
  Databricks: "databricks",
} as const;
export type OutputDatabricksType = ClosedEnum<typeof OutputDatabricksType>;

/**
 * Format of the output data
 */
export const OutputDatabricksDataFormat = {
  /**
   * JSON
   */
  Json: "json",
  /**
   * Raw
   */
  Raw: "raw",
  /**
   * Parquet
   */
  Parquet: "parquet",
} as const;
/**
 * Format of the output data
 */
export type OutputDatabricksDataFormat = OpenEnum<
  typeof OutputDatabricksDataFormat
>;

/**
 * How to handle events when all receivers are exerting backpressure
 */
export const OutputDatabricksBackpressureBehavior = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when all receivers are exerting backpressure
 */
export type OutputDatabricksBackpressureBehavior = OpenEnum<
  typeof OutputDatabricksBackpressureBehavior
>;

/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export const OutputDatabricksDiskSpaceProtection = {
  /**
   * Block
   */
  Block: "block",
  /**
   * Drop
   */
  Drop: "drop",
} as const;
/**
 * How to handle events when disk space is below the global 'Min free disk space' limit
 */
export type OutputDatabricksDiskSpaceProtection = OpenEnum<
  typeof OutputDatabricksDiskSpaceProtection
>;

/**
 * Unity Catalog authentication method. Choose Manual to enter credentials directly, or Secret to use a stored secret.
 */
export const OutputDatabricksAuthenticationMethod = {
  /**
   * Manual
   */
  Manual: "manual",
  /**
   * Secret Key pair
   */
  Secret: "secret",
} as const;
/**
 * Unity Catalog authentication method. Choose Manual to enter credentials directly, or Secret to use a stored secret.
 */
export type OutputDatabricksAuthenticationMethod = OpenEnum<
  typeof OutputDatabricksAuthenticationMethod
>;

export type OutputDatabricks = {
  /**
   * Unique ID for this output
   */
  id?: string | undefined;
  type: OutputDatabricksType;
  /**
   * Pipeline to process data before sending out to this output
   */
  pipeline?: string | undefined;
  /**
   * Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
   */
  systemFields?: Array<string> | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Optional path to prepend to files before uploading. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `myEventsVolumePath-${C.vars.myVar}`
   */
  destPath?: string | undefined;
  /**
   * Filesystem location in which to buffer files before compressing and moving to final destination. Use performant, stable storage.
   */
  stagePath?: string | undefined;
  /**
   * Add the Output ID value to staging location
   */
  addIdToStagePath?: boolean | undefined;
  /**
   * Remove empty staging directories after moving files
   */
  removeEmptyDirs?: boolean | undefined;
  /**
   * JavaScript expression defining how files are partitioned and organized. Default is date-based. If blank, Stream will fall back to the event's __partition field value – if present – otherwise to each location's root directory.
   */
  partitionExpr?: string | undefined;
  /**
   * Format of the output data
   */
  format?: OutputDatabricksDataFormat | undefined;
  /**
   * JavaScript expression to define the output filename prefix (can be constant)
   */
  baseFileName?: string | undefined;
  /**
   * JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`).
   */
  fileNameSuffix?: string | undefined;
  /**
   * Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
   */
  maxFileSizeMB?: number | undefined;
  /**
   * Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileOpenTimeSec?: number | undefined;
  /**
   * Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
   */
  maxFileIdleTimeSec?: number | undefined;
  /**
   * Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
   */
  maxOpenFiles?: number | undefined;
  /**
   * If set, this line will be written to the beginning of each output file
   */
  headerLine?: string | undefined;
  /**
   * Buffer size used to write to a file
   */
  writeHighWaterMark?: number | undefined;
  /**
   * How to handle events when all receivers are exerting backpressure
   */
  onBackpressure?: OutputDatabricksBackpressureBehavior | undefined;
  /**
   * If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
   */
  deadletterEnabled?: boolean | undefined;
  /**
   * How to handle events when disk space is below the global 'Min free disk space' limit
   */
  onDiskFullBackpressure?: OutputDatabricksDiskSpaceProtection | undefined;
  /**
   * Unity Catalog authentication method. Choose Manual to enter credentials directly, or Secret to use a stored secret.
   */
  unityAuthMethod?: OutputDatabricksAuthenticationMethod | undefined;
  /**
   * URL for Unity Catalog OAuth token endpoint (example: 'https://your-workspace.cloud.databricks.com/oauth/token')
   */
  loginUrl: string;
  /**
   * OAuth scope for Unity Catalog authentication
   */
  scope?: string | undefined;
  /**
   * How often the OAuth token should be refreshed
   */
  tokenTimeoutSecs?: number | undefined;
  /**
   * Name of the catalog to use for the output
   */
  defaultCatalog?: string | undefined;
  /**
   * Name of the catalog schema to use for the output
   */
  defaultSchema?: string | undefined;
  /**
   * Name of the events volume in Databricks
   */
  eventsVolumeName?: string | undefined;
  /**
   * JavaScript expression to compute the OAuth client ID for Unity Catalog authentication. Can be a constant.
   */
  clientId: string;
  /**
   * Uploaded files should be overwritten if they already exist. If disabled, upload will fail if a file already exists.
   */
  overWriteFiles?: boolean | undefined;
  description?: string | undefined;
  /**
   * JavaScript expression to compute the OAuth client secret for Unity Catalog authentication. Can be a constant.
   */
  clientSecret?: string | undefined;
  /**
   * Select or create a stored text secret
   */
  clientTextSecret?: string | undefined;
};

/** @internal */
export const OutputDatabricksType$inboundSchema: z.ZodNativeEnum<
  typeof OutputDatabricksType
> = z.nativeEnum(OutputDatabricksType);

/** @internal */
export const OutputDatabricksType$outboundSchema: z.ZodNativeEnum<
  typeof OutputDatabricksType
> = OutputDatabricksType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDatabricksType$ {
  /** @deprecated use `OutputDatabricksType$inboundSchema` instead. */
  export const inboundSchema = OutputDatabricksType$inboundSchema;
  /** @deprecated use `OutputDatabricksType$outboundSchema` instead. */
  export const outboundSchema = OutputDatabricksType$outboundSchema;
}

/** @internal */
export const OutputDatabricksDataFormat$inboundSchema: z.ZodType<
  OutputDatabricksDataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDatabricksDataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDatabricksDataFormat$outboundSchema: z.ZodType<
  OutputDatabricksDataFormat,
  z.ZodTypeDef,
  OutputDatabricksDataFormat
> = z.union([
  z.nativeEnum(OutputDatabricksDataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDatabricksDataFormat$ {
  /** @deprecated use `OutputDatabricksDataFormat$inboundSchema` instead. */
  export const inboundSchema = OutputDatabricksDataFormat$inboundSchema;
  /** @deprecated use `OutputDatabricksDataFormat$outboundSchema` instead. */
  export const outboundSchema = OutputDatabricksDataFormat$outboundSchema;
}

/** @internal */
export const OutputDatabricksBackpressureBehavior$inboundSchema: z.ZodType<
  OutputDatabricksBackpressureBehavior,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDatabricksBackpressureBehavior),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDatabricksBackpressureBehavior$outboundSchema: z.ZodType<
  OutputDatabricksBackpressureBehavior,
  z.ZodTypeDef,
  OutputDatabricksBackpressureBehavior
> = z.union([
  z.nativeEnum(OutputDatabricksBackpressureBehavior),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDatabricksBackpressureBehavior$ {
  /** @deprecated use `OutputDatabricksBackpressureBehavior$inboundSchema` instead. */
  export const inboundSchema =
    OutputDatabricksBackpressureBehavior$inboundSchema;
  /** @deprecated use `OutputDatabricksBackpressureBehavior$outboundSchema` instead. */
  export const outboundSchema =
    OutputDatabricksBackpressureBehavior$outboundSchema;
}

/** @internal */
export const OutputDatabricksDiskSpaceProtection$inboundSchema: z.ZodType<
  OutputDatabricksDiskSpaceProtection,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDatabricksDiskSpaceProtection),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDatabricksDiskSpaceProtection$outboundSchema: z.ZodType<
  OutputDatabricksDiskSpaceProtection,
  z.ZodTypeDef,
  OutputDatabricksDiskSpaceProtection
> = z.union([
  z.nativeEnum(OutputDatabricksDiskSpaceProtection),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDatabricksDiskSpaceProtection$ {
  /** @deprecated use `OutputDatabricksDiskSpaceProtection$inboundSchema` instead. */
  export const inboundSchema =
    OutputDatabricksDiskSpaceProtection$inboundSchema;
  /** @deprecated use `OutputDatabricksDiskSpaceProtection$outboundSchema` instead. */
  export const outboundSchema =
    OutputDatabricksDiskSpaceProtection$outboundSchema;
}

/** @internal */
export const OutputDatabricksAuthenticationMethod$inboundSchema: z.ZodType<
  OutputDatabricksAuthenticationMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OutputDatabricksAuthenticationMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OutputDatabricksAuthenticationMethod$outboundSchema: z.ZodType<
  OutputDatabricksAuthenticationMethod,
  z.ZodTypeDef,
  OutputDatabricksAuthenticationMethod
> = z.union([
  z.nativeEnum(OutputDatabricksAuthenticationMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDatabricksAuthenticationMethod$ {
  /** @deprecated use `OutputDatabricksAuthenticationMethod$inboundSchema` instead. */
  export const inboundSchema =
    OutputDatabricksAuthenticationMethod$inboundSchema;
  /** @deprecated use `OutputDatabricksAuthenticationMethod$outboundSchema` instead. */
  export const outboundSchema =
    OutputDatabricksAuthenticationMethod$outboundSchema;
}

/** @internal */
export const OutputDatabricks$inboundSchema: z.ZodType<
  OutputDatabricks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OutputDatabricksType$inboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  destPath: z.string().default(""),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputDatabricksDataFormat$inboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputDatabricksBackpressureBehavior$inboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputDatabricksDiskSpaceProtection$inboundSchema
    .default("block"),
  unityAuthMethod: OutputDatabricksAuthenticationMethod$inboundSchema.default(
    "manual",
  ),
  loginUrl: z.string(),
  scope: z.string().default("all-apis"),
  tokenTimeoutSecs: z.number().default(3600),
  defaultCatalog: z.string().default("main"),
  defaultSchema: z.string().default("external"),
  eventsVolumeName: z.string().default("events"),
  clientId: z.string(),
  overWriteFiles: z.boolean().default(false),
  description: z.string().optional(),
  clientSecret: z.string().optional(),
  clientTextSecret: z.string().optional(),
});

/** @internal */
export type OutputDatabricks$Outbound = {
  id?: string | undefined;
  type: string;
  pipeline?: string | undefined;
  systemFields?: Array<string> | undefined;
  environment?: string | undefined;
  streamtags?: Array<string> | undefined;
  destPath: string;
  stagePath: string;
  addIdToStagePath: boolean;
  removeEmptyDirs: boolean;
  partitionExpr: string;
  format: string;
  baseFileName: string;
  fileNameSuffix: string;
  maxFileSizeMB: number;
  maxFileOpenTimeSec: number;
  maxFileIdleTimeSec: number;
  maxOpenFiles: number;
  headerLine: string;
  writeHighWaterMark: number;
  onBackpressure: string;
  deadletterEnabled: boolean;
  onDiskFullBackpressure: string;
  unityAuthMethod: string;
  loginUrl: string;
  scope: string;
  tokenTimeoutSecs: number;
  defaultCatalog: string;
  defaultSchema: string;
  eventsVolumeName: string;
  clientId: string;
  overWriteFiles: boolean;
  description?: string | undefined;
  clientSecret?: string | undefined;
  clientTextSecret?: string | undefined;
};

/** @internal */
export const OutputDatabricks$outboundSchema: z.ZodType<
  OutputDatabricks$Outbound,
  z.ZodTypeDef,
  OutputDatabricks
> = z.object({
  id: z.string().optional(),
  type: OutputDatabricksType$outboundSchema,
  pipeline: z.string().optional(),
  systemFields: z.array(z.string()).optional(),
  environment: z.string().optional(),
  streamtags: z.array(z.string()).optional(),
  destPath: z.string().default(""),
  stagePath: z.string().default("$CRIBL_HOME/state/outputs/staging"),
  addIdToStagePath: z.boolean().default(true),
  removeEmptyDirs: z.boolean().default(true),
  partitionExpr: z.string().default(
    "C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')",
  ),
  format: OutputDatabricksDataFormat$outboundSchema.default("json"),
  baseFileName: z.string().default("`CriblOut`"),
  fileNameSuffix: z.string().default(
    "`.${C.env[\"CRIBL_WORKER_ID\"]}.${__format}${__compression === \"gzip\" ? \".gz\" : \"\"}`",
  ),
  maxFileSizeMB: z.number().default(32),
  maxFileOpenTimeSec: z.number().default(300),
  maxFileIdleTimeSec: z.number().default(30),
  maxOpenFiles: z.number().default(100),
  headerLine: z.string().default(""),
  writeHighWaterMark: z.number().default(64),
  onBackpressure: OutputDatabricksBackpressureBehavior$outboundSchema.default(
    "block",
  ),
  deadletterEnabled: z.boolean().default(false),
  onDiskFullBackpressure: OutputDatabricksDiskSpaceProtection$outboundSchema
    .default("block"),
  unityAuthMethod: OutputDatabricksAuthenticationMethod$outboundSchema.default(
    "manual",
  ),
  loginUrl: z.string(),
  scope: z.string().default("all-apis"),
  tokenTimeoutSecs: z.number().default(3600),
  defaultCatalog: z.string().default("main"),
  defaultSchema: z.string().default("external"),
  eventsVolumeName: z.string().default("events"),
  clientId: z.string(),
  overWriteFiles: z.boolean().default(false),
  description: z.string().optional(),
  clientSecret: z.string().optional(),
  clientTextSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputDatabricks$ {
  /** @deprecated use `OutputDatabricks$inboundSchema` instead. */
  export const inboundSchema = OutputDatabricks$inboundSchema;
  /** @deprecated use `OutputDatabricks$outboundSchema` instead. */
  export const outboundSchema = OutputDatabricks$outboundSchema;
  /** @deprecated use `OutputDatabricks$Outbound` instead. */
  export type Outbound = OutputDatabricks$Outbound;
}

export function outputDatabricksToJSON(
  outputDatabricks: OutputDatabricks,
): string {
  return JSON.stringify(
    OutputDatabricks$outboundSchema.parse(outputDatabricks),
  );
}

export function outputDatabricksFromJSON(
  jsonString: string,
): SafeParseResult<OutputDatabricks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputDatabricks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputDatabricks' from JSON`,
  );
}
