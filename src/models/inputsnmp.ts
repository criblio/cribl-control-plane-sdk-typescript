/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputSnmpType = {
  Snmp: "snmp",
} as const;
export type InputSnmpType = ClosedEnum<typeof InputSnmpType>;

export type InputSnmpConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputSnmpMode = {
  /**
   * Smart
   */
  Smart: "smart",
  /**
   * Always On
   */
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputSnmpMode = OpenEnum<typeof InputSnmpMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputSnmpCompression = {
  /**
   * None
   */
  None: "none",
  /**
   * Gzip
   */
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputSnmpCompression = OpenEnum<typeof InputSnmpCompression>;

export type InputSnmpPqControls = {};

export type InputSnmpPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputSnmpMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputSnmpCompression | undefined;
  pqControls?: InputSnmpPqControls | undefined;
};

export const AuthenticationProtocol = {
  /**
   * None
   */
  None: "none",
  /**
   * MD5
   */
  Md5: "md5",
  /**
   * SHA1
   */
  Sha: "sha",
  /**
   * SHA224
   */
  Sha224: "sha224",
  /**
   * SHA256
   */
  Sha256: "sha256",
  /**
   * SHA384
   */
  Sha384: "sha384",
  /**
   * SHA512
   */
  Sha512: "sha512",
} as const;
export type AuthenticationProtocol = OpenEnum<typeof AuthenticationProtocol>;

export type V3User = {
  name: string;
  authProtocol?: AuthenticationProtocol | undefined;
  authKey?: any | undefined;
  privProtocol?: string | undefined;
};

/**
 * Authentication parameters for SNMPv3 trap. Set the log level to debug if you are experiencing authentication or decryption issues.
 */
export type SNMPv3Authentication = {
  v3AuthEnabled?: boolean | undefined;
  /**
   * Pass through traps that don't match any of the configured users. @{product} will not attempt to decrypt these traps.
   */
  allowUnmatchedTrap?: boolean | undefined;
  /**
   * User credentials for receiving v3 traps
   */
  v3Users?: Array<V3User> | undefined;
};

export type InputSnmpMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputSnmp = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputSnmpType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputSnmpConnection> | undefined;
  pq?: InputSnmpPq | undefined;
  /**
   * Address to bind on. For IPv4 (all addresses), use the default '0.0.0.0'. For IPv6, enter '::' (all addresses) or specify an IP address.
   */
  host?: string | undefined;
  /**
   * UDP port to receive SNMP traps on. Defaults to 162.
   */
  port?: number | undefined;
  /**
   * Authentication parameters for SNMPv3 trap. Set the log level to debug if you are experiencing authentication or decryption issues.
   */
  snmpV3Auth?: SNMPv3Authentication | undefined;
  /**
   * Maximum number of events to buffer when downstream is blocking.
   */
  maxBufferSize?: number | undefined;
  /**
   * Regex matching IP addresses that are allowed to send data
   */
  ipWhitelistRegex?: string | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputSnmpMetadatum> | undefined;
  /**
   * Optionally, set the SO_RCVBUF socket option for the UDP socket. This value tells the operating system how many bytes can be buffered in the kernel before events are dropped. Leave blank to use the OS default. Caution: Increasing this value will affect OS memory utilization.
   */
  udpSocketRxBufSize?: number | undefined;
  /**
   * If enabled, parses varbinds as an array of objects that include OID, value, and type
   */
  varbindsWithTypes?: boolean | undefined;
  /**
   * If enabled, the parser will attempt to parse varbind octet strings as UTF-8, first, otherwise will fallback to other methods
   */
  bestEffortParsing?: boolean | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputSnmpType$inboundSchema: z.ZodNativeEnum<
  typeof InputSnmpType
> = z.nativeEnum(InputSnmpType);

/** @internal */
export const InputSnmpType$outboundSchema: z.ZodNativeEnum<
  typeof InputSnmpType
> = InputSnmpType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSnmpType$ {
  /** @deprecated use `InputSnmpType$inboundSchema` instead. */
  export const inboundSchema = InputSnmpType$inboundSchema;
  /** @deprecated use `InputSnmpType$outboundSchema` instead. */
  export const outboundSchema = InputSnmpType$outboundSchema;
}

/** @internal */
export const InputSnmpConnection$inboundSchema: z.ZodType<
  InputSnmpConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputSnmpConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputSnmpConnection$outboundSchema: z.ZodType<
  InputSnmpConnection$Outbound,
  z.ZodTypeDef,
  InputSnmpConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSnmpConnection$ {
  /** @deprecated use `InputSnmpConnection$inboundSchema` instead. */
  export const inboundSchema = InputSnmpConnection$inboundSchema;
  /** @deprecated use `InputSnmpConnection$outboundSchema` instead. */
  export const outboundSchema = InputSnmpConnection$outboundSchema;
  /** @deprecated use `InputSnmpConnection$Outbound` instead. */
  export type Outbound = InputSnmpConnection$Outbound;
}

export function inputSnmpConnectionToJSON(
  inputSnmpConnection: InputSnmpConnection,
): string {
  return JSON.stringify(
    InputSnmpConnection$outboundSchema.parse(inputSnmpConnection),
  );
}

export function inputSnmpConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputSnmpConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSnmpConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSnmpConnection' from JSON`,
  );
}

/** @internal */
export const InputSnmpMode$inboundSchema: z.ZodType<
  InputSnmpMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSnmpMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSnmpMode$outboundSchema: z.ZodType<
  InputSnmpMode,
  z.ZodTypeDef,
  InputSnmpMode
> = z.union([
  z.nativeEnum(InputSnmpMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSnmpMode$ {
  /** @deprecated use `InputSnmpMode$inboundSchema` instead. */
  export const inboundSchema = InputSnmpMode$inboundSchema;
  /** @deprecated use `InputSnmpMode$outboundSchema` instead. */
  export const outboundSchema = InputSnmpMode$outboundSchema;
}

/** @internal */
export const InputSnmpCompression$inboundSchema: z.ZodType<
  InputSnmpCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSnmpCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSnmpCompression$outboundSchema: z.ZodType<
  InputSnmpCompression,
  z.ZodTypeDef,
  InputSnmpCompression
> = z.union([
  z.nativeEnum(InputSnmpCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSnmpCompression$ {
  /** @deprecated use `InputSnmpCompression$inboundSchema` instead. */
  export const inboundSchema = InputSnmpCompression$inboundSchema;
  /** @deprecated use `InputSnmpCompression$outboundSchema` instead. */
  export const outboundSchema = InputSnmpCompression$outboundSchema;
}

/** @internal */
export const InputSnmpPqControls$inboundSchema: z.ZodType<
  InputSnmpPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputSnmpPqControls$Outbound = {};

/** @internal */
export const InputSnmpPqControls$outboundSchema: z.ZodType<
  InputSnmpPqControls$Outbound,
  z.ZodTypeDef,
  InputSnmpPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSnmpPqControls$ {
  /** @deprecated use `InputSnmpPqControls$inboundSchema` instead. */
  export const inboundSchema = InputSnmpPqControls$inboundSchema;
  /** @deprecated use `InputSnmpPqControls$outboundSchema` instead. */
  export const outboundSchema = InputSnmpPqControls$outboundSchema;
  /** @deprecated use `InputSnmpPqControls$Outbound` instead. */
  export type Outbound = InputSnmpPqControls$Outbound;
}

export function inputSnmpPqControlsToJSON(
  inputSnmpPqControls: InputSnmpPqControls,
): string {
  return JSON.stringify(
    InputSnmpPqControls$outboundSchema.parse(inputSnmpPqControls),
  );
}

export function inputSnmpPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputSnmpPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSnmpPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSnmpPqControls' from JSON`,
  );
}

/** @internal */
export const InputSnmpPq$inboundSchema: z.ZodType<
  InputSnmpPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSnmpMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSnmpCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputSnmpPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputSnmpPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputSnmpPqControls$Outbound | undefined;
};

/** @internal */
export const InputSnmpPq$outboundSchema: z.ZodType<
  InputSnmpPq$Outbound,
  z.ZodTypeDef,
  InputSnmpPq
> = z.object({
  mode: InputSnmpMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSnmpCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputSnmpPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSnmpPq$ {
  /** @deprecated use `InputSnmpPq$inboundSchema` instead. */
  export const inboundSchema = InputSnmpPq$inboundSchema;
  /** @deprecated use `InputSnmpPq$outboundSchema` instead. */
  export const outboundSchema = InputSnmpPq$outboundSchema;
  /** @deprecated use `InputSnmpPq$Outbound` instead. */
  export type Outbound = InputSnmpPq$Outbound;
}

export function inputSnmpPqToJSON(inputSnmpPq: InputSnmpPq): string {
  return JSON.stringify(InputSnmpPq$outboundSchema.parse(inputSnmpPq));
}

export function inputSnmpPqFromJSON(
  jsonString: string,
): SafeParseResult<InputSnmpPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSnmpPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSnmpPq' from JSON`,
  );
}

/** @internal */
export const AuthenticationProtocol$inboundSchema: z.ZodType<
  AuthenticationProtocol,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AuthenticationProtocol),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AuthenticationProtocol$outboundSchema: z.ZodType<
  AuthenticationProtocol,
  z.ZodTypeDef,
  AuthenticationProtocol
> = z.union([
  z.nativeEnum(AuthenticationProtocol),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticationProtocol$ {
  /** @deprecated use `AuthenticationProtocol$inboundSchema` instead. */
  export const inboundSchema = AuthenticationProtocol$inboundSchema;
  /** @deprecated use `AuthenticationProtocol$outboundSchema` instead. */
  export const outboundSchema = AuthenticationProtocol$outboundSchema;
}

/** @internal */
export const V3User$inboundSchema: z.ZodType<V3User, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    authProtocol: AuthenticationProtocol$inboundSchema.default("none"),
    authKey: z.any().optional(),
    privProtocol: z.string().default("none"),
  });

/** @internal */
export type V3User$Outbound = {
  name: string;
  authProtocol: string;
  authKey?: any | undefined;
  privProtocol: string;
};

/** @internal */
export const V3User$outboundSchema: z.ZodType<
  V3User$Outbound,
  z.ZodTypeDef,
  V3User
> = z.object({
  name: z.string(),
  authProtocol: AuthenticationProtocol$outboundSchema.default("none"),
  authKey: z.any().optional(),
  privProtocol: z.string().default("none"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3User$ {
  /** @deprecated use `V3User$inboundSchema` instead. */
  export const inboundSchema = V3User$inboundSchema;
  /** @deprecated use `V3User$outboundSchema` instead. */
  export const outboundSchema = V3User$outboundSchema;
  /** @deprecated use `V3User$Outbound` instead. */
  export type Outbound = V3User$Outbound;
}

export function v3UserToJSON(v3User: V3User): string {
  return JSON.stringify(V3User$outboundSchema.parse(v3User));
}

export function v3UserFromJSON(
  jsonString: string,
): SafeParseResult<V3User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3User' from JSON`,
  );
}

/** @internal */
export const SNMPv3Authentication$inboundSchema: z.ZodType<
  SNMPv3Authentication,
  z.ZodTypeDef,
  unknown
> = z.object({
  v3AuthEnabled: z.boolean().default(false),
  allowUnmatchedTrap: z.boolean().default(false),
  v3Users: z.array(z.lazy(() => V3User$inboundSchema)).optional(),
});

/** @internal */
export type SNMPv3Authentication$Outbound = {
  v3AuthEnabled: boolean;
  allowUnmatchedTrap: boolean;
  v3Users?: Array<V3User$Outbound> | undefined;
};

/** @internal */
export const SNMPv3Authentication$outboundSchema: z.ZodType<
  SNMPv3Authentication$Outbound,
  z.ZodTypeDef,
  SNMPv3Authentication
> = z.object({
  v3AuthEnabled: z.boolean().default(false),
  allowUnmatchedTrap: z.boolean().default(false),
  v3Users: z.array(z.lazy(() => V3User$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SNMPv3Authentication$ {
  /** @deprecated use `SNMPv3Authentication$inboundSchema` instead. */
  export const inboundSchema = SNMPv3Authentication$inboundSchema;
  /** @deprecated use `SNMPv3Authentication$outboundSchema` instead. */
  export const outboundSchema = SNMPv3Authentication$outboundSchema;
  /** @deprecated use `SNMPv3Authentication$Outbound` instead. */
  export type Outbound = SNMPv3Authentication$Outbound;
}

export function snmPv3AuthenticationToJSON(
  snmPv3Authentication: SNMPv3Authentication,
): string {
  return JSON.stringify(
    SNMPv3Authentication$outboundSchema.parse(snmPv3Authentication),
  );
}

export function snmPv3AuthenticationFromJSON(
  jsonString: string,
): SafeParseResult<SNMPv3Authentication, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SNMPv3Authentication$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SNMPv3Authentication' from JSON`,
  );
}

/** @internal */
export const InputSnmpMetadatum$inboundSchema: z.ZodType<
  InputSnmpMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputSnmpMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputSnmpMetadatum$outboundSchema: z.ZodType<
  InputSnmpMetadatum$Outbound,
  z.ZodTypeDef,
  InputSnmpMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSnmpMetadatum$ {
  /** @deprecated use `InputSnmpMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputSnmpMetadatum$inboundSchema;
  /** @deprecated use `InputSnmpMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputSnmpMetadatum$outboundSchema;
  /** @deprecated use `InputSnmpMetadatum$Outbound` instead. */
  export type Outbound = InputSnmpMetadatum$Outbound;
}

export function inputSnmpMetadatumToJSON(
  inputSnmpMetadatum: InputSnmpMetadatum,
): string {
  return JSON.stringify(
    InputSnmpMetadatum$outboundSchema.parse(inputSnmpMetadatum),
  );
}

export function inputSnmpMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputSnmpMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSnmpMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSnmpMetadatum' from JSON`,
  );
}

/** @internal */
export const InputSnmp$inboundSchema: z.ZodType<
  InputSnmp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputSnmpType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSnmpConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputSnmpPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number().default(162),
  snmpV3Auth: z.lazy(() => SNMPv3Authentication$inboundSchema).optional(),
  maxBufferSize: z.number().default(1000),
  ipWhitelistRegex: z.string().default("/.*/"),
  metadata: z.array(z.lazy(() => InputSnmpMetadatum$inboundSchema)).optional(),
  udpSocketRxBufSize: z.number().optional(),
  varbindsWithTypes: z.boolean().default(false),
  bestEffortParsing: z.boolean().default(false),
  description: z.string().optional(),
});

/** @internal */
export type InputSnmp$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputSnmpConnection$Outbound> | undefined;
  pq?: InputSnmpPq$Outbound | undefined;
  host: string;
  port: number;
  snmpV3Auth?: SNMPv3Authentication$Outbound | undefined;
  maxBufferSize: number;
  ipWhitelistRegex: string;
  metadata?: Array<InputSnmpMetadatum$Outbound> | undefined;
  udpSocketRxBufSize?: number | undefined;
  varbindsWithTypes: boolean;
  bestEffortParsing: boolean;
  description?: string | undefined;
};

/** @internal */
export const InputSnmp$outboundSchema: z.ZodType<
  InputSnmp$Outbound,
  z.ZodTypeDef,
  InputSnmp
> = z.object({
  id: z.string().optional(),
  type: InputSnmpType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSnmpConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputSnmpPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number().default(162),
  snmpV3Auth: z.lazy(() => SNMPv3Authentication$outboundSchema).optional(),
  maxBufferSize: z.number().default(1000),
  ipWhitelistRegex: z.string().default("/.*/"),
  metadata: z.array(z.lazy(() => InputSnmpMetadatum$outboundSchema)).optional(),
  udpSocketRxBufSize: z.number().optional(),
  varbindsWithTypes: z.boolean().default(false),
  bestEffortParsing: z.boolean().default(false),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSnmp$ {
  /** @deprecated use `InputSnmp$inboundSchema` instead. */
  export const inboundSchema = InputSnmp$inboundSchema;
  /** @deprecated use `InputSnmp$outboundSchema` instead. */
  export const outboundSchema = InputSnmp$outboundSchema;
  /** @deprecated use `InputSnmp$Outbound` instead. */
  export type Outbound = InputSnmp$Outbound;
}

export function inputSnmpToJSON(inputSnmp: InputSnmp): string {
  return JSON.stringify(InputSnmp$outboundSchema.parse(inputSnmp));
}

export function inputSnmpFromJSON(
  jsonString: string,
): SafeParseResult<InputSnmp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSnmp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSnmp' from JSON`,
  );
}
