/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputSplunkType = {
  Splunk: "splunk",
} as const;
export type InputSplunkType = OpenEnum<typeof InputSplunkType>;

export type InputSplunkConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputSplunkMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputSplunkMode = OpenEnum<typeof InputSplunkMode>;

/**
 * Codec to use to compress the persisted data
 */
export const InputSplunkPqCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputSplunkPqCompression = OpenEnum<
  typeof InputSplunkPqCompression
>;

export type InputSplunkPqControls = {};

export type InputSplunkPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputSplunkMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputSplunkPqCompression | undefined;
  pqControls?: InputSplunkPqControls | undefined;
};

export const InputSplunkMinimumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputSplunkMinimumTLSVersion = OpenEnum<
  typeof InputSplunkMinimumTLSVersion
>;

export const InputSplunkMaximumTLSVersion = {
  TLSv1: "TLSv1",
  TLSv11: "TLSv1.1",
  TLSv12: "TLSv1.2",
  TLSv13: "TLSv1.3",
} as const;
export type InputSplunkMaximumTLSVersion = OpenEnum<
  typeof InputSplunkMaximumTLSVersion
>;

export type InputSplunkTLSSettingsServerSide = {
  disabled?: boolean | undefined;
  /**
   * The name of the predefined certificate
   */
  certificateName?: string | undefined;
  /**
   * Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
   */
  privKeyPath?: string | undefined;
  /**
   * Passphrase to use to decrypt private key
   */
  passphrase?: string | undefined;
  /**
   * Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
   */
  certPath?: string | undefined;
  /**
   * Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
   */
  caPath?: string | undefined;
  /**
   * Require clients to present their certificates. Used to perform client authentication using SSL certs.
   */
  requestCert?: boolean | undefined;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: InputSplunkMinimumTLSVersion | undefined;
  maxVersion?: InputSplunkMaximumTLSVersion | undefined;
};

export type InputSplunkMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export type InputSplunkAuthToken = {
  /**
   * Shared secrets to be provided by any Splunk forwarder. If empty, unauthorized access is permitted.
   */
  token: string;
  description?: string | undefined;
};

/**
 * The highest S2S protocol version to advertise during handshake
 */
export const InputSplunkMaxS2SVersion = {
  V3: "v3",
  V4: "v4",
} as const;
/**
 * The highest S2S protocol version to advertise during handshake
 */
export type InputSplunkMaxS2SVersion = OpenEnum<
  typeof InputSplunkMaxS2SVersion
>;

/**
 * Controls whether to support reading compressed data from a forwarder. Select 'Automatic' to match the forwarder's configuration, or 'Disabled' to reject compressed connections.
 */
export const InputSplunkCompression = {
  Disabled: "disabled",
  Auto: "auto",
  Always: "always",
} as const;
/**
 * Controls whether to support reading compressed data from a forwarder. Select 'Automatic' to match the forwarder's configuration, or 'Disabled' to reject compressed connections.
 */
export type InputSplunkCompression = OpenEnum<typeof InputSplunkCompression>;

export type InputSplunk = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputSplunkType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputSplunkConnection> | undefined;
  pq?: InputSplunkPq | undefined;
  /**
   * Address to bind on. Defaults to 0.0.0.0 (all addresses).
   */
  host?: string | undefined;
  /**
   * Port to listen on
   */
  port: number;
  tls?: InputSplunkTLSSettingsServerSide | undefined;
  /**
   * Regex matching IP addresses that are allowed to establish a connection
   */
  ipWhitelistRegex?: string | undefined;
  /**
   * Maximum number of active connections allowed per Worker Process. Use 0 for unlimited.
   */
  maxActiveCxn?: number | undefined;
  /**
   * How long @{product} should wait before assuming that an inactive socket has timed out. After this time, the connection will be closed. Leave at 0 for no inactive socket monitoring.
   */
  socketIdleTimeout?: number | undefined;
  /**
   * How long the server will wait after initiating a closure for a client to close its end of the connection. If the client doesn't close the connection within this time, the server will forcefully terminate the socket to prevent resource leaks and ensure efficient connection cleanup and system stability. Leave at 0 for no inactive socket monitoring.
   */
  socketEndingMaxWait?: number | undefined;
  /**
   * The maximum duration a socket can remain open, even if active. This helps manage resources and mitigate issues caused by TCP pinning. Set to 0 to disable.
   */
  socketMaxLifespan?: number | undefined;
  /**
   * Enable if the connection is proxied by a device that supports proxy protocol v1 or v2
   */
  enableProxyHeader?: boolean | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputSplunkMetadatum> | undefined;
  /**
   * A list of event-breaking rulesets that will be applied, in order, to the input data stream
   */
  breakerRulesets?: Array<string> | undefined;
  /**
   * How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
   */
  staleChannelFlushMs?: number | undefined;
  /**
   * Shared secrets to be provided by any Splunk forwarder. If empty, unauthorized access is permitted.
   */
  authTokens?: Array<InputSplunkAuthToken> | undefined;
  /**
   * The highest S2S protocol version to advertise during handshake
   */
  maxS2Sversion?: InputSplunkMaxS2SVersion | undefined;
  description?: string | undefined;
  /**
   * Event Breakers will determine events' time zone from UF-provided metadata, when TZ can't be inferred from the raw event
   */
  useFwdTimezone?: boolean | undefined;
  /**
   * Drop Splunk control fields such as `crcSalt` and `_savedPort`. If disabled, control fields are stored in the internal field `__ctrlFields`.
   */
  dropControlFields?: boolean | undefined;
  /**
   * Extract and process Splunk-generated metrics as Cribl metrics
   */
  extractMetrics?: boolean | undefined;
  /**
   * Controls whether to support reading compressed data from a forwarder. Select 'Automatic' to match the forwarder's configuration, or 'Disabled' to reject compressed connections.
   */
  compress?: InputSplunkCompression | undefined;
};

/** @internal */
export const InputSplunkType$inboundSchema: z.ZodType<
  InputSplunkType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSplunkType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSplunkType$outboundSchema: z.ZodType<
  InputSplunkType,
  z.ZodTypeDef,
  InputSplunkType
> = z.union([
  z.nativeEnum(InputSplunkType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkType$ {
  /** @deprecated use `InputSplunkType$inboundSchema` instead. */
  export const inboundSchema = InputSplunkType$inboundSchema;
  /** @deprecated use `InputSplunkType$outboundSchema` instead. */
  export const outboundSchema = InputSplunkType$outboundSchema;
}

/** @internal */
export const InputSplunkConnection$inboundSchema: z.ZodType<
  InputSplunkConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputSplunkConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputSplunkConnection$outboundSchema: z.ZodType<
  InputSplunkConnection$Outbound,
  z.ZodTypeDef,
  InputSplunkConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkConnection$ {
  /** @deprecated use `InputSplunkConnection$inboundSchema` instead. */
  export const inboundSchema = InputSplunkConnection$inboundSchema;
  /** @deprecated use `InputSplunkConnection$outboundSchema` instead. */
  export const outboundSchema = InputSplunkConnection$outboundSchema;
  /** @deprecated use `InputSplunkConnection$Outbound` instead. */
  export type Outbound = InputSplunkConnection$Outbound;
}

export function inputSplunkConnectionToJSON(
  inputSplunkConnection: InputSplunkConnection,
): string {
  return JSON.stringify(
    InputSplunkConnection$outboundSchema.parse(inputSplunkConnection),
  );
}

export function inputSplunkConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputSplunkConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSplunkConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSplunkConnection' from JSON`,
  );
}

/** @internal */
export const InputSplunkMode$inboundSchema: z.ZodType<
  InputSplunkMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSplunkMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSplunkMode$outboundSchema: z.ZodType<
  InputSplunkMode,
  z.ZodTypeDef,
  InputSplunkMode
> = z.union([
  z.nativeEnum(InputSplunkMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkMode$ {
  /** @deprecated use `InputSplunkMode$inboundSchema` instead. */
  export const inboundSchema = InputSplunkMode$inboundSchema;
  /** @deprecated use `InputSplunkMode$outboundSchema` instead. */
  export const outboundSchema = InputSplunkMode$outboundSchema;
}

/** @internal */
export const InputSplunkPqCompression$inboundSchema: z.ZodType<
  InputSplunkPqCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSplunkPqCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSplunkPqCompression$outboundSchema: z.ZodType<
  InputSplunkPqCompression,
  z.ZodTypeDef,
  InputSplunkPqCompression
> = z.union([
  z.nativeEnum(InputSplunkPqCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkPqCompression$ {
  /** @deprecated use `InputSplunkPqCompression$inboundSchema` instead. */
  export const inboundSchema = InputSplunkPqCompression$inboundSchema;
  /** @deprecated use `InputSplunkPqCompression$outboundSchema` instead. */
  export const outboundSchema = InputSplunkPqCompression$outboundSchema;
}

/** @internal */
export const InputSplunkPqControls$inboundSchema: z.ZodType<
  InputSplunkPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputSplunkPqControls$Outbound = {};

/** @internal */
export const InputSplunkPqControls$outboundSchema: z.ZodType<
  InputSplunkPqControls$Outbound,
  z.ZodTypeDef,
  InputSplunkPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkPqControls$ {
  /** @deprecated use `InputSplunkPqControls$inboundSchema` instead. */
  export const inboundSchema = InputSplunkPqControls$inboundSchema;
  /** @deprecated use `InputSplunkPqControls$outboundSchema` instead. */
  export const outboundSchema = InputSplunkPqControls$outboundSchema;
  /** @deprecated use `InputSplunkPqControls$Outbound` instead. */
  export type Outbound = InputSplunkPqControls$Outbound;
}

export function inputSplunkPqControlsToJSON(
  inputSplunkPqControls: InputSplunkPqControls,
): string {
  return JSON.stringify(
    InputSplunkPqControls$outboundSchema.parse(inputSplunkPqControls),
  );
}

export function inputSplunkPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputSplunkPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSplunkPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSplunkPqControls' from JSON`,
  );
}

/** @internal */
export const InputSplunkPq$inboundSchema: z.ZodType<
  InputSplunkPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputSplunkMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSplunkPqCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputSplunkPqControls$inboundSchema).optional(),
});

/** @internal */
export type InputSplunkPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputSplunkPqControls$Outbound | undefined;
};

/** @internal */
export const InputSplunkPq$outboundSchema: z.ZodType<
  InputSplunkPq$Outbound,
  z.ZodTypeDef,
  InputSplunkPq
> = z.object({
  mode: InputSplunkMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputSplunkPqCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputSplunkPqControls$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkPq$ {
  /** @deprecated use `InputSplunkPq$inboundSchema` instead. */
  export const inboundSchema = InputSplunkPq$inboundSchema;
  /** @deprecated use `InputSplunkPq$outboundSchema` instead. */
  export const outboundSchema = InputSplunkPq$outboundSchema;
  /** @deprecated use `InputSplunkPq$Outbound` instead. */
  export type Outbound = InputSplunkPq$Outbound;
}

export function inputSplunkPqToJSON(inputSplunkPq: InputSplunkPq): string {
  return JSON.stringify(InputSplunkPq$outboundSchema.parse(inputSplunkPq));
}

export function inputSplunkPqFromJSON(
  jsonString: string,
): SafeParseResult<InputSplunkPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSplunkPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSplunkPq' from JSON`,
  );
}

/** @internal */
export const InputSplunkMinimumTLSVersion$inboundSchema: z.ZodType<
  InputSplunkMinimumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSplunkMinimumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSplunkMinimumTLSVersion$outboundSchema: z.ZodType<
  InputSplunkMinimumTLSVersion,
  z.ZodTypeDef,
  InputSplunkMinimumTLSVersion
> = z.union([
  z.nativeEnum(InputSplunkMinimumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkMinimumTLSVersion$ {
  /** @deprecated use `InputSplunkMinimumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputSplunkMinimumTLSVersion$inboundSchema;
  /** @deprecated use `InputSplunkMinimumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputSplunkMinimumTLSVersion$outboundSchema;
}

/** @internal */
export const InputSplunkMaximumTLSVersion$inboundSchema: z.ZodType<
  InputSplunkMaximumTLSVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSplunkMaximumTLSVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSplunkMaximumTLSVersion$outboundSchema: z.ZodType<
  InputSplunkMaximumTLSVersion,
  z.ZodTypeDef,
  InputSplunkMaximumTLSVersion
> = z.union([
  z.nativeEnum(InputSplunkMaximumTLSVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkMaximumTLSVersion$ {
  /** @deprecated use `InputSplunkMaximumTLSVersion$inboundSchema` instead. */
  export const inboundSchema = InputSplunkMaximumTLSVersion$inboundSchema;
  /** @deprecated use `InputSplunkMaximumTLSVersion$outboundSchema` instead. */
  export const outboundSchema = InputSplunkMaximumTLSVersion$outboundSchema;
}

/** @internal */
export const InputSplunkTLSSettingsServerSide$inboundSchema: z.ZodType<
  InputSplunkTLSSettingsServerSide,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputSplunkMinimumTLSVersion$inboundSchema.optional(),
  maxVersion: InputSplunkMaximumTLSVersion$inboundSchema.optional(),
});

/** @internal */
export type InputSplunkTLSSettingsServerSide$Outbound = {
  disabled: boolean;
  certificateName?: string | undefined;
  privKeyPath?: string | undefined;
  passphrase?: string | undefined;
  certPath?: string | undefined;
  caPath?: string | undefined;
  requestCert: boolean;
  rejectUnauthorized?: any | undefined;
  commonNameRegex?: any | undefined;
  minVersion?: string | undefined;
  maxVersion?: string | undefined;
};

/** @internal */
export const InputSplunkTLSSettingsServerSide$outboundSchema: z.ZodType<
  InputSplunkTLSSettingsServerSide$Outbound,
  z.ZodTypeDef,
  InputSplunkTLSSettingsServerSide
> = z.object({
  disabled: z.boolean().default(true),
  certificateName: z.string().optional(),
  privKeyPath: z.string().optional(),
  passphrase: z.string().optional(),
  certPath: z.string().optional(),
  caPath: z.string().optional(),
  requestCert: z.boolean().default(false),
  rejectUnauthorized: z.any().optional(),
  commonNameRegex: z.any().optional(),
  minVersion: InputSplunkMinimumTLSVersion$outboundSchema.optional(),
  maxVersion: InputSplunkMaximumTLSVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkTLSSettingsServerSide$ {
  /** @deprecated use `InputSplunkTLSSettingsServerSide$inboundSchema` instead. */
  export const inboundSchema = InputSplunkTLSSettingsServerSide$inboundSchema;
  /** @deprecated use `InputSplunkTLSSettingsServerSide$outboundSchema` instead. */
  export const outboundSchema = InputSplunkTLSSettingsServerSide$outboundSchema;
  /** @deprecated use `InputSplunkTLSSettingsServerSide$Outbound` instead. */
  export type Outbound = InputSplunkTLSSettingsServerSide$Outbound;
}

export function inputSplunkTLSSettingsServerSideToJSON(
  inputSplunkTLSSettingsServerSide: InputSplunkTLSSettingsServerSide,
): string {
  return JSON.stringify(
    InputSplunkTLSSettingsServerSide$outboundSchema.parse(
      inputSplunkTLSSettingsServerSide,
    ),
  );
}

export function inputSplunkTLSSettingsServerSideFromJSON(
  jsonString: string,
): SafeParseResult<InputSplunkTLSSettingsServerSide, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSplunkTLSSettingsServerSide$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSplunkTLSSettingsServerSide' from JSON`,
  );
}

/** @internal */
export const InputSplunkMetadatum$inboundSchema: z.ZodType<
  InputSplunkMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputSplunkMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputSplunkMetadatum$outboundSchema: z.ZodType<
  InputSplunkMetadatum$Outbound,
  z.ZodTypeDef,
  InputSplunkMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkMetadatum$ {
  /** @deprecated use `InputSplunkMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputSplunkMetadatum$inboundSchema;
  /** @deprecated use `InputSplunkMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputSplunkMetadatum$outboundSchema;
  /** @deprecated use `InputSplunkMetadatum$Outbound` instead. */
  export type Outbound = InputSplunkMetadatum$Outbound;
}

export function inputSplunkMetadatumToJSON(
  inputSplunkMetadatum: InputSplunkMetadatum,
): string {
  return JSON.stringify(
    InputSplunkMetadatum$outboundSchema.parse(inputSplunkMetadatum),
  );
}

export function inputSplunkMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputSplunkMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSplunkMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSplunkMetadatum' from JSON`,
  );
}

/** @internal */
export const InputSplunkAuthToken$inboundSchema: z.ZodType<
  InputSplunkAuthToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  description: z.string().optional(),
});

/** @internal */
export type InputSplunkAuthToken$Outbound = {
  token: string;
  description?: string | undefined;
};

/** @internal */
export const InputSplunkAuthToken$outboundSchema: z.ZodType<
  InputSplunkAuthToken$Outbound,
  z.ZodTypeDef,
  InputSplunkAuthToken
> = z.object({
  token: z.string(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkAuthToken$ {
  /** @deprecated use `InputSplunkAuthToken$inboundSchema` instead. */
  export const inboundSchema = InputSplunkAuthToken$inboundSchema;
  /** @deprecated use `InputSplunkAuthToken$outboundSchema` instead. */
  export const outboundSchema = InputSplunkAuthToken$outboundSchema;
  /** @deprecated use `InputSplunkAuthToken$Outbound` instead. */
  export type Outbound = InputSplunkAuthToken$Outbound;
}

export function inputSplunkAuthTokenToJSON(
  inputSplunkAuthToken: InputSplunkAuthToken,
): string {
  return JSON.stringify(
    InputSplunkAuthToken$outboundSchema.parse(inputSplunkAuthToken),
  );
}

export function inputSplunkAuthTokenFromJSON(
  jsonString: string,
): SafeParseResult<InputSplunkAuthToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSplunkAuthToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSplunkAuthToken' from JSON`,
  );
}

/** @internal */
export const InputSplunkMaxS2SVersion$inboundSchema: z.ZodType<
  InputSplunkMaxS2SVersion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSplunkMaxS2SVersion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSplunkMaxS2SVersion$outboundSchema: z.ZodType<
  InputSplunkMaxS2SVersion,
  z.ZodTypeDef,
  InputSplunkMaxS2SVersion
> = z.union([
  z.nativeEnum(InputSplunkMaxS2SVersion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkMaxS2SVersion$ {
  /** @deprecated use `InputSplunkMaxS2SVersion$inboundSchema` instead. */
  export const inboundSchema = InputSplunkMaxS2SVersion$inboundSchema;
  /** @deprecated use `InputSplunkMaxS2SVersion$outboundSchema` instead. */
  export const outboundSchema = InputSplunkMaxS2SVersion$outboundSchema;
}

/** @internal */
export const InputSplunkCompression$inboundSchema: z.ZodType<
  InputSplunkCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputSplunkCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputSplunkCompression$outboundSchema: z.ZodType<
  InputSplunkCompression,
  z.ZodTypeDef,
  InputSplunkCompression
> = z.union([
  z.nativeEnum(InputSplunkCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunkCompression$ {
  /** @deprecated use `InputSplunkCompression$inboundSchema` instead. */
  export const inboundSchema = InputSplunkCompression$inboundSchema;
  /** @deprecated use `InputSplunkCompression$outboundSchema` instead. */
  export const outboundSchema = InputSplunkCompression$outboundSchema;
}

/** @internal */
export const InputSplunk$inboundSchema: z.ZodType<
  InputSplunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputSplunkType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSplunkConnection$inboundSchema))
    .optional(),
  pq: z.lazy(() => InputSplunkPq$inboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputSplunkTLSSettingsServerSide$inboundSchema).optional(),
  ipWhitelistRegex: z.string().default("/.*/"),
  maxActiveCxn: z.number().default(1000),
  socketIdleTimeout: z.number().default(0),
  socketEndingMaxWait: z.number().default(30),
  socketMaxLifespan: z.number().default(0),
  enableProxyHeader: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputSplunkMetadatum$inboundSchema))
    .optional(),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  authTokens: z.array(z.lazy(() => InputSplunkAuthToken$inboundSchema))
    .optional(),
  maxS2Sversion: InputSplunkMaxS2SVersion$inboundSchema.default("v3"),
  description: z.string().optional(),
  useFwdTimezone: z.boolean().default(true),
  dropControlFields: z.boolean().default(true),
  extractMetrics: z.boolean().default(false),
  compress: InputSplunkCompression$inboundSchema.default("disabled"),
});

/** @internal */
export type InputSplunk$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputSplunkConnection$Outbound> | undefined;
  pq?: InputSplunkPq$Outbound | undefined;
  host: string;
  port: number;
  tls?: InputSplunkTLSSettingsServerSide$Outbound | undefined;
  ipWhitelistRegex: string;
  maxActiveCxn: number;
  socketIdleTimeout: number;
  socketEndingMaxWait: number;
  socketMaxLifespan: number;
  enableProxyHeader: boolean;
  metadata?: Array<InputSplunkMetadatum$Outbound> | undefined;
  breakerRulesets?: Array<string> | undefined;
  staleChannelFlushMs: number;
  authTokens?: Array<InputSplunkAuthToken$Outbound> | undefined;
  maxS2Sversion: string;
  description?: string | undefined;
  useFwdTimezone: boolean;
  dropControlFields: boolean;
  extractMetrics: boolean;
  compress: string;
};

/** @internal */
export const InputSplunk$outboundSchema: z.ZodType<
  InputSplunk$Outbound,
  z.ZodTypeDef,
  InputSplunk
> = z.object({
  id: z.string().optional(),
  type: InputSplunkType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(z.lazy(() => InputSplunkConnection$outboundSchema))
    .optional(),
  pq: z.lazy(() => InputSplunkPq$outboundSchema).optional(),
  host: z.string().default("0.0.0.0"),
  port: z.number(),
  tls: z.lazy(() => InputSplunkTLSSettingsServerSide$outboundSchema).optional(),
  ipWhitelistRegex: z.string().default("/.*/"),
  maxActiveCxn: z.number().default(1000),
  socketIdleTimeout: z.number().default(0),
  socketEndingMaxWait: z.number().default(30),
  socketMaxLifespan: z.number().default(0),
  enableProxyHeader: z.boolean().default(false),
  metadata: z.array(z.lazy(() => InputSplunkMetadatum$outboundSchema))
    .optional(),
  breakerRulesets: z.array(z.string()).optional(),
  staleChannelFlushMs: z.number().default(10000),
  authTokens: z.array(z.lazy(() => InputSplunkAuthToken$outboundSchema))
    .optional(),
  maxS2Sversion: InputSplunkMaxS2SVersion$outboundSchema.default("v3"),
  description: z.string().optional(),
  useFwdTimezone: z.boolean().default(true),
  dropControlFields: z.boolean().default(true),
  extractMetrics: z.boolean().default(false),
  compress: InputSplunkCompression$outboundSchema.default("disabled"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSplunk$ {
  /** @deprecated use `InputSplunk$inboundSchema` instead. */
  export const inboundSchema = InputSplunk$inboundSchema;
  /** @deprecated use `InputSplunk$outboundSchema` instead. */
  export const outboundSchema = InputSplunk$outboundSchema;
  /** @deprecated use `InputSplunk$Outbound` instead. */
  export type Outbound = InputSplunk$Outbound;
}

export function inputSplunkToJSON(inputSplunk: InputSplunk): string {
  return JSON.stringify(InputSplunk$outboundSchema.parse(inputSplunk));
}

export function inputSplunkFromJSON(
  jsonString: string,
): SafeParseResult<InputSplunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSplunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSplunk' from JSON`,
  );
}
