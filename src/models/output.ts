/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OutputAzureBlob,
  OutputAzureBlob$inboundSchema,
  OutputAzureBlob$Outbound,
  OutputAzureBlob$outboundSchema,
} from "./outputazureblob.js";
import {
  OutputAzureDataExplorer,
  OutputAzureDataExplorer$inboundSchema,
  OutputAzureDataExplorer$Outbound,
  OutputAzureDataExplorer$outboundSchema,
} from "./outputazuredataexplorer.js";
import {
  OutputAzureEventhub,
  OutputAzureEventhub$inboundSchema,
  OutputAzureEventhub$Outbound,
  OutputAzureEventhub$outboundSchema,
} from "./outputazureeventhub.js";
import {
  OutputAzureLogs,
  OutputAzureLogs$inboundSchema,
  OutputAzureLogs$Outbound,
  OutputAzureLogs$outboundSchema,
} from "./outputazurelogs.js";
import {
  OutputChronicle,
  OutputChronicle$inboundSchema,
  OutputChronicle$Outbound,
  OutputChronicle$outboundSchema,
} from "./outputchronicle.js";
import {
  OutputClickHouse,
  OutputClickHouse$inboundSchema,
  OutputClickHouse$Outbound,
  OutputClickHouse$outboundSchema,
} from "./outputclickhouse.js";
import {
  OutputCloudwatch,
  OutputCloudwatch$inboundSchema,
  OutputCloudwatch$Outbound,
  OutputCloudwatch$outboundSchema,
} from "./outputcloudwatch.js";
import {
  OutputConfluentCloud,
  OutputConfluentCloud$inboundSchema,
  OutputConfluentCloud$Outbound,
  OutputConfluentCloud$outboundSchema,
} from "./outputconfluentcloud.js";
import {
  OutputCriblHttp,
  OutputCriblHttp$inboundSchema,
  OutputCriblHttp$Outbound,
  OutputCriblHttp$outboundSchema,
} from "./outputcriblhttp.js";
import {
  OutputCriblLake,
  OutputCriblLake$inboundSchema,
  OutputCriblLake$Outbound,
  OutputCriblLake$outboundSchema,
} from "./outputcribllake.js";
import {
  OutputCriblTcp,
  OutputCriblTcp$inboundSchema,
  OutputCriblTcp$Outbound,
  OutputCriblTcp$outboundSchema,
} from "./outputcribltcp.js";
import {
  OutputCrowdstrikeNextGenSiem,
  OutputCrowdstrikeNextGenSiem$inboundSchema,
  OutputCrowdstrikeNextGenSiem$Outbound,
  OutputCrowdstrikeNextGenSiem$outboundSchema,
} from "./outputcrowdstrikenextgensiem.js";
import {
  OutputDatabricks,
  OutputDatabricks$inboundSchema,
  OutputDatabricks$Outbound,
  OutputDatabricks$outboundSchema,
} from "./outputdatabricks.js";
import {
  OutputDatadog,
  OutputDatadog$inboundSchema,
  OutputDatadog$Outbound,
  OutputDatadog$outboundSchema,
} from "./outputdatadog.js";
import {
  OutputDataset,
  OutputDataset$inboundSchema,
  OutputDataset$Outbound,
  OutputDataset$outboundSchema,
} from "./outputdataset.js";
import {
  OutputDefault,
  OutputDefault$inboundSchema,
  OutputDefault$Outbound,
  OutputDefault$outboundSchema,
} from "./outputdefault.js";
import {
  OutputDevnull,
  OutputDevnull$inboundSchema,
  OutputDevnull$Outbound,
  OutputDevnull$outboundSchema,
} from "./outputdevnull.js";
import {
  OutputDiskSpool,
  OutputDiskSpool$inboundSchema,
  OutputDiskSpool$Outbound,
  OutputDiskSpool$outboundSchema,
} from "./outputdiskspool.js";
import {
  OutputDlS3,
  OutputDlS3$inboundSchema,
  OutputDlS3$Outbound,
  OutputDlS3$outboundSchema,
} from "./outputdls3.js";
import {
  OutputDynatraceHttp,
  OutputDynatraceHttp$inboundSchema,
  OutputDynatraceHttp$Outbound,
  OutputDynatraceHttp$outboundSchema,
} from "./outputdynatracehttp.js";
import {
  OutputDynatraceOtlp,
  OutputDynatraceOtlp$inboundSchema,
  OutputDynatraceOtlp$Outbound,
  OutputDynatraceOtlp$outboundSchema,
} from "./outputdynatraceotlp.js";
import {
  OutputElastic,
  OutputElastic$inboundSchema,
  OutputElastic$Outbound,
  OutputElastic$outboundSchema,
} from "./outputelastic.js";
import {
  OutputElasticCloud,
  OutputElasticCloud$inboundSchema,
  OutputElasticCloud$Outbound,
  OutputElasticCloud$outboundSchema,
} from "./outputelasticcloud.js";
import {
  OutputExabeam,
  OutputExabeam$inboundSchema,
  OutputExabeam$Outbound,
  OutputExabeam$outboundSchema,
} from "./outputexabeam.js";
import {
  OutputFilesystem,
  OutputFilesystem$inboundSchema,
  OutputFilesystem$Outbound,
  OutputFilesystem$outboundSchema,
} from "./outputfilesystem.js";
import {
  OutputGoogleChronicle,
  OutputGoogleChronicle$inboundSchema,
  OutputGoogleChronicle$Outbound,
  OutputGoogleChronicle$outboundSchema,
} from "./outputgooglechronicle.js";
import {
  OutputGoogleCloudLogging,
  OutputGoogleCloudLogging$inboundSchema,
  OutputGoogleCloudLogging$Outbound,
  OutputGoogleCloudLogging$outboundSchema,
} from "./outputgooglecloudlogging.js";
import {
  OutputGoogleCloudStorage,
  OutputGoogleCloudStorage$inboundSchema,
  OutputGoogleCloudStorage$Outbound,
  OutputGoogleCloudStorage$outboundSchema,
} from "./outputgooglecloudstorage.js";
import {
  OutputGooglePubsub,
  OutputGooglePubsub$inboundSchema,
  OutputGooglePubsub$Outbound,
  OutputGooglePubsub$outboundSchema,
} from "./outputgooglepubsub.js";
import {
  OutputGrafanaCloud,
  OutputGrafanaCloud$inboundSchema,
  OutputGrafanaCloud$Outbound,
  OutputGrafanaCloud$outboundSchema,
} from "./outputgrafanacloud.js";
import {
  OutputGraphite,
  OutputGraphite$inboundSchema,
  OutputGraphite$Outbound,
  OutputGraphite$outboundSchema,
} from "./outputgraphite.js";
import {
  OutputHoneycomb,
  OutputHoneycomb$inboundSchema,
  OutputHoneycomb$Outbound,
  OutputHoneycomb$outboundSchema,
} from "./outputhoneycomb.js";
import {
  OutputHumioHec,
  OutputHumioHec$inboundSchema,
  OutputHumioHec$Outbound,
  OutputHumioHec$outboundSchema,
} from "./outputhumiohec.js";
import {
  OutputInfluxdb,
  OutputInfluxdb$inboundSchema,
  OutputInfluxdb$Outbound,
  OutputInfluxdb$outboundSchema,
} from "./outputinfluxdb.js";
import {
  OutputKafka,
  OutputKafka$inboundSchema,
  OutputKafka$Outbound,
  OutputKafka$outboundSchema,
} from "./outputkafka.js";
import {
  OutputKinesis,
  OutputKinesis$inboundSchema,
  OutputKinesis$Outbound,
  OutputKinesis$outboundSchema,
} from "./outputkinesis.js";
import {
  OutputLoki,
  OutputLoki$inboundSchema,
  OutputLoki$Outbound,
  OutputLoki$outboundSchema,
} from "./outputloki.js";
import {
  OutputMinio,
  OutputMinio$inboundSchema,
  OutputMinio$Outbound,
  OutputMinio$outboundSchema,
} from "./outputminio.js";
import {
  OutputMsk,
  OutputMsk$inboundSchema,
  OutputMsk$Outbound,
  OutputMsk$outboundSchema,
} from "./outputmsk.js";
import {
  OutputNetflow,
  OutputNetflow$inboundSchema,
  OutputNetflow$Outbound,
  OutputNetflow$outboundSchema,
} from "./outputnetflow.js";
import {
  OutputNewrelic,
  OutputNewrelic$inboundSchema,
  OutputNewrelic$Outbound,
  OutputNewrelic$outboundSchema,
} from "./outputnewrelic.js";
import {
  OutputNewrelicEvents,
  OutputNewrelicEvents$inboundSchema,
  OutputNewrelicEvents$Outbound,
  OutputNewrelicEvents$outboundSchema,
} from "./outputnewrelicevents.js";
import {
  OutputOpenTelemetry,
  OutputOpenTelemetry$inboundSchema,
  OutputOpenTelemetry$Outbound,
  OutputOpenTelemetry$outboundSchema,
} from "./outputopentelemetry.js";
import {
  OutputPrometheus,
  OutputPrometheus$inboundSchema,
  OutputPrometheus$Outbound,
  OutputPrometheus$outboundSchema,
} from "./outputprometheus.js";
import {
  OutputRing,
  OutputRing$inboundSchema,
  OutputRing$Outbound,
  OutputRing$outboundSchema,
} from "./outputring.js";
import {
  OutputRouter,
  OutputRouter$inboundSchema,
  OutputRouter$Outbound,
  OutputRouter$outboundSchema,
} from "./outputrouter.js";
import {
  OutputS3,
  OutputS3$inboundSchema,
  OutputS3$Outbound,
  OutputS3$outboundSchema,
} from "./outputs3.js";
import {
  OutputSecurityLake,
  OutputSecurityLake$inboundSchema,
  OutputSecurityLake$Outbound,
  OutputSecurityLake$outboundSchema,
} from "./outputsecuritylake.js";
import {
  OutputSentinel,
  OutputSentinel$inboundSchema,
  OutputSentinel$Outbound,
  OutputSentinel$outboundSchema,
} from "./outputsentinel.js";
import {
  OutputSentinelOneAiSiem,
  OutputSentinelOneAiSiem$inboundSchema,
  OutputSentinelOneAiSiem$Outbound,
  OutputSentinelOneAiSiem$outboundSchema,
} from "./outputsentineloneaisiem.js";
import {
  OutputServiceNow,
  OutputServiceNow$inboundSchema,
  OutputServiceNow$Outbound,
  OutputServiceNow$outboundSchema,
} from "./outputservicenow.js";
import {
  OutputSignalfx,
  OutputSignalfx$inboundSchema,
  OutputSignalfx$Outbound,
  OutputSignalfx$outboundSchema,
} from "./outputsignalfx.js";
import {
  OutputSnmp,
  OutputSnmp$inboundSchema,
  OutputSnmp$Outbound,
  OutputSnmp$outboundSchema,
} from "./outputsnmp.js";
import {
  OutputSns,
  OutputSns$inboundSchema,
  OutputSns$Outbound,
  OutputSns$outboundSchema,
} from "./outputsns.js";
import {
  OutputSplunk,
  OutputSplunk$inboundSchema,
  OutputSplunk$Outbound,
  OutputSplunk$outboundSchema,
} from "./outputsplunk.js";
import {
  OutputSplunkHec,
  OutputSplunkHec$inboundSchema,
  OutputSplunkHec$Outbound,
  OutputSplunkHec$outboundSchema,
} from "./outputsplunkhec.js";
import {
  OutputSplunkLb,
  OutputSplunkLb$inboundSchema,
  OutputSplunkLb$Outbound,
  OutputSplunkLb$outboundSchema,
} from "./outputsplunklb.js";
import {
  OutputSqs,
  OutputSqs$inboundSchema,
  OutputSqs$Outbound,
  OutputSqs$outboundSchema,
} from "./outputsqs.js";
import {
  OutputStatsd,
  OutputStatsd$inboundSchema,
  OutputStatsd$Outbound,
  OutputStatsd$outboundSchema,
} from "./outputstatsd.js";
import {
  OutputStatsdExt,
  OutputStatsdExt$inboundSchema,
  OutputStatsdExt$Outbound,
  OutputStatsdExt$outboundSchema,
} from "./outputstatsdext.js";
import {
  OutputSumoLogic,
  OutputSumoLogic$inboundSchema,
  OutputSumoLogic$Outbound,
  OutputSumoLogic$outboundSchema,
} from "./outputsumologic.js";
import {
  OutputSyslog,
  OutputSyslog$inboundSchema,
  OutputSyslog$Outbound,
  OutputSyslog$outboundSchema,
} from "./outputsyslog.js";
import {
  OutputTcpjson,
  OutputTcpjson$inboundSchema,
  OutputTcpjson$Outbound,
  OutputTcpjson$outboundSchema,
} from "./outputtcpjson.js";
import {
  OutputWavefront,
  OutputWavefront$inboundSchema,
  OutputWavefront$Outbound,
  OutputWavefront$outboundSchema,
} from "./outputwavefront.js";
import {
  OutputWebhook,
  OutputWebhook$inboundSchema,
  OutputWebhook$Outbound,
  OutputWebhook$outboundSchema,
} from "./outputwebhook.js";
import {
  OutputXsiam,
  OutputXsiam$inboundSchema,
  OutputXsiam$Outbound,
  OutputXsiam$outboundSchema,
} from "./outputxsiam.js";

export type Output =
  | (OutputAzureDataExplorer & { type: "azure_data_explorer" })
  | (OutputSecurityLake & { type: "security_lake" })
  | (OutputChronicle & { type: "chronicle" })
  | (OutputSentinel & { type: "sentinel" })
  | (OutputGoogleCloudLogging & { type: "google_cloud_logging" })
  | (OutputExabeam & { type: "exabeam" })
  | (OutputMsk & { type: "msk" })
  | (OutputCloudwatch & { type: "cloudwatch" })
  | (OutputClickHouse & { type: "click_house" })
  | (OutputDatabricks & { type: "databricks" })
  | (OutputKinesis & { type: "kinesis" })
  | (OutputAzureEventhub & { type: "azure_eventhub" })
  | (OutputGoogleCloudStorage & { type: "google_cloud_storage" })
  | (OutputKafka & { type: "kafka" })
  | (OutputConfluentCloud & { type: "confluent_cloud" })
  | (OutputElasticCloud & { type: "elastic_cloud" })
  | (OutputNewrelicEvents & { type: "newrelic_events" })
  | (OutputMinio & { type: "minio" })
  | (OutputSns & { type: "sns" })
  | (OutputSqs & { type: "sqs" })
  | (OutputDefault & { type: "default" })
  | (OutputSplunk & { type: "splunk" })
  | (OutputSplunkLb & { type: "splunk_lb" })
  | (OutputFilesystem & { type: "filesystem" })
  | (OutputS3 & { type: "s3" })
  | (OutputAzureBlob & { type: "azure_blob" })
  | (OutputHoneycomb & { type: "honeycomb" })
  | (OutputGooglePubsub & { type: "google_pubsub" })
  | (OutputElastic & { type: "elastic" })
  | (OutputInfluxdb & { type: "influxdb" })
  | (OutputStatsd & { type: "statsd" })
  | (OutputStatsdExt & { type: "statsd_ext" })
  | (OutputGraphite & { type: "graphite" })
  | (OutputRouter & { type: "router" })
  | (OutputSnmp & { type: "snmp" })
  | (OutputSumoLogic & { type: "sumo_logic" })
  | (OutputLoki & { type: "loki" })
  | (OutputPrometheus & { type: "prometheus" })
  | (OutputOpenTelemetry & { type: "open_telemetry" })
  | (OutputServiceNow & { type: "service_now" })
  | (OutputCrowdstrikeNextGenSiem & { type: "crowdstrike_next_gen_siem" })
  | (OutputDlS3 & { type: "dl_s3" })
  | (OutputNetflow & { type: "netflow" })
  | (OutputDynatraceOtlp & { type: "dynatrace_otlp" })
  | (OutputWebhook & { type: "webhook" })
  | (OutputDevnull & { type: "devnull" })
  | (OutputSyslog & { type: "syslog" })
  | (OutputSplunkHec & { type: "splunk_hec" })
  | (OutputTcpjson & { type: "tcpjson" })
  | (OutputWavefront & { type: "wavefront" })
  | (OutputSignalfx & { type: "signalfx" })
  | (OutputAzureLogs & { type: "azure_logs" })
  | (OutputGoogleChronicle & { type: "google_chronicle" })
  | (OutputNewrelic & { type: "newrelic" })
  | (OutputDatadog & { type: "datadog" })
  | (OutputRing & { type: "ring" })
  | (OutputDataset & { type: "dataset" })
  | (OutputCriblTcp & { type: "cribl_tcp" })
  | (OutputCriblHttp & { type: "cribl_http" })
  | (OutputHumioHec & { type: "humio_hec" })
  | (OutputCriblLake & { type: "cribl_lake" })
  | (OutputDiskSpool & { type: "disk_spool" })
  | (OutputXsiam & { type: "xsiam" })
  | (OutputDynatraceHttp & { type: "dynatrace_http" })
  | (OutputSentinelOneAiSiem & { type: "sentinel_one_ai_siem" })
  | (OutputGrafanaCloud & { type: "grafana_cloud" });

/** @internal */
export const Output$inboundSchema: z.ZodType<Output, z.ZodTypeDef, unknown> = z
  .union([
    OutputAzureDataExplorer$inboundSchema.and(
      z.object({ type: z.literal("azure_data_explorer") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSecurityLake$inboundSchema.and(
      z.object({ type: z.literal("security_lake") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputChronicle$inboundSchema.and(
      z.object({ type: z.literal("chronicle") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSentinel$inboundSchema.and(
      z.object({ type: z.literal("sentinel") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputGoogleCloudLogging$inboundSchema.and(
      z.object({ type: z.literal("google_cloud_logging") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputExabeam$inboundSchema.and(
      z.object({ type: z.literal("exabeam") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputMsk$inboundSchema.and(
      z.object({ type: z.literal("msk") }).transform((v) => ({ type: v.type })),
    ),
    OutputCloudwatch$inboundSchema.and(
      z.object({ type: z.literal("cloudwatch") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputClickHouse$inboundSchema.and(
      z.object({ type: z.literal("click_house") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputDatabricks$inboundSchema.and(
      z.object({ type: z.literal("databricks") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputKinesis$inboundSchema.and(
      z.object({ type: z.literal("kinesis") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputAzureEventhub$inboundSchema.and(
      z.object({ type: z.literal("azure_eventhub") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputGoogleCloudStorage$inboundSchema.and(
      z.object({ type: z.literal("google_cloud_storage") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputKafka$inboundSchema.and(
      z.object({ type: z.literal("kafka") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputConfluentCloud$inboundSchema.and(
      z.object({ type: z.literal("confluent_cloud") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputElasticCloud$inboundSchema.and(
      z.object({ type: z.literal("elastic_cloud") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputNewrelicEvents$inboundSchema.and(
      z.object({ type: z.literal("newrelic_events") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputMinio$inboundSchema.and(
      z.object({ type: z.literal("minio") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSns$inboundSchema.and(
      z.object({ type: z.literal("sns") }).transform((v) => ({ type: v.type })),
    ),
    OutputSqs$inboundSchema.and(
      z.object({ type: z.literal("sqs") }).transform((v) => ({ type: v.type })),
    ),
    OutputDefault$inboundSchema.and(
      z.object({ type: z.literal("default") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSplunk$inboundSchema.and(
      z.object({ type: z.literal("splunk") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSplunkLb$inboundSchema.and(
      z.object({ type: z.literal("splunk_lb") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputFilesystem$inboundSchema.and(
      z.object({ type: z.literal("filesystem") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputS3$inboundSchema.and(
      z.object({ type: z.literal("s3") }).transform((v) => ({ type: v.type })),
    ),
    OutputAzureBlob$inboundSchema.and(
      z.object({ type: z.literal("azure_blob") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputHoneycomb$inboundSchema.and(
      z.object({ type: z.literal("honeycomb") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputGooglePubsub$inboundSchema.and(
      z.object({ type: z.literal("google_pubsub") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputElastic$inboundSchema.and(
      z.object({ type: z.literal("elastic") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputInfluxdb$inboundSchema.and(
      z.object({ type: z.literal("influxdb") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputStatsd$inboundSchema.and(
      z.object({ type: z.literal("statsd") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputStatsdExt$inboundSchema.and(
      z.object({ type: z.literal("statsd_ext") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputGraphite$inboundSchema.and(
      z.object({ type: z.literal("graphite") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputRouter$inboundSchema.and(
      z.object({ type: z.literal("router") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSnmp$inboundSchema.and(
      z.object({ type: z.literal("snmp") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSumoLogic$inboundSchema.and(
      z.object({ type: z.literal("sumo_logic") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputLoki$inboundSchema.and(
      z.object({ type: z.literal("loki") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputPrometheus$inboundSchema.and(
      z.object({ type: z.literal("prometheus") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputOpenTelemetry$inboundSchema.and(
      z.object({ type: z.literal("open_telemetry") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputServiceNow$inboundSchema.and(
      z.object({ type: z.literal("service_now") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputCrowdstrikeNextGenSiem$inboundSchema.and(
      z.object({ type: z.literal("crowdstrike_next_gen_siem") }).transform((
        v,
      ) => ({ type: v.type })),
    ),
    OutputDlS3$inboundSchema.and(
      z.object({ type: z.literal("dl_s3") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputNetflow$inboundSchema.and(
      z.object({ type: z.literal("netflow") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputDynatraceOtlp$inboundSchema.and(
      z.object({ type: z.literal("dynatrace_otlp") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputWebhook$inboundSchema.and(
      z.object({ type: z.literal("webhook") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputDevnull$inboundSchema.and(
      z.object({ type: z.literal("devnull") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSyslog$inboundSchema.and(
      z.object({ type: z.literal("syslog") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSplunkHec$inboundSchema.and(
      z.object({ type: z.literal("splunk_hec") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputTcpjson$inboundSchema.and(
      z.object({ type: z.literal("tcpjson") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputWavefront$inboundSchema.and(
      z.object({ type: z.literal("wavefront") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSignalfx$inboundSchema.and(
      z.object({ type: z.literal("signalfx") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputAzureLogs$inboundSchema.and(
      z.object({ type: z.literal("azure_logs") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputGoogleChronicle$inboundSchema.and(
      z.object({ type: z.literal("google_chronicle") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputNewrelic$inboundSchema.and(
      z.object({ type: z.literal("newrelic") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputDatadog$inboundSchema.and(
      z.object({ type: z.literal("datadog") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputRing$inboundSchema.and(
      z.object({ type: z.literal("ring") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputDataset$inboundSchema.and(
      z.object({ type: z.literal("dataset") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputCriblTcp$inboundSchema.and(
      z.object({ type: z.literal("cribl_tcp") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputCriblHttp$inboundSchema.and(
      z.object({ type: z.literal("cribl_http") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputHumioHec$inboundSchema.and(
      z.object({ type: z.literal("humio_hec") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputCriblLake$inboundSchema.and(
      z.object({ type: z.literal("cribl_lake") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputDiskSpool$inboundSchema.and(
      z.object({ type: z.literal("disk_spool") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputXsiam$inboundSchema.and(
      z.object({ type: z.literal("xsiam") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputDynatraceHttp$inboundSchema.and(
      z.object({ type: z.literal("dynatrace_http") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputSentinelOneAiSiem$inboundSchema.and(
      z.object({ type: z.literal("sentinel_one_ai_siem") }).transform((v) => ({
        type: v.type,
      })),
    ),
    OutputGrafanaCloud$inboundSchema.and(
      z.object({ type: z.literal("grafana_cloud") }).transform((v) => ({
        type: v.type,
      })),
    ),
  ]);

/** @internal */
export type Output$Outbound =
  | (OutputAzureDataExplorer$Outbound & { type: "azure_data_explorer" })
  | (OutputSecurityLake$Outbound & { type: "security_lake" })
  | (OutputChronicle$Outbound & { type: "chronicle" })
  | (OutputSentinel$Outbound & { type: "sentinel" })
  | (OutputGoogleCloudLogging$Outbound & { type: "google_cloud_logging" })
  | (OutputExabeam$Outbound & { type: "exabeam" })
  | (OutputMsk$Outbound & { type: "msk" })
  | (OutputCloudwatch$Outbound & { type: "cloudwatch" })
  | (OutputClickHouse$Outbound & { type: "click_house" })
  | (OutputDatabricks$Outbound & { type: "databricks" })
  | (OutputKinesis$Outbound & { type: "kinesis" })
  | (OutputAzureEventhub$Outbound & { type: "azure_eventhub" })
  | (OutputGoogleCloudStorage$Outbound & { type: "google_cloud_storage" })
  | (OutputKafka$Outbound & { type: "kafka" })
  | (OutputConfluentCloud$Outbound & { type: "confluent_cloud" })
  | (OutputElasticCloud$Outbound & { type: "elastic_cloud" })
  | (OutputNewrelicEvents$Outbound & { type: "newrelic_events" })
  | (OutputMinio$Outbound & { type: "minio" })
  | (OutputSns$Outbound & { type: "sns" })
  | (OutputSqs$Outbound & { type: "sqs" })
  | (OutputDefault$Outbound & { type: "default" })
  | (OutputSplunk$Outbound & { type: "splunk" })
  | (OutputSplunkLb$Outbound & { type: "splunk_lb" })
  | (OutputFilesystem$Outbound & { type: "filesystem" })
  | (OutputS3$Outbound & { type: "s3" })
  | (OutputAzureBlob$Outbound & { type: "azure_blob" })
  | (OutputHoneycomb$Outbound & { type: "honeycomb" })
  | (OutputGooglePubsub$Outbound & { type: "google_pubsub" })
  | (OutputElastic$Outbound & { type: "elastic" })
  | (OutputInfluxdb$Outbound & { type: "influxdb" })
  | (OutputStatsd$Outbound & { type: "statsd" })
  | (OutputStatsdExt$Outbound & { type: "statsd_ext" })
  | (OutputGraphite$Outbound & { type: "graphite" })
  | (OutputRouter$Outbound & { type: "router" })
  | (OutputSnmp$Outbound & { type: "snmp" })
  | (OutputSumoLogic$Outbound & { type: "sumo_logic" })
  | (OutputLoki$Outbound & { type: "loki" })
  | (OutputPrometheus$Outbound & { type: "prometheus" })
  | (OutputOpenTelemetry$Outbound & { type: "open_telemetry" })
  | (OutputServiceNow$Outbound & { type: "service_now" })
  | (OutputCrowdstrikeNextGenSiem$Outbound & {
    type: "crowdstrike_next_gen_siem";
  })
  | (OutputDlS3$Outbound & { type: "dl_s3" })
  | (OutputNetflow$Outbound & { type: "netflow" })
  | (OutputDynatraceOtlp$Outbound & { type: "dynatrace_otlp" })
  | (OutputWebhook$Outbound & { type: "webhook" })
  | (OutputDevnull$Outbound & { type: "devnull" })
  | (OutputSyslog$Outbound & { type: "syslog" })
  | (OutputSplunkHec$Outbound & { type: "splunk_hec" })
  | (OutputTcpjson$Outbound & { type: "tcpjson" })
  | (OutputWavefront$Outbound & { type: "wavefront" })
  | (OutputSignalfx$Outbound & { type: "signalfx" })
  | (OutputAzureLogs$Outbound & { type: "azure_logs" })
  | (OutputGoogleChronicle$Outbound & { type: "google_chronicle" })
  | (OutputNewrelic$Outbound & { type: "newrelic" })
  | (OutputDatadog$Outbound & { type: "datadog" })
  | (OutputRing$Outbound & { type: "ring" })
  | (OutputDataset$Outbound & { type: "dataset" })
  | (OutputCriblTcp$Outbound & { type: "cribl_tcp" })
  | (OutputCriblHttp$Outbound & { type: "cribl_http" })
  | (OutputHumioHec$Outbound & { type: "humio_hec" })
  | (OutputCriblLake$Outbound & { type: "cribl_lake" })
  | (OutputDiskSpool$Outbound & { type: "disk_spool" })
  | (OutputXsiam$Outbound & { type: "xsiam" })
  | (OutputDynatraceHttp$Outbound & { type: "dynatrace_http" })
  | (OutputSentinelOneAiSiem$Outbound & { type: "sentinel_one_ai_siem" })
  | (OutputGrafanaCloud$Outbound & { type: "grafana_cloud" });

/** @internal */
export const Output$outboundSchema: z.ZodType<
  Output$Outbound,
  z.ZodTypeDef,
  Output
> = z.union([
  OutputAzureDataExplorer$outboundSchema.and(
    z.object({ type: z.literal("azure_data_explorer") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputSecurityLake$outboundSchema.and(
    z.object({ type: z.literal("security_lake") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputChronicle$outboundSchema.and(
    z.object({ type: z.literal("chronicle") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputSentinel$outboundSchema.and(
    z.object({ type: z.literal("sentinel") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputGoogleCloudLogging$outboundSchema.and(
    z.object({ type: z.literal("google_cloud_logging") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputExabeam$outboundSchema.and(
    z.object({ type: z.literal("exabeam") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputMsk$outboundSchema.and(
    z.object({ type: z.literal("msk") }).transform((v) => ({ type: v.type })),
  ),
  OutputCloudwatch$outboundSchema.and(
    z.object({ type: z.literal("cloudwatch") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputClickHouse$outboundSchema.and(
    z.object({ type: z.literal("click_house") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputDatabricks$outboundSchema.and(
    z.object({ type: z.literal("databricks") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputKinesis$outboundSchema.and(
    z.object({ type: z.literal("kinesis") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputAzureEventhub$outboundSchema.and(
    z.object({ type: z.literal("azure_eventhub") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputGoogleCloudStorage$outboundSchema.and(
    z.object({ type: z.literal("google_cloud_storage") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputKafka$outboundSchema.and(
    z.object({ type: z.literal("kafka") }).transform((v) => ({ type: v.type })),
  ),
  OutputConfluentCloud$outboundSchema.and(
    z.object({ type: z.literal("confluent_cloud") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputElasticCloud$outboundSchema.and(
    z.object({ type: z.literal("elastic_cloud") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputNewrelicEvents$outboundSchema.and(
    z.object({ type: z.literal("newrelic_events") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputMinio$outboundSchema.and(
    z.object({ type: z.literal("minio") }).transform((v) => ({ type: v.type })),
  ),
  OutputSns$outboundSchema.and(
    z.object({ type: z.literal("sns") }).transform((v) => ({ type: v.type })),
  ),
  OutputSqs$outboundSchema.and(
    z.object({ type: z.literal("sqs") }).transform((v) => ({ type: v.type })),
  ),
  OutputDefault$outboundSchema.and(
    z.object({ type: z.literal("default") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputSplunk$outboundSchema.and(
    z.object({ type: z.literal("splunk") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputSplunkLb$outboundSchema.and(
    z.object({ type: z.literal("splunk_lb") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputFilesystem$outboundSchema.and(
    z.object({ type: z.literal("filesystem") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputS3$outboundSchema.and(
    z.object({ type: z.literal("s3") }).transform((v) => ({ type: v.type })),
  ),
  OutputAzureBlob$outboundSchema.and(
    z.object({ type: z.literal("azure_blob") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputHoneycomb$outboundSchema.and(
    z.object({ type: z.literal("honeycomb") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputGooglePubsub$outboundSchema.and(
    z.object({ type: z.literal("google_pubsub") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputElastic$outboundSchema.and(
    z.object({ type: z.literal("elastic") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputInfluxdb$outboundSchema.and(
    z.object({ type: z.literal("influxdb") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputStatsd$outboundSchema.and(
    z.object({ type: z.literal("statsd") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputStatsdExt$outboundSchema.and(
    z.object({ type: z.literal("statsd_ext") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputGraphite$outboundSchema.and(
    z.object({ type: z.literal("graphite") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputRouter$outboundSchema.and(
    z.object({ type: z.literal("router") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputSnmp$outboundSchema.and(
    z.object({ type: z.literal("snmp") }).transform((v) => ({ type: v.type })),
  ),
  OutputSumoLogic$outboundSchema.and(
    z.object({ type: z.literal("sumo_logic") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputLoki$outboundSchema.and(
    z.object({ type: z.literal("loki") }).transform((v) => ({ type: v.type })),
  ),
  OutputPrometheus$outboundSchema.and(
    z.object({ type: z.literal("prometheus") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputOpenTelemetry$outboundSchema.and(
    z.object({ type: z.literal("open_telemetry") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputServiceNow$outboundSchema.and(
    z.object({ type: z.literal("service_now") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputCrowdstrikeNextGenSiem$outboundSchema.and(
    z.object({ type: z.literal("crowdstrike_next_gen_siem") }).transform((
      v,
    ) => ({ type: v.type })),
  ),
  OutputDlS3$outboundSchema.and(
    z.object({ type: z.literal("dl_s3") }).transform((v) => ({ type: v.type })),
  ),
  OutputNetflow$outboundSchema.and(
    z.object({ type: z.literal("netflow") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputDynatraceOtlp$outboundSchema.and(
    z.object({ type: z.literal("dynatrace_otlp") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputWebhook$outboundSchema.and(
    z.object({ type: z.literal("webhook") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputDevnull$outboundSchema.and(
    z.object({ type: z.literal("devnull") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputSyslog$outboundSchema.and(
    z.object({ type: z.literal("syslog") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputSplunkHec$outboundSchema.and(
    z.object({ type: z.literal("splunk_hec") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputTcpjson$outboundSchema.and(
    z.object({ type: z.literal("tcpjson") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputWavefront$outboundSchema.and(
    z.object({ type: z.literal("wavefront") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputSignalfx$outboundSchema.and(
    z.object({ type: z.literal("signalfx") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputAzureLogs$outboundSchema.and(
    z.object({ type: z.literal("azure_logs") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputGoogleChronicle$outboundSchema.and(
    z.object({ type: z.literal("google_chronicle") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputNewrelic$outboundSchema.and(
    z.object({ type: z.literal("newrelic") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputDatadog$outboundSchema.and(
    z.object({ type: z.literal("datadog") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputRing$outboundSchema.and(
    z.object({ type: z.literal("ring") }).transform((v) => ({ type: v.type })),
  ),
  OutputDataset$outboundSchema.and(
    z.object({ type: z.literal("dataset") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputCriblTcp$outboundSchema.and(
    z.object({ type: z.literal("cribl_tcp") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputCriblHttp$outboundSchema.and(
    z.object({ type: z.literal("cribl_http") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputHumioHec$outboundSchema.and(
    z.object({ type: z.literal("humio_hec") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputCriblLake$outboundSchema.and(
    z.object({ type: z.literal("cribl_lake") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputDiskSpool$outboundSchema.and(
    z.object({ type: z.literal("disk_spool") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputXsiam$outboundSchema.and(
    z.object({ type: z.literal("xsiam") }).transform((v) => ({ type: v.type })),
  ),
  OutputDynatraceHttp$outboundSchema.and(
    z.object({ type: z.literal("dynatrace_http") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputSentinelOneAiSiem$outboundSchema.and(
    z.object({ type: z.literal("sentinel_one_ai_siem") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OutputGrafanaCloud$outboundSchema.and(
    z.object({ type: z.literal("grafana_cloud") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output$ {
  /** @deprecated use `Output$inboundSchema` instead. */
  export const inboundSchema = Output$inboundSchema;
  /** @deprecated use `Output$outboundSchema` instead. */
  export const outboundSchema = Output$outboundSchema;
  /** @deprecated use `Output$Outbound` instead. */
  export type Outbound = Output$Outbound;
}

export function outputToJSON(output: Output): string {
  return JSON.stringify(Output$outboundSchema.parse(output));
}

export function outputFromJSON(
  jsonString: string,
): SafeParseResult<Output, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output' from JSON`,
  );
}
