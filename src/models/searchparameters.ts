/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SearchParameters = string | number | boolean;

/** @internal */
export const SearchParameters$inboundSchema: z.ZodType<
  SearchParameters,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type SearchParameters$Outbound = string | number | boolean;

/** @internal */
export const SearchParameters$outboundSchema: z.ZodType<
  SearchParameters$Outbound,
  z.ZodTypeDef,
  SearchParameters
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchParameters$ {
  /** @deprecated use `SearchParameters$inboundSchema` instead. */
  export const inboundSchema = SearchParameters$inboundSchema;
  /** @deprecated use `SearchParameters$outboundSchema` instead. */
  export const outboundSchema = SearchParameters$outboundSchema;
  /** @deprecated use `SearchParameters$Outbound` instead. */
  export type Outbound = SearchParameters$Outbound;
}

export function searchParametersToJSON(
  searchParameters: SearchParameters,
): string {
  return JSON.stringify(
    SearchParameters$outboundSchema.parse(searchParameters),
  );
}

export function searchParametersFromJSON(
  jsonString: string,
): SafeParseResult<SearchParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchParameters' from JSON`,
  );
}
