/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const InputWindowsMetricsType = {
  WindowsMetrics: "windows_metrics",
} as const;
export type InputWindowsMetricsType = ClosedEnum<
  typeof InputWindowsMetricsType
>;

export type InputWindowsMetricsConnection = {
  pipeline?: string | undefined;
  output: string;
};

/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export const InputWindowsMetricsPqMode = {
  Smart: "smart",
  Always: "always",
} as const;
/**
 * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
 */
export type InputWindowsMetricsPqMode = OpenEnum<
  typeof InputWindowsMetricsPqMode
>;

/**
 * Codec to use to compress the persisted data
 */
export const InputWindowsMetricsCompression = {
  None: "none",
  Gzip: "gzip",
} as const;
/**
 * Codec to use to compress the persisted data
 */
export type InputWindowsMetricsCompression = OpenEnum<
  typeof InputWindowsMetricsCompression
>;

export type InputWindowsMetricsPqControls = {};

export type InputWindowsMetricsPq = {
  /**
   * With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
   */
  mode?: InputWindowsMetricsPqMode | undefined;
  /**
   * The maximum number of events to hold in memory before writing the events to disk
   */
  maxBufferSize?: number | undefined;
  /**
   * The number of events to send downstream before committing that Stream has read them
   */
  commitFrequency?: number | undefined;
  /**
   * The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
   */
  maxFileSize?: string | undefined;
  /**
   * The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
   */
  maxSize?: string | undefined;
  /**
   * The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
   */
  path?: string | undefined;
  /**
   * Codec to use to compress the persisted data
   */
  compress?: InputWindowsMetricsCompression | undefined;
  pqControls?: InputWindowsMetricsPqControls | undefined;
};

/**
 * Select level of detail for host metrics
 */
export const InputWindowsMetricsHostMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select level of detail for host metrics
 */
export type InputWindowsMetricsHostMode = OpenEnum<
  typeof InputWindowsMetricsHostMode
>;

/**
 * Select the level of details for system metrics
 */
export const InputWindowsMetricsSystemMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of details for system metrics
 */
export type InputWindowsMetricsSystemMode = OpenEnum<
  typeof InputWindowsMetricsSystemMode
>;

export type InputWindowsMetricsSystem = {
  /**
   * Select the level of details for system metrics
   */
  mode?: InputWindowsMetricsSystemMode | undefined;
  /**
   * Generate metrics for all system information
   */
  detail?: boolean | undefined;
};

/**
 * Select the level of details for CPU metrics
 */
export const InputWindowsMetricsCpuMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of details for CPU metrics
 */
export type InputWindowsMetricsCpuMode = OpenEnum<
  typeof InputWindowsMetricsCpuMode
>;

export type InputWindowsMetricsCpu = {
  /**
   * Select the level of details for CPU metrics
   */
  mode?: InputWindowsMetricsCpuMode | undefined;
  /**
   * Generate metrics for each CPU
   */
  perCpu?: boolean | undefined;
  /**
   * Generate metrics for all CPU states
   */
  detail?: boolean | undefined;
  /**
   * Generate raw, monotonic CPU time counters
   */
  time?: boolean | undefined;
};

/**
 * Select the level of details for memory metrics
 */
export const InputWindowsMetricsMemoryMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of details for memory metrics
 */
export type InputWindowsMetricsMemoryMode = OpenEnum<
  typeof InputWindowsMetricsMemoryMode
>;

export type InputWindowsMetricsMemory = {
  /**
   * Select the level of details for memory metrics
   */
  mode?: InputWindowsMetricsMemoryMode | undefined;
  /**
   * Generate metrics for all memory states
   */
  detail?: boolean | undefined;
};

/**
 * Select the level of details for network metrics
 */
export const InputWindowsMetricsNetworkMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of details for network metrics
 */
export type InputWindowsMetricsNetworkMode = OpenEnum<
  typeof InputWindowsMetricsNetworkMode
>;

export type InputWindowsMetricsNetwork = {
  /**
   * Select the level of details for network metrics
   */
  mode?: InputWindowsMetricsNetworkMode | undefined;
  /**
   * Network interfaces to include/exclude. All interfaces are included if this list is empty.
   */
  devices?: Array<string> | undefined;
  /**
   * Generate separate metrics for each interface
   */
  perInterface?: boolean | undefined;
  /**
   * Generate full network metrics
   */
  detail?: boolean | undefined;
};

/**
 * Select the level of details for disk metrics
 */
export const InputWindowsMetricsDiskMode = {
  Basic: "basic",
  All: "all",
  Custom: "custom",
  Disabled: "disabled",
} as const;
/**
 * Select the level of details for disk metrics
 */
export type InputWindowsMetricsDiskMode = OpenEnum<
  typeof InputWindowsMetricsDiskMode
>;

export type InputWindowsMetricsDisk = {
  /**
   * Select the level of details for disk metrics
   */
  mode?: InputWindowsMetricsDiskMode | undefined;
  /**
   * Windows volumes to include/exclude. E.g.: C:, !E:, etc. Wildcards and ! (not) operators are supported. All volumes are included if this list is empty.
   */
  volumes?: Array<string> | undefined;
  /**
   * Generate separate metrics for each volume
   */
  perVolume?: boolean | undefined;
};

export type InputWindowsMetricsCustom = {
  system?: InputWindowsMetricsSystem | undefined;
  cpu?: InputWindowsMetricsCpu | undefined;
  memory?: InputWindowsMetricsMemory | undefined;
  network?: InputWindowsMetricsNetwork | undefined;
  disk?: InputWindowsMetricsDisk | undefined;
};

export type InputWindowsMetricsHost = {
  /**
   * Select level of detail for host metrics
   */
  mode?: InputWindowsMetricsHostMode | undefined;
  custom?: InputWindowsMetricsCustom | undefined;
};

export type InputWindowsMetricsSet = {
  name: string;
  filter: string;
  includeChildren?: boolean | undefined;
};

export type InputWindowsMetricsProcess = {
  /**
   * Configure sets to collect process metrics
   */
  sets?: Array<InputWindowsMetricsSet> | undefined;
};

export type InputWindowsMetricsMetadatum = {
  name: string;
  /**
   * JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
   */
  value: string;
};

export const InputWindowsMetricsDataCompressionFormat = {
  None: "none",
  Gzip: "gzip",
} as const;
export type InputWindowsMetricsDataCompressionFormat = OpenEnum<
  typeof InputWindowsMetricsDataCompressionFormat
>;

export type InputWindowsMetricsPersistence = {
  /**
   * Spool metrics to disk for Cribl Edge and Search
   */
  enable?: boolean | undefined;
  /**
   * Time span for each file bucket
   */
  timeWindow?: string | undefined;
  /**
   * Maximum disk space allowed to be consumed (examples: 420MB, 4GB). When limit is reached, older data will be deleted.
   */
  maxDataSize?: string | undefined;
  /**
   * Maximum amount of time to retain data (examples: 2h, 4d). When limit is reached, older data will be deleted.
   */
  maxDataTime?: string | undefined;
  compress?: InputWindowsMetricsDataCompressionFormat | undefined;
  /**
   * Path to use to write metrics. Defaults to $CRIBL_HOME/state/windows_metrics
   */
  destPath?: string | undefined;
};

export type InputWindowsMetrics = {
  /**
   * Unique ID for this input
   */
  id?: string | undefined;
  type: InputWindowsMetricsType;
  disabled?: boolean | undefined;
  /**
   * Pipeline to process data from this Source before sending it through the Routes
   */
  pipeline?: string | undefined;
  /**
   * Select whether to send data to Routes, or directly to Destinations.
   */
  sendToRoutes?: boolean | undefined;
  /**
   * Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
   */
  environment?: string | undefined;
  /**
   * Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
   */
  pqEnabled?: boolean | undefined;
  /**
   * Tags for filtering and grouping in @{product}
   */
  streamtags?: Array<string> | undefined;
  /**
   * Direct connections to Destinations, and optionally via a Pipeline or a Pack
   */
  connections?: Array<InputWindowsMetricsConnection> | undefined;
  pq?: InputWindowsMetricsPq | undefined;
  /**
   * Time, in seconds, between consecutive metric collections. Default is 10 seconds.
   */
  interval?: number | undefined;
  host?: InputWindowsMetricsHost | undefined;
  process?: InputWindowsMetricsProcess | undefined;
  /**
   * Fields to add to events from this input
   */
  metadata?: Array<InputWindowsMetricsMetadatum> | undefined;
  persistence?: InputWindowsMetricsPersistence | undefined;
  /**
   * Enable to use built-in tools (PowerShell) to collect metrics instead of native API (default) [Learn more](https://docs.cribl.io/edge/sources-windows-metrics/#advanced-tab)
   */
  disableNativeModule?: boolean | undefined;
  description?: string | undefined;
};

/** @internal */
export const InputWindowsMetricsType$inboundSchema: z.ZodNativeEnum<
  typeof InputWindowsMetricsType
> = z.nativeEnum(InputWindowsMetricsType);

/** @internal */
export const InputWindowsMetricsType$outboundSchema: z.ZodNativeEnum<
  typeof InputWindowsMetricsType
> = InputWindowsMetricsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsType$ {
  /** @deprecated use `InputWindowsMetricsType$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsType$inboundSchema;
  /** @deprecated use `InputWindowsMetricsType$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsType$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsConnection$inboundSchema: z.ZodType<
  InputWindowsMetricsConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/** @internal */
export type InputWindowsMetricsConnection$Outbound = {
  pipeline?: string | undefined;
  output: string;
};

/** @internal */
export const InputWindowsMetricsConnection$outboundSchema: z.ZodType<
  InputWindowsMetricsConnection$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsConnection
> = z.object({
  pipeline: z.string().optional(),
  output: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsConnection$ {
  /** @deprecated use `InputWindowsMetricsConnection$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsConnection$inboundSchema;
  /** @deprecated use `InputWindowsMetricsConnection$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsConnection$outboundSchema;
  /** @deprecated use `InputWindowsMetricsConnection$Outbound` instead. */
  export type Outbound = InputWindowsMetricsConnection$Outbound;
}

export function inputWindowsMetricsConnectionToJSON(
  inputWindowsMetricsConnection: InputWindowsMetricsConnection,
): string {
  return JSON.stringify(
    InputWindowsMetricsConnection$outboundSchema.parse(
      inputWindowsMetricsConnection,
    ),
  );
}

export function inputWindowsMetricsConnectionFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsConnection' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsPqMode$inboundSchema: z.ZodType<
  InputWindowsMetricsPqMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWindowsMetricsPqMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWindowsMetricsPqMode$outboundSchema: z.ZodType<
  InputWindowsMetricsPqMode,
  z.ZodTypeDef,
  InputWindowsMetricsPqMode
> = z.union([
  z.nativeEnum(InputWindowsMetricsPqMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsPqMode$ {
  /** @deprecated use `InputWindowsMetricsPqMode$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsPqMode$inboundSchema;
  /** @deprecated use `InputWindowsMetricsPqMode$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsPqMode$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsCompression$inboundSchema: z.ZodType<
  InputWindowsMetricsCompression,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWindowsMetricsCompression),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWindowsMetricsCompression$outboundSchema: z.ZodType<
  InputWindowsMetricsCompression,
  z.ZodTypeDef,
  InputWindowsMetricsCompression
> = z.union([
  z.nativeEnum(InputWindowsMetricsCompression),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsCompression$ {
  /** @deprecated use `InputWindowsMetricsCompression$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsCompression$inboundSchema;
  /** @deprecated use `InputWindowsMetricsCompression$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsCompression$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsPqControls$inboundSchema: z.ZodType<
  InputWindowsMetricsPqControls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputWindowsMetricsPqControls$Outbound = {};

/** @internal */
export const InputWindowsMetricsPqControls$outboundSchema: z.ZodType<
  InputWindowsMetricsPqControls$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsPqControls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsPqControls$ {
  /** @deprecated use `InputWindowsMetricsPqControls$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsPqControls$inboundSchema;
  /** @deprecated use `InputWindowsMetricsPqControls$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsPqControls$outboundSchema;
  /** @deprecated use `InputWindowsMetricsPqControls$Outbound` instead. */
  export type Outbound = InputWindowsMetricsPqControls$Outbound;
}

export function inputWindowsMetricsPqControlsToJSON(
  inputWindowsMetricsPqControls: InputWindowsMetricsPqControls,
): string {
  return JSON.stringify(
    InputWindowsMetricsPqControls$outboundSchema.parse(
      inputWindowsMetricsPqControls,
    ),
  );
}

export function inputWindowsMetricsPqControlsFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsPqControls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsPqControls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsPqControls' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsPq$inboundSchema: z.ZodType<
  InputWindowsMetricsPq,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputWindowsMetricsPqMode$inboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputWindowsMetricsCompression$inboundSchema.default("none"),
  pqControls: z.lazy(() => InputWindowsMetricsPqControls$inboundSchema)
    .optional(),
});

/** @internal */
export type InputWindowsMetricsPq$Outbound = {
  mode: string;
  maxBufferSize: number;
  commitFrequency: number;
  maxFileSize: string;
  maxSize: string;
  path: string;
  compress: string;
  pqControls?: InputWindowsMetricsPqControls$Outbound | undefined;
};

/** @internal */
export const InputWindowsMetricsPq$outboundSchema: z.ZodType<
  InputWindowsMetricsPq$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsPq
> = z.object({
  mode: InputWindowsMetricsPqMode$outboundSchema.default("always"),
  maxBufferSize: z.number().default(1000),
  commitFrequency: z.number().default(42),
  maxFileSize: z.string().default("1 MB"),
  maxSize: z.string().default("5GB"),
  path: z.string().default("$CRIBL_HOME/state/queues"),
  compress: InputWindowsMetricsCompression$outboundSchema.default("none"),
  pqControls: z.lazy(() => InputWindowsMetricsPqControls$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsPq$ {
  /** @deprecated use `InputWindowsMetricsPq$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsPq$inboundSchema;
  /** @deprecated use `InputWindowsMetricsPq$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsPq$outboundSchema;
  /** @deprecated use `InputWindowsMetricsPq$Outbound` instead. */
  export type Outbound = InputWindowsMetricsPq$Outbound;
}

export function inputWindowsMetricsPqToJSON(
  inputWindowsMetricsPq: InputWindowsMetricsPq,
): string {
  return JSON.stringify(
    InputWindowsMetricsPq$outboundSchema.parse(inputWindowsMetricsPq),
  );
}

export function inputWindowsMetricsPqFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsPq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsPq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsPq' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsHostMode$inboundSchema: z.ZodType<
  InputWindowsMetricsHostMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWindowsMetricsHostMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWindowsMetricsHostMode$outboundSchema: z.ZodType<
  InputWindowsMetricsHostMode,
  z.ZodTypeDef,
  InputWindowsMetricsHostMode
> = z.union([
  z.nativeEnum(InputWindowsMetricsHostMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsHostMode$ {
  /** @deprecated use `InputWindowsMetricsHostMode$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsHostMode$inboundSchema;
  /** @deprecated use `InputWindowsMetricsHostMode$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsHostMode$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsSystemMode$inboundSchema: z.ZodType<
  InputWindowsMetricsSystemMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWindowsMetricsSystemMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWindowsMetricsSystemMode$outboundSchema: z.ZodType<
  InputWindowsMetricsSystemMode,
  z.ZodTypeDef,
  InputWindowsMetricsSystemMode
> = z.union([
  z.nativeEnum(InputWindowsMetricsSystemMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsSystemMode$ {
  /** @deprecated use `InputWindowsMetricsSystemMode$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsSystemMode$inboundSchema;
  /** @deprecated use `InputWindowsMetricsSystemMode$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsSystemMode$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsSystem$inboundSchema: z.ZodType<
  InputWindowsMetricsSystem,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputWindowsMetricsSystemMode$inboundSchema.default("basic"),
  detail: z.boolean().default(false),
});

/** @internal */
export type InputWindowsMetricsSystem$Outbound = {
  mode: string;
  detail: boolean;
};

/** @internal */
export const InputWindowsMetricsSystem$outboundSchema: z.ZodType<
  InputWindowsMetricsSystem$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsSystem
> = z.object({
  mode: InputWindowsMetricsSystemMode$outboundSchema.default("basic"),
  detail: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsSystem$ {
  /** @deprecated use `InputWindowsMetricsSystem$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsSystem$inboundSchema;
  /** @deprecated use `InputWindowsMetricsSystem$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsSystem$outboundSchema;
  /** @deprecated use `InputWindowsMetricsSystem$Outbound` instead. */
  export type Outbound = InputWindowsMetricsSystem$Outbound;
}

export function inputWindowsMetricsSystemToJSON(
  inputWindowsMetricsSystem: InputWindowsMetricsSystem,
): string {
  return JSON.stringify(
    InputWindowsMetricsSystem$outboundSchema.parse(inputWindowsMetricsSystem),
  );
}

export function inputWindowsMetricsSystemFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsSystem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsSystem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsSystem' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsCpuMode$inboundSchema: z.ZodType<
  InputWindowsMetricsCpuMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWindowsMetricsCpuMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWindowsMetricsCpuMode$outboundSchema: z.ZodType<
  InputWindowsMetricsCpuMode,
  z.ZodTypeDef,
  InputWindowsMetricsCpuMode
> = z.union([
  z.nativeEnum(InputWindowsMetricsCpuMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsCpuMode$ {
  /** @deprecated use `InputWindowsMetricsCpuMode$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsCpuMode$inboundSchema;
  /** @deprecated use `InputWindowsMetricsCpuMode$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsCpuMode$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsCpu$inboundSchema: z.ZodType<
  InputWindowsMetricsCpu,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputWindowsMetricsCpuMode$inboundSchema.default("basic"),
  perCpu: z.boolean().default(false),
  detail: z.boolean().default(false),
  time: z.boolean().default(false),
});

/** @internal */
export type InputWindowsMetricsCpu$Outbound = {
  mode: string;
  perCpu: boolean;
  detail: boolean;
  time: boolean;
};

/** @internal */
export const InputWindowsMetricsCpu$outboundSchema: z.ZodType<
  InputWindowsMetricsCpu$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsCpu
> = z.object({
  mode: InputWindowsMetricsCpuMode$outboundSchema.default("basic"),
  perCpu: z.boolean().default(false),
  detail: z.boolean().default(false),
  time: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsCpu$ {
  /** @deprecated use `InputWindowsMetricsCpu$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsCpu$inboundSchema;
  /** @deprecated use `InputWindowsMetricsCpu$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsCpu$outboundSchema;
  /** @deprecated use `InputWindowsMetricsCpu$Outbound` instead. */
  export type Outbound = InputWindowsMetricsCpu$Outbound;
}

export function inputWindowsMetricsCpuToJSON(
  inputWindowsMetricsCpu: InputWindowsMetricsCpu,
): string {
  return JSON.stringify(
    InputWindowsMetricsCpu$outboundSchema.parse(inputWindowsMetricsCpu),
  );
}

export function inputWindowsMetricsCpuFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsCpu, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsCpu$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsCpu' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsMemoryMode$inboundSchema: z.ZodType<
  InputWindowsMetricsMemoryMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWindowsMetricsMemoryMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWindowsMetricsMemoryMode$outboundSchema: z.ZodType<
  InputWindowsMetricsMemoryMode,
  z.ZodTypeDef,
  InputWindowsMetricsMemoryMode
> = z.union([
  z.nativeEnum(InputWindowsMetricsMemoryMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsMemoryMode$ {
  /** @deprecated use `InputWindowsMetricsMemoryMode$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsMemoryMode$inboundSchema;
  /** @deprecated use `InputWindowsMetricsMemoryMode$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsMemoryMode$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsMemory$inboundSchema: z.ZodType<
  InputWindowsMetricsMemory,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputWindowsMetricsMemoryMode$inboundSchema.default("basic"),
  detail: z.boolean().default(false),
});

/** @internal */
export type InputWindowsMetricsMemory$Outbound = {
  mode: string;
  detail: boolean;
};

/** @internal */
export const InputWindowsMetricsMemory$outboundSchema: z.ZodType<
  InputWindowsMetricsMemory$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsMemory
> = z.object({
  mode: InputWindowsMetricsMemoryMode$outboundSchema.default("basic"),
  detail: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsMemory$ {
  /** @deprecated use `InputWindowsMetricsMemory$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsMemory$inboundSchema;
  /** @deprecated use `InputWindowsMetricsMemory$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsMemory$outboundSchema;
  /** @deprecated use `InputWindowsMetricsMemory$Outbound` instead. */
  export type Outbound = InputWindowsMetricsMemory$Outbound;
}

export function inputWindowsMetricsMemoryToJSON(
  inputWindowsMetricsMemory: InputWindowsMetricsMemory,
): string {
  return JSON.stringify(
    InputWindowsMetricsMemory$outboundSchema.parse(inputWindowsMetricsMemory),
  );
}

export function inputWindowsMetricsMemoryFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsMemory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsMemory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsMemory' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsNetworkMode$inboundSchema: z.ZodType<
  InputWindowsMetricsNetworkMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWindowsMetricsNetworkMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWindowsMetricsNetworkMode$outboundSchema: z.ZodType<
  InputWindowsMetricsNetworkMode,
  z.ZodTypeDef,
  InputWindowsMetricsNetworkMode
> = z.union([
  z.nativeEnum(InputWindowsMetricsNetworkMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsNetworkMode$ {
  /** @deprecated use `InputWindowsMetricsNetworkMode$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsNetworkMode$inboundSchema;
  /** @deprecated use `InputWindowsMetricsNetworkMode$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsNetworkMode$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsNetwork$inboundSchema: z.ZodType<
  InputWindowsMetricsNetwork,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputWindowsMetricsNetworkMode$inboundSchema.default("basic"),
  devices: z.array(z.string()).optional(),
  perInterface: z.boolean().default(false),
  detail: z.boolean().default(false),
});

/** @internal */
export type InputWindowsMetricsNetwork$Outbound = {
  mode: string;
  devices?: Array<string> | undefined;
  perInterface: boolean;
  detail: boolean;
};

/** @internal */
export const InputWindowsMetricsNetwork$outboundSchema: z.ZodType<
  InputWindowsMetricsNetwork$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsNetwork
> = z.object({
  mode: InputWindowsMetricsNetworkMode$outboundSchema.default("basic"),
  devices: z.array(z.string()).optional(),
  perInterface: z.boolean().default(false),
  detail: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsNetwork$ {
  /** @deprecated use `InputWindowsMetricsNetwork$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsNetwork$inboundSchema;
  /** @deprecated use `InputWindowsMetricsNetwork$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsNetwork$outboundSchema;
  /** @deprecated use `InputWindowsMetricsNetwork$Outbound` instead. */
  export type Outbound = InputWindowsMetricsNetwork$Outbound;
}

export function inputWindowsMetricsNetworkToJSON(
  inputWindowsMetricsNetwork: InputWindowsMetricsNetwork,
): string {
  return JSON.stringify(
    InputWindowsMetricsNetwork$outboundSchema.parse(inputWindowsMetricsNetwork),
  );
}

export function inputWindowsMetricsNetworkFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsNetwork, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsNetwork$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsNetwork' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsDiskMode$inboundSchema: z.ZodType<
  InputWindowsMetricsDiskMode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWindowsMetricsDiskMode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWindowsMetricsDiskMode$outboundSchema: z.ZodType<
  InputWindowsMetricsDiskMode,
  z.ZodTypeDef,
  InputWindowsMetricsDiskMode
> = z.union([
  z.nativeEnum(InputWindowsMetricsDiskMode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsDiskMode$ {
  /** @deprecated use `InputWindowsMetricsDiskMode$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsDiskMode$inboundSchema;
  /** @deprecated use `InputWindowsMetricsDiskMode$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsDiskMode$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsDisk$inboundSchema: z.ZodType<
  InputWindowsMetricsDisk,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputWindowsMetricsDiskMode$inboundSchema.default("basic"),
  volumes: z.array(z.string()).optional(),
  perVolume: z.boolean().default(false),
});

/** @internal */
export type InputWindowsMetricsDisk$Outbound = {
  mode: string;
  volumes?: Array<string> | undefined;
  perVolume: boolean;
};

/** @internal */
export const InputWindowsMetricsDisk$outboundSchema: z.ZodType<
  InputWindowsMetricsDisk$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsDisk
> = z.object({
  mode: InputWindowsMetricsDiskMode$outboundSchema.default("basic"),
  volumes: z.array(z.string()).optional(),
  perVolume: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsDisk$ {
  /** @deprecated use `InputWindowsMetricsDisk$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsDisk$inboundSchema;
  /** @deprecated use `InputWindowsMetricsDisk$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsDisk$outboundSchema;
  /** @deprecated use `InputWindowsMetricsDisk$Outbound` instead. */
  export type Outbound = InputWindowsMetricsDisk$Outbound;
}

export function inputWindowsMetricsDiskToJSON(
  inputWindowsMetricsDisk: InputWindowsMetricsDisk,
): string {
  return JSON.stringify(
    InputWindowsMetricsDisk$outboundSchema.parse(inputWindowsMetricsDisk),
  );
}

export function inputWindowsMetricsDiskFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsDisk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsDisk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsDisk' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsCustom$inboundSchema: z.ZodType<
  InputWindowsMetricsCustom,
  z.ZodTypeDef,
  unknown
> = z.object({
  system: z.lazy(() => InputWindowsMetricsSystem$inboundSchema).optional(),
  cpu: z.lazy(() => InputWindowsMetricsCpu$inboundSchema).optional(),
  memory: z.lazy(() => InputWindowsMetricsMemory$inboundSchema).optional(),
  network: z.lazy(() => InputWindowsMetricsNetwork$inboundSchema).optional(),
  disk: z.lazy(() => InputWindowsMetricsDisk$inboundSchema).optional(),
});

/** @internal */
export type InputWindowsMetricsCustom$Outbound = {
  system?: InputWindowsMetricsSystem$Outbound | undefined;
  cpu?: InputWindowsMetricsCpu$Outbound | undefined;
  memory?: InputWindowsMetricsMemory$Outbound | undefined;
  network?: InputWindowsMetricsNetwork$Outbound | undefined;
  disk?: InputWindowsMetricsDisk$Outbound | undefined;
};

/** @internal */
export const InputWindowsMetricsCustom$outboundSchema: z.ZodType<
  InputWindowsMetricsCustom$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsCustom
> = z.object({
  system: z.lazy(() => InputWindowsMetricsSystem$outboundSchema).optional(),
  cpu: z.lazy(() => InputWindowsMetricsCpu$outboundSchema).optional(),
  memory: z.lazy(() => InputWindowsMetricsMemory$outboundSchema).optional(),
  network: z.lazy(() => InputWindowsMetricsNetwork$outboundSchema).optional(),
  disk: z.lazy(() => InputWindowsMetricsDisk$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsCustom$ {
  /** @deprecated use `InputWindowsMetricsCustom$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsCustom$inboundSchema;
  /** @deprecated use `InputWindowsMetricsCustom$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsCustom$outboundSchema;
  /** @deprecated use `InputWindowsMetricsCustom$Outbound` instead. */
  export type Outbound = InputWindowsMetricsCustom$Outbound;
}

export function inputWindowsMetricsCustomToJSON(
  inputWindowsMetricsCustom: InputWindowsMetricsCustom,
): string {
  return JSON.stringify(
    InputWindowsMetricsCustom$outboundSchema.parse(inputWindowsMetricsCustom),
  );
}

export function inputWindowsMetricsCustomFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsCustom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsCustom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsCustom' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsHost$inboundSchema: z.ZodType<
  InputWindowsMetricsHost,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: InputWindowsMetricsHostMode$inboundSchema.default("basic"),
  custom: z.lazy(() => InputWindowsMetricsCustom$inboundSchema).optional(),
});

/** @internal */
export type InputWindowsMetricsHost$Outbound = {
  mode: string;
  custom?: InputWindowsMetricsCustom$Outbound | undefined;
};

/** @internal */
export const InputWindowsMetricsHost$outboundSchema: z.ZodType<
  InputWindowsMetricsHost$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsHost
> = z.object({
  mode: InputWindowsMetricsHostMode$outboundSchema.default("basic"),
  custom: z.lazy(() => InputWindowsMetricsCustom$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsHost$ {
  /** @deprecated use `InputWindowsMetricsHost$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsHost$inboundSchema;
  /** @deprecated use `InputWindowsMetricsHost$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsHost$outboundSchema;
  /** @deprecated use `InputWindowsMetricsHost$Outbound` instead. */
  export type Outbound = InputWindowsMetricsHost$Outbound;
}

export function inputWindowsMetricsHostToJSON(
  inputWindowsMetricsHost: InputWindowsMetricsHost,
): string {
  return JSON.stringify(
    InputWindowsMetricsHost$outboundSchema.parse(inputWindowsMetricsHost),
  );
}

export function inputWindowsMetricsHostFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsHost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsHost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsHost' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsSet$inboundSchema: z.ZodType<
  InputWindowsMetricsSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  filter: z.string(),
  includeChildren: z.boolean().default(false),
});

/** @internal */
export type InputWindowsMetricsSet$Outbound = {
  name: string;
  filter: string;
  includeChildren: boolean;
};

/** @internal */
export const InputWindowsMetricsSet$outboundSchema: z.ZodType<
  InputWindowsMetricsSet$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsSet
> = z.object({
  name: z.string(),
  filter: z.string(),
  includeChildren: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsSet$ {
  /** @deprecated use `InputWindowsMetricsSet$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsSet$inboundSchema;
  /** @deprecated use `InputWindowsMetricsSet$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsSet$outboundSchema;
  /** @deprecated use `InputWindowsMetricsSet$Outbound` instead. */
  export type Outbound = InputWindowsMetricsSet$Outbound;
}

export function inputWindowsMetricsSetToJSON(
  inputWindowsMetricsSet: InputWindowsMetricsSet,
): string {
  return JSON.stringify(
    InputWindowsMetricsSet$outboundSchema.parse(inputWindowsMetricsSet),
  );
}

export function inputWindowsMetricsSetFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsSet' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsProcess$inboundSchema: z.ZodType<
  InputWindowsMetricsProcess,
  z.ZodTypeDef,
  unknown
> = z.object({
  sets: z.array(z.lazy(() => InputWindowsMetricsSet$inboundSchema)).optional(),
});

/** @internal */
export type InputWindowsMetricsProcess$Outbound = {
  sets?: Array<InputWindowsMetricsSet$Outbound> | undefined;
};

/** @internal */
export const InputWindowsMetricsProcess$outboundSchema: z.ZodType<
  InputWindowsMetricsProcess$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsProcess
> = z.object({
  sets: z.array(z.lazy(() => InputWindowsMetricsSet$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsProcess$ {
  /** @deprecated use `InputWindowsMetricsProcess$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsProcess$inboundSchema;
  /** @deprecated use `InputWindowsMetricsProcess$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsProcess$outboundSchema;
  /** @deprecated use `InputWindowsMetricsProcess$Outbound` instead. */
  export type Outbound = InputWindowsMetricsProcess$Outbound;
}

export function inputWindowsMetricsProcessToJSON(
  inputWindowsMetricsProcess: InputWindowsMetricsProcess,
): string {
  return JSON.stringify(
    InputWindowsMetricsProcess$outboundSchema.parse(inputWindowsMetricsProcess),
  );
}

export function inputWindowsMetricsProcessFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsProcess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsProcess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsProcess' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsMetadatum$inboundSchema: z.ZodType<
  InputWindowsMetricsMetadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type InputWindowsMetricsMetadatum$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const InputWindowsMetricsMetadatum$outboundSchema: z.ZodType<
  InputWindowsMetricsMetadatum$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsMetadatum
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsMetadatum$ {
  /** @deprecated use `InputWindowsMetricsMetadatum$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsMetadatum$inboundSchema;
  /** @deprecated use `InputWindowsMetricsMetadatum$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsMetadatum$outboundSchema;
  /** @deprecated use `InputWindowsMetricsMetadatum$Outbound` instead. */
  export type Outbound = InputWindowsMetricsMetadatum$Outbound;
}

export function inputWindowsMetricsMetadatumToJSON(
  inputWindowsMetricsMetadatum: InputWindowsMetricsMetadatum,
): string {
  return JSON.stringify(
    InputWindowsMetricsMetadatum$outboundSchema.parse(
      inputWindowsMetricsMetadatum,
    ),
  );
}

export function inputWindowsMetricsMetadatumFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsMetadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsMetadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsMetadatum' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetricsDataCompressionFormat$inboundSchema: z.ZodType<
  InputWindowsMetricsDataCompressionFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InputWindowsMetricsDataCompressionFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InputWindowsMetricsDataCompressionFormat$outboundSchema: z.ZodType<
  InputWindowsMetricsDataCompressionFormat,
  z.ZodTypeDef,
  InputWindowsMetricsDataCompressionFormat
> = z.union([
  z.nativeEnum(InputWindowsMetricsDataCompressionFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsDataCompressionFormat$ {
  /** @deprecated use `InputWindowsMetricsDataCompressionFormat$inboundSchema` instead. */
  export const inboundSchema =
    InputWindowsMetricsDataCompressionFormat$inboundSchema;
  /** @deprecated use `InputWindowsMetricsDataCompressionFormat$outboundSchema` instead. */
  export const outboundSchema =
    InputWindowsMetricsDataCompressionFormat$outboundSchema;
}

/** @internal */
export const InputWindowsMetricsPersistence$inboundSchema: z.ZodType<
  InputWindowsMetricsPersistence,
  z.ZodTypeDef,
  unknown
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputWindowsMetricsDataCompressionFormat$inboundSchema.default(
    "gzip",
  ),
  destPath: z.string().default("$CRIBL_HOME/state/windows_metrics"),
});

/** @internal */
export type InputWindowsMetricsPersistence$Outbound = {
  enable: boolean;
  timeWindow: string;
  maxDataSize: string;
  maxDataTime: string;
  compress: string;
  destPath: string;
};

/** @internal */
export const InputWindowsMetricsPersistence$outboundSchema: z.ZodType<
  InputWindowsMetricsPersistence$Outbound,
  z.ZodTypeDef,
  InputWindowsMetricsPersistence
> = z.object({
  enable: z.boolean().default(false),
  timeWindow: z.string().default("10m"),
  maxDataSize: z.string().default("1GB"),
  maxDataTime: z.string().default("24h"),
  compress: InputWindowsMetricsDataCompressionFormat$outboundSchema.default(
    "gzip",
  ),
  destPath: z.string().default("$CRIBL_HOME/state/windows_metrics"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetricsPersistence$ {
  /** @deprecated use `InputWindowsMetricsPersistence$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetricsPersistence$inboundSchema;
  /** @deprecated use `InputWindowsMetricsPersistence$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetricsPersistence$outboundSchema;
  /** @deprecated use `InputWindowsMetricsPersistence$Outbound` instead. */
  export type Outbound = InputWindowsMetricsPersistence$Outbound;
}

export function inputWindowsMetricsPersistenceToJSON(
  inputWindowsMetricsPersistence: InputWindowsMetricsPersistence,
): string {
  return JSON.stringify(
    InputWindowsMetricsPersistence$outboundSchema.parse(
      inputWindowsMetricsPersistence,
    ),
  );
}

export function inputWindowsMetricsPersistenceFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetricsPersistence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetricsPersistence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetricsPersistence' from JSON`,
  );
}

/** @internal */
export const InputWindowsMetrics$inboundSchema: z.ZodType<
  InputWindowsMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InputWindowsMetricsType$inboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(
    z.lazy(() => InputWindowsMetricsConnection$inboundSchema),
  ).optional(),
  pq: z.lazy(() => InputWindowsMetricsPq$inboundSchema).optional(),
  interval: z.number().default(10),
  host: z.lazy(() => InputWindowsMetricsHost$inboundSchema).optional(),
  process: z.lazy(() => InputWindowsMetricsProcess$inboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputWindowsMetricsMetadatum$inboundSchema))
    .optional(),
  persistence: z.lazy(() => InputWindowsMetricsPersistence$inboundSchema)
    .optional(),
  disableNativeModule: z.boolean().default(false),
  description: z.string().optional(),
});

/** @internal */
export type InputWindowsMetrics$Outbound = {
  id?: string | undefined;
  type: string;
  disabled: boolean;
  pipeline?: string | undefined;
  sendToRoutes: boolean;
  environment?: string | undefined;
  pqEnabled: boolean;
  streamtags?: Array<string> | undefined;
  connections?: Array<InputWindowsMetricsConnection$Outbound> | undefined;
  pq?: InputWindowsMetricsPq$Outbound | undefined;
  interval: number;
  host?: InputWindowsMetricsHost$Outbound | undefined;
  process?: InputWindowsMetricsProcess$Outbound | undefined;
  metadata?: Array<InputWindowsMetricsMetadatum$Outbound> | undefined;
  persistence?: InputWindowsMetricsPersistence$Outbound | undefined;
  disableNativeModule: boolean;
  description?: string | undefined;
};

/** @internal */
export const InputWindowsMetrics$outboundSchema: z.ZodType<
  InputWindowsMetrics$Outbound,
  z.ZodTypeDef,
  InputWindowsMetrics
> = z.object({
  id: z.string().optional(),
  type: InputWindowsMetricsType$outboundSchema,
  disabled: z.boolean().default(false),
  pipeline: z.string().optional(),
  sendToRoutes: z.boolean().default(true),
  environment: z.string().optional(),
  pqEnabled: z.boolean().default(false),
  streamtags: z.array(z.string()).optional(),
  connections: z.array(
    z.lazy(() => InputWindowsMetricsConnection$outboundSchema),
  ).optional(),
  pq: z.lazy(() => InputWindowsMetricsPq$outboundSchema).optional(),
  interval: z.number().default(10),
  host: z.lazy(() => InputWindowsMetricsHost$outboundSchema).optional(),
  process: z.lazy(() => InputWindowsMetricsProcess$outboundSchema).optional(),
  metadata: z.array(z.lazy(() => InputWindowsMetricsMetadatum$outboundSchema))
    .optional(),
  persistence: z.lazy(() => InputWindowsMetricsPersistence$outboundSchema)
    .optional(),
  disableNativeModule: z.boolean().default(false),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWindowsMetrics$ {
  /** @deprecated use `InputWindowsMetrics$inboundSchema` instead. */
  export const inboundSchema = InputWindowsMetrics$inboundSchema;
  /** @deprecated use `InputWindowsMetrics$outboundSchema` instead. */
  export const outboundSchema = InputWindowsMetrics$outboundSchema;
  /** @deprecated use `InputWindowsMetrics$Outbound` instead. */
  export type Outbound = InputWindowsMetrics$Outbound;
}

export function inputWindowsMetricsToJSON(
  inputWindowsMetrics: InputWindowsMetrics,
): string {
  return JSON.stringify(
    InputWindowsMetrics$outboundSchema.parse(inputWindowsMetrics),
  );
}

export function inputWindowsMetricsFromJSON(
  jsonString: string,
): SafeParseResult<InputWindowsMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWindowsMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWindowsMetrics' from JSON`,
  );
}
