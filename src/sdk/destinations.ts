/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { destinationsClearPersistentQueue } from "../funcs/destinationsClearPersistentQueue.js";
import { destinationsCreate } from "../funcs/destinationsCreate.js";
import { destinationsCreateSampleData } from "../funcs/destinationsCreateSampleData.js";
import { destinationsDelete } from "../funcs/destinationsDelete.js";
import { destinationsGet } from "../funcs/destinationsGet.js";
import { destinationsGetPersistentQueueStatus } from "../funcs/destinationsGetPersistentQueueStatus.js";
import { destinationsGetSampleData } from "../funcs/destinationsGetSampleData.js";
import { destinationsList } from "../funcs/destinationsList.js";
import { destinationsUpdate } from "../funcs/destinationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Destinations extends ClientSDK {
  /**
   * List all Destinations
   *
   * @remarks
   * Get a list of Destination objects
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListOutputResponse> {
    return unwrapAsync(destinationsList(
      this,
      options,
    ));
  }

  /**
   * Create a Destination
   *
   * @remarks
   * Create Destination
   */
  async create(
    request: models.Output,
    options?: RequestOptions,
  ): Promise<operations.CreateOutputResponse> {
    return unwrapAsync(destinationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Destination
   *
   * @remarks
   * Get Destination by ID
   */
  async get(
    request: operations.GetOutputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOutputByIdResponse> {
    return unwrapAsync(destinationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Destination
   *
   * @remarks
   * Update Destination
   */
  async update(
    request: operations.UpdateOutputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateOutputByIdResponse> {
    return unwrapAsync(destinationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Destination
   *
   * @remarks
   * Delete Destination
   */
  async delete(
    request: operations.DeleteOutputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteOutputByIdResponse> {
    return unwrapAsync(destinationsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Clear the persistent queue for a Destination
   *
   * @remarks
   * Clears destination persistent queue
   */
  async clearPersistentQueue(
    request: operations.DeleteOutputPqByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteOutputPqByIdResponse> {
    return unwrapAsync(destinationsClearPersistentQueue(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve information about the latest job to clear the persistent queue for a Destination
   *
   * @remarks
   * Retrieves status of latest clear PQ job for a destination
   */
  async getPersistentQueueStatus(
    request: operations.GetOutputPqByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOutputPqByIdResponse> {
    return unwrapAsync(destinationsGetPersistentQueueStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve sample event data for a Destination
   *
   * @remarks
   * Retrieve samples data for the specified destination. Used to get sample data for the test action.
   */
  async getSampleData(
    request: operations.GetOutputSamplesByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOutputSamplesByIdResponse> {
    return unwrapAsync(destinationsGetSampleData(
      this,
      request,
      options,
    ));
  }

  /**
   * Send sample event data to a Destination
   *
   * @remarks
   * Send sample data to a destination to validate configuration or test connectivity
   */
  async createSampleData(
    request: operations.CreateOutputTestByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateOutputTestByIdResponse> {
    return unwrapAsync(destinationsCreateSampleData(
      this,
      request,
      options,
    ));
  }
}
