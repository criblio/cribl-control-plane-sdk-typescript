/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { versioningCreateCommit } from "../funcs/versioningCreateCommit.js";
import { versioningGetBranch } from "../funcs/versioningGetBranch.js";
import { versioningGetCommit } from "../funcs/versioningGetCommit.js";
import { versioningGetConfigStatus } from "../funcs/versioningGetConfigStatus.js";
import { versioningGetCurrentStatus } from "../funcs/versioningGetCurrentStatus.js";
import { versioningGetDiff } from "../funcs/versioningGetDiff.js";
import { versioningGetFileCount } from "../funcs/versioningGetFileCount.js";
import { versioningListBranches } from "../funcs/versioningListBranches.js";
import { versioningListFiles } from "../funcs/versioningListFiles.js";
import { versioningPushCommit } from "../funcs/versioningPushCommit.js";
import { versioningRevertCommit } from "../funcs/versioningRevertCommit.js";
import { versioningSyncLocalRemote } from "../funcs/versioningSyncLocalRemote.js";
import { versioningUndo } from "../funcs/versioningUndo.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Versioning extends ClientSDK {
  /**
   * List all branches in the Git repository used for Cribl configuration
   *
   * @remarks
   * get the list of branches
   */
  async listBranches(
    options?: RequestOptions,
  ): Promise<operations.GetVersionBranchResponse> {
    return unwrapAsync(versioningListBranches(
      this,
      options,
    ));
  }

  /**
   * Create a new commit for pending changes to the Cribl configuration
   *
   * @remarks
   * create a new commit containing the current configs the given log message describing the changes.
   */
  async createCommit(
    request: models.GitCommitParams,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionCommitResponse> {
    return unwrapAsync(versioningCreateCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a count of files that changed since a commit
   *
   * @remarks
   * get the count of files of changed
   */
  async getFileCount(
    request?: operations.GetVersionCountRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionCountResponse> {
    return unwrapAsync(versioningGetFileCount(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the name of the Git branch that the Cribl configuration is checked out to
   *
   * @remarks
   * returns git branch that the config is checked out to, if any
   */
  async getBranch(
    options?: RequestOptions,
  ): Promise<operations.GetVersionCurrentBranchResponse> {
    return unwrapAsync(versioningGetBranch(
      this,
      options,
    ));
  }

  /**
   * Retrieve the diff for a commit
   *
   * @remarks
   * get the textual diff for given commit
   */
  async getDiff(
    request?: operations.GetVersionDiffRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionDiffResponse> {
    return unwrapAsync(versioningGetDiff(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the names and statuses of files that changed since a commit
   *
   * @remarks
   * get the files changed
   */
  async listFiles(
    request?: operations.GetVersionFilesRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionFilesResponse> {
    return unwrapAsync(versioningListFiles(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the configuration and status for the Git integration
   *
   * @remarks
   * Get info about versioning availability
   */
  async getConfigStatus(
    options?: RequestOptions,
  ): Promise<operations.GetVersionInfoResponse> {
    return unwrapAsync(versioningGetConfigStatus(
      this,
      options,
    ));
  }

  /**
   * Push a commit from the local repository to the remote repository
   *
   * @remarks
   * push the current configs to the remote repository.
   */
  async pushCommit(
    options?: RequestOptions,
  ): Promise<operations.CreateVersionPushResponse> {
    return unwrapAsync(versioningPushCommit(
      this,
      options,
    ));
  }

  /**
   * Revert a commit in the local repository
   *
   * @remarks
   * revert a commit
   */
  async revertCommit(
    request: operations.CreateVersionRevertRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionRevertResponse> {
    return unwrapAsync(versioningRevertCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the diff and log message for a commit
   *
   * @remarks
   * get the log message and textual diff for given commit
   */
  async getCommit(
    request?: operations.GetVersionShowRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionShowResponse> {
    return unwrapAsync(versioningGetCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the status of the current working tree
   *
   * @remarks
   * get the the working tree status
   */
  async getCurrentStatus(
    request?: operations.GetVersionStatusRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionStatusResponse> {
    return unwrapAsync(versioningGetCurrentStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Synchronize the local branch with the remote repository
   *
   * @remarks
   * syncs with remote repo via POST requests
   */
  async syncLocalRemote(
    options?: RequestOptions,
  ): Promise<operations.CreateVersionSyncResponse> {
    return unwrapAsync(versioningSyncLocalRemote(
      this,
      options,
    ));
  }

  /**
   * Discard uncommitted (staged) changes
   *
   * @remarks
   * Discards all uncommitted (staged) configuration changes, resetting the working directory to the last committed state.
   */
  async undo(
    request?: operations.CreateVersionUndoRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionUndoResponse> {
    return unwrapAsync(versioningUndo(
      this,
      request,
      options,
    ));
  }
}
