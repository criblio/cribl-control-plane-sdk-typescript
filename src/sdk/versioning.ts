/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { versioningCreateVersionCommit } from "../funcs/versioningCreateVersionCommit.js";
import { versioningCreateVersionPush } from "../funcs/versioningCreateVersionPush.js";
import { versioningCreateVersionRevert } from "../funcs/versioningCreateVersionRevert.js";
import { versioningCreateVersionSync } from "../funcs/versioningCreateVersionSync.js";
import { versioningCreateVersionUndo } from "../funcs/versioningCreateVersionUndo.js";
import { versioningGetVersionBranch } from "../funcs/versioningGetVersionBranch.js";
import { versioningGetVersionCount } from "../funcs/versioningGetVersionCount.js";
import { versioningGetVersionCurrentBranch } from "../funcs/versioningGetVersionCurrentBranch.js";
import { versioningGetVersionDiff } from "../funcs/versioningGetVersionDiff.js";
import { versioningGetVersionFiles } from "../funcs/versioningGetVersionFiles.js";
import { versioningGetVersionInfo } from "../funcs/versioningGetVersionInfo.js";
import { versioningGetVersionShow } from "../funcs/versioningGetVersionShow.js";
import { versioningGetVersionStatus } from "../funcs/versioningGetVersionStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Versioning extends ClientSDK {
  /**
   * get the list of branches
   *
   * @remarks
   * get the list of branches
   */
  async getVersionBranch(
    options?: RequestOptions,
  ): Promise<operations.GetVersionBranchResponse> {
    return unwrapAsync(versioningGetVersionBranch(
      this,
      options,
    ));
  }

  /**
   * create a new commit containing the current configs the given log message describing the changes.
   *
   * @remarks
   * create a new commit containing the current configs the given log message describing the changes.
   */
  async createVersionCommit(
    request: models.GitCommitParams,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionCommitResponse> {
    return unwrapAsync(versioningCreateVersionCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Lorem ipsum version count dummy summary change
   *
   * @remarks
   * get the count of files of changed
   */
  async getVersionCount(
    request?: operations.GetVersionCountRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionCountResponse> {
    return unwrapAsync(versioningGetVersionCount(
      this,
      request,
      options,
    ));
  }

  /**
   * returns git branch that the config is checked out to, if any
   *
   * @remarks
   * returns git branch that the config is checked out to, if any
   */
  async getVersionCurrentBranch(
    options?: RequestOptions,
  ): Promise<operations.GetVersionCurrentBranchResponse> {
    return unwrapAsync(versioningGetVersionCurrentBranch(
      this,
      options,
    ));
  }

  /**
   * get the textual diff for given commit
   *
   * @remarks
   * get the textual diff for given commit
   */
  async getVersionDiff(
    request?: operations.GetVersionDiffRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionDiffResponse> {
    return unwrapAsync(versioningGetVersionDiff(
      this,
      request,
      options,
    ));
  }

  /**
   * get the files changed
   *
   * @remarks
   * get the files changed
   */
  async getVersionFiles(
    request?: operations.GetVersionFilesRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionFilesResponse> {
    return unwrapAsync(versioningGetVersionFiles(
      this,
      request,
      options,
    ));
  }

  /**
   * Get info about versioning availability
   *
   * @remarks
   * Get info about versioning availability
   */
  async getVersionInfo(
    options?: RequestOptions,
  ): Promise<operations.GetVersionInfoResponse> {
    return unwrapAsync(versioningGetVersionInfo(
      this,
      options,
    ));
  }

  /**
   * push the current configs to the remote repository.
   *
   * @remarks
   * push the current configs to the remote repository.
   */
  async createVersionPush(
    options?: RequestOptions,
  ): Promise<operations.CreateVersionPushResponse> {
    return unwrapAsync(versioningCreateVersionPush(
      this,
      options,
    ));
  }

  /**
   * revert a commit
   *
   * @remarks
   * revert a commit
   */
  async createVersionRevert(
    request: operations.CreateVersionRevertRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionRevertResponse> {
    return unwrapAsync(versioningCreateVersionRevert(
      this,
      request,
      options,
    ));
  }

  /**
   * get the log message and textual diff for given commit
   *
   * @remarks
   * get the log message and textual diff for given commit
   */
  async getVersionShow(
    request?: operations.GetVersionShowRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionShowResponse> {
    return unwrapAsync(versioningGetVersionShow(
      this,
      request,
      options,
    ));
  }

  /**
   * get the the working tree status
   *
   * @remarks
   * get the the working tree status
   */
  async getVersionStatus(
    request?: operations.GetVersionStatusRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionStatusResponse> {
    return unwrapAsync(versioningGetVersionStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * syncs with remote repo via POST requests
   *
   * @remarks
   * syncs with remote repo via POST requests
   */
  async createVersionSync(
    options?: RequestOptions,
  ): Promise<operations.CreateVersionSyncResponse> {
    return unwrapAsync(versioningCreateVersionSync(
      this,
      options,
    ));
  }

  /**
   * undo the last commit
   *
   * @remarks
   * undo the last commit
   */
  async createVersionUndo(
    request?: operations.CreateVersionUndoRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionUndoResponse> {
    return unwrapAsync(versioningCreateVersionUndo(
      this,
      request,
      options,
    ));
  }
}
