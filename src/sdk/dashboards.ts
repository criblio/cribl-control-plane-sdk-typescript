/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { searchDashboardsCreate } from "../funcs/searchDashboardsCreate.js";
import { searchDashboardsDelete } from "../funcs/searchDashboardsDelete.js";
import { searchDashboardsGet } from "../funcs/searchDashboardsGet.js";
import { searchDashboardsList } from "../funcs/searchDashboardsList.js";
import { searchDashboardsUpdate } from "../funcs/searchDashboardsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Dashboards extends ClientSDK {
  /**
   * Get a list of SearchDashboard objects
   *
   * @remarks
   * Get a list of SearchDashboard objects
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListSearchDashboardResponse> {
    return unwrapAsync(searchDashboardsList(
      this,
      options,
    ));
  }

  /**
   * Create SearchDashboard
   *
   * @remarks
   * Create SearchDashboard
   */
  async create(
    request: models.SearchDashboard,
    options?: RequestOptions,
  ): Promise<operations.CreateSearchDashboardResponse> {
    return unwrapAsync(searchDashboardsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get SearchDashboard by ID
   *
   * @remarks
   * Get SearchDashboard by ID
   */
  async get(
    request: operations.GetSearchDashboardByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSearchDashboardByIdResponse> {
    return unwrapAsync(searchDashboardsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update SearchDashboard
   *
   * @remarks
   * Update SearchDashboard
   */
  async update(
    request: operations.UpdateSearchDashboardByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateSearchDashboardByIdResponse> {
    return unwrapAsync(searchDashboardsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete SearchDashboard
   *
   * @remarks
   * Delete SearchDashboard
   */
  async delete(
    request: operations.DeleteSearchDashboardByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteSearchDashboardByIdResponse> {
    return unwrapAsync(searchDashboardsDelete(
      this,
      request,
      options,
    ));
  }
}
