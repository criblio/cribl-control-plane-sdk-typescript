/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { versionsCommitsCreate } from "../funcs/versionsCommitsCreate.js";
import { versionsCommitsDiff } from "../funcs/versionsCommitsDiff.js";
import { versionsCommitsGet } from "../funcs/versionsCommitsGet.js";
import { versionsCommitsList } from "../funcs/versionsCommitsList.js";
import { versionsCommitsPush } from "../funcs/versionsCommitsPush.js";
import { versionsCommitsRevert } from "../funcs/versionsCommitsRevert.js";
import { versionsCommitsUndo } from "../funcs/versionsCommitsUndo.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Files } from "./files.js";

export class Commits extends ClientSDK {
  private _files?: Files;
  get files(): Files {
    return (this._files ??= new Files(this._options));
  }

  /**
   * Create a new commit for pending changes to the Cribl configuration
   *
   * @remarks
   * Create a new commit for pending changes to the Cribl configuration. Any merge conflicts indicated in the response must be resolved using Git.</br></br>To commit only a subset of configuration changes, specify the files to include in the commit in the <code>files</code> array.
   */
  async create(
    request: operations.CreateVersionCommitRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionCommitResponse> {
    return unwrapAsync(versionsCommitsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the diff for a commit
   *
   * @remarks
   * Get the diff for a commit. Default is the latest commit (HEAD).
   */
  async diff(
    request?: operations.GetVersionDiffRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionDiffResponse> {
    return unwrapAsync(versionsCommitsDiff(
      this,
      request,
      options,
    ));
  }

  /**
   * List the commit history
   *
   * @remarks
   * List the commit history.</br></br>Analogous to <code>git log</code> for the Cribl configuration, allowing you to audit and review changes over time.
   */
  async list(
    request?: operations.GetVersionRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionResponse> {
    return unwrapAsync(versionsCommitsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Push local commits to the remote repository
   *
   * @remarks
   * Push all local commits from the local repository to the remote repository.
   */
  async push(
    options?: RequestOptions,
  ): Promise<operations.CreateVersionPushResponse> {
    return unwrapAsync(versionsCommitsPush(
      this,
      options,
    ));
  }

  /**
   * Revert a commit in the local repository
   *
   * @remarks
   * Revert a commit in the local repository.
   */
  async revert(
    request: operations.CreateVersionRevertRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionRevertResponse> {
    return unwrapAsync(versionsCommitsRevert(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the diff and log message for a commit
   *
   * @remarks
   * Get the diff and log message for a commit. Default is the latest commit (HEAD).
   */
  async get(
    request?: operations.GetVersionShowRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionShowResponse> {
    return unwrapAsync(versionsCommitsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Discard uncommitted (staged) changes
   *
   * @remarks
   * Discard all uncommitted (staged) configuration changes, resetting the working directory to the last committed state. Use only if you are certain that you do not need to preserve your local changes.
   */
  async undo(
    request?: operations.CreateVersionUndoRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionUndoResponse> {
    return unwrapAsync(versionsCommitsUndo(
      this,
      request,
      options,
    ));
  }
}
