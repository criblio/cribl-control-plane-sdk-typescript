/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { versionsCommitsCreate } from "../funcs/versionsCommitsCreate.js";
import { versionsCommitsDiff } from "../funcs/versionsCommitsDiff.js";
import { versionsCommitsGet } from "../funcs/versionsCommitsGet.js";
import { versionsCommitsPush } from "../funcs/versionsCommitsPush.js";
import { versionsCommitsRevert } from "../funcs/versionsCommitsRevert.js";
import { versionsCommitsUndo } from "../funcs/versionsCommitsUndo.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Files } from "./files.js";

export class Commits extends ClientSDK {
  private _files?: Files;
  get files(): Files {
    return (this._files ??= new Files(this._options));
  }

  /**
   * Create a new commit for pending changes to the Cribl configuration
   *
   * @remarks
   * create a new commit containing the current configs the given log message describing the changes.
   */
  async create(
    request: models.GitCommitParams,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionCommitResponse> {
    return unwrapAsync(versionsCommitsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the diff for a commit
   *
   * @remarks
   * get the textual diff for given commit
   */
  async diff(
    request?: operations.GetVersionDiffRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionDiffResponse> {
    return unwrapAsync(versionsCommitsDiff(
      this,
      request,
      options,
    ));
  }

  /**
   * Push a commit from the local repository to the remote repository
   *
   * @remarks
   * push the current configs to the remote repository.
   */
  async push(
    options?: RequestOptions,
  ): Promise<operations.CreateVersionPushResponse> {
    return unwrapAsync(versionsCommitsPush(
      this,
      options,
    ));
  }

  /**
   * Revert a commit in the local repository
   *
   * @remarks
   * revert a commit
   */
  async revert(
    request: operations.CreateVersionRevertRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionRevertResponse> {
    return unwrapAsync(versionsCommitsRevert(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the diff and log message for a commit
   *
   * @remarks
   * get the log message and textual diff for given commit
   */
  async get(
    request?: operations.GetVersionShowRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetVersionShowResponse> {
    return unwrapAsync(versionsCommitsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Discard uncommitted (staged) changes
   *
   * @remarks
   * Discards all uncommitted (staged) configuration changes, resetting the working directory to the last committed state.
   */
  async undo(
    request?: operations.CreateVersionUndoRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateVersionUndoResponse> {
    return unwrapAsync(versionsCommitsUndo(
      this,
      request,
      options,
    ));
  }
}
