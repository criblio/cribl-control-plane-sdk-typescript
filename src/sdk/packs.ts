/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { packsDelete } from "../funcs/packsDelete.js";
import { packsInstall } from "../funcs/packsInstall.js";
import { packsList } from "../funcs/packsList.js";
import { packsUpdate } from "../funcs/packsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Packs extends ClientSDK {
  /**
   * Install a Pack
   *
   * @remarks
   * Install a Pack.
   */
  async install(
    request: models.PackRequestBody,
    options?: RequestOptions,
  ): Promise<operations.CreatePacksResponse> {
    return unwrapAsync(packsInstall(
      this,
      request,
      options,
    ));
  }

  /**
   * List all Packs
   *
   * @remarks
   * Get a list of all Packs.
   */
  async list(
    request?: operations.GetPacksRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetPacksResponse> {
    return unwrapAsync(packsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Uninstall a Pack
   *
   * @remarks
   * Uninstall the specified Pack.
   */
  async delete(
    request: operations.DeletePacksByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeletePacksByIdResponse> {
    return unwrapAsync(packsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Upgrade a Pack
   *
   * @remarks
   * Upgrade the specified Pack.</br></br>If the Pack includes any userâ€“modified versions of default Cribl Knowledge resources such as lookups, copy the modified files locally for safekeeping before upgrading the Pack. Copy the modified files back to the upgraded Pack after you install it with <code>POST /packs</code> to overwrite the default versions in the Pack.</br></br>After you upgrade the Pack, update any Routes, Pipelines, Sources, and Destinations that use the previous Pack version so that they reference the upgraded Pack.
   */
  async update(
    request: operations.UpdatePacksByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdatePacksByIdResponse> {
    return unwrapAsync(packsUpdate(
      this,
      request,
      options,
    ));
  }
}
