/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { packsSearchDashboardsCreate } from "../funcs/packsSearchDashboardsCreate.js";
import { packsSearchDashboardsDelete } from "../funcs/packsSearchDashboardsDelete.js";
import { packsSearchDashboardsGet } from "../funcs/packsSearchDashboardsGet.js";
import { packsSearchDashboardsList } from "../funcs/packsSearchDashboardsList.js";
import { packsSearchDashboardsUpdate } from "../funcs/packsSearchDashboardsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PacksDashboards extends ClientSDK {
  /**
   * Get a list of SearchDashboard objects within a Pack
   *
   * @remarks
   * Get a list of SearchDashboard objects within a Pack
   */
  async list(
    request: operations.GetSearchDashboardSearchByPackRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSearchDashboardSearchByPackResponse> {
    return unwrapAsync(packsSearchDashboardsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create SearchDashboard within a Pack
   *
   * @remarks
   * Create SearchDashboard within a Pack
   */
  async create(
    request: operations.CreateSearchDashboardSearchByPackRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateSearchDashboardSearchByPackResponse> {
    return unwrapAsync(packsSearchDashboardsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get SearchDashboard by ID within a Pack
   *
   * @remarks
   * Get SearchDashboard by ID within a Pack
   */
  async get(
    request: operations.GetSearchDashboardSearchByPackAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSearchDashboardSearchByPackAndIdResponse> {
    return unwrapAsync(packsSearchDashboardsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update SearchDashboard within a Pack
   *
   * @remarks
   * Update SearchDashboard within a Pack
   */
  async update(
    request: operations.UpdateSearchDashboardSearchByPackAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateSearchDashboardSearchByPackAndIdResponse> {
    return unwrapAsync(packsSearchDashboardsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete SearchDashboard within a Pack
   *
   * @remarks
   * Delete SearchDashboard within a Pack
   */
  async delete(
    request: operations.DeleteSearchDashboardSearchByPackAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteSearchDashboardSearchByPackAndIdResponse> {
    return unwrapAsync(packsSearchDashboardsDelete(
      this,
      request,
      options,
    ));
  }
}
