/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sourcesCreate } from "../funcs/sourcesCreate.js";
import { sourcesCreateHecToken } from "../funcs/sourcesCreateHecToken.js";
import { sourcesDelete } from "../funcs/sourcesDelete.js";
import { sourcesGet } from "../funcs/sourcesGet.js";
import { sourcesList } from "../funcs/sourcesList.js";
import { sourcesUpdate } from "../funcs/sourcesUpdate.js";
import { sourcesUpdateHecTokenMetadata } from "../funcs/sourcesUpdateHecTokenMetadata.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Sources extends ClientSDK {
  /**
   * List all Sources
   *
   * @remarks
   * Get a list of Source objects
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListInputResponse> {
    return unwrapAsync(sourcesList(
      this,
      options,
    ));
  }

  /**
   * Create a Source
   *
   * @remarks
   * Create Source
   */
  async create(
    request: models.Input,
    options?: RequestOptions,
  ): Promise<operations.CreateInputResponse> {
    return unwrapAsync(sourcesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Source
   *
   * @remarks
   * Get Source by ID
   */
  async get(
    request: operations.GetInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInputByIdResponse> {
    return unwrapAsync(sourcesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Source
   *
   * @remarks
   * Update Source
   */
  async update(
    request: operations.UpdateInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateInputByIdResponse> {
    return unwrapAsync(sourcesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Source
   *
   * @remarks
   * Delete Source
   */
  async delete(
    request: operations.DeleteInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteInputByIdResponse> {
    return unwrapAsync(sourcesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Add an HEC token and optional metadata to a Splunk HEC Source
   *
   * @remarks
   * Add token and optional metadata to an existing HEC Source
   */
  async createHecToken(
    request: operations.CreateInputHecTokenByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateInputHecTokenByIdResponse> {
    return unwrapAsync(sourcesCreateHecToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Update metadata for an HEC token for a Splunk HEC Source
   *
   * @remarks
   * Update token metadata on existing HEC Source
   */
  async updateHecTokenMetadata(
    request: operations.UpdateInputHecTokenByIdAndTokenRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateInputHecTokenByIdAndTokenResponse> {
    return unwrapAsync(sourcesUpdateHecTokenMetadata(
      this,
      request,
      options,
    ));
  }
}
