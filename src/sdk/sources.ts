/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sourcesCreate } from "../funcs/sourcesCreate.js";
import { sourcesDelete } from "../funcs/sourcesDelete.js";
import { sourcesGet } from "../funcs/sourcesGet.js";
import { sourcesList } from "../funcs/sourcesList.js";
import { sourcesUpdate } from "../funcs/sourcesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { HecTokens } from "./hectokens.js";

export class Sources extends ClientSDK {
  private _hecTokens?: HecTokens;
  get hecTokens(): HecTokens {
    return (this._hecTokens ??= new HecTokens(this._options));
  }

  /**
   * List all Sources
   *
   * @remarks
   * Get a list of all Sources.
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListInputResponse> {
    return unwrapAsync(sourcesList(
      this,
      options,
    ));
  }

  /**
   * Create a Source
   *
   * @remarks
   * Create a new Source.
   */
  async create(
    request: models.Input,
    options?: RequestOptions,
  ): Promise<operations.CreateInputResponse> {
    return unwrapAsync(sourcesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Source
   *
   * @remarks
   * Get the specified Source.
   */
  async get(
    request: operations.GetInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInputByIdResponse> {
    return unwrapAsync(sourcesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Source
   *
   * @remarks
   * Update the specified Source.</br></br>Provide a complete representation of the Source that you want to update in the request body. This endpoint does not support partial updates. Cribl removes any omitted fields when updating the Source.</br></br>Confirm that the configuration in your request body is correct before sending the request. If the configuration is incorrect, the updated Source might not function as expected.
   */
  async update(
    request: operations.UpdateInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateInputByIdResponse> {
    return unwrapAsync(sourcesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Source
   *
   * @remarks
   * Delete the specified Source.
   */
  async delete(
    request: operations.DeleteInputByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteInputByIdResponse> {
    return unwrapAsync(sourcesDelete(
      this,
      request,
      options,
    ));
  }
}
