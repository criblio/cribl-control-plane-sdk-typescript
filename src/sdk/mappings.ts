/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { groupsMappingsActivate } from "../funcs/groupsMappingsActivate.js";
import { groupsMappingsCreate } from "../funcs/groupsMappingsCreate.js";
import { groupsMappingsDelete } from "../funcs/groupsMappingsDelete.js";
import { groupsMappingsGet } from "../funcs/groupsMappingsGet.js";
import { groupsMappingsList } from "../funcs/groupsMappingsList.js";
import { groupsMappingsUpdate } from "../funcs/groupsMappingsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Mappings extends ClientSDK {
  /**
   * Set a Mapping Ruleset as the active configuration for the specified Cribl product
   *
   * @remarks
   * Set a specific Mapping Ruleset as the currently active configuration for the specified Cribl product.
   */
  async activate(
    request: operations.CreateAdminProductsMappingsActivateByProductRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateAdminProductsMappingsActivateByProductResponse> {
    return unwrapAsync(groupsMappingsActivate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new Mapping Ruleset for the specified Cribl product
   *
   * @remarks
   * Create and save a new Mapping Ruleset for the specified Cribl product.
   */
  async create(
    request: operations.CreateAdminProductsMappingsByProductRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateAdminProductsMappingsByProductResponse> {
    return unwrapAsync(groupsMappingsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List all Mapping Rulesets for the specified Cribl product
   *
   * @remarks
   * Retrieve a list of all existing Mapping Rulesets for the specified Cribl product.
   */
  async list(
    request: operations.GetAdminProductsMappingsByProductRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAdminProductsMappingsByProductResponse> {
    return unwrapAsync(groupsMappingsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete the specified Mapping Ruleset from the Worker Group or Edge Fleet
   *
   * @remarks
   * Permanently remove the specified Mapping Ruleset from the Worker Group or Edge Fleet.
   */
  async delete(
    request: operations.DeleteAdminProductsMappingsByProductAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteAdminProductsMappingsByProductAndIdResponse> {
    return unwrapAsync(groupsMappingsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Specific Mapping Ruleset
   *
   * @remarks
   * Get the details for a single Mapping Ruleset, identified by its id, for a Worker Group or Edge Fleet.
   */
  async get(
    request: operations.GetAdminProductsMappingsByProductAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAdminProductsMappingsByProductAndIdResponse> {
    return unwrapAsync(groupsMappingsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing Mapping Ruleset for a Worker Group or Edge Fleet
   *
   * @remarks
   * Modify the configuration of the specified Mapping Ruleset for a Worker Group or Edge Fleet.
   */
  async update(
    request: operations.UpdateAdminProductsMappingsByProductAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateAdminProductsMappingsByProductAndIdResponse> {
    return unwrapAsync(groupsMappingsUpdate(
      this,
      request,
      options,
    ));
  }
}
