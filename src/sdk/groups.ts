/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { groupsCreate } from "../funcs/groupsCreate.js";
import { groupsDelete } from "../funcs/groupsDelete.js";
import { groupsDeploy } from "../funcs/groupsDeploy.js";
import { groupsGet } from "../funcs/groupsGet.js";
import { groupsGetACL } from "../funcs/groupsGetACL.js";
import { groupsGetConfigVersion } from "../funcs/groupsGetConfigVersion.js";
import { groupsGetTeamACL } from "../funcs/groupsGetTeamACL.js";
import { groupsList } from "../funcs/groupsList.js";
import { groupsUpdate } from "../funcs/groupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Groups extends ClientSDK {
  /**
   * Retrieve the configuration version for a Worker Group or Edge Fleet
   *
   * @remarks
   * Get effective bundle version for given Group
   */
  async getConfigVersion(
    request: operations.GetGroupsConfigVersionByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetGroupsConfigVersionByIdResponse> {
    return unwrapAsync(groupsGetConfigVersion(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Worker Group or Edge Fleet for the specified Cribl product
   *
   * @remarks
   * Create a Fleet or Worker Group
   */
  async create(
    request: operations.CreateProductsGroupsByProductRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateProductsGroupsByProductResponse> {
    return unwrapAsync(groupsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List all Worker Groups or Edge Fleets for the specified Cribl product
   *
   * @remarks
   * Get a list of ConfigGroup objects
   */
  async list(
    request: operations.GetProductsGroupsByProductRequest,
    options?: RequestOptions,
  ): Promise<operations.GetProductsGroupsByProductResponse> {
    return unwrapAsync(groupsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Worker Group or Edge Fleet
   *
   * @remarks
   * Delete a Fleet or Worker Group
   */
  async delete(
    request: operations.DeleteGroupsByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteGroupsByIdResponse> {
    return unwrapAsync(groupsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a Worker Group or Edge Fleet
   *
   * @remarks
   * Get a specific ConfigGroup object
   */
  async get(
    request: operations.GetGroupsByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetGroupsByIdResponse> {
    return unwrapAsync(groupsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Worker Group or Edge Fleet
   *
   * @remarks
   * Update a Fleet or Worker Group
   */
  async update(
    request: operations.UpdateGroupsByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateGroupsByIdResponse> {
    return unwrapAsync(groupsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deploy commits to a Worker Group or Edge Fleet
   *
   * @remarks
   * Deploy commits for a Fleet or Worker Group
   */
  async deploy(
    request: operations.UpdateGroupsDeployByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateGroupsDeployByIdResponse> {
    return unwrapAsync(groupsDeploy(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the Access Control List (ACL) for teams with permissions on a Worker Group or Edge Fleet for the specified Cribl product
   *
   * @remarks
   * ACL of team with permissions for resources in this Group
   */
  async getTeamACL(
    request: operations.GetProductsGroupsAclTeamsByProductAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetProductsGroupsAclTeamsByProductAndIdResponse> {
    return unwrapAsync(groupsGetTeamACL(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve the Access Control List (ACL) for a Worker Group or Edge Fleet
   *
   * @remarks
   * ACL of members with permissions for resources in this Group
   */
  async getACL(
    request: operations.GetGroupsAclByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetGroupsAclByIdResponse> {
    return unwrapAsync(groupsGetACL(
      this,
      request,
      options,
    ));
  }
}
