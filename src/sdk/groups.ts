/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { groupsCreate } from "../funcs/groupsCreate.js";
import { groupsDelete } from "../funcs/groupsDelete.js";
import { groupsDeploy } from "../funcs/groupsDeploy.js";
import { groupsGet } from "../funcs/groupsGet.js";
import { groupsList } from "../funcs/groupsList.js";
import { groupsUpdate } from "../funcs/groupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Acl } from "./acl.js";
import { GroupsConfigs } from "./groupsconfigs.js";
import { Mappings } from "./mappings.js";

export class Groups extends ClientSDK {
  private _mappings?: Mappings;
  get mappings(): Mappings {
    return (this._mappings ??= new Mappings(this._options));
  }

  private _configs?: GroupsConfigs;
  get configs(): GroupsConfigs {
    return (this._configs ??= new GroupsConfigs(this._options));
  }

  private _acl?: Acl;
  get acl(): Acl {
    return (this._acl ??= new Acl(this._options));
  }

  /**
   * List all Worker Groups or Edge Fleets for the specified Cribl product
   *
   * @remarks
   * Get a list of all Worker Groups or Edge Fleets for the specified Cribl product.
   */
  async list(
    request: operations.ListConfigGroupByProductRequest,
    options?: RequestOptions,
  ): Promise<operations.ListConfigGroupByProductResponse> {
    return unwrapAsync(groupsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Worker Group or Edge Fleet for the specified Cribl product
   *
   * @remarks
   * Create a new Worker Group or Edge Fleet for the specified Cribl product.
   */
  async create(
    request: operations.CreateConfigGroupByProductRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateConfigGroupByProductResponse> {
    return unwrapAsync(groupsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Worker Group or Edge Fleet
   *
   * @remarks
   * Get the specified Worker Group or Edge Fleet.
   */
  async get(
    request: operations.GetConfigGroupByProductAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetConfigGroupByProductAndIdResponse> {
    return unwrapAsync(groupsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Worker Group or Edge Fleet
   *
   * @remarks
   * Update the specified Worker Group or Edge Fleet.
   */
  async update(
    request: operations.UpdateConfigGroupByProductAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateConfigGroupByProductAndIdResponse> {
    return unwrapAsync(groupsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Worker Group or Edge Fleet
   *
   * @remarks
   * Delete the specified Worker Group or Edge Fleet.
   */
  async delete(
    request: operations.DeleteConfigGroupByProductAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteConfigGroupByProductAndIdResponse> {
    return unwrapAsync(groupsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Deploy commits to a Worker Group or Edge Fleet
   *
   * @remarks
   * Deploy commits to the specified Worker Group or Edge Fleet.
   */
  async deploy(
    request: operations.UpdateConfigGroupDeployByProductAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateConfigGroupDeployByProductAndIdResponse> {
    return unwrapAsync(groupsDeploy(
      this,
      request,
      options,
    ));
  }
}
