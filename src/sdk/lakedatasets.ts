/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lakeDatasetsCreate } from "../funcs/lakeDatasetsCreate.js";
import { lakeDatasetsDelete } from "../funcs/lakeDatasetsDelete.js";
import { lakeDatasetsGet } from "../funcs/lakeDatasetsGet.js";
import { lakeDatasetsList } from "../funcs/lakeDatasetsList.js";
import { lakeDatasetsUpdate } from "../funcs/lakeDatasetsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class LakeDatasets extends ClientSDK {
  /**
   * Create a Lake Dataset
   *
   * @remarks
   * Create a new Lake Dataset in the specified Lake.
   */
  async create(
    request: operations.CreateCriblLakeDatasetByLakeIdRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCriblLakeDatasetByLakeIdResponse> {
    return unwrapAsync(lakeDatasetsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List all Lake Datasets
   *
   * @remarks
   * Get a list of all Lake Datasets in the specified Lake.
   */
  async list(
    request: operations.GetCriblLakeDatasetByLakeIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCriblLakeDatasetByLakeIdResponse> {
    return unwrapAsync(lakeDatasetsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Lake Dataset
   *
   * @remarks
   * Delete the specified Lake Dataset in the specified Lake
   */
  async delete(
    request: operations.DeleteCriblLakeDatasetByLakeIdAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteCriblLakeDatasetByLakeIdAndIdResponse> {
    return unwrapAsync(lakeDatasetsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Lake Dataset
   *
   * @remarks
   * Get the specified Lake Dataset in the specified Lake.
   */
  async get(
    request: operations.GetCriblLakeDatasetByLakeIdAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCriblLakeDatasetByLakeIdAndIdResponse> {
    return unwrapAsync(lakeDatasetsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Lake Dataset
   *
   * @remarks
   * Update the specified Lake Dataset in the specified Lake.
   */
  async update(
    request: operations.UpdateCriblLakeDatasetByLakeIdAndIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateCriblLakeDatasetByLakeIdAndIdResponse> {
    return unwrapAsync(lakeDatasetsUpdate(
      this,
      request,
      options,
    ));
  }
}
