/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { pipelinesCreate } from "../funcs/pipelinesCreate.js";
import { pipelinesDelete } from "../funcs/pipelinesDelete.js";
import { pipelinesGet } from "../funcs/pipelinesGet.js";
import { pipelinesList } from "../funcs/pipelinesList.js";
import { pipelinesUpdate } from "../funcs/pipelinesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Pipelines extends ClientSDK {
  /**
   * List all Pipelines
   *
   * @remarks
   * Get a list of all Pipelines.
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListPipelineResponse> {
    return unwrapAsync(pipelinesList(
      this,
      options,
    ));
  }

  /**
   * Create a Pipeline
   *
   * @remarks
   * Create a new Pipeline.
   */
  async create(
    request: models.Pipeline,
    options?: RequestOptions,
  ): Promise<operations.CreatePipelineResponse> {
    return unwrapAsync(pipelinesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Pipeline
   *
   * @remarks
   * Get the specified Pipeline.
   */
  async get(
    request: operations.GetPipelineByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetPipelineByIdResponse> {
    return unwrapAsync(pipelinesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Pipeline
   *
   * @remarks
   * Update the specified Pipeline.</br></br>Provide a complete representation of the Pipeline that you want to update in the request body. This endpoint does not support partial updates. Cribl removes any omitted fields when updating the Pipeline.</br></br>Confirm that the configuration in your request body is correct before sending the request. If the configuration is incorrect, the updated Pipeline might not function as expected.
   */
  async update(
    request: operations.UpdatePipelineByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdatePipelineByIdResponse> {
    return unwrapAsync(pipelinesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Pipeline
   *
   * @remarks
   * Delete the specified Pipeline.
   */
  async delete(
    request: operations.DeletePipelineByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeletePipelineByIdResponse> {
    return unwrapAsync(pipelinesDelete(
      this,
      request,
      options,
    ));
  }
}
