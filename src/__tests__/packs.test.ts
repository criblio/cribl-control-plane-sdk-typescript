/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { CriblControlPlane } from "../index.js";
import { filesToStream } from "./files.js";
import { createTestHTTPClient } from "./testclient.js";

test("Packs Create Packs", async () => {
  const testHttpClient = createTestHTTPClient("createPacks");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.packs.createPacks({
    id: "<id>",
    source: "<value>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Packs Get Packs", async () => {
  const testHttpClient = createTestHTTPClient("getPacks");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.packs.getPacks();
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Packs Update Packs", async () => {
  const testHttpClient = createTestHTTPClient("updatePacks");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.packs.updatePacks({
    size: 779474,
    requestBody: filesToStream(".speakeasy/testfiles/example.file"),
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Packs Delete Packs By Id", async () => {
  const testHttpClient = createTestHTTPClient("deletePacksById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.packs.deletePacksById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Packs Update Packs By Id", async () => {
  const testHttpClient = createTestHTTPClient("updatePacksById");

  const criblControlPlane = new CriblControlPlane({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      bearerAuth: process.env["CRIBLCONTROLPLANE_BEARER_AUTH"] ?? "value",
    },
  });

  const result = await criblControlPlane.packs.updatePacksById({
    id: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
